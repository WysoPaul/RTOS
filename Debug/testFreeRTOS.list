
testFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a23c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a684  0800a684  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a684  0800a684  0001a684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a68c  0800a68c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a68c  0800a68c  0001a68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a690  0800a690  0001a690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048c4  20000094  0800a728  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004958  0800a728  00024958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295c6  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000057e9  00000000  00000000  0004968a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002078  00000000  00000000  0004ee78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dd0  00000000  00000000  00050ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ba13  00000000  00000000  00052cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e856  00000000  00000000  0007e6d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0983  00000000  00000000  0009cf29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d8ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e14  00000000  00000000  0018d928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a3d4 	.word	0x0800a3d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800a3d4 	.word	0x0800a3d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <uart_read>:
/******************************************
 * UART READ
 *
 ******************************************/

char uart_read() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
//	while(HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF) == HAL_TIMEOUT)
//	{
//		printf("HAL_UART_Receive timeout. This should not cause any issue.\r\n");
//	}

	while(HAL_OK != HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1));
 8000596:	bf00      	nop
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <uart_read+0x24>)
 80005a0:	f005 fd16 	bl	8005fd0 <HAL_UART_Receive_IT>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f6      	bne.n	8000598 <uart_read+0x8>

	return c;
 80005aa:	79fb      	ldrb	r3, [r7, #7]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000464c 	.word	0x2000464c

080005b8 <uart_write>:
/******************************************
 * UART WRITE
 *
 ******************************************/

int uart_write(char * s, uint16_t size) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 80005c4:	887a      	ldrh	r2, [r7, #2]
 80005c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <uart_write+0x24>)
 80005ce:	f005 fc66 	bl	8005e9e <HAL_UART_Transmit>
	return size;
 80005d2:	887b      	ldrh	r3, [r7, #2]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000464c 	.word	0x2000464c

080005e0 <sh_help>:
/******************************************
 * SHELL HELP
 *
 ******************************************/

int sh_help(int argc, char ** argv) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    int i;
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e019      	b.n	8000624 <sh_help+0x44>
        printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80005f0:	4911      	ldr	r1, [pc, #68]	; (8000638 <sh_help+0x58>)
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <sh_help+0x58>)
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	3308      	adds	r3, #8
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4601      	mov	r1, r0
 8000618:	4808      	ldr	r0, [pc, #32]	; (800063c <sh_help+0x5c>)
 800061a:	f009 f9b5 	bl	8009988 <iprintf>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3301      	adds	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <sh_help+0x60>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	429a      	cmp	r2, r3
 800062c:	dbe0      	blt.n	80005f0 <sh_help+0x10>
    }

    return 0;
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20004064 	.word	0x20004064
 800063c:	0800a3ec 	.word	0x0800a3ec
 8000640:	200000b0 	.word	0x200000b0

08000644 <shell_init>:
/******************************************
 * SHELL INIT
 *
 ******************************************/

void shell_init() {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <shell_init+0x38>)
 800064c:	f009 fa10 	bl	8009a70 <puts>

	shell_add('h', sh_help, help);
 8000650:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <shell_init+0x3c>)
 8000652:	490c      	ldr	r1, [pc, #48]	; (8000684 <shell_init+0x40>)
 8000654:	2068      	movs	r0, #104	; 0x68
 8000656:	f000 f817 	bl	8000688 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e005      	b.n	800066c <shell_init+0x28>

		HAL_Delay(200);
 8000660:	20c8      	movs	r0, #200	; 0xc8
 8000662:	f001 fc29 	bl	8001eb8 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b02      	cmp	r3, #2
 8000670:	ddf6      	ble.n	8000660 <shell_init+0x1c>
	}
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	0800a3f4 	.word	0x0800a3f4
 8000680:	20000000 	.word	0x20000000
 8000684:	080005e1 	.word	0x080005e1

08000688 <shell_add>:
/******************************************
 * SHELL ADD
 *
 ******************************************/

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	73fb      	strb	r3, [r7, #15]
    if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <shell_add+0x74>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b3f      	cmp	r3, #63	; 0x3f
 800069c:	dc26      	bgt.n	80006ec <shell_add+0x64>
        shell_func_list[shell_func_list_size].c = c;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <shell_add+0x74>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4917      	ldr	r1, [pc, #92]	; (8000700 <shell_add+0x78>)
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	440b      	add	r3, r1
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	701a      	strb	r2, [r3, #0]
        shell_func_list[shell_func_list_size].func = pfunc;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <shell_add+0x74>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4912      	ldr	r1, [pc, #72]	; (8000700 <shell_add+0x78>)
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	3304      	adds	r3, #4
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	601a      	str	r2, [r3, #0]
        shell_func_list[shell_func_list_size].description = description;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <shell_add+0x74>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <shell_add+0x78>)
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	3308      	adds	r3, #8
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
        shell_func_list_size++;
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <shell_add+0x74>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a05      	ldr	r2, [pc, #20]	; (80006fc <shell_add+0x74>)
 80006e6:	6013      	str	r3, [r2, #0]
        return 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	e001      	b.n	80006f0 <shell_add+0x68>
    }

    return -1;
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200000b0 	.word	0x200000b0
 8000700:	20004064 	.word	0x20004064

08000704 <shell_exec>:
 * SHELL EXE
 *
 ******************************************/

int shell_exec(char c, char * buf)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]

    int argc;
    char * argv[ARGC_MAX];
    char *p;

    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000710:	2300      	movs	r3, #0
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
 8000714:	e040      	b.n	8000798 <shell_exec+0x94>
        if (shell_func_list[i].c == c) {
 8000716:	4928      	ldr	r1, [pc, #160]	; (80007b8 <shell_exec+0xb4>)
 8000718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800071a:	4613      	mov	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	429a      	cmp	r2, r3
 800072a:	d132      	bne.n	8000792 <shell_exec+0x8e>
            argc = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
            argv[0] = buf;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	60fb      	str	r3, [r7, #12]

            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000738:	e014      	b.n	8000764 <shell_exec+0x60>
                if(*p == ' ') {
 800073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b20      	cmp	r3, #32
 8000740:	d10d      	bne.n	800075e <shell_exec+0x5a>
                    *p = '\0';
 8000742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
                    argv[argc++] = p+1;
 8000748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	633a      	str	r2, [r7, #48]	; 0x30
 800074e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000750:	3201      	adds	r2, #1
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000758:	440b      	add	r3, r1
 800075a:	f843 2c2c 	str.w	r2, [r3, #-44]
            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	3301      	adds	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <shell_exec+0x6e>
 800076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076e:	2b07      	cmp	r3, #7
 8000770:	dde3      	ble.n	800073a <shell_exec+0x36>
                }
            }

            return shell_func_list[i].func(argc, argv);
 8000772:	4911      	ldr	r1, [pc, #68]	; (80007b8 <shell_exec+0xb4>)
 8000774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000776:	4613      	mov	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	440b      	add	r3, r1
 8000780:	3304      	adds	r3, #4
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f107 020c 	add.w	r2, r7, #12
 8000788:	4611      	mov	r1, r2
 800078a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800078c:	4798      	blx	r3
 800078e:	4603      	mov	r3, r0
 8000790:	e00e      	b.n	80007b0 <shell_exec+0xac>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000794:	3301      	adds	r3, #1
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <shell_exec+0xb8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbb9      	blt.n	8000716 <shell_exec+0x12>
        }
    }
    printf("%c: no such command\r\n", c);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <shell_exec+0xbc>)
 80007a8:	f009 f8ee 	bl	8009988 <iprintf>
    return -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20004064 	.word	0x20004064
 80007bc:	200000b0 	.word	0x200000b0
 80007c0:	0800a41c 	.word	0x0800a41c

080007c4 <shell_run>:

/******************************************
 * SHELL RUN
 *
 ******************************************/
int shell_run(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
	int reading = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]

	printf("Debut Shell_Run\r\n");
 80007d2:	482e      	ldr	r0, [pc, #184]	; (800088c <shell_run+0xc8>)
 80007d4:	f009 f94c 	bl	8009a70 <puts>

	while (1)
	{
		  uart_write(prompt, 2);
 80007d8:	2102      	movs	r1, #2
 80007da:	482d      	ldr	r0, [pc, #180]	; (8000890 <shell_run+0xcc>)
 80007dc:	f7ff feec 	bl	80005b8 <uart_write>
		  reading = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]

		  while(reading){
 80007e4:	e047      	b.n	8000876 <shell_run+0xb2>
			  printf("Je demande le semaphore\r\n");
 80007e6:	482b      	ldr	r0, [pc, #172]	; (8000894 <shell_run+0xd0>)
 80007e8:	f009 f942 	bl	8009a70 <puts>
			  HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&toto), 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	492a      	ldr	r1, [pc, #168]	; (8000898 <shell_run+0xd4>)
 80007f0:	482a      	ldr	r0, [pc, #168]	; (800089c <shell_run+0xd8>)
 80007f2:	f005 fbed 	bl	8005fd0 <HAL_UART_Receive_IT>
			  xSemaphoreTake(MonSemUART, portMAX_DELAY);
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <shell_run+0xdc>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f04f 31ff 	mov.w	r1, #4294967295
 80007fe:	4618      	mov	r0, r3
 8000800:	f007 f958 	bl	8007ab4 <xQueueSemaphoreTake>
			  printf("Je lit l'UART\r\n");
 8000804:	4827      	ldr	r0, [pc, #156]	; (80008a4 <shell_run+0xe0>)
 8000806:	f009 f933 	bl	8009a70 <puts>
			  char c = uart_read();
 800080a:	f7ff fec1 	bl	8000590 <uart_read>
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]

			  switch (c) {
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b08      	cmp	r3, #8
 8000816:	d013      	beq.n	8000840 <shell_run+0x7c>
 8000818:	2b0d      	cmp	r3, #13
 800081a:	d11c      	bne.n	8000856 <shell_run+0x92>
				  //process RETURN key
				  case '\r':
					  //case '\n':
					  printf("\r\n");    //finish line
 800081c:	4822      	ldr	r0, [pc, #136]	; (80008a8 <shell_run+0xe4>)
 800081e:	f009 f927 	bl	8009a70 <puts>
					  buf[pos++] = 0;     //to use cprintf...
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	60ba      	str	r2, [r7, #8]
 8000828:	4a20      	ldr	r2, [pc, #128]	; (80008ac <shell_run+0xe8>)
 800082a:	2100      	movs	r1, #0
 800082c:	54d1      	strb	r1, [r2, r3]
					  printf(":%s\r\n", buf);
 800082e:	491f      	ldr	r1, [pc, #124]	; (80008ac <shell_run+0xe8>)
 8000830:	481f      	ldr	r0, [pc, #124]	; (80008b0 <shell_run+0xec>)
 8000832:	f009 f8a9 	bl	8009988 <iprintf>
					  reading = 0;        //exit read loop
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
					  pos = 0;            //reset buffer
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
					  break;
 800083e:	e01a      	b.n	8000876 <shell_run+0xb2>
					  //backspace
				  case '\b':
					  if (pos > 0) {      //is there a char to delete?
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b00      	cmp	r3, #0
 8000844:	dd16      	ble.n	8000874 <shell_run+0xb0>
						  pos--;          //remove it in buffer
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	3b01      	subs	r3, #1
 800084a:	60bb      	str	r3, [r7, #8]

						  uart_write(backspace, 3);
 800084c:	2103      	movs	r1, #3
 800084e:	4819      	ldr	r0, [pc, #100]	; (80008b4 <shell_run+0xf0>)
 8000850:	f7ff feb2 	bl	80005b8 <uart_write>
					  }
					  break;
 8000854:	e00e      	b.n	8000874 <shell_run+0xb0>
					  //other characters
				  default:
					  //only store characters if buffer has space
					  if (pos < sizeof(buf)) {
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2b27      	cmp	r3, #39	; 0x27
 800085a:	d80c      	bhi.n	8000876 <shell_run+0xb2>
						  uart_write(&c, 1);
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fea9 	bl	80005b8 <uart_write>
						  buf[pos++] = c; //store
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	60ba      	str	r2, [r7, #8]
 800086c:	79f9      	ldrb	r1, [r7, #7]
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <shell_run+0xe8>)
 8000870:	54d1      	strb	r1, [r2, r3]
 8000872:	e000      	b.n	8000876 <shell_run+0xb2>
					  break;
 8000874:	bf00      	nop
		  while(reading){
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1b4      	bne.n	80007e6 <shell_run+0x22>
					  }
			  }
		  }
		  shell_exec(buf[0], buf);
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <shell_run+0xe8>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	490a      	ldr	r1, [pc, #40]	; (80008ac <shell_run+0xe8>)
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff3e 	bl	8000704 <shell_exec>
		  uart_write(prompt, 2);
 8000888:	e7a6      	b.n	80007d8 <shell_run+0x14>
 800088a:	bf00      	nop
 800088c:	0800a434 	.word	0x0800a434
 8000890:	2000001c 	.word	0x2000001c
 8000894:	0800a448 	.word	0x0800a448
 8000898:	2000438c 	.word	0x2000438c
 800089c:	2000464c 	.word	0x2000464c
 80008a0:	20004514 	.word	0x20004514
 80008a4:	0800a464 	.word	0x0800a464
 80008a8:	0800a474 	.word	0x0800a474
 80008ac:	20004364 	.word	0x20004364
 80008b0:	0800a478 	.word	0x0800a478
 80008b4:	20000018 	.word	0x20000018

080008b8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_CRC_Init+0x20>)
 80008be:	4a07      	ldr	r2, [pc, #28]	; (80008dc <MX_CRC_Init+0x24>)
 80008c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_CRC_Init+0x20>)
 80008c4:	f001 fbfc 	bl	80020c0 <HAL_CRC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008ce:	f000 fe73 	bl	80015b8 <Error_Handler>
  }

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20004398 	.word	0x20004398
 80008dc:	40023000 	.word	0x40023000

080008e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <HAL_CRC_MspInit+0x3c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d10d      	bne.n	800090e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_CRC_MspInit+0x40>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <HAL_CRC_MspInit+0x40>)
 80008fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <HAL_CRC_MspInit+0x40>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023000 	.word	0x40023000
 8000920:	40023800 	.word	0x40023800

08000924 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <MX_DMA2D_Init+0x60>)
 800092c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000948:	2200      	movs	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000954:	2200      	movs	r2, #0
 8000956:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800095a:	f001 fbef 	bl	800213c <HAL_DMA2D_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000964:	f000 fe28 	bl	80015b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000968:	2101      	movs	r1, #1
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800096c:	f001 fd40 	bl	80023f0 <HAL_DMA2D_ConfigLayer>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000976:	f000 fe1f 	bl	80015b8 <Error_Handler>
  }

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200043a0 	.word	0x200043a0
 8000984:	4002b000 	.word	0x4002b000

08000988 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_DMA2D_MspInit+0x48>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d115      	bne.n	80009c6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_DMA2D_MspInit+0x4c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <HAL_DMA2D_MspInit+0x4c>)
 80009a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_DMA2D_MspInit+0x4c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	205a      	movs	r0, #90	; 0x5a
 80009bc:	f001 fb56 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80009c0:	205a      	movs	r0, #90	; 0x5a
 80009c2:	f001 fb6f 	bl	80020a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	4002b000 	.word	0x4002b000
 80009d4:	40023800 	.word	0x40023800

080009d8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_FMC_Init+0x98>)
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <MX_FMC_Init+0x9c>)
 80009f4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_FMC_Init+0x98>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_FMC_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a04:	2204      	movs	r2, #4
 8000a06:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a16:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a1a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a28:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a40:	2304      	movs	r3, #4
 8000a42:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a44:	2307      	movs	r3, #7
 8000a46:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_FMC_Init+0x98>)
 8000a5a:	f004 fd3b 	bl	80054d4 <HAL_SDRAM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a64:	f000 fda8 	bl	80015b8 <Error_Handler>
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200043e0 	.word	0x200043e0
 8000a74:	a0000140 	.word	0xa0000140

08000a78 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a8c:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <HAL_FMC_MspInit+0x104>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d16f      	bne.n	8000b74 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000a94:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <HAL_FMC_MspInit+0x104>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <HAL_FMC_MspInit+0x108>)
 8000aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aa2:	4a37      	ldr	r2, [pc, #220]	; (8000b80 <HAL_FMC_MspInit+0x108>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6393      	str	r3, [r2, #56]	; 0x38
 8000aaa:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <HAL_FMC_MspInit+0x108>)
 8000aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8000ab6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000aba:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	482c      	ldr	r0, [pc, #176]	; (8000b84 <HAL_FMC_MspInit+0x10c>)
 8000ad2:	f001 fd1f 	bl	8002514 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	4826      	ldr	r0, [pc, #152]	; (8000b88 <HAL_FMC_MspInit+0x110>)
 8000af0:	f001 fd10 	bl	8002514 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000af4:	f248 1333 	movw	r3, #33075	; 0x8133
 8000af8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b06:	230c      	movs	r3, #12
 8000b08:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481f      	ldr	r0, [pc, #124]	; (8000b8c <HAL_FMC_MspInit+0x114>)
 8000b10:	f001 fd00 	bl	8002514 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000b14:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b18:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b26:	230c      	movs	r3, #12
 8000b28:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <HAL_FMC_MspInit+0x118>)
 8000b30:	f001 fcf0 	bl	8002514 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8000b34:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b38:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4811      	ldr	r0, [pc, #68]	; (8000b94 <HAL_FMC_MspInit+0x11c>)
 8000b50:	f001 fce0 	bl	8002514 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b54:	2360      	movs	r3, #96	; 0x60
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b64:	230c      	movs	r3, #12
 8000b66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480a      	ldr	r0, [pc, #40]	; (8000b98 <HAL_FMC_MspInit+0x120>)
 8000b6e:	f001 fcd1 	bl	8002514 <HAL_GPIO_Init>
 8000b72:	e000      	b.n	8000b76 <HAL_FMC_MspInit+0xfe>
    return;
 8000b74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000b4 	.word	0x200000b4
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40021400 	.word	0x40021400
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40021800 	.word	0x40021800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40020c00 	.word	0x40020c00
 8000b98:	40020400 	.word	0x40020400

08000b9c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000ba4:	f7ff ff68 	bl	8000a78 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <vApplicationGetIdleTaskMemory+0x2c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <vApplicationGetIdleTaskMemory+0x30>)
 8000bc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200000b8 	.word	0x200000b8
 8000be0:	2000010c 	.word	0x2000010c

08000be4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_FREERTOS_Init+0x30>)
 8000bec:	1d3c      	adds	r4, r7, #4
 8000bee:	461d      	mov	r5, r3
 8000bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f006 fcf3 	bl	80075ec <osThreadCreate>
 8000c06:	4602      	mov	r2, r0
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <MX_FREERTOS_Init+0x34>)
 8000c0a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bdb0      	pop	{r4, r5, r7, pc}
 8000c14:	0800a48c 	.word	0x0800a48c
 8000c18:	20004414 	.word	0x20004414

08000c1c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f006 fd2d 	bl	8007684 <osDelay>
 8000c2a:	e7fb      	b.n	8000c24 <StartDefaultTask+0x8>

08000c2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
 8000c46:	4b84      	ldr	r3, [pc, #528]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a83      	ldr	r2, [pc, #524]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b81      	ldr	r3, [pc, #516]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	4b7d      	ldr	r3, [pc, #500]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a7c      	ldr	r2, [pc, #496]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c68:	f043 0320 	orr.w	r3, r3, #32
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b7a      	ldr	r3, [pc, #488]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0320 	and.w	r3, r3, #32
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	4b76      	ldr	r3, [pc, #472]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a75      	ldr	r2, [pc, #468]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b73      	ldr	r3, [pc, #460]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	4b6f      	ldr	r3, [pc, #444]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a6e      	ldr	r2, [pc, #440]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b6c      	ldr	r3, [pc, #432]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b68      	ldr	r3, [pc, #416]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a67      	ldr	r2, [pc, #412]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b65      	ldr	r3, [pc, #404]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b61      	ldr	r3, [pc, #388]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a60      	ldr	r2, [pc, #384]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b5e      	ldr	r3, [pc, #376]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b5a      	ldr	r3, [pc, #360]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a59      	ldr	r2, [pc, #356]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000cf4:	f043 0310 	orr.w	r3, r3, #16
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b57      	ldr	r3, [pc, #348]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b53      	ldr	r3, [pc, #332]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a52      	ldr	r2, [pc, #328]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <MX_GPIO_Init+0x22c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2116      	movs	r1, #22
 8000d26:	484d      	ldr	r0, [pc, #308]	; (8000e5c <MX_GPIO_Init+0x230>)
 8000d28:	f001 fd9e 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	484b      	ldr	r0, [pc, #300]	; (8000e60 <MX_GPIO_Init+0x234>)
 8000d32:	f001 fd99 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d3c:	4849      	ldr	r0, [pc, #292]	; (8000e64 <MX_GPIO_Init+0x238>)
 8000d3e:	f001 fd93 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d48:	4847      	ldr	r0, [pc, #284]	; (8000e68 <MX_GPIO_Init+0x23c>)
 8000d4a:	f001 fd8d 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d4e:	2316      	movs	r3, #22
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	483d      	ldr	r0, [pc, #244]	; (8000e5c <MX_GPIO_Init+0x230>)
 8000d66:	f001 fbd5 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <MX_GPIO_Init+0x240>)
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4838      	ldr	r0, [pc, #224]	; (8000e60 <MX_GPIO_Init+0x234>)
 8000d7e:	f001 fbc9 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d82:	f248 0306 	movw	r3, #32774	; 0x8006
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d88:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <MX_GPIO_Init+0x244>)
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4832      	ldr	r0, [pc, #200]	; (8000e60 <MX_GPIO_Init+0x234>)
 8000d98:	f001 fbbc 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	482b      	ldr	r0, [pc, #172]	; (8000e60 <MX_GPIO_Init+0x234>)
 8000db4:	f001 fbae 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000db8:	2320      	movs	r3, #32
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <MX_GPIO_Init+0x244>)
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4824      	ldr	r0, [pc, #144]	; (8000e5c <MX_GPIO_Init+0x230>)
 8000dcc:	f001 fba2 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4824      	ldr	r0, [pc, #144]	; (8000e74 <MX_GPIO_Init+0x248>)
 8000de4:	f001 fb96 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4819      	ldr	r0, [pc, #100]	; (8000e64 <MX_GPIO_Init+0x238>)
 8000dfe:	f001 fb89 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e02:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4812      	ldr	r0, [pc, #72]	; (8000e64 <MX_GPIO_Init+0x238>)
 8000e1c:	f001 fb7a 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e20:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <MX_GPIO_Init+0x23c>)
 8000e3a:	f001 fb6b 	bl	8002514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2105      	movs	r1, #5
 8000e42:	2006      	movs	r0, #6
 8000e44:	f001 f912 	bl	800206c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e48:	2006      	movs	r0, #6
 8000e4a:	f001 f92b 	bl	80020a4 <HAL_NVIC_EnableIRQ>

}
 8000e4e:	bf00      	nop
 8000e50:	3738      	adds	r7, #56	; 0x38
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	10110000 	.word	0x10110000
 8000e70:	10120000 	.word	0x10120000
 8000e74:	40020400 	.word	0x40020400

08000e78 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_I2C3_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_I2C3_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_I2C3_Init+0x74>)
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <MX_I2C3_Init+0x7c>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_I2C3_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_I2C3_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_I2C3_Init+0x74>)
 8000e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_I2C3_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C3_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_I2C3_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C3_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_I2C3_Init+0x74>)
 8000eb6:	f002 ff9f 	bl	8003df8 <HAL_I2C_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ec0:	f000 fb7a 	bl	80015b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <MX_I2C3_Init+0x74>)
 8000ec8:	f003 f8ce 	bl	8004068 <HAL_I2CEx_ConfigAnalogFilter>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000ed2:	f000 fb71 	bl	80015b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_I2C3_Init+0x74>)
 8000eda:	f003 f901 	bl	80040e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000ee4:	f000 fb68 	bl	80015b8 <Error_Handler>
  }

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20004418 	.word	0x20004418
 8000ef0:	40005c00 	.word	0x40005c00
 8000ef4:	000186a0 	.word	0x000186a0

08000ef8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <HAL_I2C_MspInit+0xc4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d14b      	bne.n	8000fb2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <HAL_I2C_MspInit+0xcc>)
 8000f70:	f001 fad0 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	2312      	movs	r3, #18
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f86:	2304      	movs	r3, #4
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <HAL_I2C_MspInit+0xd0>)
 8000f92:	f001 fabf 	bl	8002514 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40005c00 	.word	0x40005c00
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	; 0x38
 8000fd0:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2234      	movs	r2, #52	; 0x34
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f008 fc25 	bl	8009828 <memset>

  hltdc.Instance = LTDC;
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8000fe0:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <MX_LTDC_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fe4:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ff0:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ff6:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8000ffe:	2209      	movs	r2, #9
 8001000:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001002:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8001004:	2201      	movs	r2, #1
 8001006:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <MX_LTDC_Init+0xf8>)
 800100a:	221d      	movs	r2, #29
 800100c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8001016:	f240 120d 	movw	r2, #269	; 0x10d
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <MX_LTDC_Init+0xf8>)
 800101e:	f240 1243 	movw	r2, #323	; 0x143
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8001026:	f240 1217 	movw	r2, #279	; 0x117
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <MX_LTDC_Init+0xf8>)
 800102e:	f240 1247 	movw	r2, #327	; 0x147
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_LTDC_Init+0xf8>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_LTDC_Init+0xf8>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800104c:	481d      	ldr	r0, [pc, #116]	; (80010c4 <MX_LTDC_Init+0xf8>)
 800104e:	f003 f887 	bl	8004160 <HAL_LTDC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001058:	f000 faae 	bl	80015b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001060:	23f0      	movs	r3, #240	; 0xf0
 8001062:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001068:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800106c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800106e:	2302      	movs	r3, #2
 8001070:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800107a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800107e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001080:	2307      	movs	r3, #7
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001084:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800108a:	23f0      	movs	r3, #240	; 0xf0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800108e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_LTDC_Init+0xf8>)
 80010ae:	f003 f9e9 	bl	8004484 <HAL_LTDC_ConfigLayer>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80010b8:	f000 fa7e 	bl	80015b8 <Error_Handler>
  }

}
 80010bc:	bf00      	nop
 80010be:	3738      	adds	r7, #56	; 0x38
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000446c 	.word	0x2000446c
 80010c8:	40016800 	.word	0x40016800

080010cc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08e      	sub	sp, #56	; 0x38
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a7b      	ldr	r2, [pc, #492]	; (80012d8 <HAL_LTDC_MspInit+0x20c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	f040 80f0 	bne.w	80012d0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
 80010f4:	4b79      	ldr	r3, [pc, #484]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	4a78      	ldr	r2, [pc, #480]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 80010fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001100:	4b76      	ldr	r3, [pc, #472]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001108:	623b      	str	r3, [r7, #32]
 800110a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	4b72      	ldr	r3, [pc, #456]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a71      	ldr	r2, [pc, #452]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 0320 	and.w	r3, r3, #32
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	4b6b      	ldr	r3, [pc, #428]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a6a      	ldr	r2, [pc, #424]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b68      	ldr	r3, [pc, #416]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	4b64      	ldr	r3, [pc, #400]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a63      	ldr	r2, [pc, #396]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b61      	ldr	r3, [pc, #388]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4a5c      	ldr	r2, [pc, #368]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 800116a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116e:	6313      	str	r3, [r2, #48]	; 0x30
 8001170:	4b5a      	ldr	r3, [pc, #360]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b56      	ldr	r3, [pc, #344]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a55      	ldr	r2, [pc, #340]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a4e      	ldr	r2, [pc, #312]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <HAL_LTDC_MspInit+0x210>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c6:	230e      	movs	r3, #14
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	4843      	ldr	r0, [pc, #268]	; (80012e0 <HAL_LTDC_MspInit+0x214>)
 80011d2:	f001 f99f 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 80011d6:	f641 0358 	movw	r3, #6232	; 0x1858
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e8:	230e      	movs	r3, #14
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	483c      	ldr	r0, [pc, #240]	; (80012e4 <HAL_LTDC_MspInit+0x218>)
 80011f4:	f001 f98e 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011f8:	2303      	movs	r3, #3
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001208:	2309      	movs	r3, #9
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4835      	ldr	r0, [pc, #212]	; (80012e8 <HAL_LTDC_MspInit+0x21c>)
 8001214:	f001 f97e 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001218:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800122a:	230e      	movs	r3, #14
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	482c      	ldr	r0, [pc, #176]	; (80012e8 <HAL_LTDC_MspInit+0x21c>)
 8001236:	f001 f96d 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800123a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800124c:	230e      	movs	r3, #14
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	4825      	ldr	r0, [pc, #148]	; (80012ec <HAL_LTDC_MspInit+0x220>)
 8001258:	f001 f95c 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800125c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800126e:	230e      	movs	r3, #14
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	4619      	mov	r1, r3
 8001278:	481d      	ldr	r0, [pc, #116]	; (80012f0 <HAL_LTDC_MspInit+0x224>)
 800127a:	f001 f94b 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800127e:	2348      	movs	r3, #72	; 0x48
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800128e:	230e      	movs	r3, #14
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4816      	ldr	r0, [pc, #88]	; (80012f4 <HAL_LTDC_MspInit+0x228>)
 800129a:	f001 f93b 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800129e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012b0:	2309      	movs	r3, #9
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	480c      	ldr	r0, [pc, #48]	; (80012ec <HAL_LTDC_MspInit+0x220>)
 80012bc:	f001 f92a 	bl	8002514 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2105      	movs	r1, #5
 80012c4:	2058      	movs	r0, #88	; 0x58
 80012c6:	f000 fed1 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012ca:	2058      	movs	r0, #88	; 0x58
 80012cc:	f000 feea 	bl	80020a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80012d0:	bf00      	nop
 80012d2:	3738      	adds	r7, #56	; 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40016800 	.word	0x40016800
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00

080012f8 <__io_putchar>:



//Redéfinition de la fonction printf ... qui utilise io_putchar()
int __io_putchar(int ch)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001300:	1d39      	adds	r1, r7, #4
 8001302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001306:	2201      	movs	r2, #1
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <__io_putchar+0x20>)
 800130a:	f004 fdc8 	bl	8005e9e <HAL_UART_Transmit>
	return ch;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000464c 	.word	0x2000464c

0800131c <FctBidon>:



//Fonction qui simule une activité...
void FctBidon(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	int i=0;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
	printf("T1: BONJOUR\r\n");
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <FctBidon+0x2c>)
 8001328:	f008 fba2 	bl	8009a70 <puts>
	while (1)
	{
		printf(". ");
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <FctBidon+0x30>)
 800132e:	f008 fb2b 	bl	8009988 <iprintf>
		fflush(stdout);
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <FctBidon+0x34>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4618      	mov	r0, r3
 800133a:	f008 f975 	bl	8009628 <fflush>
		vTaskDelay(500);
 800133e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001342:	f006 fecf 	bl	80080e4 <vTaskDelay>
		printf(". ");
 8001346:	e7f1      	b.n	800132c <FctBidon+0x10>
 8001348:	0800a4a8 	.word	0x0800a4a8
 800134c:	0800a4b8 	.word	0x0800a4b8
 8001350:	20000030 	.word	0x20000030

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
uint8_t bidon = 0x58;
 800135a:	2358      	movs	r3, #88	; 0x58
 800135c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
uint8_t message[] = {"On va commencer\r\n"};
 8001360:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <main+0x100>)
 8001362:	1d3c      	adds	r4, r7, #4
 8001364:	461d      	mov	r5, r3
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	682b      	ldr	r3, [r5, #0]
 800136c:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136e:	f000 fd61 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001372:	f000 f88d 	bl	8001490 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001376:	f7ff fc59 	bl	8000c2c <MX_GPIO_Init>
  MX_CRC_Init();
 800137a:	f7ff fa9d 	bl	80008b8 <MX_CRC_Init>
  MX_DMA2D_Init();
 800137e:	f7ff fad1 	bl	8000924 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001382:	f7ff fb29 	bl	80009d8 <MX_FMC_Init>
  MX_I2C3_Init();
 8001386:	f7ff fd77 	bl	8000e78 <MX_I2C3_Init>
  MX_LTDC_Init();
 800138a:	f7ff fe1f 	bl	8000fcc <MX_LTDC_Init>
  MX_SPI5_Init();
 800138e:	f000 f91b 	bl	80015c8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001392:	f000 fb47 	bl	8001a24 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001396:	f000 fc1f 	bl	8001bd8 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 800139a:	f000 fc97 	bl	8001ccc <MX_USB_OTG_HS_HCD_Init>
  MX_TIM2_Init();
 800139e:	f000 fb91 	bl	8001ac4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Transmit(&huart1, message, sizeof(message), 0xff);
  printf("T0: Tache INIT commence\r\n");
 80013a2:	482d      	ldr	r0, [pc, #180]	; (8001458 <main+0x104>)
 80013a4:	f008 fb64 	bl	8009a70 <puts>


  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
  int p1=3;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
  int p2=5;
 80013b0:	2305      	movs	r3, #5
 80013b2:	61fb      	str	r3, [r7, #28]

  //Création d'un Meesage/Qeue
  //BaL1 = xQueueCreate( 5, sizeof( QMessage ) );

  //Création du Semaphore
  printf("T0: Creation du semaphore (vide)\r\n");
 80013b4:	4829      	ldr	r0, [pc, #164]	; (800145c <main+0x108>)
 80013b6:	f008 fb5b 	bl	8009a70 <puts>
  //MonSem=semBCreate(SEM_Q_FIFO,SEM_EMPTY);		//Façon VxWorks
  MonSem = xSemaphoreCreateBinary();				//Façon FreeRTOS
 80013ba:	2203      	movs	r2, #3
 80013bc:	2100      	movs	r1, #0
 80013be:	2001      	movs	r0, #1
 80013c0:	f006 fa90 	bl	80078e4 <xQueueGenericCreate>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <main+0x10c>)
 80013c8:	601a      	str	r2, [r3, #0]
  MonSemUART = xSemaphoreCreateBinary();				//Façon FreeRTOS
 80013ca:	2203      	movs	r2, #3
 80013cc:	2100      	movs	r1, #0
 80013ce:	2001      	movs	r0, #1
 80013d0:	f006 fa88 	bl	80078e4 <xQueueGenericCreate>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <main+0x110>)
 80013d8:	601a      	str	r2, [r3, #0]
  shell_init();
 80013da:	f7ff f933 	bl	8000644 <shell_init>


  /* Create the task, storing the handle. */

   printf("T0: Creation tache 1\r\n");
 80013de:	4822      	ldr	r0, [pc, #136]	; (8001468 <main+0x114>)
 80013e0:	f008 fb46 	bl	8009a70 <puts>
  xReturned = xTaskCreate(
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	463a      	mov	r2, r7
 80013e8:	9201      	str	r2, [sp, #4]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f2:	491e      	ldr	r1, [pc, #120]	; (800146c <main+0x118>)
 80013f4:	481e      	ldr	r0, [pc, #120]	; (8001470 <main+0x11c>)
 80013f6:	f006 fd3f 	bl	8007e78 <xTaskCreate>
 80013fa:	61b8      	str	r0, [r7, #24]
				  "FctBidon",
				  1000,      		/* Stack size in words, not bytes. */
				  NULL,    			/* Parameter passed into the task. */
				  p1,				/* Priority at which the task is created. */
				  &xHandle );      /* Used to pass out the created task's handle. */
  if( xReturned == pdPASS )
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d103      	bne.n	800140a <main+0xb6>
  printf("T0: Tache ''Bidon'' cree avec priorite %d\r\n", p1);
 8001402:	6a39      	ldr	r1, [r7, #32]
 8001404:	481b      	ldr	r0, [pc, #108]	; (8001474 <main+0x120>)
 8001406:	f008 fabf 	bl	8009988 <iprintf>


  printf("T0: Creation tache 2\r\n");
 800140a:	481b      	ldr	r0, [pc, #108]	; (8001478 <main+0x124>)
 800140c:	f008 fb30 	bl	8009a70 <puts>
  xReturned = xTaskCreate(
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	463a      	mov	r2, r7
 8001414:	9201      	str	r2, [sp, #4]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2300      	movs	r3, #0
 800141a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800141e:	4917      	ldr	r1, [pc, #92]	; (800147c <main+0x128>)
 8001420:	4817      	ldr	r0, [pc, #92]	; (8001480 <main+0x12c>)
 8001422:	f006 fd29 	bl	8007e78 <xTaskCreate>
 8001426:	61b8      	str	r0, [r7, #24]
				  "Shell_RUN",
		  	  	  1000,      		/* Stack size in words, not bytes. */
				  NULL,    			/* Parameter passed into the task. */
				  p2,				/* Priority at which the task is created. */
				  &xHandle );      /* Used to pass out the created task's handle. */
  if( xReturned == pdPASS )
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d103      	bne.n	8001436 <main+0xe2>
	  printf("T0: Tache ''Shell RUN'' cree avec priorite %d\r\n", p2);
 800142e:	69f9      	ldr	r1, [r7, #28]
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <main+0x130>)
 8001432:	f008 faa9 	bl	8009988 <iprintf>

  printf("T0: Fin fct main x_x\r\n\n");
 8001436:	4814      	ldr	r0, [pc, #80]	; (8001488 <main+0x134>)
 8001438:	f008 fb1a 	bl	8009a70 <puts>

  //Initier le timer TIM2
  HAL_TIM_Base_Start_IT (&htim2);
 800143c:	4813      	ldr	r0, [pc, #76]	; (800148c <main+0x138>)
 800143e:	f004 f90c 	bl	800565a <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001442:	f7ff fbcf 	bl	8000be4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001446:	f006 f8ca 	bl	80075de <osKernelStart>
 800144a:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  //..
  /* USER CODE END 3 */
}
 800144c:	4618      	mov	r0, r3
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bdb0      	pop	{r4, r5, r7, pc}
 8001454:	0800a5b8 	.word	0x0800a5b8
 8001458:	0800a4bc 	.word	0x0800a4bc
 800145c:	0800a4d8 	.word	0x0800a4d8
 8001460:	20004518 	.word	0x20004518
 8001464:	20004514 	.word	0x20004514
 8001468:	0800a4fc 	.word	0x0800a4fc
 800146c:	0800a514 	.word	0x0800a514
 8001470:	0800131d 	.word	0x0800131d
 8001474:	0800a520 	.word	0x0800a520
 8001478:	0800a54c 	.word	0x0800a54c
 800147c:	0800a564 	.word	0x0800a564
 8001480:	080007c5 	.word	0x080007c5
 8001484:	0800a570 	.word	0x0800a570
 8001488:	0800a5a0 	.word	0x0800a5a0
 800148c:	2000460c 	.word	0x2000460c

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a0      	sub	sp, #128	; 0x80
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149a:	2230      	movs	r2, #48	; 0x30
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 f9c2 	bl	8009828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2230      	movs	r2, #48	; 0x30
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f008 f9b3 	bl	8009828 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <SystemClock_Config+0xfc>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a30      	ldr	r2, [pc, #192]	; (800158c <SystemClock_Config+0xfc>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <SystemClock_Config+0xfc>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <SystemClock_Config+0x100>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <SystemClock_Config+0x100>)
 80014e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <SystemClock_Config+0x100>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001508:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800150e:	2304      	movs	r3, #4
 8001510:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001512:	23a8      	movs	r3, #168	; 0xa8
 8001514:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001516:	2302      	movs	r3, #2
 8001518:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800151a:	2307      	movs	r3, #7
 800151c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001522:	4618      	mov	r0, r3
 8001524:	f003 f984 	bl	8004830 <HAL_RCC_OscConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800152e:	f000 f843 	bl	80015b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2302      	movs	r3, #2
 8001538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800153e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800154e:	2105      	movs	r1, #5
 8001550:	4618      	mov	r0, r3
 8001552:	f003 fbdd 	bl	8004d10 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800155c:	f000 f82c 	bl	80015b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001560:	2308      	movs	r3, #8
 8001562:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001564:	2332      	movs	r3, #50	; 0x32
 8001566:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001568:	2302      	movs	r3, #2
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fdef 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001580:	f000 f81a 	bl	80015b8 <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3780      	adds	r7, #128	; 0x80
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a6:	f000 fc67 	bl	8001e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40001000 	.word	0x40001000

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_SPI5_Init+0x64>)
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <MX_SPI5_Init+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_SPI5_Init+0x64>)
 80015d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_SPI5_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_SPI5_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_SPI5_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_SPI5_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_SPI5_Init+0x64>)
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_SPI5_Init+0x64>)
 80015fc:	2218      	movs	r2, #24
 80015fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <MX_SPI5_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_SPI5_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <MX_SPI5_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_SPI5_Init+0x64>)
 8001614:	220a      	movs	r2, #10
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_SPI5_Init+0x64>)
 800161a:	f003 ff8f 	bl	800553c <HAL_SPI_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001624:	f7ff ffc8 	bl	80015b8 <Error_Handler>
  }

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20004534 	.word	0x20004534
 8001630:	40015000 	.word	0x40015000

08001634 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_SPI_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12c      	bne.n	80016b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_SPI_MspInit+0x88>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_SPI_MspInit+0x88>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800168e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016a0:	2305      	movs	r3, #5
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_SPI_MspInit+0x8c>)
 80016ac:	f000 ff32 	bl	8002514 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40015000 	.word	0x40015000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40021400 	.word	0x40021400

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_MspInit+0x54>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_MspInit+0x54>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_MspInit+0x54>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_MspInit+0x54>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_MspInit+0x54>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_MspInit+0x54>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	210f      	movs	r1, #15
 8001706:	f06f 0001 	mvn.w	r0, #1
 800170a:	f000 fcaf 	bl	800206c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	; 0x30
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	2036      	movs	r0, #54	; 0x36
 8001732:	f000 fc9b 	bl	800206c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001736:	2036      	movs	r0, #54	; 0x36
 8001738:	f000 fcb4 	bl	80020a4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_InitTick+0xa4>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <HAL_InitTick+0xa4>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_InitTick+0xa4>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001758:	f107 0210 	add.w	r2, r7, #16
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fcc6 	bl	80050f4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001768:	f003 fc9c 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 800176c:	4603      	mov	r3, r0
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_InitTick+0xa8>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0c9b      	lsrs	r3, r3, #18
 800177c:	3b01      	subs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_InitTick+0xac>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_InitTick+0xb0>)
 8001784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_InitTick+0xac>)
 8001788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800178c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_InitTick+0xac>)
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_InitTick+0xac>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_InitTick+0xac>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <HAL_InitTick+0xac>)
 80017a2:	f003 ff2f 	bl	8005604 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017ac:	4806      	ldr	r0, [pc, #24]	; (80017c8 <HAL_InitTick+0xac>)
 80017ae:	f003 ff54 	bl	800565a <HAL_TIM_Base_Start_IT>
 80017b2:	4603      	mov	r3, r0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3730      	adds	r7, #48	; 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	431bde83 	.word	0x431bde83
 80017c8:	2000458c 	.word	0x2000458c
 80017cc:	40001000 	.word	0x40001000

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8001808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <EXTI0_IRQHandler+0x18>)
 800180e:	f001 f844 	bl	800289a <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001812:	2001      	movs	r0, #1
 8001814:	f001 f85c 	bl	80028d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021800 	.word	0x40021800

08001820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//printf("IT: TIMER #2 a claqué\r\n");		//A ne pas faire dans la vrai vie, c'est juste pour l'exo
	HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8001824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001828:	4806      	ldr	r0, [pc, #24]	; (8001844 <TIM2_IRQHandler+0x24>)
 800182a:	f001 f836 	bl	800289a <HAL_GPIO_TogglePin>
	xSemaphoreGiveFromISR(MonSem,pdFALSE);
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <TIM2_IRQHandler+0x28>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f006 f8b3 	bl	80079a0 <xQueueGiveFromISR>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800183a:	4804      	ldr	r0, [pc, #16]	; (800184c <TIM2_IRQHandler+0x2c>)
 800183c:	f003 ff31 	bl	80056a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021800 	.word	0x40021800
 8001848:	20004518 	.word	0x20004518
 800184c:	2000460c 	.word	0x2000460c

08001850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	xSemaphoreGiveFromISR(MonSemUART,pdFALSE);
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <USART1_IRQHandler+0x1c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f006 f8a0 	bl	80079a0 <xQueueGiveFromISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <USART1_IRQHandler+0x20>)
 8001862:	f004 fc0b 	bl	800607c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20004514 	.word	0x20004514
 8001870:	2000464c 	.word	0x2000464c

08001874 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM6_DAC_IRQHandler+0x10>)
 800187a:	f003 ff12 	bl	80056a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000458c 	.word	0x2000458c

08001888 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <OTG_HS_IRQHandler+0x10>)
 800188e:	f001 f8a4 	bl	80029da <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000468c 	.word	0x2000468c

0800189c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <LTDC_IRQHandler+0x10>)
 80018a2:	f002 fd2d 	bl	8004300 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000446c 	.word	0x2000446c

080018b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <DMA2D_IRQHandler+0x10>)
 80018b6:	f000 fc8a 	bl	80021ce <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200043a0 	.word	0x200043a0

080018c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e00a      	b.n	80018ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d6:	f3af 8000 	nop.w
 80018da:	4601      	mov	r1, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbf0      	blt.n	80018d6 <_read+0x12>
	}

return len;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e009      	b.n	8001924 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fced 	bl	80012f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf1      	blt.n	8001910 <_write+0x12>
	}
	return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_close>:

int _close(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195e:	605a      	str	r2, [r3, #4]
	return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_isatty>:

int _isatty(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x50>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x16>
		heap_end = &end;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <_sbrk+0x50>)
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <_sbrk+0x54>)
 80019b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <_sbrk+0x50>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <_sbrk+0x50>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	466a      	mov	r2, sp
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d907      	bls.n	80019da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019ca:	f007 fd77 	bl	80094bc <__errno>
 80019ce:	4602      	mov	r2, r0
 80019d0:	230c      	movs	r3, #12
 80019d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	e006      	b.n	80019e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <_sbrk+0x50>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <_sbrk+0x50>)
 80019e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000030c 	.word	0x2000030c
 80019f4:	20004958 	.word	0x20004958

080019f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <SystemInit+0x28>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <SystemInit+0x28>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <SystemInit+0x28>)
 8001a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a12:	609a      	str	r2, [r3, #8]
#endif
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <MX_TIM1_Init+0x9c>)
 8001a44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a6c:	f003 fdca 	bl	8005604 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001a76:	f7ff fd9f 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_TIM1_Init+0x98>)
 8001a88:	f003 ff13 	bl	80058b2 <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001a92:	f7ff fd91 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_TIM1_Init+0x98>)
 8001aa4:	f004 f91e 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001aae:	f7ff fd83 	bl	80015b8 <Error_Handler>
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200045cc 	.word	0x200045cc
 8001ac0:	40010000 	.word	0x40010000

08001ac4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399999;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001af6:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001af8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001b08:	f003 fd7c 	bl	8005604 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001b12:	f7ff fd51 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001b24:	f003 fec5 	bl	80058b2 <HAL_TIM_ConfigClockSource>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f7ff fd43 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_TIM2_Init+0x94>)
 8001b40:	f004 f8d0 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b4a:	f7ff fd35 	bl	80015b8 <Error_Handler>
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000460c 	.word	0x2000460c
 8001b5c:	00802c7f 	.word	0x00802c7f

08001b60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <HAL_TIM_Base_MspInit+0x70>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10e      	bne.n	8001b90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_TIM_Base_MspInit+0x74>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <HAL_TIM_Base_MspInit+0x74>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_TIM_Base_MspInit+0x74>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b8e:	e01a      	b.n	8001bc6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b98:	d115      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_TIM_Base_MspInit+0x74>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <HAL_TIM_Base_MspInit+0x74>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_TIM_Base_MspInit+0x74>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2105      	movs	r1, #5
 8001bba:	201c      	movs	r0, #28
 8001bbc:	f000 fa56 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc0:	201c      	movs	r0, #28
 8001bc2:	f000 fa6f 	bl	80020a4 <HAL_NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <MX_USART1_UART_Init+0x50>)
 8001be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_USART1_UART_Init+0x4c>)
 8001c10:	f004 f8f8 	bl	8005e04 <HAL_UART_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c1a:	f7ff fccd 	bl	80015b8 <Error_Handler>
  }

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000464c 	.word	0x2000464c
 8001c28:	40011000 	.word	0x40011000

08001c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_UART_MspInit+0x94>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d134      	bne.n	8001cb8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_UART_MspInit+0x98>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <HAL_UART_MspInit+0x98>)
 8001c58:	f043 0310 	orr.w	r3, r3, #16
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_UART_MspInit+0x98>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_UART_MspInit+0x98>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <HAL_UART_MspInit+0x98>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_UART_MspInit+0x98>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <HAL_UART_MspInit+0x9c>)
 8001ca4:	f000 fc36 	bl	8002514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2105      	movs	r1, #5
 8001cac:	2025      	movs	r0, #37	; 0x25
 8001cae:	f000 f9dd 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cb2:	2025      	movs	r0, #37	; 0x25
 8001cb4:	f000 f9f6 	bl	80020a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40011000 	.word	0x40011000
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001cd2:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001cd8:	220c      	movs	r2, #12
 8001cda:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001cea:	2202      	movs	r2, #2
 8001cec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d08:	f000 fe05 	bl	8002916 <HAL_HCD_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001d12:	f7ff fc51 	bl	80015b8 <Error_Handler>
  }

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000468c 	.word	0x2000468c
 8001d20:	40040000 	.word	0x40040000

08001d24 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <HAL_HCD_MspInit+0xb0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d141      	bne.n	8001dca <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_HCD_MspInit+0xb4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <HAL_HCD_MspInit+0xb4>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_HCD_MspInit+0xb4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001d62:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001d74:	230c      	movs	r3, #12
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4817      	ldr	r0, [pc, #92]	; (8001ddc <HAL_HCD_MspInit+0xb8>)
 8001d80:	f000 fbc8 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4810      	ldr	r0, [pc, #64]	; (8001ddc <HAL_HCD_MspInit+0xb8>)
 8001d9a:	f000 fbbb 	bl	8002514 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_HCD_MspInit+0xb4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_HCD_MspInit+0xb4>)
 8001da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_HCD_MspInit+0xb4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2105      	movs	r1, #5
 8001dbe:	204d      	movs	r0, #77	; 0x4d
 8001dc0:	f000 f954 	bl	800206c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001dc4:	204d      	movs	r0, #77	; 0x4d
 8001dc6:	f000 f96d 	bl	80020a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40040000 	.word	0x40040000
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001de4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001de6:	e003      	b.n	8001df0 <LoopCopyDataInit>

08001de8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dee:	3104      	adds	r1, #4

08001df0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001df4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001df6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001df8:	d3f6      	bcc.n	8001de8 <CopyDataInit>
  ldr  r2, =_sbss
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dfc:	e002      	b.n	8001e04 <LoopFillZerobss>

08001dfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e00:	f842 3b04 	str.w	r3, [r2], #4

08001e04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e08:	d3f9      	bcc.n	8001dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e0a:	f7ff fdf5 	bl	80019f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f007 fce7 	bl	80097e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7ff fa9f 	bl	8001354 <main>
  bx  lr    
 8001e16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e18:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e1c:	0800a694 	.word	0x0800a694
  ldr  r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e24:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001e28:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001e2c:	20004958 	.word	0x20004958

08001e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_Init+0x40>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <HAL_Init+0x40>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_Init+0x40>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f8fa 	bl	8002056 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fc5a 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fc2c 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000028 	.word	0x20000028
 8001e9c:	20004950 	.word	0x20004950

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20004950 	.word	0x20004950

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_Delay+0x40>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000028 	.word	0x20000028

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff4c 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207e:	f7ff ff61 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 8002082:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	6978      	ldr	r0, [r7, #20]
 800208a:	f7ff ffb1 	bl	8001ff0 <NVIC_EncodePriority>
 800208e:	4602      	mov	r2, r0
 8002090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff80 	bl	8001f9c <__NVIC_SetPriority>
}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff54 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00e      	b.n	80020f0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	795b      	ldrb	r3, [r3, #5]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fbfc 	bl	80008e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00c      	b.n	8002130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2205      	movs	r2, #5
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e03b      	b.n	80021c6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fc10 	bl	8000988 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	f023 0107 	bic.w	r1, r3, #7
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68d1      	ldr	r1, [r2, #12]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	430b      	orrs	r3, r1
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d026      	beq.n	800223e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d021      	beq.n	800223e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002208:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2204      	movs	r2, #4
 8002222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b00      	cmp	r3, #0
 8002246:	d026      	beq.n	8002296 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d021      	beq.n	8002296 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002260:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2220      	movs	r2, #32
 8002268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	f043 0202 	orr.w	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2204      	movs	r2, #4
 800227a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d026      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d021      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2208      	movs	r2, #8
 80022c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	f043 0204 	orr.w	r2, r3, #4
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00e      	beq.n	8002320 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002310:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2204      	movs	r2, #4
 8002318:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f853 	bl	80023c6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d024      	beq.n	8002374 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01f      	beq.n	8002374 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2202      	movs	r2, #2
 800234a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01f      	beq.n	80023be <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01a      	beq.n	80023be <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002396:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2210      	movs	r2, #16
 800239e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f80e 	bl	80023da <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_DMA2D_ConfigLayer+0x20>
 800240c:	2302      	movs	r3, #2
 800240e:	e079      	b.n	8002504 <HAL_DMA2D_ConfigLayer+0x114>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	3318      	adds	r3, #24
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800243a:	4b35      	ldr	r3, [pc, #212]	; (8002510 <HAL_DMA2D_ConfigLayer+0x120>)
 800243c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d003      	beq.n	800244e <HAL_DMA2D_ConfigLayer+0x5e>
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b09      	cmp	r3, #9
 800244c:	d107      	bne.n	800245e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e005      	b.n	800246a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	061b      	lsls	r3, r3, #24
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d120      	bne.n	80024b2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	ea02 0103 	and.w	r1, r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	430a      	orrs	r2, r1
 8002486:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b0a      	cmp	r3, #10
 8002498:	d003      	beq.n	80024a2 <HAL_DMA2D_ConfigLayer+0xb2>
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d127      	bne.n	80024f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
 80024b0:	e01f      	b.n	80024f2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	ea02 0103 	and.w	r1, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b0a      	cmp	r3, #10
 80024da:	d003      	beq.n	80024e4 <HAL_DMA2D_ConfigLayer+0xf4>
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d106      	bne.n	80024f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80024f0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	ff03000f 	.word	0xff03000f

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e177      	b.n	8002820 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	f040 8166 	bne.w	800281a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d00b      	beq.n	800256e <HAL_GPIO_Init+0x5a>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002562:	2b11      	cmp	r3, #17
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b12      	cmp	r3, #18
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0xfc>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b12      	cmp	r3, #18
 800260e:	d123      	bne.n	8002658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	69b9      	ldr	r1, [r7, #24]
 8002654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80c0 	beq.w	800281a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b65      	ldr	r3, [pc, #404]	; (8002834 <HAL_GPIO_Init+0x320>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a64      	ldr	r2, [pc, #400]	; (8002834 <HAL_GPIO_Init+0x320>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b62      	ldr	r3, [pc, #392]	; (8002834 <HAL_GPIO_Init+0x320>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b6:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_GPIO_Init+0x324>)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a57      	ldr	r2, [pc, #348]	; (800283c <HAL_GPIO_Init+0x328>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d037      	beq.n	8002752 <HAL_GPIO_Init+0x23e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a56      	ldr	r2, [pc, #344]	; (8002840 <HAL_GPIO_Init+0x32c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d031      	beq.n	800274e <HAL_GPIO_Init+0x23a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a55      	ldr	r2, [pc, #340]	; (8002844 <HAL_GPIO_Init+0x330>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02b      	beq.n	800274a <HAL_GPIO_Init+0x236>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a54      	ldr	r2, [pc, #336]	; (8002848 <HAL_GPIO_Init+0x334>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d025      	beq.n	8002746 <HAL_GPIO_Init+0x232>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a53      	ldr	r2, [pc, #332]	; (800284c <HAL_GPIO_Init+0x338>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01f      	beq.n	8002742 <HAL_GPIO_Init+0x22e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_GPIO_Init+0x33c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d019      	beq.n	800273e <HAL_GPIO_Init+0x22a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	; (8002854 <HAL_GPIO_Init+0x340>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0x226>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	; (8002858 <HAL_GPIO_Init+0x344>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00d      	beq.n	8002736 <HAL_GPIO_Init+0x222>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x348>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <HAL_GPIO_Init+0x21e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_GPIO_Init+0x34c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_GPIO_Init+0x21a>
 800272a:	2309      	movs	r3, #9
 800272c:	e012      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800272e:	230a      	movs	r3, #10
 8002730:	e010      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002732:	2308      	movs	r3, #8
 8002734:	e00e      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002736:	2307      	movs	r3, #7
 8002738:	e00c      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800273a:	2306      	movs	r3, #6
 800273c:	e00a      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800273e:	2305      	movs	r3, #5
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002752:	2300      	movs	r3, #0
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002764:	4934      	ldr	r1, [pc, #208]	; (8002838 <HAL_GPIO_Init+0x324>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002772:	4b3c      	ldr	r3, [pc, #240]	; (8002864 <HAL_GPIO_Init+0x350>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002796:	4a33      	ldr	r2, [pc, #204]	; (8002864 <HAL_GPIO_Init+0x350>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_GPIO_Init+0x350>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c0:	4a28      	ldr	r2, [pc, #160]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_GPIO_Init+0x350>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002814:	4a13      	ldr	r2, [pc, #76]	; (8002864 <HAL_GPIO_Init+0x350>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f67f ae84 	bls.w	8002530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002828:	bf00      	nop
 800282a:	3724      	adds	r7, #36	; 0x24
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40023800 	.word	0x40023800
 8002838:	40013800 	.word	0x40013800
 800283c:	40020000 	.word	0x40020000
 8002840:	40020400 	.word	0x40020400
 8002844:	40020800 	.word	0x40020800
 8002848:	40020c00 	.word	0x40020c00
 800284c:	40021000 	.word	0x40021000
 8002850:	40021400 	.word	0x40021400
 8002854:	40021800 	.word	0x40021800
 8002858:	40021c00 	.word	0x40021c00
 800285c:	40022000 	.word	0x40022000
 8002860:	40022400 	.word	0x40022400
 8002864:	40013c00 	.word	0x40013c00

08002868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	807b      	strh	r3, [r7, #2]
 8002874:	4613      	mov	r3, r2
 8002876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002884:	e003      	b.n	800288e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002886:	887b      	ldrh	r3, [r7, #2]
 8002888:	041a      	lsls	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	619a      	str	r2, [r3, #24]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	401a      	ands	r2, r3
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d104      	bne.n	80028be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	041a      	lsls	r2, r3, #16
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f806 	bl	8002900 <HAL_GPIO_EXTI_Callback>
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40013c00 	.word	0x40013c00

08002900 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002918:	b08f      	sub	sp, #60	; 0x3c
 800291a:	af0a      	add	r7, sp, #40	; 0x28
 800291c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e054      	b.n	80029d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff f9ee 	bl	8001d24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2203      	movs	r2, #3
 800294c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 fae1 	bl	8006f2e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	687e      	ldr	r6, [r7, #4]
 8002974:	466d      	mov	r5, sp
 8002976:	f106 0410 	add.w	r4, r6, #16
 800297a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002982:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002986:	e885 0003 	stmia.w	r5, {r0, r1}
 800298a:	1d33      	adds	r3, r6, #4
 800298c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298e:	6838      	ldr	r0, [r7, #0]
 8002990:	f004 fa6c 	bl	8006e6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f004 fad8 	bl	8006f50 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	687e      	ldr	r6, [r7, #4]
 80029a8:	466d      	mov	r5, sp
 80029aa:	f106 0410 	add.w	r4, r6, #16
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80029be:	1d33      	adds	r3, r6, #4
 80029c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f004 fbb4 	bl	8007130 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029da <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fb5b 	bl	80070ac <USB_GetMode>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	f040 80ef 	bne.w	8002bdc <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 fb3f 	bl	8007086 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80e5 	beq.w	8002bda <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 fb36 	bl	8007086 <USB_ReadInterrupts>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a24:	d104      	bne.n	8002a30 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a2e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fb26 	bl	8007086 <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a44:	d104      	bne.n	8002a50 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a4e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fb16 	bl	8007086 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a64:	d104      	bne.n	8002a70 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a6e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fb06 	bl	8007086 <USB_ReadInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d103      	bne.n	8002a8c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 faf8 	bl	8007086 <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa0:	d115      	bne.n	8002ace <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002aaa:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d108      	bne.n	8002ace <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f8a4 	bl	8002c0a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 fbed 	bl	80072a8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fad7 	bl	8007086 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae2:	d102      	bne.n	8002aea <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f001 f913 	bl	8003d10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fac9 	bl	8007086 <USB_ReadInterrupts>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d106      	bne.n	8002b0c <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f86f 	bl	8002be2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 fab8 	bl	8007086 <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b20:	d138      	bne.n	8002b94 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 fc31 	bl	800738e <USB_HC_ReadInterrupt>
 8002b2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e025      	b.n	8002b80 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5e:	d106      	bne.n	8002b6e <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f87b 	bl	8002c62 <HCD_HC_IN_IRQHandler>
 8002b6c:	e005      	b.n	8002b7a <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fca9 	bl	80034cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3d4      	bcc.n	8002b34 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 fa74 	bl	8007086 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d101      	bne.n	8002bac <HAL_HCD_IRQHandler+0x1d2>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_HCD_IRQHandler+0x1d4>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d014      	beq.n	8002bdc <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0210 	bic.w	r2, r2, #16
 8002bc0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fff8 	bl	8003bb8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0210 	orr.w	r2, r2, #16
 8002bd6:	619a      	str	r2, [r3, #24]
 8002bd8:	e000      	b.n	8002bdc <HAL_HCD_IRQHandler+0x202>
      return;
 8002bda:	bf00      	nop
    }
  }
}
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
 8002c52:	4613      	mov	r3, r2
 8002c54:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d119      	bne.n	8002cc6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	0151      	lsls	r1, r2, #5
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	440a      	add	r2, r1
 8002cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	60d3      	str	r3, [r2, #12]
 8002cc4:	e0ce      	b.n	8002e64 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cdc:	d12c      	bne.n	8002d38 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	335d      	adds	r3, #93	; 0x5d
 8002d02:	2207      	movs	r2, #7
 8002d04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	0151      	lsls	r1, r2, #5
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	440a      	add	r2, r1
 8002d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fb3d 	bl	80073b0 <USB_HC_Halt>
 8002d36:	e095      	b.n	8002e64 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d109      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	6093      	str	r3, [r2, #8]
 8002d60:	e080      	b.n	8002e64 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d134      	bne.n	8002de2 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	0151      	lsls	r1, r2, #5
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	440a      	add	r2, r1
 8002d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	335d      	adds	r3, #93	; 0x5d
 8002da8:	2205      	movs	r2, #5
 8002daa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	2310      	movs	r3, #16
 8002dbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2308      	movs	r3, #8
 8002dce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 fae8 	bl	80073b0 <USB_HC_Halt>
 8002de0:	e040      	b.n	8002e64 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df8:	d134      	bne.n	8002e64 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	0151      	lsls	r1, r2, #5
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	440a      	add	r2, r1
 8002e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 fac3 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	461a      	mov	r2, r3
 8002e38:	2310      	movs	r3, #16
 8002e3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	335d      	adds	r3, #93	; 0x5d
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e62:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7a:	d122      	bne.n	8002ec2 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	0151      	lsls	r1, r2, #5
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	440a      	add	r2, r1
 8002e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f004 fa82 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ebe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ec0:	e300      	b.n	80034c4 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f040 80fd 	bne.w	80030d4 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01b      	beq.n	8002f1a <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	3348      	adds	r3, #72	; 0x48
 8002ef2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	0159      	lsls	r1, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	440b      	add	r3, r1
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f06:	1ad1      	subs	r1, r2, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4403      	add	r3, r0
 8002f16:	334c      	adds	r3, #76	; 0x4c
 8002f18:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	440b      	add	r3, r1
 8002f28:	335d      	adds	r3, #93	; 0x5d
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3358      	adds	r3, #88	; 0x58
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2301      	movs	r3, #1
 8002f52:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	333f      	adds	r3, #63	; 0x3f
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d121      	bne.n	8002fc4 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	0151      	lsls	r1, r2, #5
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	440a      	add	r2, r1
 8002f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f004 fa00 	bl	80073b0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	6093      	str	r3, [r2, #8]
 8002fc2:	e070      	b.n	80030a6 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	333f      	adds	r3, #63	; 0x3f
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d12a      	bne.n	8003030 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	0151      	lsls	r1, r2, #5
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	440a      	add	r2, r1
 8002ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ff8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	335c      	adds	r3, #92	; 0x5c
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	b2d8      	uxtb	r0, r3
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	335c      	adds	r3, #92	; 0x5c
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4601      	mov	r1, r0
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fe0c 	bl	8002c46 <HAL_HCD_HC_NotifyURBChange_Callback>
 800302e:	e03a      	b.n	80030a6 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	333f      	adds	r3, #63	; 0x3f
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d12f      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	335c      	adds	r3, #92	; 0x5c
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	3350      	adds	r3, #80	; 0x50
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	f083 0301 	eor.w	r3, r3, #1
 8003070:	b2d8      	uxtb	r0, r3
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	440b      	add	r3, r1
 8003080:	3350      	adds	r3, #80	; 0x50
 8003082:	4602      	mov	r2, r0
 8003084:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	b2d8      	uxtb	r0, r3
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	335c      	adds	r3, #92	; 0x5c
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4601      	mov	r1, r0
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fdd0 	bl	8002c46 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	3350      	adds	r3, #80	; 0x50
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	f083 0301 	eor.w	r3, r3, #1
 80030bc:	b2d8      	uxtb	r0, r3
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	3350      	adds	r3, #80	; 0x50
 80030ce:	4602      	mov	r2, r0
 80030d0:	701a      	strb	r2, [r3, #0]
}
 80030d2:	e1f7      	b.n	80034c4 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f040 811a 	bne.w	8003320 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	0151      	lsls	r1, r2, #5
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	440a      	add	r2, r1
 8003102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003106:	f023 0302 	bic.w	r3, r3, #2
 800310a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	335d      	adds	r3, #93	; 0x5d
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10a      	bne.n	8003138 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	335c      	adds	r3, #92	; 0x5c
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e0d9      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	335d      	adds	r3, #93	; 0x5d
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d10a      	bne.n	8003164 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	335c      	adds	r3, #92	; 0x5c
 800315e:	2205      	movs	r2, #5
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e0c3      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	335d      	adds	r3, #93	; 0x5d
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d00a      	beq.n	8003190 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	335d      	adds	r3, #93	; 0x5d
 800318a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800318c:	2b08      	cmp	r3, #8
 800318e:	d156      	bne.n	800323e <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	3358      	adds	r3, #88	; 0x58
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4403      	add	r3, r0
 80031b2:	3358      	adds	r3, #88	; 0x58
 80031b4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	3358      	adds	r3, #88	; 0x58
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d914      	bls.n	80031f6 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	3358      	adds	r3, #88	; 0x58
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	335c      	adds	r3, #92	; 0x5c
 80031f0:	2204      	movs	r2, #4
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e009      	b.n	800320a <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	335c      	adds	r3, #92	; 0x5c
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4413      	add	r3, r2
 8003212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003220:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003228:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	461a      	mov	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	e056      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	335d      	adds	r3, #93	; 0x5d
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d123      	bne.n	800329c <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	335c      	adds	r3, #92	; 0x5c
 8003264:	2202      	movs	r2, #2
 8003266:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800327e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003286:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e027      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	335d      	adds	r3, #93	; 0x5d
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b07      	cmp	r3, #7
 80032b0:	d11c      	bne.n	80032ec <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	440b      	add	r3, r1
 80032c0:	3358      	adds	r3, #88	; 0x58
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	1c59      	adds	r1, r3, #1
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4403      	add	r3, r0
 80032d4:	3358      	adds	r3, #88	; 0x58
 80032d6:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	335c      	adds	r3, #92	; 0x5c
 80032e8:	2204      	movs	r2, #4
 80032ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	461a      	mov	r2, r3
 80032fa:	2302      	movs	r3, #2
 80032fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	b2d8      	uxtb	r0, r3
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	335c      	adds	r3, #92	; 0x5c
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4601      	mov	r1, r0
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fc94 	bl	8002c46 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800331e:	e0d1      	b.n	80034c4 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b80      	cmp	r3, #128	; 0x80
 8003334:	d13e      	bne.n	80033b4 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	0151      	lsls	r1, r2, #5
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	440a      	add	r2, r1
 800334c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	440b      	add	r3, r1
 8003364:	3358      	adds	r3, #88	; 0x58
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	1c59      	adds	r1, r3, #1
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4403      	add	r3, r0
 8003378:	3358      	adds	r3, #88	; 0x58
 800337a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	335d      	adds	r3, #93	; 0x5d
 800338c:	2206      	movs	r2, #6
 800338e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f004 f808 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	6093      	str	r3, [r2, #8]
}
 80033b2:	e087      	b.n	80034c4 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d17c      	bne.n	80034c4 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	333f      	adds	r3, #63	; 0x3f
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d122      	bne.n	8003426 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	3358      	adds	r3, #88	; 0x58
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	440a      	add	r2, r1
 800340a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340e:	f043 0302 	orr.w	r3, r3, #2
 8003412:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f003 ffc6 	bl	80073b0 <USB_HC_Halt>
 8003424:	e045      	b.n	80034b2 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	333f      	adds	r3, #63	; 0x3f
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	333f      	adds	r3, #63	; 0x3f
 800344c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800344e:	2b02      	cmp	r3, #2
 8003450:	d12f      	bne.n	80034b2 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	3358      	adds	r3, #88	; 0x58
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d121      	bne.n	80034b2 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	440b      	add	r3, r1
 800347c:	335d      	adds	r3, #93	; 0x5d
 800347e:	2203      	movs	r2, #3
 8003480:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	0151      	lsls	r1, r2, #5
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	440a      	add	r2, r1
 8003498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f003 ff7f 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	461a      	mov	r2, r3
 80034c0:	2310      	movs	r3, #16
 80034c2:	6093      	str	r3, [r2, #8]
}
 80034c4:	bf00      	nop
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d119      	bne.n	8003530 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	461a      	mov	r2, r3
 800350a:	2304      	movs	r3, #4
 800350c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	0151      	lsls	r1, r2, #5
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	440a      	add	r2, r1
 8003524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800352e:	e33e      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d141      	bne.n	80035ca <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	2320      	movs	r3, #32
 8003556:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	333d      	adds	r3, #61	; 0x3d
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	f040 831f 	bne.w	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	440b      	add	r3, r1
 800357e:	333d      	adds	r3, #61	; 0x3d
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	335c      	adds	r3, #92	; 0x5c
 8003594:	2202      	movs	r2, #2
 8003596:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b2:	f043 0302 	orr.w	r3, r3, #2
 80035b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fef4 	bl	80073b0 <USB_HC_Halt>
}
 80035c8:	e2f1      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d13f      	bne.n	8003660 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	335d      	adds	r3, #93	; 0x5d
 80035f0:	2204      	movs	r2, #4
 80035f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	333d      	adds	r3, #61	; 0x3d
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	3358      	adds	r3, #88	; 0x58
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	0151      	lsls	r1, r2, #5
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	440a      	add	r2, r1
 8003632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f003 feb2 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	461a      	mov	r2, r3
 800365a:	2340      	movs	r3, #64	; 0x40
 800365c:	6093      	str	r3, [r2, #8]
}
 800365e:	e2a6      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003676:	d122      	bne.n	80036be <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	0151      	lsls	r1, r2, #5
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	440a      	add	r2, r1
 800368e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 fe84 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b4:	461a      	mov	r2, r3
 80036b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ba:	6093      	str	r3, [r2, #8]
}
 80036bc:	e277      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d135      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	3358      	adds	r3, #88	; 0x58
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fe4c 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	2301      	movs	r3, #1
 8003728:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	335d      	adds	r3, #93	; 0x5d
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
}
 800373e:	e236      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b08      	cmp	r3, #8
 8003754:	d12b      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	2308      	movs	r3, #8
 8003766:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	0151      	lsls	r1, r2, #5
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	440a      	add	r2, r1
 800377e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003782:	f043 0302 	orr.w	r3, r3, #2
 8003786:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fe0c 	bl	80073b0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	440b      	add	r3, r1
 80037a6:	335d      	adds	r3, #93	; 0x5d
 80037a8:	2205      	movs	r2, #5
 80037aa:	701a      	strb	r2, [r3, #0]
}
 80037ac:	e1ff      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d155      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	3358      	adds	r3, #88	; 0x58
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	440b      	add	r3, r1
 80037e6:	335d      	adds	r3, #93	; 0x5d
 80037e8:	2203      	movs	r2, #3
 80037ea:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	333d      	adds	r3, #61	; 0x3d
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	440b      	add	r3, r1
 8003810:	333c      	adds	r3, #60	; 0x3c
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	440b      	add	r3, r1
 8003826:	333d      	adds	r3, #61	; 0x3d
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	440a      	add	r2, r1
 8003842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f003 fdaa 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	461a      	mov	r2, r3
 800386a:	2310      	movs	r3, #16
 800386c:	6093      	str	r3, [r2, #8]
}
 800386e:	e19e      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b80      	cmp	r3, #128	; 0x80
 8003884:	d12b      	bne.n	80038de <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4413      	add	r3, r2
 800388e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	440a      	add	r2, r1
 800389c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038a0:	f043 0302 	orr.w	r3, r3, #2
 80038a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 fd7d 	bl	80073b0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	335d      	adds	r3, #93	; 0x5d
 80038c6:	2206      	movs	r2, #6
 80038c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	461a      	mov	r2, r3
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	6093      	str	r3, [r2, #8]
}
 80038dc:	e167      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f4:	d135      	bne.n	8003962 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	0151      	lsls	r1, r2, #5
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	440a      	add	r2, r1
 800390c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fd45 	bl	80073b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	461a      	mov	r2, r3
 8003934:	2310      	movs	r3, #16
 8003936:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	335d      	adds	r3, #93	; 0x5d
 800395c:	2208      	movs	r2, #8
 800395e:	701a      	strb	r2, [r3, #0]
}
 8003960:	e125      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4413      	add	r3, r2
 800396a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	f040 811a 	bne.w	8003bae <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	0151      	lsls	r1, r2, #5
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	440a      	add	r2, r1
 8003990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003994:	f023 0302 	bic.w	r3, r3, #2
 8003998:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	440b      	add	r3, r1
 80039a8:	335d      	adds	r3, #93	; 0x5d
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d137      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	440b      	add	r3, r1
 80039be:	335c      	adds	r3, #92	; 0x5c
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	333f      	adds	r3, #63	; 0x3f
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d00b      	beq.n	80039f2 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	440b      	add	r3, r1
 80039e8:	333f      	adds	r3, #63	; 0x3f
 80039ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	f040 80c5 	bne.w	8003b7c <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	3351      	adds	r3, #81	; 0x51
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	f083 0301 	eor.w	r3, r3, #1
 8003a08:	b2d8      	uxtb	r0, r3
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	3351      	adds	r3, #81	; 0x51
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e0ad      	b.n	8003b7c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	440b      	add	r3, r1
 8003a2e:	335d      	adds	r3, #93	; 0x5d
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d10a      	bne.n	8003a4c <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	335c      	adds	r3, #92	; 0x5c
 8003a46:	2202      	movs	r2, #2
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e097      	b.n	8003b7c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	440b      	add	r3, r1
 8003a5a:	335d      	adds	r3, #93	; 0x5d
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d10a      	bne.n	8003a78 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	335c      	adds	r3, #92	; 0x5c
 8003a72:	2202      	movs	r2, #2
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e081      	b.n	8003b7c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	440b      	add	r3, r1
 8003a86:	335d      	adds	r3, #93	; 0x5d
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d10a      	bne.n	8003aa4 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	440b      	add	r3, r1
 8003a9c:	335c      	adds	r3, #92	; 0x5c
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	e06b      	b.n	8003b7c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	335d      	adds	r3, #93	; 0x5d
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d00a      	beq.n	8003ad0 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	335d      	adds	r3, #93	; 0x5d
 8003aca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d155      	bne.n	8003b7c <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	3358      	adds	r3, #88	; 0x58
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4403      	add	r3, r0
 8003af2:	3358      	adds	r3, #88	; 0x58
 8003af4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	3358      	adds	r3, #88	; 0x58
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d914      	bls.n	8003b36 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	3358      	adds	r3, #88	; 0x58
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	440b      	add	r3, r1
 8003b2e:	335c      	adds	r3, #92	; 0x5c
 8003b30:	2204      	movs	r2, #4
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e009      	b.n	8003b4a <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	440b      	add	r3, r1
 8003b44:	335c      	adds	r3, #92	; 0x5c
 8003b46:	2202      	movs	r2, #2
 8003b48:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b60:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b68:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	b2d8      	uxtb	r0, r3
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	335c      	adds	r3, #92	; 0x5c
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4601      	mov	r1, r0
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff f84c 	bl	8002c46 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	0c5b      	lsrs	r3, r3, #17
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	091b      	lsrs	r3, r3, #4
 8003be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d003      	beq.n	8003bfc <HCD_RXQLVL_IRQHandler+0x44>
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	f000 8082 	beq.w	8003cfe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003bfa:	e083      	b.n	8003d04 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d07f      	beq.n	8003d02 <HCD_RXQLVL_IRQHandler+0x14a>
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	3344      	adds	r3, #68	; 0x44
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d074      	beq.n	8003d02 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	440b      	add	r3, r1
 8003c2a:	3344      	adds	r3, #68	; 0x44
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	b292      	uxth	r2, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f003 f9fe 	bl	8007034 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	3344      	adds	r3, #68	; 0x44
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	18d1      	adds	r1, r2, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4403      	add	r3, r0
 8003c5c:	3344      	adds	r3, #68	; 0x44
 8003c5e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334c      	adds	r3, #76	; 0x4c
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	18d1      	adds	r1, r2, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4403      	add	r3, r0
 8003c84:	334c      	adds	r3, #76	; 0x4c
 8003c86:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HCD_RXQLVL_IRQHandler+0x154>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d031      	beq.n	8003d02 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cb4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cbc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	440b      	add	r3, r1
 8003cde:	3350      	adds	r3, #80	; 0x50
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	f083 0301 	eor.w	r3, r3, #1
 8003ce6:	b2d8      	uxtb	r0, r3
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3350      	adds	r3, #80	; 0x50
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	701a      	strb	r2, [r3, #0]
      break;
 8003cfc:	e001      	b.n	8003d02 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003d02:	bf00      	nop
  }
}
 8003d04:	bf00      	nop
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	1ff80000 	.word	0x1ff80000

08003d10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d10b      	bne.n	8003d60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d102      	bne.n	8003d58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe ff4f 	bl	8002bf6 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d132      	bne.n	8003dd0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f043 0308 	orr.w	r3, r3, #8
 8003d70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d126      	bne.n	8003dca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d113      	bne.n	8003dac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d8e:	d106      	bne.n	8003d9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2102      	movs	r1, #2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f003 fa86 	bl	80072a8 <USB_InitFSLSPClkSel>
 8003d9c:	e011      	b.n	8003dc2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f003 fa7f 	bl	80072a8 <USB_InitFSLSPClkSel>
 8003daa:	e00a      	b.n	8003dc2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d106      	bne.n	8003dc2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003dc0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fe ff2b 	bl	8002c1e <HAL_HCD_PortEnabled_Callback>
 8003dc8:	e002      	b.n	8003dd0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe ff31 	bl	8002c32 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d103      	bne.n	8003de2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f043 0320 	orr.w	r3, r3, #32
 8003de0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6013      	str	r3, [r2, #0]
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e11f      	b.n	800404a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd f86a 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	; 0x24
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f001 f922 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8003e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4a7b      	ldr	r2, [pc, #492]	; (8004054 <HAL_I2C_Init+0x25c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d807      	bhi.n	8003e7c <HAL_I2C_Init+0x84>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a7a      	ldr	r2, [pc, #488]	; (8004058 <HAL_I2C_Init+0x260>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	bf94      	ite	ls
 8003e74:	2301      	movls	r3, #1
 8003e76:	2300      	movhi	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	e006      	b.n	8003e8a <HAL_I2C_Init+0x92>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a77      	ldr	r2, [pc, #476]	; (800405c <HAL_I2C_Init+0x264>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	bf94      	ite	ls
 8003e84:	2301      	movls	r3, #1
 8003e86:	2300      	movhi	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0db      	b.n	800404a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a72      	ldr	r2, [pc, #456]	; (8004060 <HAL_I2C_Init+0x268>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	0c9b      	lsrs	r3, r3, #18
 8003e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a64      	ldr	r2, [pc, #400]	; (8004054 <HAL_I2C_Init+0x25c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d802      	bhi.n	8003ecc <HAL_I2C_Init+0xd4>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	e009      	b.n	8003ee0 <HAL_I2C_Init+0xe8>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	4a63      	ldr	r2, [pc, #396]	; (8004064 <HAL_I2C_Init+0x26c>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	3301      	adds	r3, #1
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ef2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4956      	ldr	r1, [pc, #344]	; (8004054 <HAL_I2C_Init+0x25c>)
 8003efc:	428b      	cmp	r3, r1
 8003efe:	d80d      	bhi.n	8003f1c <HAL_I2C_Init+0x124>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1e59      	subs	r1, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	bf38      	it	cc
 8003f18:	2304      	movcc	r3, #4
 8003f1a:	e04f      	b.n	8003fbc <HAL_I2C_Init+0x1c4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d111      	bne.n	8003f48 <HAL_I2C_Init+0x150>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1e58      	subs	r0, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	440b      	add	r3, r1
 8003f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e012      	b.n	8003f6e <HAL_I2C_Init+0x176>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1e58      	subs	r0, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6859      	ldr	r1, [r3, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	0099      	lsls	r1, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Init+0x17e>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e022      	b.n	8003fbc <HAL_I2C_Init+0x1c4>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10e      	bne.n	8003f9c <HAL_I2C_Init+0x1a4>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1e58      	subs	r0, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	440b      	add	r3, r1
 8003f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f90:	3301      	adds	r3, #1
 8003f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9a:	e00f      	b.n	8003fbc <HAL_I2C_Init+0x1c4>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e58      	subs	r0, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	0099      	lsls	r1, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	6809      	ldr	r1, [r1, #0]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6911      	ldr	r1, [r2, #16]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68d2      	ldr	r2, [r2, #12]
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	000186a0 	.word	0x000186a0
 8004058:	001e847f 	.word	0x001e847f
 800405c:	003d08ff 	.word	0x003d08ff
 8004060:	431bde83 	.word	0x431bde83
 8004064:	10624dd3 	.word	0x10624dd3

08004068 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	d129      	bne.n	80040d2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2224      	movs	r2, #36	; 0x24
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0210 	bic.w	r2, r2, #16
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	e000      	b.n	80040d4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80040d2:	2302      	movs	r3, #2
  }
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d12a      	bne.n	8004150 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2224      	movs	r2, #36	; 0x24
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	f023 030f 	bic.w	r3, r3, #15
 8004120:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	b29a      	uxth	r2, r3
 8004126:	89fb      	ldrh	r3, [r7, #14]
 8004128:	4313      	orrs	r3, r2
 800412a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	89fa      	ldrh	r2, [r7, #14]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0bf      	b.n	80042f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc ffa0 	bl	80010cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80041a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6899      	ldr	r1, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b4a      	ldr	r3, [pc, #296]	; (80042fc <HAL_LTDC_Init+0x19c>)
 80041d4:	400b      	ands	r3, r1
 80041d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6899      	ldr	r1, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68d9      	ldr	r1, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <HAL_LTDC_Init+0x19c>)
 8004202:	400b      	ands	r3, r1
 8004204:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68d9      	ldr	r1, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6919      	ldr	r1, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b33      	ldr	r3, [pc, #204]	; (80042fc <HAL_LTDC_Init+0x19c>)
 8004230:	400b      	ands	r3, r1
 8004232:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6919      	ldr	r1, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6959      	ldr	r1, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b27      	ldr	r3, [pc, #156]	; (80042fc <HAL_LTDC_Init+0x19c>)
 800425e:	400b      	ands	r3, r1
 8004260:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6959      	ldr	r1, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80042a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0206 	orr.w	r2, r2, #6
 80042ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	f000f800 	.word	0xf000f800

08004300 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d023      	beq.n	800436a <HAL_LTDC_IRQHandler+0x6a>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01e      	beq.n	800436a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2204      	movs	r2, #4
 8004342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2204      	movs	r2, #4
 8004358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f86f 	bl	8004448 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d023      	beq.n	80043bc <HAL_LTDC_IRQHandler+0xbc>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01e      	beq.n	80043bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0202 	bic.w	r2, r2, #2
 800438c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2202      	movs	r2, #2
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800439c:	f043 0202 	orr.w	r2, r3, #2
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2204      	movs	r2, #4
 80043aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f846 	bl	8004448 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01b      	beq.n	80043fe <HAL_LTDC_IRQHandler+0xfe>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2201      	movs	r2, #1
 80043e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f82f 	bl	800445c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01b      	beq.n	8004440 <HAL_LTDC_IRQHandler+0x140>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0208 	bic.w	r2, r2, #8
 8004420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2208      	movs	r2, #8
 8004428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f818 	bl	8004470 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004484:	b5b0      	push	{r4, r5, r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_LTDC_ConfigLayer+0x1a>
 800449a:	2302      	movs	r3, #2
 800449c:	e02c      	b.n	80044f8 <HAL_LTDC_ConfigLayer+0x74>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2134      	movs	r1, #52	; 0x34
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4614      	mov	r4, r2
 80044c2:	461d      	mov	r5, r3
 80044c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f811 	bl	8004500 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bdb0      	pop	{r4, r5, r7, pc}

08004500 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	; 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	0c1b      	lsrs	r3, r3, #16
 8004518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451c:	4413      	add	r3, r2
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	01db      	lsls	r3, r3, #7
 800452c:	4413      	add	r3, r2
 800452e:	3384      	adds	r3, #132	; 0x84
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	4611      	mov	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	01d2      	lsls	r2, r2, #7
 800453c:	440a      	add	r2, r1
 800453e:	3284      	adds	r2, #132	; 0x84
 8004540:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004544:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004556:	4413      	add	r3, r2
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	440b      	add	r3, r1
 8004566:	3384      	adds	r3, #132	; 0x84
 8004568:	4619      	mov	r1, r3
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800457e:	4413      	add	r3, r2
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	01db      	lsls	r3, r3, #7
 800458e:	4413      	add	r3, r2
 8004590:	3384      	adds	r3, #132	; 0x84
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	4611      	mov	r1, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	01d2      	lsls	r2, r2, #7
 800459e:	440a      	add	r2, r1
 80045a0:	3284      	adds	r2, #132	; 0x84
 80045a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80045a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b6:	4413      	add	r3, r2
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	440b      	add	r3, r1
 80045c6:	3384      	adds	r3, #132	; 0x84
 80045c8:	4619      	mov	r1, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	01db      	lsls	r3, r3, #7
 80045da:	4413      	add	r3, r2
 80045dc:	3384      	adds	r3, #132	; 0x84
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	4611      	mov	r1, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	01d2      	lsls	r2, r2, #7
 80045ea:	440a      	add	r2, r1
 80045ec:	3284      	adds	r2, #132	; 0x84
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	01db      	lsls	r3, r3, #7
 80045fe:	4413      	add	r3, r2
 8004600:	3384      	adds	r3, #132	; 0x84
 8004602:	461a      	mov	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	061b      	lsls	r3, r3, #24
 8004624:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	01db      	lsls	r3, r3, #7
 8004630:	4413      	add	r3, r2
 8004632:	3384      	adds	r3, #132	; 0x84
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	01db      	lsls	r3, r3, #7
 8004640:	4413      	add	r3, r2
 8004642:	3384      	adds	r3, #132	; 0x84
 8004644:	461a      	mov	r2, r3
 8004646:	2300      	movs	r3, #0
 8004648:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004650:	461a      	mov	r2, r3
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	431a      	orrs	r2, r3
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	431a      	orrs	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	01db      	lsls	r3, r3, #7
 8004664:	440b      	add	r3, r1
 8004666:	3384      	adds	r3, #132	; 0x84
 8004668:	4619      	mov	r1, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	01db      	lsls	r3, r3, #7
 800467a:	4413      	add	r3, r2
 800467c:	3384      	adds	r3, #132	; 0x84
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	4611      	mov	r1, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	01d2      	lsls	r2, r2, #7
 800468a:	440a      	add	r2, r1
 800468c:	3284      	adds	r2, #132	; 0x84
 800468e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004692:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	01db      	lsls	r3, r3, #7
 800469e:	4413      	add	r3, r2
 80046a0:	3384      	adds	r3, #132	; 0x84
 80046a2:	461a      	mov	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	01db      	lsls	r3, r3, #7
 80046b4:	4413      	add	r3, r2
 80046b6:	3384      	adds	r3, #132	; 0x84
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	4611      	mov	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	01d2      	lsls	r2, r2, #7
 80046c4:	440a      	add	r2, r1
 80046c6:	3284      	adds	r2, #132	; 0x84
 80046c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046cc:	f023 0307 	bic.w	r3, r3, #7
 80046d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	6809      	ldr	r1, [r1, #0]
 80046de:	4608      	mov	r0, r1
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	01c9      	lsls	r1, r1, #7
 80046e4:	4401      	add	r1, r0
 80046e6:	3184      	adds	r1, #132	; 0x84
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	01db      	lsls	r3, r3, #7
 80046f6:	4413      	add	r3, r2
 80046f8:	3384      	adds	r3, #132	; 0x84
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	4413      	add	r3, r2
 8004708:	3384      	adds	r3, #132	; 0x84
 800470a:	461a      	mov	r2, r3
 800470c:	2300      	movs	r3, #0
 800470e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	01db      	lsls	r3, r3, #7
 800471a:	4413      	add	r3, r2
 800471c:	3384      	adds	r3, #132	; 0x84
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800472e:	2304      	movs	r3, #4
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	e01b      	b.n	800476c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d102      	bne.n	8004742 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800473c:	2303      	movs	r3, #3
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e014      	b.n	800476c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d00b      	beq.n	8004762 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800474e:	2b02      	cmp	r3, #2
 8004750:	d007      	beq.n	8004762 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004756:	2b03      	cmp	r3, #3
 8004758:	d003      	beq.n	8004762 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800475e:	2b07      	cmp	r3, #7
 8004760:	d102      	bne.n	8004768 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004762:	2302      	movs	r3, #2
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	e001      	b.n	800476c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004768:	2301      	movs	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	01db      	lsls	r3, r3, #7
 8004776:	4413      	add	r3, r2
 8004778:	3384      	adds	r3, #132	; 0x84
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	4611      	mov	r1, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	01d2      	lsls	r2, r2, #7
 8004786:	440a      	add	r2, r1
 8004788:	3284      	adds	r2, #132	; 0x84
 800478a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800478e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	041a      	lsls	r2, r3, #16
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	1acb      	subs	r3, r1, r3
 80047a6:	69f9      	ldr	r1, [r7, #28]
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	3303      	adds	r3, #3
 80047ae:	68f9      	ldr	r1, [r7, #12]
 80047b0:	6809      	ldr	r1, [r1, #0]
 80047b2:	4608      	mov	r0, r1
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	01c9      	lsls	r1, r1, #7
 80047b8:	4401      	add	r1, r0
 80047ba:	3184      	adds	r1, #132	; 0x84
 80047bc:	4313      	orrs	r3, r2
 80047be:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	01db      	lsls	r3, r3, #7
 80047ca:	4413      	add	r3, r2
 80047cc:	3384      	adds	r3, #132	; 0x84
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	4611      	mov	r1, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	01d2      	lsls	r2, r2, #7
 80047da:	440a      	add	r2, r1
 80047dc:	3284      	adds	r2, #132	; 0x84
 80047de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	01db      	lsls	r3, r3, #7
 80047f2:	4413      	add	r3, r2
 80047f4:	3384      	adds	r3, #132	; 0x84
 80047f6:	461a      	mov	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	01db      	lsls	r3, r3, #7
 8004808:	4413      	add	r3, r2
 800480a:	3384      	adds	r3, #132	; 0x84
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	4611      	mov	r1, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	01d2      	lsls	r2, r2, #7
 8004818:	440a      	add	r2, r1
 800481a:	3284      	adds	r2, #132	; 0x84
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6013      	str	r3, [r2, #0]
}
 8004822:	bf00      	nop
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e25b      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d075      	beq.n	800493a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484e:	4ba3      	ldr	r3, [pc, #652]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b04      	cmp	r3, #4
 8004858:	d00c      	beq.n	8004874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485a:	4ba0      	ldr	r3, [pc, #640]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004862:	2b08      	cmp	r3, #8
 8004864:	d112      	bne.n	800488c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4b9d      	ldr	r3, [pc, #628]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004872:	d10b      	bne.n	800488c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	4b99      	ldr	r3, [pc, #612]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d05b      	beq.n	8004938 <HAL_RCC_OscConfig+0x108>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d157      	bne.n	8004938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e236      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d106      	bne.n	80048a4 <HAL_RCC_OscConfig+0x74>
 8004896:	4b91      	ldr	r3, [pc, #580]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a90      	ldr	r2, [pc, #576]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e01d      	b.n	80048e0 <HAL_RCC_OscConfig+0xb0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x98>
 80048ae:	4b8b      	ldr	r3, [pc, #556]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a8a      	ldr	r2, [pc, #552]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a87      	ldr	r2, [pc, #540]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0xb0>
 80048c8:	4b84      	ldr	r3, [pc, #528]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a83      	ldr	r2, [pc, #524]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b81      	ldr	r3, [pc, #516]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a80      	ldr	r2, [pc, #512]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80048da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fd fada 	bl	8001ea0 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fd fad6 	bl	8001ea0 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1fb      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0xc0>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd fac6 	bl	8001ea0 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004918:	f7fd fac2 	bl	8001ea0 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1e7      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800492a:	4b6c      	ldr	r3, [pc, #432]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0xe8>
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d063      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004946:	4b65      	ldr	r3, [pc, #404]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004952:	4b62      	ldr	r3, [pc, #392]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800495a:	2b08      	cmp	r3, #8
 800495c:	d11c      	bne.n	8004998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	4b5c      	ldr	r3, [pc, #368]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_RCC_OscConfig+0x152>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e1bb      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004982:	4b56      	ldr	r3, [pc, #344]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4952      	ldr	r1, [pc, #328]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	e03a      	b.n	8004a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a0:	4b4f      	ldr	r3, [pc, #316]	; (8004ae0 <HAL_RCC_OscConfig+0x2b0>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fd fa7b 	bl	8001ea0 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ae:	f7fd fa77 	bl	8001ea0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e19c      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c0:	4b46      	ldr	r3, [pc, #280]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	4b43      	ldr	r3, [pc, #268]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4940      	ldr	r1, [pc, #256]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
 80049e0:	e015      	b.n	8004a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e2:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <HAL_RCC_OscConfig+0x2b0>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fd fa5a 	bl	8001ea0 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fd fa56 	bl	8001ea0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e17b      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a02:	4b36      	ldr	r3, [pc, #216]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d030      	beq.n	8004a7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a22:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <HAL_RCC_OscConfig+0x2b4>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fd fa3a 	bl	8001ea0 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a30:	f7fd fa36 	bl	8001ea0 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e15b      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x200>
 8004a4e:	e015      	b.n	8004a7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_OscConfig+0x2b4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a56:	f7fd fa23 	bl	8001ea0 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5e:	f7fd fa1f 	bl	8001ea0 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e144      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a0 	beq.w	8004bca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d121      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <HAL_RCC_OscConfig+0x2b8>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad2:	f7fd f9e5 	bl	8001ea0 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	e011      	b.n	8004afe <HAL_RCC_OscConfig+0x2ce>
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	42470000 	.word	0x42470000
 8004ae4:	42470e80 	.word	0x42470e80
 8004ae8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aec:	f7fd f9d8 	bl	8001ea0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0fd      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afe:	4b81      	ldr	r3, [pc, #516]	; (8004d04 <HAL_RCC_OscConfig+0x4d4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d106      	bne.n	8004b20 <HAL_RCC_OscConfig+0x2f0>
 8004b12:	4b7d      	ldr	r3, [pc, #500]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a7c      	ldr	r2, [pc, #496]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1e:	e01c      	b.n	8004b5a <HAL_RCC_OscConfig+0x32a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCC_OscConfig+0x312>
 8004b28:	4b77      	ldr	r3, [pc, #476]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a76      	ldr	r2, [pc, #472]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	4b74      	ldr	r3, [pc, #464]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a73      	ldr	r2, [pc, #460]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b40:	e00b      	b.n	8004b5a <HAL_RCC_OscConfig+0x32a>
 8004b42:	4b71      	ldr	r3, [pc, #452]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	4a70      	ldr	r2, [pc, #448]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4e:	4b6e      	ldr	r3, [pc, #440]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a6d      	ldr	r2, [pc, #436]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b54:	f023 0304 	bic.w	r3, r3, #4
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d015      	beq.n	8004b8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fd f99d 	bl	8001ea0 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fd f999 	bl	8001ea0 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0bc      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b80:	4b61      	ldr	r3, [pc, #388]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ee      	beq.n	8004b6a <HAL_RCC_OscConfig+0x33a>
 8004b8c:	e014      	b.n	8004bb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8e:	f7fd f987 	bl	8001ea0 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b94:	e00a      	b.n	8004bac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b96:	f7fd f983 	bl	8001ea0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0a6      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bac:	4b56      	ldr	r3, [pc, #344]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ee      	bne.n	8004b96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbe:	4b52      	ldr	r3, [pc, #328]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a51      	ldr	r2, [pc, #324]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8092 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bd4:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d05c      	beq.n	8004c9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d141      	bne.n	8004c6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be8:	4b48      	ldr	r3, [pc, #288]	; (8004d0c <HAL_RCC_OscConfig+0x4dc>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bee:	f7fd f957 	bl	8001ea0 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fd f953 	bl	8001ea0 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e078      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c08:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	019b      	lsls	r3, r3, #6
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	4933      	ldr	r1, [pc, #204]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c3e:	4b33      	ldr	r3, [pc, #204]	; (8004d0c <HAL_RCC_OscConfig+0x4dc>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fd f92c 	bl	8001ea0 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fd f928 	bl	8001ea0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e04d      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x41c>
 8004c6a:	e045      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6c:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <HAL_RCC_OscConfig+0x4dc>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c72:	f7fd f915 	bl	8001ea0 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fd f911 	bl	8001ea0 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e036      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8c:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x44a>
 8004c98:	e02e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e029      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca6:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <HAL_RCC_OscConfig+0x4d8>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d11c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d115      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cce:	4013      	ands	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10d      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d106      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40007000 	.word	0x40007000
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	42470060 	.word	0x42470060

08004d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0cc      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d24:	4b68      	ldr	r3, [pc, #416]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d90c      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b65      	ldr	r3, [pc, #404]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0b8      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d64:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a58      	ldr	r2, [pc, #352]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d7c:	4b53      	ldr	r3, [pc, #332]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a52      	ldr	r2, [pc, #328]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d88:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	494d      	ldr	r1, [pc, #308]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d044      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d119      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e07f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d003      	beq.n	8004dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dce:	4b3f      	ldr	r3, [pc, #252]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dde:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e067      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dee:	4b37      	ldr	r3, [pc, #220]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 0203 	bic.w	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4934      	ldr	r1, [pc, #208]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e00:	f7fd f84e 	bl	8001ea0 <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e08:	f7fd f84a 	bl	8001ea0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e04f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 020c 	and.w	r2, r3, #12
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d1eb      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d20c      	bcs.n	8004e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e032      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4916      	ldr	r1, [pc, #88]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	490e      	ldr	r1, [pc, #56]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e96:	f000 f821 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ea8:	5cd3      	ldrb	r3, [r2, r3]
 8004eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fc fc30 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023c00 	.word	0x40023c00
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	0800a5d4 	.word	0x0800a5d4
 8004ed4:	20000020 	.word	0x20000020
 8004ed8:	20000024 	.word	0x20000024

08004edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	2300      	movs	r3, #0
 8004eec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef2:	4b63      	ldr	r3, [pc, #396]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d007      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0x32>
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d008      	beq.n	8004f14 <HAL_RCC_GetSysClockFreq+0x38>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 80b4 	bne.w	8005070 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f08:	4b5e      	ldr	r3, [pc, #376]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f0a:	60bb      	str	r3, [r7, #8]
       break;
 8004f0c:	e0b3      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f0e:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f10:	60bb      	str	r3, [r7, #8]
      break;
 8004f12:	e0b0      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f14:	4b5a      	ldr	r3, [pc, #360]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f1e:	4b58      	ldr	r3, [pc, #352]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04a      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2a:	4b55      	ldr	r3, [pc, #340]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	f04f 0400 	mov.w	r4, #0
 8004f34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	ea03 0501 	and.w	r5, r3, r1
 8004f40:	ea04 0602 	and.w	r6, r4, r2
 8004f44:	4629      	mov	r1, r5
 8004f46:	4632      	mov	r2, r6
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	0154      	lsls	r4, r2, #5
 8004f52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f56:	014b      	lsls	r3, r1, #5
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	1b49      	subs	r1, r1, r5
 8004f5e:	eb62 0206 	sbc.w	r2, r2, r6
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	f04f 0400 	mov.w	r4, #0
 8004f6a:	0194      	lsls	r4, r2, #6
 8004f6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f70:	018b      	lsls	r3, r1, #6
 8004f72:	1a5b      	subs	r3, r3, r1
 8004f74:	eb64 0402 	sbc.w	r4, r4, r2
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	00e2      	lsls	r2, r4, #3
 8004f82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f86:	00d9      	lsls	r1, r3, #3
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	195b      	adds	r3, r3, r5
 8004f8e:	eb44 0406 	adc.w	r4, r4, r6
 8004f92:	f04f 0100 	mov.w	r1, #0
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	0262      	lsls	r2, r4, #9
 8004f9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004fa0:	0259      	lsls	r1, r3, #9
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	4621      	mov	r1, r4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f04f 0400 	mov.w	r4, #0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	f7fb f96c 	bl	8000290 <__aeabi_uldivmod>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e049      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc0:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	099b      	lsrs	r3, r3, #6
 8004fc6:	f04f 0400 	mov.w	r4, #0
 8004fca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	ea03 0501 	and.w	r5, r3, r1
 8004fd6:	ea04 0602 	and.w	r6, r4, r2
 8004fda:	4629      	mov	r1, r5
 8004fdc:	4632      	mov	r2, r6
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	f04f 0400 	mov.w	r4, #0
 8004fe6:	0154      	lsls	r4, r2, #5
 8004fe8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fec:	014b      	lsls	r3, r1, #5
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	1b49      	subs	r1, r1, r5
 8004ff4:	eb62 0206 	sbc.w	r2, r2, r6
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	f04f 0400 	mov.w	r4, #0
 8005000:	0194      	lsls	r4, r2, #6
 8005002:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005006:	018b      	lsls	r3, r1, #6
 8005008:	1a5b      	subs	r3, r3, r1
 800500a:	eb64 0402 	sbc.w	r4, r4, r2
 800500e:	f04f 0100 	mov.w	r1, #0
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	00e2      	lsls	r2, r4, #3
 8005018:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800501c:	00d9      	lsls	r1, r3, #3
 800501e:	460b      	mov	r3, r1
 8005020:	4614      	mov	r4, r2
 8005022:	195b      	adds	r3, r3, r5
 8005024:	eb44 0406 	adc.w	r4, r4, r6
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	02a2      	lsls	r2, r4, #10
 8005032:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005036:	0299      	lsls	r1, r3, #10
 8005038:	460b      	mov	r3, r1
 800503a:	4614      	mov	r4, r2
 800503c:	4618      	mov	r0, r3
 800503e:	4621      	mov	r1, r4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	461a      	mov	r2, r3
 8005048:	4623      	mov	r3, r4
 800504a:	f7fb f921 	bl	8000290 <__aeabi_uldivmod>
 800504e:	4603      	mov	r3, r0
 8005050:	460c      	mov	r4, r1
 8005052:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	3301      	adds	r3, #1
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	60bb      	str	r3, [r7, #8]
      break;
 800506e:	e002      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005072:	60bb      	str	r3, [r7, #8]
      break;
 8005074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005076:	68bb      	ldr	r3, [r7, #8]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005080:	40023800 	.word	0x40023800
 8005084:	00f42400 	.word	0x00f42400
 8005088:	007a1200 	.word	0x007a1200

0800508c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	20000020 	.word	0x20000020

080050a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a8:	f7ff fff0 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050ac:	4601      	mov	r1, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0a9b      	lsrs	r3, r3, #10
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4a03      	ldr	r2, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ba:	5cd3      	ldrb	r3, [r2, r3]
 80050bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	0800a5e4 	.word	0x0800a5e4

080050cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050d0:	f7ff ffdc 	bl	800508c <HAL_RCC_GetHCLKFreq>
 80050d4:	4601      	mov	r1, r0
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	0b5b      	lsrs	r3, r3, #13
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	4a03      	ldr	r2, [pc, #12]	; (80050f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800a5e4 	.word	0x0800a5e4

080050f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	220f      	movs	r2, #15
 8005102:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_RCC_GetClockConfig+0x5c>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0203 	and.w	r2, r3, #3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005110:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <HAL_RCC_GetClockConfig+0x5c>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_RCC_GetClockConfig+0x5c>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_RCC_GetClockConfig+0x5c>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005136:	4b07      	ldr	r3, [pc, #28]	; (8005154 <HAL_RCC_GetClockConfig+0x60>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 020f 	and.w	r2, r3, #15
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	601a      	str	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800
 8005154:	40023c00 	.word	0x40023c00

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005188:	2b00      	cmp	r3, #0
 800518a:	d075      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800518c:	4bad      	ldr	r3, [pc, #692]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005192:	f7fc fe85 	bl	8001ea0 <HAL_GetTick>
 8005196:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800519a:	f7fc fe81 	bl	8001ea0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e18b      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ac:	4ba6      	ldr	r3, [pc, #664]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	019a      	lsls	r2, r3, #6
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	071b      	lsls	r3, r3, #28
 80051d0:	499d      	ldr	r1, [pc, #628]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01f      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051e4:	4b98      	ldr	r3, [pc, #608]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ea:	0f1b      	lsrs	r3, r3, #28
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	019a      	lsls	r2, r3, #6
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	431a      	orrs	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	071b      	lsls	r3, r3, #28
 8005204:	4990      	ldr	r1, [pc, #576]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800520c:	4b8e      	ldr	r3, [pc, #568]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800520e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005212:	f023 021f 	bic.w	r2, r3, #31
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	3b01      	subs	r3, #1
 800521c:	498a      	ldr	r1, [pc, #552]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00d      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	019a      	lsls	r2, r3, #6
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	061b      	lsls	r3, r3, #24
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	071b      	lsls	r3, r3, #28
 8005244:	4980      	ldr	r1, [pc, #512]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800524c:	4b7d      	ldr	r3, [pc, #500]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005252:	f7fc fe25 	bl	8001ea0 <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800525a:	f7fc fe21 	bl	8001ea0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e12b      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800526c:	4b76      	ldr	r3, [pc, #472]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800528c:	2b00      	cmp	r3, #0
 800528e:	d079      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005290:	4b6e      	ldr	r3, [pc, #440]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005296:	f7fc fe03 	bl	8001ea0 <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800529e:	f7fc fdff 	bl	8001ea0 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e109      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052b0:	4b65      	ldr	r3, [pc, #404]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052bc:	d0ef      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d020      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052ca:	4b5f      	ldr	r3, [pc, #380]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d0:	0f1b      	lsrs	r3, r3, #28
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	019a      	lsls	r2, r3, #6
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	431a      	orrs	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	071b      	lsls	r3, r3, #28
 80052ea:	4957      	ldr	r1, [pc, #348]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052f2:	4b55      	ldr	r3, [pc, #340]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	3b01      	subs	r3, #1
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	4950      	ldr	r1, [pc, #320]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01e      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005318:	4b4b      	ldr	r3, [pc, #300]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	0e1b      	lsrs	r3, r3, #24
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	019a      	lsls	r2, r3, #6
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	071b      	lsls	r3, r3, #28
 8005338:	4943      	ldr	r1, [pc, #268]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005340:	4b41      	ldr	r3, [pc, #260]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005346:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	493e      	ldr	r1, [pc, #248]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005356:	4b3d      	ldr	r3, [pc, #244]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005358:	2201      	movs	r2, #1
 800535a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800535c:	f7fc fda0 	bl	8001ea0 <HAL_GetTick>
 8005360:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005364:	f7fc fd9c 	bl	8001ea0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0a6      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005376:	4b34      	ldr	r3, [pc, #208]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005382:	d1ef      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 808d 	beq.w	80054ac <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b2c      	ldr	r3, [pc, #176]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	4a2b      	ldr	r2, [pc, #172]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6413      	str	r3, [r2, #64]	; 0x40
 80053a2:	4b29      	ldr	r3, [pc, #164]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053ae:	4b28      	ldr	r3, [pc, #160]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a27      	ldr	r2, [pc, #156]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053ba:	f7fc fd71 	bl	8001ea0 <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7fc fd6d 	bl	8001ea0 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e077      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053d4:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053e0:	4b19      	ldr	r3, [pc, #100]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d039      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d032      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053fe:	4b12      	ldr	r3, [pc, #72]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005408:	4b12      	ldr	r3, [pc, #72]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800540e:	4b11      	ldr	r3, [pc, #68]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005414:	4a0c      	ldr	r2, [pc, #48]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b01      	cmp	r3, #1
 8005424:	d11e      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005426:	f7fc fd3b 	bl	8001ea0 <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542c:	e014      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542e:	f7fc fd37 	bl	8001ea0 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	4293      	cmp	r3, r2
 800543e:	d90b      	bls.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e03f      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005444:	42470068 	.word	0x42470068
 8005448:	40023800 	.word	0x40023800
 800544c:	42470070 	.word	0x42470070
 8005450:	40007000 	.word	0x40007000
 8005454:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005458:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0e4      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005470:	d10d      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005472:	4b16      	ldr	r3, [pc, #88]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005486:	4911      	ldr	r1, [pc, #68]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005488:	4313      	orrs	r3, r2
 800548a:	608b      	str	r3, [r1, #8]
 800548c:	e005      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800548e:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	4a0e      	ldr	r2, [pc, #56]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005494:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005498:	6093      	str	r3, [r2, #8]
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800549c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a6:	4909      	ldr	r1, [pc, #36]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d004      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80054be:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40023800 	.word	0x40023800
 80054d0:	424711e0 	.word	0x424711e0

080054d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e025      	b.n	8005534 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fb fb4d 	bl	8000b9c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f001 fbb7 	bl	8006c88 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	461a      	mov	r2, r3
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	f001 fc22 	bl	8006d6e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e056      	b.n	80055fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fc f863 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005584:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	ea42 0103 	orr.w	r1, r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	0c1b      	lsrs	r3, r3, #16
 80055cc:	f003 0104 	and.w	r1, r3, #4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e01d      	b.n	8005652 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc fa98 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4610      	mov	r0, r2
 8005644:	f000 fa14 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0201 	orr.w	r2, r2, #1
 8005670:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b06      	cmp	r3, #6
 8005682:	d007      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d122      	bne.n	80056fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d11b      	bne.n	80056fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0202 	mvn.w	r2, #2
 80056ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f9a5 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80056ea:	e005      	b.n	80056f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f997 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9a8 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b04      	cmp	r3, #4
 800570a:	d122      	bne.n	8005752 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b04      	cmp	r3, #4
 8005718:	d11b      	bne.n	8005752 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f06f 0204 	mvn.w	r2, #4
 8005722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f97b 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 800573e:	e005      	b.n	800574c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f96d 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f97e 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b08      	cmp	r3, #8
 800575e:	d122      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b08      	cmp	r3, #8
 800576c:	d11b      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0208 	mvn.w	r2, #8
 8005776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2204      	movs	r2, #4
 800577c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f951 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005792:	e005      	b.n	80057a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f943 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f954 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d122      	bne.n	80057fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d11b      	bne.n	80057fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0210 	mvn.w	r2, #16
 80057ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2208      	movs	r2, #8
 80057d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f927 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80057e6:	e005      	b.n	80057f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f919 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f92a 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d10e      	bne.n	8005826 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d107      	bne.n	8005826 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0201 	mvn.w	r2, #1
 800581e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fb feb7 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005830:	2b80      	cmp	r3, #128	; 0x80
 8005832:	d10e      	bne.n	8005852 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b80      	cmp	r3, #128	; 0x80
 8005840:	d107      	bne.n	8005852 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800584a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 facf 	bl	8005df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585c:	2b40      	cmp	r3, #64	; 0x40
 800585e:	d10e      	bne.n	800587e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d107      	bne.n	800587e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f8ef 	bl	8005a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b20      	cmp	r3, #32
 800588a:	d10e      	bne.n	80058aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b20      	cmp	r3, #32
 8005898:	d107      	bne.n	80058aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f06f 0220 	mvn.w	r2, #32
 80058a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa99 	bl	8005ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_ConfigClockSource+0x18>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0a6      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x166>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d067      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x120>
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d80b      	bhi.n	800591e <HAL_TIM_ConfigClockSource+0x6c>
 8005906:	2b10      	cmp	r3, #16
 8005908:	d073      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x140>
 800590a:	2b10      	cmp	r3, #16
 800590c:	d802      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x62>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d06f      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005912:	e078      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005914:	2b20      	cmp	r3, #32
 8005916:	d06c      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x140>
 8005918:	2b30      	cmp	r3, #48	; 0x30
 800591a:	d06a      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800591c:	e073      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800591e:	2b70      	cmp	r3, #112	; 0x70
 8005920:	d00d      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x8c>
 8005922:	2b70      	cmp	r3, #112	; 0x70
 8005924:	d804      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x7e>
 8005926:	2b50      	cmp	r3, #80	; 0x50
 8005928:	d033      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0xe0>
 800592a:	2b60      	cmp	r3, #96	; 0x60
 800592c:	d041      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800592e:	e06a      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d066      	beq.n	8005a04 <HAL_TIM_ConfigClockSource+0x152>
 8005936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593a:	d017      	beq.n	800596c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800593c:	e063      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6899      	ldr	r1, [r3, #8]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f000 f9a9 	bl	8005ca4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005960:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	609a      	str	r2, [r3, #8]
      break;
 800596a:	e04c      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	6899      	ldr	r1, [r3, #8]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f000 f992 	bl	8005ca4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800598e:	609a      	str	r2, [r3, #8]
      break;
 8005990:	e039      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6859      	ldr	r1, [r3, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	461a      	mov	r2, r3
 80059a0:	f000 f906 	bl	8005bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2150      	movs	r1, #80	; 0x50
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 f95f 	bl	8005c6e <TIM_ITRx_SetConfig>
      break;
 80059b0:	e029      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6859      	ldr	r1, [r3, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	461a      	mov	r2, r3
 80059c0:	f000 f925 	bl	8005c0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2160      	movs	r1, #96	; 0x60
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f94f 	bl	8005c6e <TIM_ITRx_SetConfig>
      break;
 80059d0:	e019      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	461a      	mov	r2, r3
 80059e0:	f000 f8e6 	bl	8005bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2140      	movs	r1, #64	; 0x40
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 f93f 	bl	8005c6e <TIM_ITRx_SetConfig>
      break;
 80059f0:	e009      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f000 f936 	bl	8005c6e <TIM_ITRx_SetConfig>
      break;
 8005a02:	e000      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005a04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a40      	ldr	r2, [pc, #256]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3d      	ldr	r2, [pc, #244]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3c      	ldr	r2, [pc, #240]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3b      	ldr	r2, [pc, #236]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3a      	ldr	r2, [pc, #232]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d108      	bne.n	8005ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2f      	ldr	r2, [pc, #188]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d02b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d027      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d023      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2b      	ldr	r2, [pc, #172]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01f      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a29      	ldr	r2, [pc, #164]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d017      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <TIM_Base_SetConfig+0x134>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a24      	ldr	r2, [pc, #144]	; (8005ba8 <TIM_Base_SetConfig+0x138>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a23      	ldr	r2, [pc, #140]	; (8005bac <TIM_Base_SetConfig+0x13c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d108      	bne.n	8005b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d103      	bne.n	8005b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	615a      	str	r2, [r3, #20]
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40010400 	.word	0x40010400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800
 8005ba4:	40001800 	.word	0x40001800
 8005ba8:	40001c00 	.word	0x40001c00
 8005bac:	40002000 	.word	0x40002000

08005bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0201 	bic.w	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f023 030a 	bic.w	r3, r3, #10
 8005bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b087      	sub	sp, #28
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0210 	bic.w	r2, r3, #16
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	031b      	lsls	r3, r3, #12
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b085      	sub	sp, #20
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f043 0307 	orr.w	r3, r3, #7
 8005c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	609a      	str	r2, [r3, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	609a      	str	r2, [r3, #8]
}
 8005cd8:	bf00      	nop
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e05a      	b.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d01d      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1a      	ldr	r2, [pc, #104]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10c      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40001800 	.word	0x40001800

08005ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e03f      	b.n	8005e96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fb fefe 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2224      	movs	r2, #36	; 0x24
 8005e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fba1 	bl	8006590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695a      	ldr	r2, [r3, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b088      	sub	sp, #32
 8005ea2:	af02      	add	r7, sp, #8
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	f040 8083 	bne.w	8005fc6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_UART_Transmit+0x2e>
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e07b      	b.n	8005fc8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Transmit+0x40>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e074      	b.n	8005fc8 <HAL_UART_Transmit+0x12a>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2221      	movs	r2, #33	; 0x21
 8005ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ef4:	f7fb ffd4 	bl	8001ea0 <HAL_GetTick>
 8005ef8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	88fa      	ldrh	r2, [r7, #6]
 8005efe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	88fa      	ldrh	r2, [r7, #6]
 8005f04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005f0e:	e042      	b.n	8005f96 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f26:	d122      	bne.n	8005f6e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2180      	movs	r1, #128	; 0x80
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f9c0 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e042      	b.n	8005fc8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d103      	bne.n	8005f66 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	3302      	adds	r3, #2
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	e017      	b.n	8005f96 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	e013      	b.n	8005f96 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2200      	movs	r2, #0
 8005f76:	2180      	movs	r1, #128	; 0x80
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f99d 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e01f      	b.n	8005fc8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	60ba      	str	r2, [r7, #8]
 8005f8e:	781a      	ldrb	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1b7      	bne.n	8005f10 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2140      	movs	r1, #64	; 0x40
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f984 	bl	80062b8 <UART_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e006      	b.n	8005fc8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e000      	b.n	8005fc8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005fc6:	2302      	movs	r3, #2
  }
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d140      	bne.n	800606c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_UART_Receive_IT+0x26>
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e039      	b.n	800606e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_UART_Receive_IT+0x38>
 8006004:	2302      	movs	r3, #2
 8006006:	e032      	b.n	800606e <HAL_UART_Receive_IT+0x9e>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	88fa      	ldrh	r2, [r7, #6]
 800601a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2222      	movs	r2, #34	; 0x22
 800602c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006046:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0220 	orr.w	r2, r2, #32
 8006066:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10d      	bne.n	80060ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <HAL_UART_IRQHandler+0x52>
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9e0 	bl	800648c <UART_Receive_IT>
      return;
 80060cc:	e0d1      	b.n	8006272 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80b0 	beq.w	8006236 <HAL_UART_IRQHandler+0x1ba>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <HAL_UART_IRQHandler+0x70>
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80a5 	beq.w	8006236 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <HAL_UART_IRQHandler+0x90>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	f043 0201 	orr.w	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_UART_IRQHandler+0xb0>
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	f043 0202 	orr.w	r2, r3, #2
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_UART_IRQHandler+0xd0>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006144:	f043 0204 	orr.w	r2, r3, #4
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00f      	beq.n	8006176 <HAL_UART_IRQHandler+0xfa>
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <HAL_UART_IRQHandler+0xee>
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616e:	f043 0208 	orr.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d078      	beq.n	8006270 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <HAL_UART_IRQHandler+0x11c>
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f97a 	bl	800648c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	bf0c      	ite	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	2300      	movne	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <HAL_UART_IRQHandler+0x144>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d031      	beq.n	8006224 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f8c3 	bl	800634c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d123      	bne.n	800621c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f0:	4a21      	ldr	r2, [pc, #132]	; (8006278 <HAL_UART_IRQHandler+0x1fc>)
 80061f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fb ff7d 	bl	80020f8 <HAL_DMA_Abort_IT>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d016      	beq.n	8006232 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800620e:	4610      	mov	r0, r2
 8006210:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006212:	e00e      	b.n	8006232 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f845 	bl	80062a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621a:	e00a      	b.n	8006232 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f841 	bl	80062a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006222:	e006      	b.n	8006232 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f83d 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006230:	e01e      	b.n	8006270 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006232:	bf00      	nop
    return;
 8006234:	e01c      	b.n	8006270 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623c:	2b00      	cmp	r3, #0
 800623e:	d008      	beq.n	8006252 <HAL_UART_IRQHandler+0x1d6>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f8b0 	bl	80063b0 <UART_Transmit_IT>
    return;
 8006250:	e00f      	b.n	8006272 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_UART_IRQHandler+0x1f6>
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f8f8 	bl	800645c <UART_EndTransmit_IT>
    return;
 800626c:	bf00      	nop
 800626e:	e000      	b.n	8006272 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006270:	bf00      	nop
  }
}
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	08006389 	.word	0x08006389

0800627c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c8:	e02c      	b.n	8006324 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d028      	beq.n	8006324 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062d8:	f7fb fde2 	bl	8001ea0 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d21d      	bcs.n	8006324 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e00f      	b.n	8006344 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4013      	ands	r3, r2
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	429a      	cmp	r2, r3
 8006332:	bf0c      	ite	eq
 8006334:	2301      	moveq	r3, #1
 8006336:	2300      	movne	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	429a      	cmp	r2, r3
 8006340:	d0c3      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006362:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695a      	ldr	r2, [r3, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff ff7e 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b21      	cmp	r3, #33	; 0x21
 80063c2:	d144      	bne.n	800644e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063cc:	d11a      	bne.n	8006404 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	1c9a      	adds	r2, r3, #2
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	621a      	str	r2, [r3, #32]
 80063f6:	e00e      	b.n	8006416 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]
 8006402:	e008      	b.n	8006416 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	1c59      	adds	r1, r3, #1
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6211      	str	r1, [r2, #32]
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29b      	uxth	r3, r3
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	4619      	mov	r1, r3
 8006424:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10f      	bne.n	800644a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006438:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006448:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e000      	b.n	8006450 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800644e:	2302      	movs	r3, #2
  }
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006472:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fefd 	bl	800627c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b22      	cmp	r3, #34	; 0x22
 800649e:	d171      	bne.n	8006584 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a8:	d123      	bne.n	80064f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10e      	bne.n	80064d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	1c9a      	adds	r2, r3, #2
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28
 80064d4:	e029      	b.n	800652a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	629a      	str	r2, [r3, #40]	; 0x28
 80064f0:	e01b      	b.n	800652a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6858      	ldr	r0, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	1c59      	adds	r1, r3, #1
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6291      	str	r1, [r2, #40]	; 0x28
 800650a:	b2c2      	uxtb	r2, r0
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e00c      	b.n	800652a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	1c58      	adds	r0, r3, #1
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	6288      	str	r0, [r1, #40]	; 0x28
 8006522:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29b      	uxth	r3, r3
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	4619      	mov	r1, r3
 8006538:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800653a:	2b00      	cmp	r3, #0
 800653c:	d120      	bne.n	8006580 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0220 	bic.w	r2, r2, #32
 800654c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800655c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0201 	bic.w	r2, r2, #1
 800656c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fe8a 	bl	8006290 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e002      	b.n	8006586 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	e000      	b.n	8006586 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006584:	2302      	movs	r3, #2
  }
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80065d2:	f023 030c 	bic.w	r3, r3, #12
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6812      	ldr	r2, [r2, #0]
 80065da:	68f9      	ldr	r1, [r7, #12]
 80065dc:	430b      	orrs	r3, r1
 80065de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fe:	f040 818b 	bne.w	8006918 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4ac1      	ldr	r2, [pc, #772]	; (800690c <UART_SetConfig+0x37c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d005      	beq.n	8006618 <UART_SetConfig+0x88>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4abf      	ldr	r2, [pc, #764]	; (8006910 <UART_SetConfig+0x380>)
 8006612:	4293      	cmp	r3, r2
 8006614:	f040 80bd 	bne.w	8006792 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7fe fd58 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 800661c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	461d      	mov	r5, r3
 8006622:	f04f 0600 	mov.w	r6, #0
 8006626:	46a8      	mov	r8, r5
 8006628:	46b1      	mov	r9, r6
 800662a:	eb18 0308 	adds.w	r3, r8, r8
 800662e:	eb49 0409 	adc.w	r4, r9, r9
 8006632:	4698      	mov	r8, r3
 8006634:	46a1      	mov	r9, r4
 8006636:	eb18 0805 	adds.w	r8, r8, r5
 800663a:	eb49 0906 	adc.w	r9, r9, r6
 800663e:	f04f 0100 	mov.w	r1, #0
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800664a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800664e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006652:	4688      	mov	r8, r1
 8006654:	4691      	mov	r9, r2
 8006656:	eb18 0005 	adds.w	r0, r8, r5
 800665a:	eb49 0106 	adc.w	r1, r9, r6
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	461d      	mov	r5, r3
 8006664:	f04f 0600 	mov.w	r6, #0
 8006668:	196b      	adds	r3, r5, r5
 800666a:	eb46 0406 	adc.w	r4, r6, r6
 800666e:	461a      	mov	r2, r3
 8006670:	4623      	mov	r3, r4
 8006672:	f7f9 fe0d 	bl	8000290 <__aeabi_uldivmod>
 8006676:	4603      	mov	r3, r0
 8006678:	460c      	mov	r4, r1
 800667a:	461a      	mov	r2, r3
 800667c:	4ba5      	ldr	r3, [pc, #660]	; (8006914 <UART_SetConfig+0x384>)
 800667e:	fba3 2302 	umull	r2, r3, r3, r2
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	461d      	mov	r5, r3
 800668c:	f04f 0600 	mov.w	r6, #0
 8006690:	46a9      	mov	r9, r5
 8006692:	46b2      	mov	sl, r6
 8006694:	eb19 0309 	adds.w	r3, r9, r9
 8006698:	eb4a 040a 	adc.w	r4, sl, sl
 800669c:	4699      	mov	r9, r3
 800669e:	46a2      	mov	sl, r4
 80066a0:	eb19 0905 	adds.w	r9, r9, r5
 80066a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80066a8:	f04f 0100 	mov.w	r1, #0
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066bc:	4689      	mov	r9, r1
 80066be:	4692      	mov	sl, r2
 80066c0:	eb19 0005 	adds.w	r0, r9, r5
 80066c4:	eb4a 0106 	adc.w	r1, sl, r6
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	461d      	mov	r5, r3
 80066ce:	f04f 0600 	mov.w	r6, #0
 80066d2:	196b      	adds	r3, r5, r5
 80066d4:	eb46 0406 	adc.w	r4, r6, r6
 80066d8:	461a      	mov	r2, r3
 80066da:	4623      	mov	r3, r4
 80066dc:	f7f9 fdd8 	bl	8000290 <__aeabi_uldivmod>
 80066e0:	4603      	mov	r3, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b8b      	ldr	r3, [pc, #556]	; (8006914 <UART_SetConfig+0x384>)
 80066e8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	2164      	movs	r1, #100	; 0x64
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	3332      	adds	r3, #50	; 0x32
 80066fa:	4a86      	ldr	r2, [pc, #536]	; (8006914 <UART_SetConfig+0x384>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006708:	4498      	add	r8, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	461d      	mov	r5, r3
 800670e:	f04f 0600 	mov.w	r6, #0
 8006712:	46a9      	mov	r9, r5
 8006714:	46b2      	mov	sl, r6
 8006716:	eb19 0309 	adds.w	r3, r9, r9
 800671a:	eb4a 040a 	adc.w	r4, sl, sl
 800671e:	4699      	mov	r9, r3
 8006720:	46a2      	mov	sl, r4
 8006722:	eb19 0905 	adds.w	r9, r9, r5
 8006726:	eb4a 0a06 	adc.w	sl, sl, r6
 800672a:	f04f 0100 	mov.w	r1, #0
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006736:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800673a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800673e:	4689      	mov	r9, r1
 8006740:	4692      	mov	sl, r2
 8006742:	eb19 0005 	adds.w	r0, r9, r5
 8006746:	eb4a 0106 	adc.w	r1, sl, r6
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	461d      	mov	r5, r3
 8006750:	f04f 0600 	mov.w	r6, #0
 8006754:	196b      	adds	r3, r5, r5
 8006756:	eb46 0406 	adc.w	r4, r6, r6
 800675a:	461a      	mov	r2, r3
 800675c:	4623      	mov	r3, r4
 800675e:	f7f9 fd97 	bl	8000290 <__aeabi_uldivmod>
 8006762:	4603      	mov	r3, r0
 8006764:	460c      	mov	r4, r1
 8006766:	461a      	mov	r2, r3
 8006768:	4b6a      	ldr	r3, [pc, #424]	; (8006914 <UART_SetConfig+0x384>)
 800676a:	fba3 1302 	umull	r1, r3, r3, r2
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	2164      	movs	r1, #100	; 0x64
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	3332      	adds	r3, #50	; 0x32
 800677c:	4a65      	ldr	r2, [pc, #404]	; (8006914 <UART_SetConfig+0x384>)
 800677e:	fba2 2303 	umull	r2, r3, r2, r3
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	f003 0207 	and.w	r2, r3, #7
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4442      	add	r2, r8
 800678e:	609a      	str	r2, [r3, #8]
 8006790:	e26f      	b.n	8006c72 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006792:	f7fe fc87 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8006796:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	461d      	mov	r5, r3
 800679c:	f04f 0600 	mov.w	r6, #0
 80067a0:	46a8      	mov	r8, r5
 80067a2:	46b1      	mov	r9, r6
 80067a4:	eb18 0308 	adds.w	r3, r8, r8
 80067a8:	eb49 0409 	adc.w	r4, r9, r9
 80067ac:	4698      	mov	r8, r3
 80067ae:	46a1      	mov	r9, r4
 80067b0:	eb18 0805 	adds.w	r8, r8, r5
 80067b4:	eb49 0906 	adc.w	r9, r9, r6
 80067b8:	f04f 0100 	mov.w	r1, #0
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067cc:	4688      	mov	r8, r1
 80067ce:	4691      	mov	r9, r2
 80067d0:	eb18 0005 	adds.w	r0, r8, r5
 80067d4:	eb49 0106 	adc.w	r1, r9, r6
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	461d      	mov	r5, r3
 80067de:	f04f 0600 	mov.w	r6, #0
 80067e2:	196b      	adds	r3, r5, r5
 80067e4:	eb46 0406 	adc.w	r4, r6, r6
 80067e8:	461a      	mov	r2, r3
 80067ea:	4623      	mov	r3, r4
 80067ec:	f7f9 fd50 	bl	8000290 <__aeabi_uldivmod>
 80067f0:	4603      	mov	r3, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	461a      	mov	r2, r3
 80067f6:	4b47      	ldr	r3, [pc, #284]	; (8006914 <UART_SetConfig+0x384>)
 80067f8:	fba3 2302 	umull	r2, r3, r3, r2
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	461d      	mov	r5, r3
 8006806:	f04f 0600 	mov.w	r6, #0
 800680a:	46a9      	mov	r9, r5
 800680c:	46b2      	mov	sl, r6
 800680e:	eb19 0309 	adds.w	r3, r9, r9
 8006812:	eb4a 040a 	adc.w	r4, sl, sl
 8006816:	4699      	mov	r9, r3
 8006818:	46a2      	mov	sl, r4
 800681a:	eb19 0905 	adds.w	r9, r9, r5
 800681e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006822:	f04f 0100 	mov.w	r1, #0
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006832:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006836:	4689      	mov	r9, r1
 8006838:	4692      	mov	sl, r2
 800683a:	eb19 0005 	adds.w	r0, r9, r5
 800683e:	eb4a 0106 	adc.w	r1, sl, r6
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	461d      	mov	r5, r3
 8006848:	f04f 0600 	mov.w	r6, #0
 800684c:	196b      	adds	r3, r5, r5
 800684e:	eb46 0406 	adc.w	r4, r6, r6
 8006852:	461a      	mov	r2, r3
 8006854:	4623      	mov	r3, r4
 8006856:	f7f9 fd1b 	bl	8000290 <__aeabi_uldivmod>
 800685a:	4603      	mov	r3, r0
 800685c:	460c      	mov	r4, r1
 800685e:	461a      	mov	r2, r3
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <UART_SetConfig+0x384>)
 8006862:	fba3 1302 	umull	r1, r3, r3, r2
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	2164      	movs	r1, #100	; 0x64
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	3332      	adds	r3, #50	; 0x32
 8006874:	4a27      	ldr	r2, [pc, #156]	; (8006914 <UART_SetConfig+0x384>)
 8006876:	fba2 2303 	umull	r2, r3, r2, r3
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006882:	4498      	add	r8, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	461d      	mov	r5, r3
 8006888:	f04f 0600 	mov.w	r6, #0
 800688c:	46a9      	mov	r9, r5
 800688e:	46b2      	mov	sl, r6
 8006890:	eb19 0309 	adds.w	r3, r9, r9
 8006894:	eb4a 040a 	adc.w	r4, sl, sl
 8006898:	4699      	mov	r9, r3
 800689a:	46a2      	mov	sl, r4
 800689c:	eb19 0905 	adds.w	r9, r9, r5
 80068a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80068a4:	f04f 0100 	mov.w	r1, #0
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068b8:	4689      	mov	r9, r1
 80068ba:	4692      	mov	sl, r2
 80068bc:	eb19 0005 	adds.w	r0, r9, r5
 80068c0:	eb4a 0106 	adc.w	r1, sl, r6
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	461d      	mov	r5, r3
 80068ca:	f04f 0600 	mov.w	r6, #0
 80068ce:	196b      	adds	r3, r5, r5
 80068d0:	eb46 0406 	adc.w	r4, r6, r6
 80068d4:	461a      	mov	r2, r3
 80068d6:	4623      	mov	r3, r4
 80068d8:	f7f9 fcda 	bl	8000290 <__aeabi_uldivmod>
 80068dc:	4603      	mov	r3, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <UART_SetConfig+0x384>)
 80068e4:	fba3 1302 	umull	r1, r3, r3, r2
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	2164      	movs	r1, #100	; 0x64
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	3332      	adds	r3, #50	; 0x32
 80068f6:	4a07      	ldr	r2, [pc, #28]	; (8006914 <UART_SetConfig+0x384>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	f003 0207 	and.w	r2, r3, #7
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4442      	add	r2, r8
 8006908:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800690a:	e1b2      	b.n	8006c72 <UART_SetConfig+0x6e2>
 800690c:	40011000 	.word	0x40011000
 8006910:	40011400 	.word	0x40011400
 8006914:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4ad7      	ldr	r2, [pc, #860]	; (8006c7c <UART_SetConfig+0x6ec>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d005      	beq.n	800692e <UART_SetConfig+0x39e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4ad6      	ldr	r2, [pc, #856]	; (8006c80 <UART_SetConfig+0x6f0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	f040 80d1 	bne.w	8006ad0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800692e:	f7fe fbcd 	bl	80050cc <HAL_RCC_GetPCLK2Freq>
 8006932:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	469a      	mov	sl, r3
 8006938:	f04f 0b00 	mov.w	fp, #0
 800693c:	46d0      	mov	r8, sl
 800693e:	46d9      	mov	r9, fp
 8006940:	eb18 0308 	adds.w	r3, r8, r8
 8006944:	eb49 0409 	adc.w	r4, r9, r9
 8006948:	4698      	mov	r8, r3
 800694a:	46a1      	mov	r9, r4
 800694c:	eb18 080a 	adds.w	r8, r8, sl
 8006950:	eb49 090b 	adc.w	r9, r9, fp
 8006954:	f04f 0100 	mov.w	r1, #0
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006960:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006964:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006968:	4688      	mov	r8, r1
 800696a:	4691      	mov	r9, r2
 800696c:	eb1a 0508 	adds.w	r5, sl, r8
 8006970:	eb4b 0609 	adc.w	r6, fp, r9
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4619      	mov	r1, r3
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	f04f 0400 	mov.w	r4, #0
 8006986:	0094      	lsls	r4, r2, #2
 8006988:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800698c:	008b      	lsls	r3, r1, #2
 800698e:	461a      	mov	r2, r3
 8006990:	4623      	mov	r3, r4
 8006992:	4628      	mov	r0, r5
 8006994:	4631      	mov	r1, r6
 8006996:	f7f9 fc7b 	bl	8000290 <__aeabi_uldivmod>
 800699a:	4603      	mov	r3, r0
 800699c:	460c      	mov	r4, r1
 800699e:	461a      	mov	r2, r3
 80069a0:	4bb8      	ldr	r3, [pc, #736]	; (8006c84 <UART_SetConfig+0x6f4>)
 80069a2:	fba3 2302 	umull	r2, r3, r3, r2
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	469b      	mov	fp, r3
 80069b0:	f04f 0c00 	mov.w	ip, #0
 80069b4:	46d9      	mov	r9, fp
 80069b6:	46e2      	mov	sl, ip
 80069b8:	eb19 0309 	adds.w	r3, r9, r9
 80069bc:	eb4a 040a 	adc.w	r4, sl, sl
 80069c0:	4699      	mov	r9, r3
 80069c2:	46a2      	mov	sl, r4
 80069c4:	eb19 090b 	adds.w	r9, r9, fp
 80069c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069cc:	f04f 0100 	mov.w	r1, #0
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069e0:	4689      	mov	r9, r1
 80069e2:	4692      	mov	sl, r2
 80069e4:	eb1b 0509 	adds.w	r5, fp, r9
 80069e8:	eb4c 060a 	adc.w	r6, ip, sl
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4619      	mov	r1, r3
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	f04f 0400 	mov.w	r4, #0
 80069fe:	0094      	lsls	r4, r2, #2
 8006a00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a04:	008b      	lsls	r3, r1, #2
 8006a06:	461a      	mov	r2, r3
 8006a08:	4623      	mov	r3, r4
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	f7f9 fc3f 	bl	8000290 <__aeabi_uldivmod>
 8006a12:	4603      	mov	r3, r0
 8006a14:	460c      	mov	r4, r1
 8006a16:	461a      	mov	r2, r3
 8006a18:	4b9a      	ldr	r3, [pc, #616]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	2164      	movs	r1, #100	; 0x64
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	3332      	adds	r3, #50	; 0x32
 8006a2c:	4a95      	ldr	r2, [pc, #596]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a38:	4498      	add	r8, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	469b      	mov	fp, r3
 8006a3e:	f04f 0c00 	mov.w	ip, #0
 8006a42:	46d9      	mov	r9, fp
 8006a44:	46e2      	mov	sl, ip
 8006a46:	eb19 0309 	adds.w	r3, r9, r9
 8006a4a:	eb4a 040a 	adc.w	r4, sl, sl
 8006a4e:	4699      	mov	r9, r3
 8006a50:	46a2      	mov	sl, r4
 8006a52:	eb19 090b 	adds.w	r9, r9, fp
 8006a56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a5a:	f04f 0100 	mov.w	r1, #0
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a6e:	4689      	mov	r9, r1
 8006a70:	4692      	mov	sl, r2
 8006a72:	eb1b 0509 	adds.w	r5, fp, r9
 8006a76:	eb4c 060a 	adc.w	r6, ip, sl
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	f04f 0400 	mov.w	r4, #0
 8006a8c:	0094      	lsls	r4, r2, #2
 8006a8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a92:	008b      	lsls	r3, r1, #2
 8006a94:	461a      	mov	r2, r3
 8006a96:	4623      	mov	r3, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	f7f9 fbf8 	bl	8000290 <__aeabi_uldivmod>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4b77      	ldr	r3, [pc, #476]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	2164      	movs	r1, #100	; 0x64
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	3332      	adds	r3, #50	; 0x32
 8006aba:	4a72      	ldr	r2, [pc, #456]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006abc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4442      	add	r2, r8
 8006acc:	609a      	str	r2, [r3, #8]
 8006ace:	e0d0      	b.n	8006c72 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ad0:	f7fe fae8 	bl	80050a4 <HAL_RCC_GetPCLK1Freq>
 8006ad4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	469a      	mov	sl, r3
 8006ada:	f04f 0b00 	mov.w	fp, #0
 8006ade:	46d0      	mov	r8, sl
 8006ae0:	46d9      	mov	r9, fp
 8006ae2:	eb18 0308 	adds.w	r3, r8, r8
 8006ae6:	eb49 0409 	adc.w	r4, r9, r9
 8006aea:	4698      	mov	r8, r3
 8006aec:	46a1      	mov	r9, r4
 8006aee:	eb18 080a 	adds.w	r8, r8, sl
 8006af2:	eb49 090b 	adc.w	r9, r9, fp
 8006af6:	f04f 0100 	mov.w	r1, #0
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b0a:	4688      	mov	r8, r1
 8006b0c:	4691      	mov	r9, r2
 8006b0e:	eb1a 0508 	adds.w	r5, sl, r8
 8006b12:	eb4b 0609 	adc.w	r6, fp, r9
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	f04f 0400 	mov.w	r4, #0
 8006b28:	0094      	lsls	r4, r2, #2
 8006b2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b2e:	008b      	lsls	r3, r1, #2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4623      	mov	r3, r4
 8006b34:	4628      	mov	r0, r5
 8006b36:	4631      	mov	r1, r6
 8006b38:	f7f9 fbaa 	bl	8000290 <__aeabi_uldivmod>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	461a      	mov	r2, r3
 8006b42:	4b50      	ldr	r3, [pc, #320]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006b44:	fba3 2302 	umull	r2, r3, r3, r2
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	469b      	mov	fp, r3
 8006b52:	f04f 0c00 	mov.w	ip, #0
 8006b56:	46d9      	mov	r9, fp
 8006b58:	46e2      	mov	sl, ip
 8006b5a:	eb19 0309 	adds.w	r3, r9, r9
 8006b5e:	eb4a 040a 	adc.w	r4, sl, sl
 8006b62:	4699      	mov	r9, r3
 8006b64:	46a2      	mov	sl, r4
 8006b66:	eb19 090b 	adds.w	r9, r9, fp
 8006b6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b6e:	f04f 0100 	mov.w	r1, #0
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b82:	4689      	mov	r9, r1
 8006b84:	4692      	mov	sl, r2
 8006b86:	eb1b 0509 	adds.w	r5, fp, r9
 8006b8a:	eb4c 060a 	adc.w	r6, ip, sl
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	4619      	mov	r1, r3
 8006b94:	f04f 0200 	mov.w	r2, #0
 8006b98:	f04f 0300 	mov.w	r3, #0
 8006b9c:	f04f 0400 	mov.w	r4, #0
 8006ba0:	0094      	lsls	r4, r2, #2
 8006ba2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ba6:	008b      	lsls	r3, r1, #2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4623      	mov	r3, r4
 8006bac:	4628      	mov	r0, r5
 8006bae:	4631      	mov	r1, r6
 8006bb0:	f7f9 fb6e 	bl	8000290 <__aeabi_uldivmod>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4b32      	ldr	r3, [pc, #200]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	2164      	movs	r1, #100	; 0x64
 8006bc4:	fb01 f303 	mul.w	r3, r1, r3
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	3332      	adds	r3, #50	; 0x32
 8006bce:	4a2d      	ldr	r2, [pc, #180]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bda:	4498      	add	r8, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	469b      	mov	fp, r3
 8006be0:	f04f 0c00 	mov.w	ip, #0
 8006be4:	46d9      	mov	r9, fp
 8006be6:	46e2      	mov	sl, ip
 8006be8:	eb19 0309 	adds.w	r3, r9, r9
 8006bec:	eb4a 040a 	adc.w	r4, sl, sl
 8006bf0:	4699      	mov	r9, r3
 8006bf2:	46a2      	mov	sl, r4
 8006bf4:	eb19 090b 	adds.w	r9, r9, fp
 8006bf8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bfc:	f04f 0100 	mov.w	r1, #0
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c10:	4689      	mov	r9, r1
 8006c12:	4692      	mov	sl, r2
 8006c14:	eb1b 0509 	adds.w	r5, fp, r9
 8006c18:	eb4c 060a 	adc.w	r6, ip, sl
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4619      	mov	r1, r3
 8006c22:	f04f 0200 	mov.w	r2, #0
 8006c26:	f04f 0300 	mov.w	r3, #0
 8006c2a:	f04f 0400 	mov.w	r4, #0
 8006c2e:	0094      	lsls	r4, r2, #2
 8006c30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c34:	008b      	lsls	r3, r1, #2
 8006c36:	461a      	mov	r2, r3
 8006c38:	4623      	mov	r3, r4
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	f7f9 fb27 	bl	8000290 <__aeabi_uldivmod>
 8006c42:	4603      	mov	r3, r0
 8006c44:	460c      	mov	r4, r1
 8006c46:	461a      	mov	r2, r3
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	2164      	movs	r1, #100	; 0x64
 8006c52:	fb01 f303 	mul.w	r3, r1, r3
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	3332      	adds	r3, #50	; 0x32
 8006c5c:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <UART_SetConfig+0x6f4>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	f003 020f 	and.w	r2, r3, #15
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4442      	add	r2, r8
 8006c6e:	609a      	str	r2, [r3, #8]
}
 8006c70:	e7ff      	b.n	8006c72 <UART_SetConfig+0x6e2>
 8006c72:	bf00      	nop
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	40011000 	.word	0x40011000
 8006c80:	40011400 	.word	0x40011400
 8006c84:	51eb851f 	.word	0x51eb851f

08006c88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d029      	beq.n	8006cf6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006cae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cb2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006cbc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006cc2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006cc8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006cce:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006cd4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006cda:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006ce0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006ce6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e034      	b.n	8006d60 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d02:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d0c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006d12:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d2a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d34:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006d3a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006d40:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006d46:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006d4c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b087      	sub	sp, #28
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d02e      	beq.n	8006de6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006d94:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006da4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006dae:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006db8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006dc2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006dcc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	609a      	str	r2, [r3, #8]
 8006de4:	e03b      	b.n	8006e5e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e1c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006e2c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006e36:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006e40:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	f107 001c 	add.w	r0, r7, #28
 8006e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d122      	bne.n	8006eca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d105      	bne.n	8006ebe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f902 	bl	80070c8 <USB_CoreReset>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]
 8006ec8:	e01a      	b.n	8006f00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f8f6 	bl	80070c8 <USB_CoreReset>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ef2:	e005      	b.n	8006f00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10b      	bne.n	8006f1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f043 0206 	orr.w	r2, r3, #6
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f043 0220 	orr.w	r2, r3, #32
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f2a:	b004      	add	sp, #16
 8006f2c:	4770      	bx	lr

08006f2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d106      	bne.n	8006f7c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	e00b      	b.n	8006f94 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	e001      	b.n	8006f94 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e003      	b.n	8006f9c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f94:	2032      	movs	r0, #50	; 0x32
 8006f96:	f7fa ff8f 	bl	8001eb8 <HAL_Delay>

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	019b      	lsls	r3, r3, #6
 8006fb6:	f043 0220 	orr.w	r2, r3, #32
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <USB_FlushTxFifo+0x48>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d901      	bls.n	8006fd0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e006      	b.n	8006fde <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d0f0      	beq.n	8006fbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	00030d40 	.word	0x00030d40

08006ff0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2210      	movs	r2, #16
 8007000:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3301      	adds	r3, #1
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4a09      	ldr	r2, [pc, #36]	; (8007030 <USB_FlushRxFifo+0x40>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d901      	bls.n	8007014 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e006      	b.n	8007022 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b10      	cmp	r3, #16
 800701e:	d0f0      	beq.n	8007002 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	00030d40 	.word	0x00030d40

08007034 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007034:	b480      	push	{r7}
 8007036:	b089      	sub	sp, #36	; 0x24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	3303      	adds	r3, #3
 800704e:	089b      	lsrs	r3, r3, #2
 8007050:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007052:	2300      	movs	r3, #0
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	e00b      	b.n	8007070 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	601a      	str	r2, [r3, #0]
    pDest++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3304      	adds	r3, #4
 8007068:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	3301      	adds	r3, #1
 800706e:	61bb      	str	r3, [r7, #24]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	429a      	cmp	r2, r3
 8007076:	d3ef      	bcc.n	8007058 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007078:	69fb      	ldr	r3, [r7, #28]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3724      	adds	r7, #36	; 0x24
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4013      	ands	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800709e:	68fb      	ldr	r3, [r7, #12]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f003 0301 	and.w	r3, r3, #1
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3301      	adds	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4a13      	ldr	r2, [pc, #76]	; (800712c <USB_CoreReset+0x64>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d901      	bls.n	80070e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e01b      	b.n	800711e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	daf2      	bge.n	80070d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f043 0201 	orr.w	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3301      	adds	r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4a09      	ldr	r2, [pc, #36]	; (800712c <USB_CoreReset+0x64>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d901      	bls.n	8007110 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e006      	b.n	800711e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b01      	cmp	r3, #1
 800711a:	d0f0      	beq.n	80070fe <USB_CoreReset+0x36>

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	00030d40 	.word	0x00030d40

08007130 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007130:	b084      	sub	sp, #16
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	f107 001c 	add.w	r0, r7, #28
 800713e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800714c:	461a      	mov	r2, r3
 800714e:	2300      	movs	r3, #0
 8007150:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	2b00      	cmp	r3, #0
 8007180:	d018      	beq.n	80071b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	2b01      	cmp	r3, #1
 8007186:	d10a      	bne.n	800719e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007196:	f043 0304 	orr.w	r3, r3, #4
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	e014      	b.n	80071c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071ac:	f023 0304 	bic.w	r3, r3, #4
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	e009      	b.n	80071c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071c2:	f023 0304 	bic.w	r3, r3, #4
 80071c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80071c8:	2110      	movs	r1, #16
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff feea 	bl	8006fa4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff ff0d 	bl	8006ff0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	e015      	b.n	8007208 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e8:	461a      	mov	r2, r3
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295
 80071ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fc:	461a      	mov	r2, r3
 80071fe:	2300      	movs	r3, #0
 8007200:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3301      	adds	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	429a      	cmp	r2, r3
 800720e:	d3e5      	bcc.n	80071dc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007210:	2101      	movs	r1, #1
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f882 	bl	800731c <USB_DriveVbus>

  HAL_Delay(200U);
 8007218:	20c8      	movs	r0, #200	; 0xc8
 800721a:	f7fa fe4d 	bl	8001eb8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f04f 32ff 	mov.w	r2, #4294967295
 800722a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800723e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a14      	ldr	r2, [pc, #80]	; (8007294 <USB_HostInit+0x164>)
 8007244:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a13      	ldr	r2, [pc, #76]	; (8007298 <USB_HostInit+0x168>)
 800724a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800724e:	e009      	b.n	8007264 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2280      	movs	r2, #128	; 0x80
 8007254:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a10      	ldr	r2, [pc, #64]	; (800729c <USB_HostInit+0x16c>)
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a10      	ldr	r2, [pc, #64]	; (80072a0 <USB_HostInit+0x170>)
 8007260:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	2b00      	cmp	r3, #0
 8007268:	d105      	bne.n	8007276 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f043 0210 	orr.w	r2, r3, #16
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <USB_HostInit+0x174>)
 800727c:	4313      	orrs	r3, r2
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800728e:	b004      	add	sp, #16
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	01000200 	.word	0x01000200
 8007298:	00e00300 	.word	0x00e00300
 800729c:	00600080 	.word	0x00600080
 80072a0:	004000e0 	.word	0x004000e0
 80072a4:	a3200008 	.word	0xa3200008

080072a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072e0:	4313      	orrs	r3, r2
 80072e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d107      	bne.n	80072fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f0:	461a      	mov	r2, r3
 80072f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072f6:	6053      	str	r3, [r2, #4]
 80072f8:	e009      	b.n	800730e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d106      	bne.n	800730e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007306:	461a      	mov	r2, r3
 8007308:	f241 7370 	movw	r3, #6000	; 0x1770
 800730c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007340:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d109      	bne.n	8007360 <USB_DriveVbus+0x44>
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d106      	bne.n	8007360 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800735a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800735e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736a:	d109      	bne.n	8007380 <USB_DriveVbus+0x64>
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800737a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800737e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	b29b      	uxth	r3, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	0c9b      	lsrs	r3, r3, #18
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <USB_HC_Halt+0x3a>
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d16c      	bne.n	80074c4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007408:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d143      	bne.n	800749e <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	440a      	add	r2, r1
 800742c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007434:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	440a      	add	r2, r1
 800744c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007454:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	4413      	add	r3, r2
 800745e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	0151      	lsls	r1, r2, #5
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	440a      	add	r2, r1
 800746c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007470:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007474:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	3301      	adds	r3, #1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007482:	d81d      	bhi.n	80074c0 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	4413      	add	r3, r2
 800748c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800749a:	d0ec      	beq.n	8007476 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800749c:	e080      	b.n	80075a0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074bc:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80074be:	e06f      	b.n	80075a0 <USB_HC_Halt+0x1f0>
          break;
 80074c0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80074c2:	e06d      	b.n	80075a0 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d143      	bne.n	800757c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	440a      	add	r2, r1
 800750a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800750e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007512:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	440a      	add	r2, r1
 800752a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800752e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007532:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	440a      	add	r2, r1
 800754a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007552:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	3301      	adds	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007560:	d81d      	bhi.n	800759e <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	4413      	add	r3, r2
 800756a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007578:	d0ec      	beq.n	8007554 <USB_HC_Halt+0x1a4>
 800757a:	e011      	b.n	80075a0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	0151      	lsls	r1, r2, #5
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	440a      	add	r2, r1
 8007592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	e000      	b.n	80075a0 <USB_HC_Halt+0x1f0>
          break;
 800759e:	bf00      	nop
    }
  }

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	4603      	mov	r3, r0
 80075b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80075bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075c0:	2b84      	cmp	r3, #132	; 0x84
 80075c2:	d005      	beq.n	80075d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80075c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	3303      	adds	r3, #3
 80075ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80075d0:	68fb      	ldr	r3, [r7, #12]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80075e2:	f000 fdb3 	bl	800814c <vTaskStartScheduler>
  
  return osOK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	bd80      	pop	{r7, pc}

080075ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af04      	add	r7, sp, #16
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d020      	beq.n	8007640 <osThreadCreate+0x54>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d01c      	beq.n	8007640 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685c      	ldr	r4, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691e      	ldr	r6, [r3, #16]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff ffc8 	bl	80075ae <makeFreeRtosPriority>
 800761e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007628:	9202      	str	r2, [sp, #8]
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	9100      	str	r1, [sp, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	4632      	mov	r2, r6
 8007632:	4629      	mov	r1, r5
 8007634:	4620      	mov	r0, r4
 8007636:	f000 fbc5 	bl	8007dc4 <xTaskCreateStatic>
 800763a:	4603      	mov	r3, r0
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	e01c      	b.n	800767a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685c      	ldr	r4, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800764c:	b29e      	uxth	r6, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff ffaa 	bl	80075ae <makeFreeRtosPriority>
 800765a:	4602      	mov	r2, r0
 800765c:	f107 030c 	add.w	r3, r7, #12
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	9200      	str	r2, [sp, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	4632      	mov	r2, r6
 8007668:	4629      	mov	r1, r5
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fc04 	bl	8007e78 <xTaskCreate>
 8007670:	4603      	mov	r3, r0
 8007672:	2b01      	cmp	r3, #1
 8007674:	d001      	beq.n	800767a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	e000      	b.n	800767c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800767a:	68fb      	ldr	r3, [r7, #12]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007684 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <osDelay+0x16>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	e000      	b.n	800769c <osDelay+0x18>
 800769a:	2301      	movs	r3, #1
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fd21 	bl	80080e4 <vTaskDelay>
  
  return osOK;
 80076a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0208 	add.w	r2, r3, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f103 0208 	add.w	r2, r3, #8
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f103 0208 	add.w	r2, r3, #8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
}
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d103      	bne.n	800776e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e00c      	b.n	8007788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3308      	adds	r3, #8
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e002      	b.n	800777c <vListInsert+0x2e>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d2f6      	bcs.n	8007776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6892      	ldr	r2, [r2, #8]
 80077d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6852      	ldr	r2, [r2, #4]
 80077e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d103      	bne.n	80077f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	1e5a      	subs	r2, r3, #1
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	60bb      	str	r3, [r7, #8]
 800783a:	e7fe      	b.n	800783a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800783c:	f001 fb4e 	bl	8008edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	3b01      	subs	r3, #1
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	441a      	add	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	22ff      	movs	r2, #255	; 0xff
 8007880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	22ff      	movs	r2, #255	; 0xff
 8007888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d114      	bne.n	80078bc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01a      	beq.n	80078d0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3310      	adds	r3, #16
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fe92 	bl	80085c8 <xTaskRemoveFromEventList>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d012      	beq.n	80078d0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078aa:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <xQueueGenericReset+0xcc>)
 80078ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	e009      	b.n	80078d0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3310      	adds	r3, #16
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fef3 	bl	80076ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3324      	adds	r3, #36	; 0x24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff feee 	bl	80076ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078d0:	f001 fb32 	bl	8008f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078d4:	2301      	movs	r3, #1
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d109      	bne.n	800790c <xQueueGenericCreate+0x28>
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	e7fe      	b.n	800790a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	e004      	b.n	8007922 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	fb02 f303 	mul.w	r3, r2, r3
 8007920:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	3348      	adds	r3, #72	; 0x48
 8007926:	4618      	mov	r0, r3
 8007928:	f001 fbf2 	bl	8009110 <pvPortMalloc>
 800792c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d011      	beq.n	8007958 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	3348      	adds	r3, #72	; 0x48
 800793c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007946:	79fa      	ldrb	r2, [r7, #7]
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f805 	bl	8007962 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007958:	69bb      	ldr	r3, [r7, #24]
	}
 800795a:	4618      	mov	r0, r3
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e002      	b.n	8007984 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007990:	2101      	movs	r1, #1
 8007992:	69b8      	ldr	r0, [r7, #24]
 8007994:	f7ff ff3e 	bl	8007814 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08e      	sub	sp, #56	; 0x38
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d109      	bne.n	80079c8 <xQueueGiveFromISR+0x28>
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	623b      	str	r3, [r7, #32]
 80079c6:	e7fe      	b.n	80079c6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d009      	beq.n	80079e4 <xQueueGiveFromISR+0x44>
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	61fb      	str	r3, [r7, #28]
 80079e2:	e7fe      	b.n	80079e2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d103      	bne.n	80079f4 <xQueueGiveFromISR+0x54>
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <xQueueGiveFromISR+0x58>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <xQueueGiveFromISR+0x5a>
 80079f8:	2300      	movs	r3, #0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d109      	bne.n	8007a12 <xQueueGiveFromISR+0x72>
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	61bb      	str	r3, [r7, #24]
 8007a10:	e7fe      	b.n	8007a10 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a12:	f001 fb3f 	bl	8009094 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a16:	f3ef 8211 	mrs	r2, BASEPRI
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	617a      	str	r2, [r7, #20]
 8007a2c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d22b      	bcs.n	8007a9a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d112      	bne.n	8007a84 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d016      	beq.n	8007a94 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	3324      	adds	r3, #36	; 0x24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fdac 	bl	80085c8 <xTaskRemoveFromEventList>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00e      	beq.n	8007a94 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	e007      	b.n	8007a94 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a88:	3301      	adds	r3, #1
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	b25a      	sxtb	r2, r3
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a94:	2301      	movs	r3, #1
 8007a96:	637b      	str	r3, [r7, #52]	; 0x34
 8007a98:	e001      	b.n	8007a9e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3738      	adds	r7, #56	; 0x38
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08e      	sub	sp, #56	; 0x38
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	623b      	str	r3, [r7, #32]
 8007ae2:	e7fe      	b.n	8007ae2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d009      	beq.n	8007b00 <xQueueSemaphoreTake+0x4c>
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	e7fe      	b.n	8007afe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b00:	f000 ff18 	bl	8008934 <xTaskGetSchedulerState>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d102      	bne.n	8007b10 <xQueueSemaphoreTake+0x5c>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <xQueueSemaphoreTake+0x60>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <xQueueSemaphoreTake+0x62>
 8007b14:	2300      	movs	r3, #0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d109      	bne.n	8007b2e <xQueueSemaphoreTake+0x7a>
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	e7fe      	b.n	8007b2c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b2e:	f001 f9d5 	bl	8008edc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d024      	beq.n	8007b88 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	1e5a      	subs	r2, r3, #1
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b4e:	f001 f827 	bl	8008ba0 <pvTaskIncrementMutexHeldCount>
 8007b52:	4602      	mov	r2, r0
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	3310      	adds	r3, #16
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fd2f 	bl	80085c8 <xTaskRemoveFromEventList>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b70:	4b53      	ldr	r3, [pc, #332]	; (8007cc0 <xQueueSemaphoreTake+0x20c>)
 8007b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b80:	f001 f9da 	bl	8008f38 <vPortExitCritical>
				return pdPASS;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e096      	b.n	8007cb6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d110      	bne.n	8007bb0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <xQueueSemaphoreTake+0xf4>
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ba8:	f001 f9c6 	bl	8008f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e082      	b.n	8007cb6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bb6:	f107 030c 	add.w	r3, r7, #12
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fd66 	bl	800868c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bc4:	f001 f9b8 	bl	8008f38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bc8:	f000 fb1e 	bl	8008208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bcc:	f001 f986 	bl	8008edc <vPortEnterCritical>
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bdc:	d103      	bne.n	8007be6 <xQueueSemaphoreTake+0x132>
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bec:	b25b      	sxtb	r3, r3
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf2:	d103      	bne.n	8007bfc <xQueueSemaphoreTake+0x148>
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bfc:	f001 f99c 	bl	8008f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c00:	463a      	mov	r2, r7
 8007c02:	f107 030c 	add.w	r3, r7, #12
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fd55 	bl	80086b8 <xTaskCheckForTimeOut>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d132      	bne.n	8007c7a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c16:	f000 f8bf 	bl	8007d98 <prvIsQueueEmpty>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d026      	beq.n	8007c6e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d109      	bne.n	8007c3c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007c28:	f001 f958 	bl	8008edc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fe9d 	bl	8008970 <xTaskPriorityInherit>
 8007c36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007c38:	f001 f97e 	bl	8008f38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	3324      	adds	r3, #36	; 0x24
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	4611      	mov	r1, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fc9b 	bl	8008580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c4c:	f000 f852 	bl	8007cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c50:	f000 fae8 	bl	8008224 <xTaskResumeAll>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f47f af69 	bne.w	8007b2e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007c5c:	4b18      	ldr	r3, [pc, #96]	; (8007cc0 <xQueueSemaphoreTake+0x20c>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	e75f      	b.n	8007b2e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c70:	f000 f840 	bl	8007cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c74:	f000 fad6 	bl	8008224 <xTaskResumeAll>
 8007c78:	e759      	b.n	8007b2e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c7c:	f000 f83a 	bl	8007cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c80:	f000 fad0 	bl	8008224 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c86:	f000 f887 	bl	8007d98 <prvIsQueueEmpty>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f43f af4e 	beq.w	8007b2e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00d      	beq.n	8007cb4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007c98:	f001 f920 	bl	8008edc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9e:	f000 f811 	bl	8007cc4 <prvGetDisinheritPriorityAfterTimeout>
 8007ca2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 fee0 	bl	8008a70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007cb0:	f001 f942 	bl	8008f38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3738      	adds	r7, #56	; 0x38
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	e000ed04 	.word	0xe000ed04

08007cc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1c3 0307 	rsb	r3, r3, #7
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e001      	b.n	8007ce6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
	}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cfc:	f001 f8ee 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d08:	e011      	b.n	8007d2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d012      	beq.n	8007d38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3324      	adds	r3, #36	; 0x24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fc56 	bl	80085c8 <xTaskRemoveFromEventList>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d22:	f000 fd29 	bl	8008778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	dce9      	bgt.n	8007d0a <prvUnlockQueue+0x16>
 8007d36:	e000      	b.n	8007d3a <prvUnlockQueue+0x46>
					break;
 8007d38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	22ff      	movs	r2, #255	; 0xff
 8007d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d42:	f001 f8f9 	bl	8008f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d46:	f001 f8c9 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d52:	e011      	b.n	8007d78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d012      	beq.n	8007d82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3310      	adds	r3, #16
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fc31 	bl	80085c8 <xTaskRemoveFromEventList>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d6c:	f000 fd04 	bl	8008778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	dce9      	bgt.n	8007d54 <prvUnlockQueue+0x60>
 8007d80:	e000      	b.n	8007d84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	22ff      	movs	r2, #255	; 0xff
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d8c:	f001 f8d4 	bl	8008f38 <vPortExitCritical>
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da0:	f001 f89c 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007dac:	2301      	movs	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	e001      	b.n	8007db6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007db2:	2300      	movs	r3, #0
 8007db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007db6:	f001 f8bf 	bl	8008f38 <vPortExitCritical>

	return xReturn;
 8007dba:	68fb      	ldr	r3, [r7, #12]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08e      	sub	sp, #56	; 0x38
 8007dc8:	af04      	add	r7, sp, #16
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <xTaskCreateStatic+0x28>
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	623b      	str	r3, [r7, #32]
 8007dea:	e7fe      	b.n	8007dea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <xTaskCreateStatic+0x42>
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	e7fe      	b.n	8007e04 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e06:	2354      	movs	r3, #84	; 0x54
 8007e08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b54      	cmp	r3, #84	; 0x54
 8007e0e:	d009      	beq.n	8007e24 <xTaskCreateStatic+0x60>
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	e7fe      	b.n	8007e22 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01e      	beq.n	8007e6a <xTaskCreateStatic+0xa6>
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01b      	beq.n	8007e6a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e44:	2300      	movs	r3, #0
 8007e46:	9303      	str	r3, [sp, #12]
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	9302      	str	r3, [sp, #8]
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f850 	bl	8007f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e64:	f000 f8d4 	bl	8008010 <prvAddNewTaskToReadyList>
 8007e68:	e001      	b.n	8007e6e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e6e:	697b      	ldr	r3, [r7, #20]
	}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3728      	adds	r7, #40	; 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08c      	sub	sp, #48	; 0x30
 8007e7c:	af04      	add	r7, sp, #16
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f93f 	bl	8009110 <pvPortMalloc>
 8007e92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00e      	beq.n	8007eb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e9a:	2054      	movs	r0, #84	; 0x54
 8007e9c:	f001 f938 	bl	8009110 <pvPortMalloc>
 8007ea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
 8007eae:	e005      	b.n	8007ebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eb0:	6978      	ldr	r0, [r7, #20]
 8007eb2:	f001 f9ef 	bl	8009294 <vPortFree>
 8007eb6:	e001      	b.n	8007ebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d017      	beq.n	8007ef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007eca:	88fa      	ldrh	r2, [r7, #6]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f80e 	bl	8007f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ee6:	69f8      	ldr	r0, [r7, #28]
 8007ee8:	f000 f892 	bl	8008010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eec:	2301      	movs	r3, #1
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	e002      	b.n	8007ef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f023 0307 	bic.w	r3, r3, #7
 8007f28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d009      	beq.n	8007f48 <prvInitialiseNewTask+0x46>
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	e7fe      	b.n	8007f46 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01f      	beq.n	8007f8e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	e012      	b.n	8007f7a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	7819      	ldrb	r1, [r3, #0]
 8007f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	4413      	add	r3, r2
 8007f62:	3334      	adds	r3, #52	; 0x34
 8007f64:	460a      	mov	r2, r1
 8007f66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	3301      	adds	r3, #1
 8007f78:	61fb      	str	r3, [r7, #28]
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b0f      	cmp	r3, #15
 8007f7e:	d9e9      	bls.n	8007f54 <prvInitialiseNewTask+0x52>
 8007f80:	e000      	b.n	8007f84 <prvInitialiseNewTask+0x82>
			{
				break;
 8007f82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f8c:	e003      	b.n	8007f96 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	2b06      	cmp	r3, #6
 8007f9a:	d901      	bls.n	8007fa0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f9c:	2306      	movs	r3, #6
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007faa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	2200      	movs	r2, #0
 8007fb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff fb98 	bl	80076ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	3318      	adds	r3, #24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff fb93 	bl	80076ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	f1c3 0207 	rsb	r2, r3, #7
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	2200      	movs	r2, #0
 8007fe0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	68f9      	ldr	r1, [r7, #12]
 8007fee:	69b8      	ldr	r0, [r7, #24]
 8007ff0:	f000 fe50 	bl	8008c94 <pxPortInitialiseStack>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008006:	bf00      	nop
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008018:	f000 ff60 	bl	8008edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800801c:	4b2a      	ldr	r3, [pc, #168]	; (80080c8 <prvAddNewTaskToReadyList+0xb8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3301      	adds	r3, #1
 8008022:	4a29      	ldr	r2, [pc, #164]	; (80080c8 <prvAddNewTaskToReadyList+0xb8>)
 8008024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008026:	4b29      	ldr	r3, [pc, #164]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d109      	bne.n	8008042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800802e:	4a27      	ldr	r2, [pc, #156]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008034:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <prvAddNewTaskToReadyList+0xb8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d110      	bne.n	800805e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800803c:	f000 fbc0 	bl	80087c0 <prvInitialiseTaskLists>
 8008040:	e00d      	b.n	800805e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008042:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <prvAddNewTaskToReadyList+0xc0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800804a:	4b20      	ldr	r3, [pc, #128]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	429a      	cmp	r2, r3
 8008056:	d802      	bhi.n	800805e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008058:	4a1c      	ldr	r2, [pc, #112]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800805e:	4b1d      	ldr	r3, [pc, #116]	; (80080d4 <prvAddNewTaskToReadyList+0xc4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3301      	adds	r3, #1
 8008064:	4a1b      	ldr	r2, [pc, #108]	; (80080d4 <prvAddNewTaskToReadyList+0xc4>)
 8008066:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	2201      	movs	r2, #1
 800806e:	409a      	lsls	r2, r3
 8008070:	4b19      	ldr	r3, [pc, #100]	; (80080d8 <prvAddNewTaskToReadyList+0xc8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4313      	orrs	r3, r2
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <prvAddNewTaskToReadyList+0xc8>)
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4a15      	ldr	r2, [pc, #84]	; (80080dc <prvAddNewTaskToReadyList+0xcc>)
 8008088:	441a      	add	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3304      	adds	r3, #4
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f7ff fb38 	bl	8007706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008096:	f000 ff4f 	bl	8008f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800809a:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <prvAddNewTaskToReadyList+0xc0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00e      	beq.n	80080c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <prvAddNewTaskToReadyList+0xbc>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d207      	bcs.n	80080c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080b0:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <prvAddNewTaskToReadyList+0xd0>)
 80080b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20000410 	.word	0x20000410
 80080cc:	20000310 	.word	0x20000310
 80080d0:	2000041c 	.word	0x2000041c
 80080d4:	2000042c 	.word	0x2000042c
 80080d8:	20000418 	.word	0x20000418
 80080dc:	20000314 	.word	0x20000314
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d016      	beq.n	8008124 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <vTaskDelay+0x60>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <vTaskDelay+0x2e>
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60bb      	str	r3, [r7, #8]
 8008110:	e7fe      	b.n	8008110 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008112:	f000 f879 	bl	8008208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008116:	2100      	movs	r1, #0
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fd55 	bl	8008bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800811e:	f000 f881 	bl	8008224 <xTaskResumeAll>
 8008122:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d107      	bne.n	800813a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <vTaskDelay+0x64>)
 800812c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000438 	.word	0x20000438
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08a      	sub	sp, #40	; 0x28
 8008150:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800815a:	463a      	mov	r2, r7
 800815c:	1d39      	adds	r1, r7, #4
 800815e:	f107 0308 	add.w	r3, r7, #8
 8008162:	4618      	mov	r0, r3
 8008164:	f7f8 fd24 	bl	8000bb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	9202      	str	r2, [sp, #8]
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	2300      	movs	r3, #0
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	2300      	movs	r3, #0
 8008178:	460a      	mov	r2, r1
 800817a:	491d      	ldr	r1, [pc, #116]	; (80081f0 <vTaskStartScheduler+0xa4>)
 800817c:	481d      	ldr	r0, [pc, #116]	; (80081f4 <vTaskStartScheduler+0xa8>)
 800817e:	f7ff fe21 	bl	8007dc4 <xTaskCreateStatic>
 8008182:	4602      	mov	r2, r0
 8008184:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <vTaskStartScheduler+0xac>)
 8008186:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008188:	4b1b      	ldr	r3, [pc, #108]	; (80081f8 <vTaskStartScheduler+0xac>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008190:	2301      	movs	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	e001      	b.n	800819a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d115      	bne.n	80081cc <vTaskStartScheduler+0x80>
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081b2:	4b12      	ldr	r3, [pc, #72]	; (80081fc <vTaskStartScheduler+0xb0>)
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295
 80081b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081ba:	4b11      	ldr	r3, [pc, #68]	; (8008200 <vTaskStartScheduler+0xb4>)
 80081bc:	2201      	movs	r2, #1
 80081be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081c0:	4b10      	ldr	r3, [pc, #64]	; (8008204 <vTaskStartScheduler+0xb8>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081c6:	f000 fdeb 	bl	8008da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081ca:	e00d      	b.n	80081e8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d109      	bne.n	80081e8 <vTaskStartScheduler+0x9c>
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	e7fe      	b.n	80081e6 <vTaskStartScheduler+0x9a>
}
 80081e8:	bf00      	nop
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	0800a5cc 	.word	0x0800a5cc
 80081f4:	08008791 	.word	0x08008791
 80081f8:	20000434 	.word	0x20000434
 80081fc:	20000430 	.word	0x20000430
 8008200:	2000041c 	.word	0x2000041c
 8008204:	20000414 	.word	0x20000414

08008208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800820c:	4b04      	ldr	r3, [pc, #16]	; (8008220 <vTaskSuspendAll+0x18>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3301      	adds	r3, #1
 8008212:	4a03      	ldr	r2, [pc, #12]	; (8008220 <vTaskSuspendAll+0x18>)
 8008214:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008216:	bf00      	nop
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	20000438 	.word	0x20000438

08008224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008232:	4b41      	ldr	r3, [pc, #260]	; (8008338 <xTaskResumeAll+0x114>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <xTaskResumeAll+0x2a>
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	e7fe      	b.n	800824c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800824e:	f000 fe45 	bl	8008edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008252:	4b39      	ldr	r3, [pc, #228]	; (8008338 <xTaskResumeAll+0x114>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3b01      	subs	r3, #1
 8008258:	4a37      	ldr	r2, [pc, #220]	; (8008338 <xTaskResumeAll+0x114>)
 800825a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800825c:	4b36      	ldr	r3, [pc, #216]	; (8008338 <xTaskResumeAll+0x114>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d161      	bne.n	8008328 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008264:	4b35      	ldr	r3, [pc, #212]	; (800833c <xTaskResumeAll+0x118>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d05d      	beq.n	8008328 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800826c:	e02e      	b.n	80082cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826e:	4b34      	ldr	r3, [pc, #208]	; (8008340 <xTaskResumeAll+0x11c>)
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3318      	adds	r3, #24
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff faa0 	bl	80077c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3304      	adds	r3, #4
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fa9b 	bl	80077c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	2201      	movs	r2, #1
 8008290:	409a      	lsls	r2, r3
 8008292:	4b2c      	ldr	r3, [pc, #176]	; (8008344 <xTaskResumeAll+0x120>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4313      	orrs	r3, r2
 8008298:	4a2a      	ldr	r2, [pc, #168]	; (8008344 <xTaskResumeAll+0x120>)
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4a27      	ldr	r2, [pc, #156]	; (8008348 <xTaskResumeAll+0x124>)
 80082aa:	441a      	add	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3304      	adds	r3, #4
 80082b0:	4619      	mov	r1, r3
 80082b2:	4610      	mov	r0, r2
 80082b4:	f7ff fa27 	bl	8007706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082bc:	4b23      	ldr	r3, [pc, #140]	; (800834c <xTaskResumeAll+0x128>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d302      	bcc.n	80082cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80082c6:	4b22      	ldr	r3, [pc, #136]	; (8008350 <xTaskResumeAll+0x12c>)
 80082c8:	2201      	movs	r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082cc:	4b1c      	ldr	r3, [pc, #112]	; (8008340 <xTaskResumeAll+0x11c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1cc      	bne.n	800826e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082da:	f000 fb0b 	bl	80088f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082de:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <xTaskResumeAll+0x130>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d010      	beq.n	800830c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082ea:	f000 f837 	bl	800835c <xTaskIncrementTick>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80082f4:	4b16      	ldr	r3, [pc, #88]	; (8008350 <xTaskResumeAll+0x12c>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1f1      	bne.n	80082ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008306:	4b13      	ldr	r3, [pc, #76]	; (8008354 <xTaskResumeAll+0x130>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <xTaskResumeAll+0x12c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d009      	beq.n	8008328 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <xTaskResumeAll+0x134>)
 800831a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008328:	f000 fe06 	bl	8008f38 <vPortExitCritical>

	return xAlreadyYielded;
 800832c:	68bb      	ldr	r3, [r7, #8]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000438 	.word	0x20000438
 800833c:	20000410 	.word	0x20000410
 8008340:	200003d0 	.word	0x200003d0
 8008344:	20000418 	.word	0x20000418
 8008348:	20000314 	.word	0x20000314
 800834c:	20000310 	.word	0x20000310
 8008350:	20000424 	.word	0x20000424
 8008354:	20000420 	.word	0x20000420
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008366:	4b4e      	ldr	r3, [pc, #312]	; (80084a0 <xTaskIncrementTick+0x144>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f040 8087 	bne.w	800847e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008370:	4b4c      	ldr	r3, [pc, #304]	; (80084a4 <xTaskIncrementTick+0x148>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008378:	4a4a      	ldr	r2, [pc, #296]	; (80084a4 <xTaskIncrementTick+0x148>)
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d11f      	bne.n	80083c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008384:	4b48      	ldr	r3, [pc, #288]	; (80084a8 <xTaskIncrementTick+0x14c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <xTaskIncrementTick+0x46>
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	e7fe      	b.n	80083a0 <xTaskIncrementTick+0x44>
 80083a2:	4b41      	ldr	r3, [pc, #260]	; (80084a8 <xTaskIncrementTick+0x14c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	4b40      	ldr	r3, [pc, #256]	; (80084ac <xTaskIncrementTick+0x150>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a3e      	ldr	r2, [pc, #248]	; (80084a8 <xTaskIncrementTick+0x14c>)
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	4a3e      	ldr	r2, [pc, #248]	; (80084ac <xTaskIncrementTick+0x150>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	4b3e      	ldr	r3, [pc, #248]	; (80084b0 <xTaskIncrementTick+0x154>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3301      	adds	r3, #1
 80083bc:	4a3c      	ldr	r2, [pc, #240]	; (80084b0 <xTaskIncrementTick+0x154>)
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	f000 fa98 	bl	80088f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083c4:	4b3b      	ldr	r3, [pc, #236]	; (80084b4 <xTaskIncrementTick+0x158>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d348      	bcc.n	8008460 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ce:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <xTaskIncrementTick+0x14c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d8:	4b36      	ldr	r3, [pc, #216]	; (80084b4 <xTaskIncrementTick+0x158>)
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	601a      	str	r2, [r3, #0]
					break;
 80083e0:	e03e      	b.n	8008460 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e2:	4b31      	ldr	r3, [pc, #196]	; (80084a8 <xTaskIncrementTick+0x14c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d203      	bcs.n	8008402 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083fa:	4a2e      	ldr	r2, [pc, #184]	; (80084b4 <xTaskIncrementTick+0x158>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008400:	e02e      	b.n	8008460 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff f9da 	bl	80077c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	3318      	adds	r3, #24
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff f9d1 	bl	80077c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	2201      	movs	r2, #1
 8008424:	409a      	lsls	r2, r3
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <xTaskIncrementTick+0x15c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4313      	orrs	r3, r2
 800842c:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <xTaskIncrementTick+0x15c>)
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4a1f      	ldr	r2, [pc, #124]	; (80084bc <xTaskIncrementTick+0x160>)
 800843e:	441a      	add	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7ff f95d 	bl	8007706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008450:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <xTaskIncrementTick+0x164>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008456:	429a      	cmp	r2, r3
 8008458:	d3b9      	bcc.n	80083ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800845e:	e7b6      	b.n	80083ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008460:	4b17      	ldr	r3, [pc, #92]	; (80084c0 <xTaskIncrementTick+0x164>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008466:	4915      	ldr	r1, [pc, #84]	; (80084bc <xTaskIncrementTick+0x160>)
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	440b      	add	r3, r1
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d907      	bls.n	8008488 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	e004      	b.n	8008488 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800847e:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <xTaskIncrementTick+0x168>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3301      	adds	r3, #1
 8008484:	4a0f      	ldr	r2, [pc, #60]	; (80084c4 <xTaskIncrementTick+0x168>)
 8008486:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <xTaskIncrementTick+0x16c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008490:	2301      	movs	r3, #1
 8008492:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008494:	697b      	ldr	r3, [r7, #20]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000438 	.word	0x20000438
 80084a4:	20000414 	.word	0x20000414
 80084a8:	200003c8 	.word	0x200003c8
 80084ac:	200003cc 	.word	0x200003cc
 80084b0:	20000428 	.word	0x20000428
 80084b4:	20000430 	.word	0x20000430
 80084b8:	20000418 	.word	0x20000418
 80084bc:	20000314 	.word	0x20000314
 80084c0:	20000310 	.word	0x20000310
 80084c4:	20000420 	.word	0x20000420
 80084c8:	20000424 	.word	0x20000424

080084cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084d2:	4b26      	ldr	r3, [pc, #152]	; (800856c <vTaskSwitchContext+0xa0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084da:	4b25      	ldr	r3, [pc, #148]	; (8008570 <vTaskSwitchContext+0xa4>)
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084e0:	e03e      	b.n	8008560 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <vTaskSwitchContext+0xa4>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e8:	4b22      	ldr	r3, [pc, #136]	; (8008574 <vTaskSwitchContext+0xa8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	fab3 f383 	clz	r3, r3
 80084f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80084f6:	7afb      	ldrb	r3, [r7, #11]
 80084f8:	f1c3 031f 	rsb	r3, r3, #31
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	491e      	ldr	r1, [pc, #120]	; (8008578 <vTaskSwitchContext+0xac>)
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	440b      	add	r3, r1
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	e7fe      	b.n	8008524 <vTaskSwitchContext+0x58>
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4a11      	ldr	r2, [pc, #68]	; (8008578 <vTaskSwitchContext+0xac>)
 8008532:	4413      	add	r3, r2
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	605a      	str	r2, [r3, #4]
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	3308      	adds	r3, #8
 8008548:	429a      	cmp	r2, r3
 800854a:	d104      	bne.n	8008556 <vTaskSwitchContext+0x8a>
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	4a07      	ldr	r2, [pc, #28]	; (800857c <vTaskSwitchContext+0xb0>)
 800855e:	6013      	str	r3, [r2, #0]
}
 8008560:	bf00      	nop
 8008562:	371c      	adds	r7, #28
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	20000438 	.word	0x20000438
 8008570:	20000424 	.word	0x20000424
 8008574:	20000418 	.word	0x20000418
 8008578:	20000314 	.word	0x20000314
 800857c:	20000310 	.word	0x20000310

08008580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d109      	bne.n	80085a4 <vTaskPlaceOnEventList+0x24>
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e7fe      	b.n	80085a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085a4:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <vTaskPlaceOnEventList+0x44>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3318      	adds	r3, #24
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff f8ce 	bl	800774e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085b2:	2101      	movs	r1, #1
 80085b4:	6838      	ldr	r0, [r7, #0]
 80085b6:	f000 fb07 	bl	8008bc8 <prvAddCurrentTaskToDelayedList>
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000310 	.word	0x20000310

080085c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d109      	bne.n	80085f2 <xTaskRemoveFromEventList+0x2a>
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	e7fe      	b.n	80085f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	3318      	adds	r3, #24
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff f8e2 	bl	80077c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085fc:	4b1d      	ldr	r3, [pc, #116]	; (8008674 <xTaskRemoveFromEventList+0xac>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d11c      	bne.n	800863e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	3304      	adds	r3, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff f8d9 	bl	80077c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008612:	2201      	movs	r2, #1
 8008614:	409a      	lsls	r2, r3
 8008616:	4b18      	ldr	r3, [pc, #96]	; (8008678 <xTaskRemoveFromEventList+0xb0>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4313      	orrs	r3, r2
 800861c:	4a16      	ldr	r2, [pc, #88]	; (8008678 <xTaskRemoveFromEventList+0xb0>)
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4a13      	ldr	r2, [pc, #76]	; (800867c <xTaskRemoveFromEventList+0xb4>)
 800862e:	441a      	add	r2, r3
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	3304      	adds	r3, #4
 8008634:	4619      	mov	r1, r3
 8008636:	4610      	mov	r0, r2
 8008638:	f7ff f865 	bl	8007706 <vListInsertEnd>
 800863c:	e005      	b.n	800864a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	3318      	adds	r3, #24
 8008642:	4619      	mov	r1, r3
 8008644:	480e      	ldr	r0, [pc, #56]	; (8008680 <xTaskRemoveFromEventList+0xb8>)
 8008646:	f7ff f85e 	bl	8007706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800864e:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <xTaskRemoveFromEventList+0xbc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	429a      	cmp	r2, r3
 8008656:	d905      	bls.n	8008664 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800865c:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <xTaskRemoveFromEventList+0xc0>)
 800865e:	2201      	movs	r2, #1
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	e001      	b.n	8008668 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008668:	697b      	ldr	r3, [r7, #20]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20000438 	.word	0x20000438
 8008678:	20000418 	.word	0x20000418
 800867c:	20000314 	.word	0x20000314
 8008680:	200003d0 	.word	0x200003d0
 8008684:	20000310 	.word	0x20000310
 8008688:	20000424 	.word	0x20000424

0800868c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <vTaskInternalSetTimeOutState+0x24>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <vTaskInternalSetTimeOutState+0x28>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	605a      	str	r2, [r3, #4]
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	20000428 	.word	0x20000428
 80086b4:	20000414 	.word	0x20000414

080086b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d109      	bne.n	80086dc <xTaskCheckForTimeOut+0x24>
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	613b      	str	r3, [r7, #16]
 80086da:	e7fe      	b.n	80086da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <xTaskCheckForTimeOut+0x3e>
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e7fe      	b.n	80086f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80086f6:	f000 fbf1 	bl	8008edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086fa:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <xTaskCheckForTimeOut+0xb8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008712:	d102      	bne.n	800871a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]
 8008718:	e023      	b.n	8008762 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b15      	ldr	r3, [pc, #84]	; (8008774 <xTaskCheckForTimeOut+0xbc>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d007      	beq.n	8008736 <xTaskCheckForTimeOut+0x7e>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	429a      	cmp	r2, r3
 800872e:	d302      	bcc.n	8008736 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008730:	2301      	movs	r3, #1
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	e015      	b.n	8008762 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	429a      	cmp	r2, r3
 800873e:	d20b      	bcs.n	8008758 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ff9d 	bl	800868c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008752:	2300      	movs	r3, #0
 8008754:	61fb      	str	r3, [r7, #28]
 8008756:	e004      	b.n	8008762 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800875e:	2301      	movs	r3, #1
 8008760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008762:	f000 fbe9 	bl	8008f38 <vPortExitCritical>

	return xReturn;
 8008766:	69fb      	ldr	r3, [r7, #28]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3720      	adds	r7, #32
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20000414 	.word	0x20000414
 8008774:	20000428 	.word	0x20000428

08008778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800877c:	4b03      	ldr	r3, [pc, #12]	; (800878c <vTaskMissedYield+0x14>)
 800877e:	2201      	movs	r2, #1
 8008780:	601a      	str	r2, [r3, #0]
}
 8008782:	bf00      	nop
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000424 	.word	0x20000424

08008790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008798:	f000 f852 	bl	8008840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <prvIdleTask+0x28>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d9f9      	bls.n	8008798 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <prvIdleTask+0x2c>)
 80087a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087b4:	e7f0      	b.n	8008798 <prvIdleTask+0x8>
 80087b6:	bf00      	nop
 80087b8:	20000314 	.word	0x20000314
 80087bc:	e000ed04 	.word	0xe000ed04

080087c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087c6:	2300      	movs	r3, #0
 80087c8:	607b      	str	r3, [r7, #4]
 80087ca:	e00c      	b.n	80087e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4a12      	ldr	r2, [pc, #72]	; (8008820 <prvInitialiseTaskLists+0x60>)
 80087d8:	4413      	add	r3, r2
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe ff66 	bl	80076ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3301      	adds	r3, #1
 80087e4:	607b      	str	r3, [r7, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b06      	cmp	r3, #6
 80087ea:	d9ef      	bls.n	80087cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087ec:	480d      	ldr	r0, [pc, #52]	; (8008824 <prvInitialiseTaskLists+0x64>)
 80087ee:	f7fe ff5d 	bl	80076ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087f2:	480d      	ldr	r0, [pc, #52]	; (8008828 <prvInitialiseTaskLists+0x68>)
 80087f4:	f7fe ff5a 	bl	80076ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087f8:	480c      	ldr	r0, [pc, #48]	; (800882c <prvInitialiseTaskLists+0x6c>)
 80087fa:	f7fe ff57 	bl	80076ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087fe:	480c      	ldr	r0, [pc, #48]	; (8008830 <prvInitialiseTaskLists+0x70>)
 8008800:	f7fe ff54 	bl	80076ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008804:	480b      	ldr	r0, [pc, #44]	; (8008834 <prvInitialiseTaskLists+0x74>)
 8008806:	f7fe ff51 	bl	80076ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800880a:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <prvInitialiseTaskLists+0x78>)
 800880c:	4a05      	ldr	r2, [pc, #20]	; (8008824 <prvInitialiseTaskLists+0x64>)
 800880e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008810:	4b0a      	ldr	r3, [pc, #40]	; (800883c <prvInitialiseTaskLists+0x7c>)
 8008812:	4a05      	ldr	r2, [pc, #20]	; (8008828 <prvInitialiseTaskLists+0x68>)
 8008814:	601a      	str	r2, [r3, #0]
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000314 	.word	0x20000314
 8008824:	200003a0 	.word	0x200003a0
 8008828:	200003b4 	.word	0x200003b4
 800882c:	200003d0 	.word	0x200003d0
 8008830:	200003e4 	.word	0x200003e4
 8008834:	200003fc 	.word	0x200003fc
 8008838:	200003c8 	.word	0x200003c8
 800883c:	200003cc 	.word	0x200003cc

08008840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008846:	e019      	b.n	800887c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008848:	f000 fb48 	bl	8008edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884c:	4b0f      	ldr	r3, [pc, #60]	; (800888c <prvCheckTasksWaitingTermination+0x4c>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3304      	adds	r3, #4
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe ffb1 	bl	80077c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800885e:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <prvCheckTasksWaitingTermination+0x50>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3b01      	subs	r3, #1
 8008864:	4a0a      	ldr	r2, [pc, #40]	; (8008890 <prvCheckTasksWaitingTermination+0x50>)
 8008866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008868:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <prvCheckTasksWaitingTermination+0x54>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3b01      	subs	r3, #1
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <prvCheckTasksWaitingTermination+0x54>)
 8008870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008872:	f000 fb61 	bl	8008f38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f80e 	bl	8008898 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800887c:	4b05      	ldr	r3, [pc, #20]	; (8008894 <prvCheckTasksWaitingTermination+0x54>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e1      	bne.n	8008848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	200003e4 	.word	0x200003e4
 8008890:	20000410 	.word	0x20000410
 8008894:	200003f8 	.word	0x200003f8

08008898 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d108      	bne.n	80088bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fcf0 	bl	8009294 <vPortFree>
				vPortFree( pxTCB );
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fced 	bl	8009294 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088ba:	e017      	b.n	80088ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d103      	bne.n	80088ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fce4 	bl	8009294 <vPortFree>
	}
 80088cc:	e00e      	b.n	80088ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d009      	beq.n	80088ec <prvDeleteTCB+0x54>
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	e7fe      	b.n	80088ea <prvDeleteTCB+0x52>
	}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088fa:	4b0c      	ldr	r3, [pc, #48]	; (800892c <prvResetNextTaskUnblockTime+0x38>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <prvResetNextTaskUnblockTime+0x3c>)
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
 800890a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800890c:	e008      	b.n	8008920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800890e:	4b07      	ldr	r3, [pc, #28]	; (800892c <prvResetNextTaskUnblockTime+0x38>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4a04      	ldr	r2, [pc, #16]	; (8008930 <prvResetNextTaskUnblockTime+0x3c>)
 800891e:	6013      	str	r3, [r2, #0]
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	200003c8 	.word	0x200003c8
 8008930:	20000430 	.word	0x20000430

08008934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800893a:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <xTaskGetSchedulerState+0x34>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008942:	2301      	movs	r3, #1
 8008944:	607b      	str	r3, [r7, #4]
 8008946:	e008      	b.n	800895a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008948:	4b08      	ldr	r3, [pc, #32]	; (800896c <xTaskGetSchedulerState+0x38>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008950:	2302      	movs	r3, #2
 8008952:	607b      	str	r3, [r7, #4]
 8008954:	e001      	b.n	800895a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008956:	2300      	movs	r3, #0
 8008958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800895a:	687b      	ldr	r3, [r7, #4]
	}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	2000041c 	.word	0x2000041c
 800896c:	20000438 	.word	0x20000438

08008970 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d069      	beq.n	8008a5a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	4b36      	ldr	r3, [pc, #216]	; (8008a64 <xTaskPriorityInherit+0xf4>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	429a      	cmp	r2, r3
 8008992:	d259      	bcs.n	8008a48 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	db06      	blt.n	80089aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800899c:	4b31      	ldr	r3, [pc, #196]	; (8008a64 <xTaskPriorityInherit+0xf4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	f1c3 0207 	rsb	r2, r3, #7
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6959      	ldr	r1, [r3, #20]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4a2b      	ldr	r2, [pc, #172]	; (8008a68 <xTaskPriorityInherit+0xf8>)
 80089bc:	4413      	add	r3, r2
 80089be:	4299      	cmp	r1, r3
 80089c0:	d13a      	bne.n	8008a38 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	3304      	adds	r3, #4
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe fefa 	bl	80077c0 <uxListRemove>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d115      	bne.n	80089fe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d6:	4924      	ldr	r1, [pc, #144]	; (8008a68 <xTaskPriorityInherit+0xf8>)
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	440b      	add	r3, r1
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <xTaskPriorityInherit+0x8e>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	2201      	movs	r2, #1
 80089ee:	fa02 f303 	lsl.w	r3, r2, r3
 80089f2:	43da      	mvns	r2, r3
 80089f4:	4b1d      	ldr	r3, [pc, #116]	; (8008a6c <xTaskPriorityInherit+0xfc>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4013      	ands	r3, r2
 80089fa:	4a1c      	ldr	r2, [pc, #112]	; (8008a6c <xTaskPriorityInherit+0xfc>)
 80089fc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089fe:	4b19      	ldr	r3, [pc, #100]	; (8008a64 <xTaskPriorityInherit+0xf4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	409a      	lsls	r2, r3
 8008a10:	4b16      	ldr	r3, [pc, #88]	; (8008a6c <xTaskPriorityInherit+0xfc>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	4a15      	ldr	r2, [pc, #84]	; (8008a6c <xTaskPriorityInherit+0xfc>)
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4a10      	ldr	r2, [pc, #64]	; (8008a68 <xTaskPriorityInherit+0xf8>)
 8008a28:	441a      	add	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fe fe68 	bl	8007706 <vListInsertEnd>
 8008a36:	e004      	b.n	8008a42 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a38:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <xTaskPriorityInherit+0xf4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a42:	2301      	movs	r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	e008      	b.n	8008a5a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <xTaskPriorityInherit+0xf4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d201      	bcs.n	8008a5a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a56:	2301      	movs	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
	}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20000310 	.word	0x20000310
 8008a68:	20000314 	.word	0x20000314
 8008a6c:	20000418 	.word	0x20000418

08008a70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8081 	beq.w	8008b8c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e7fe      	b.n	8008aa4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d902      	bls.n	8008ab6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	61fb      	str	r3, [r7, #28]
 8008ab4:	e002      	b.n	8008abc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d062      	beq.n	8008b8c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d15d      	bne.n	8008b8c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ad0:	4b30      	ldr	r3, [pc, #192]	; (8008b94 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d109      	bne.n	8008aee <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	60bb      	str	r3, [r7, #8]
 8008aec:	e7fe      	b.n	8008aec <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	db04      	blt.n	8008b0c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	f1c3 0207 	rsb	r2, r3, #7
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	6959      	ldr	r1, [r3, #20]
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008b1c:	4413      	add	r3, r2
 8008b1e:	4299      	cmp	r1, r3
 8008b20:	d134      	bne.n	8008b8c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fe4a 	bl	80077c0 <uxListRemove>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d115      	bne.n	8008b5e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b36:	4918      	ldr	r1, [pc, #96]	; (8008b98 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b52:	43da      	mvns	r2, r3
 8008b54:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	4a10      	ldr	r2, [pc, #64]	; (8008b9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008b5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	2201      	movs	r2, #1
 8008b64:	409a      	lsls	r2, r3
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	4a0b      	ldr	r2, [pc, #44]	; (8008b9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4a06      	ldr	r2, [pc, #24]	; (8008b98 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008b7e:	441a      	add	r2, r3
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7fe fdbd 	bl	8007706 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b8c:	bf00      	nop
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20000310 	.word	0x20000310
 8008b98:	20000314 	.word	0x20000314
 8008b9c:	20000418 	.word	0x20000418

08008ba0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ba4:	4b07      	ldr	r3, [pc, #28]	; (8008bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008bac:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008bb6:	4b03      	ldr	r3, [pc, #12]	; (8008bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
	}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	20000310 	.word	0x20000310

08008bc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bd2:	4b29      	ldr	r3, [pc, #164]	; (8008c78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd8:	4b28      	ldr	r3, [pc, #160]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fdee 	bl	80077c0 <uxListRemove>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10b      	bne.n	8008c02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008bea:	4b24      	ldr	r3, [pc, #144]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	43da      	mvns	r2, r3
 8008bf8:	4b21      	ldr	r3, [pc, #132]	; (8008c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c08:	d10a      	bne.n	8008c20 <prvAddCurrentTaskToDelayedList+0x58>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c10:	4b1a      	ldr	r3, [pc, #104]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4619      	mov	r1, r3
 8008c18:	481a      	ldr	r0, [pc, #104]	; (8008c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c1a:	f7fe fd74 	bl	8007706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c1e:	e026      	b.n	8008c6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4413      	add	r3, r2
 8008c26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c28:	4b14      	ldr	r3, [pc, #80]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d209      	bcs.n	8008c4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c38:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7fe fd82 	bl	800774e <vListInsert>
}
 8008c4a:	e010      	b.n	8008c6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c4c:	4b0f      	ldr	r3, [pc, #60]	; (8008c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f7fe fd78 	bl	800774e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d202      	bcs.n	8008c6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6013      	str	r3, [r2, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20000414 	.word	0x20000414
 8008c7c:	20000310 	.word	0x20000310
 8008c80:	20000418 	.word	0x20000418
 8008c84:	200003fc 	.word	0x200003fc
 8008c88:	200003cc 	.word	0x200003cc
 8008c8c:	200003c8 	.word	0x200003c8
 8008c90:	20000430 	.word	0x20000430

08008c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3b04      	subs	r3, #4
 8008ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3b04      	subs	r3, #4
 8008cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f023 0201 	bic.w	r2, r3, #1
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3b04      	subs	r3, #4
 8008cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cc4:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <pxPortInitialiseStack+0x64>)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b14      	subs	r3, #20
 8008cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3b04      	subs	r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f06f 0202 	mvn.w	r2, #2
 8008ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3b20      	subs	r3, #32
 8008ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cea:	68fb      	ldr	r3, [r7, #12]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	08008cfd 	.word	0x08008cfd

08008cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d06:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <prvTaskExitError+0x50>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0e:	d009      	beq.n	8008d24 <prvTaskExitError+0x28>
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	e7fe      	b.n	8008d22 <prvTaskExitError+0x26>
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d36:	bf00      	nop
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0fc      	beq.n	8008d38 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d3e:	bf00      	nop
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	2000002c 	.word	0x2000002c

08008d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <pxCurrentTCBConst2>)
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	6808      	ldr	r0, [r1, #0]
 8008d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5a:	f380 8809 	msr	PSP, r0
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f04f 0000 	mov.w	r0, #0
 8008d66:	f380 8811 	msr	BASEPRI, r0
 8008d6a:	4770      	bx	lr
 8008d6c:	f3af 8000 	nop.w

08008d70 <pxCurrentTCBConst2>:
 8008d70:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop

08008d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d78:	4808      	ldr	r0, [pc, #32]	; (8008d9c <prvPortStartFirstTask+0x24>)
 8008d7a:	6800      	ldr	r0, [r0, #0]
 8008d7c:	6800      	ldr	r0, [r0, #0]
 8008d7e:	f380 8808 	msr	MSP, r0
 8008d82:	f04f 0000 	mov.w	r0, #0
 8008d86:	f380 8814 	msr	CONTROL, r0
 8008d8a:	b662      	cpsie	i
 8008d8c:	b661      	cpsie	f
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	df00      	svc	0
 8008d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d9a:	bf00      	nop
 8008d9c:	e000ed08 	.word	0xe000ed08

08008da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008da6:	4b44      	ldr	r3, [pc, #272]	; (8008eb8 <xPortStartScheduler+0x118>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a44      	ldr	r2, [pc, #272]	; (8008ebc <xPortStartScheduler+0x11c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d109      	bne.n	8008dc4 <xPortStartScheduler+0x24>
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	e7fe      	b.n	8008dc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008dc4:	4b3c      	ldr	r3, [pc, #240]	; (8008eb8 <xPortStartScheduler+0x118>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a3d      	ldr	r2, [pc, #244]	; (8008ec0 <xPortStartScheduler+0x120>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d109      	bne.n	8008de2 <xPortStartScheduler+0x42>
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	e7fe      	b.n	8008de0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008de2:	4b38      	ldr	r3, [pc, #224]	; (8008ec4 <xPortStartScheduler+0x124>)
 8008de4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	4b30      	ldr	r3, [pc, #192]	; (8008ec8 <xPortStartScheduler+0x128>)
 8008e08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e0a:	4b30      	ldr	r3, [pc, #192]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e0c:	2207      	movs	r2, #7
 8008e0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e10:	e009      	b.n	8008e26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008e12:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	4a2c      	ldr	r2, [pc, #176]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2e:	2b80      	cmp	r3, #128	; 0x80
 8008e30:	d0ef      	beq.n	8008e12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e32:	4b26      	ldr	r3, [pc, #152]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1c3 0307 	rsb	r3, r3, #7
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d009      	beq.n	8008e52 <xPortStartScheduler+0xb2>
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	60bb      	str	r3, [r7, #8]
 8008e50:	e7fe      	b.n	8008e50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e52:	4b1e      	ldr	r3, [pc, #120]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e5c:	4b1b      	ldr	r3, [pc, #108]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e64:	4a19      	ldr	r2, [pc, #100]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e70:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <xPortStartScheduler+0x130>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <xPortStartScheduler+0x130>)
 8008e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e7c:	4b14      	ldr	r3, [pc, #80]	; (8008ed0 <xPortStartScheduler+0x130>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <xPortStartScheduler+0x130>)
 8008e82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e88:	f000 f8d6 	bl	8009038 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e8c:	4b11      	ldr	r3, [pc, #68]	; (8008ed4 <xPortStartScheduler+0x134>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e92:	f000 f8f5 	bl	8009080 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e96:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <xPortStartScheduler+0x138>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	; (8008ed8 <xPortStartScheduler+0x138>)
 8008e9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ea0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ea2:	f7ff ff69 	bl	8008d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ea6:	f7ff fb11 	bl	80084cc <vTaskSwitchContext>
	prvTaskExitError();
 8008eaa:	f7ff ff27 	bl	8008cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed00 	.word	0xe000ed00
 8008ebc:	410fc271 	.word	0x410fc271
 8008ec0:	410fc270 	.word	0x410fc270
 8008ec4:	e000e400 	.word	0xe000e400
 8008ec8:	2000043c 	.word	0x2000043c
 8008ecc:	20000440 	.word	0x20000440
 8008ed0:	e000ed20 	.word	0xe000ed20
 8008ed4:	2000002c 	.word	0x2000002c
 8008ed8:	e000ef34 	.word	0xe000ef34

08008edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <vPortEnterCritical+0x54>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	4a0d      	ldr	r2, [pc, #52]	; (8008f30 <vPortEnterCritical+0x54>)
 8008efc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <vPortEnterCritical+0x54>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d10e      	bne.n	8008f24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f06:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <vPortEnterCritical+0x58>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d009      	beq.n	8008f24 <vPortEnterCritical+0x48>
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	e7fe      	b.n	8008f22 <vPortEnterCritical+0x46>
	}
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	2000002c 	.word	0x2000002c
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f3e:	4b11      	ldr	r3, [pc, #68]	; (8008f84 <vPortExitCritical+0x4c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d109      	bne.n	8008f5a <vPortExitCritical+0x22>
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	607b      	str	r3, [r7, #4]
 8008f58:	e7fe      	b.n	8008f58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008f5a:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <vPortExitCritical+0x4c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	4a08      	ldr	r2, [pc, #32]	; (8008f84 <vPortExitCritical+0x4c>)
 8008f62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f64:	4b07      	ldr	r3, [pc, #28]	; (8008f84 <vPortExitCritical+0x4c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d104      	bne.n	8008f76 <vPortExitCritical+0x3e>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	2000002c 	.word	0x2000002c
	...

08008f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f90:	f3ef 8009 	mrs	r0, PSP
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <pxCurrentTCBConst>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	f01e 0f10 	tst.w	lr, #16
 8008fa0:	bf08      	it	eq
 8008fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008faa:	6010      	str	r0, [r2, #0]
 8008fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fb4:	f380 8811 	msr	BASEPRI, r0
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f7ff fa84 	bl	80084cc <vTaskSwitchContext>
 8008fc4:	f04f 0000 	mov.w	r0, #0
 8008fc8:	f380 8811 	msr	BASEPRI, r0
 8008fcc:	bc09      	pop	{r0, r3}
 8008fce:	6819      	ldr	r1, [r3, #0]
 8008fd0:	6808      	ldr	r0, [r1, #0]
 8008fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd6:	f01e 0f10 	tst.w	lr, #16
 8008fda:	bf08      	it	eq
 8008fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fe0:	f380 8809 	msr	PSP, r0
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	f3af 8000 	nop.w

08008ff0 <pxCurrentTCBConst>:
 8008ff0:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop

08008ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009010:	f7ff f9a4 	bl	800835c <xTaskIncrementTick>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800901a:	4b06      	ldr	r3, [pc, #24]	; (8009034 <SysTick_Handler+0x3c>)
 800901c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	2300      	movs	r3, #0
 8009024:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	e000ed04 	.word	0xe000ed04

08009038 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009038:	b480      	push	{r7}
 800903a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <vPortSetupTimerInterrupt+0x34>)
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <vPortSetupTimerInterrupt+0x38>)
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <vPortSetupTimerInterrupt+0x3c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <vPortSetupTimerInterrupt+0x40>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	099b      	lsrs	r3, r3, #6
 8009054:	4a09      	ldr	r2, [pc, #36]	; (800907c <vPortSetupTimerInterrupt+0x44>)
 8009056:	3b01      	subs	r3, #1
 8009058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800905a:	4b04      	ldr	r3, [pc, #16]	; (800906c <vPortSetupTimerInterrupt+0x34>)
 800905c:	2207      	movs	r2, #7
 800905e:	601a      	str	r2, [r3, #0]
}
 8009060:	bf00      	nop
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	e000e010 	.word	0xe000e010
 8009070:	e000e018 	.word	0xe000e018
 8009074:	20000020 	.word	0x20000020
 8009078:	10624dd3 	.word	0x10624dd3
 800907c:	e000e014 	.word	0xe000e014

08009080 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009080:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009090 <vPortEnableVFP+0x10>
 8009084:	6801      	ldr	r1, [r0, #0]
 8009086:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800908a:	6001      	str	r1, [r0, #0]
 800908c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800908e:	bf00      	nop
 8009090:	e000ed88 	.word	0xe000ed88

08009094 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800909a:	f3ef 8305 	mrs	r3, IPSR
 800909e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b0f      	cmp	r3, #15
 80090a4:	d913      	bls.n	80090ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090a6:	4a16      	ldr	r2, [pc, #88]	; (8009100 <vPortValidateInterruptPriority+0x6c>)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4413      	add	r3, r2
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090b0:	4b14      	ldr	r3, [pc, #80]	; (8009104 <vPortValidateInterruptPriority+0x70>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	7afa      	ldrb	r2, [r7, #11]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d209      	bcs.n	80090ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	e7fe      	b.n	80090cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090ce:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <vPortValidateInterruptPriority+0x74>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090d6:	4b0d      	ldr	r3, [pc, #52]	; (800910c <vPortValidateInterruptPriority+0x78>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d909      	bls.n	80090f2 <vPortValidateInterruptPriority+0x5e>
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	e7fe      	b.n	80090f0 <vPortValidateInterruptPriority+0x5c>
	}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	e000e3f0 	.word	0xe000e3f0
 8009104:	2000043c 	.word	0x2000043c
 8009108:	e000ed0c 	.word	0xe000ed0c
 800910c:	20000440 	.word	0x20000440

08009110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08a      	sub	sp, #40	; 0x28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009118:	2300      	movs	r3, #0
 800911a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800911c:	f7ff f874 	bl	8008208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009120:	4b57      	ldr	r3, [pc, #348]	; (8009280 <pvPortMalloc+0x170>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009128:	f000 f90c 	bl	8009344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800912c:	4b55      	ldr	r3, [pc, #340]	; (8009284 <pvPortMalloc+0x174>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4013      	ands	r3, r2
 8009134:	2b00      	cmp	r3, #0
 8009136:	f040 808c 	bne.w	8009252 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01c      	beq.n	800917a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009140:	2208      	movs	r2, #8
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	2b00      	cmp	r3, #0
 8009150:	d013      	beq.n	800917a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f023 0307 	bic.w	r3, r3, #7
 8009158:	3308      	adds	r3, #8
 800915a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	2b00      	cmp	r3, #0
 8009164:	d009      	beq.n	800917a <pvPortMalloc+0x6a>
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e7fe      	b.n	8009178 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d068      	beq.n	8009252 <pvPortMalloc+0x142>
 8009180:	4b41      	ldr	r3, [pc, #260]	; (8009288 <pvPortMalloc+0x178>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	429a      	cmp	r2, r3
 8009188:	d863      	bhi.n	8009252 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800918a:	4b40      	ldr	r3, [pc, #256]	; (800928c <pvPortMalloc+0x17c>)
 800918c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800918e:	4b3f      	ldr	r3, [pc, #252]	; (800928c <pvPortMalloc+0x17c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009194:	e004      	b.n	80091a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d903      	bls.n	80091b2 <pvPortMalloc+0xa2>
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1f1      	bne.n	8009196 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091b2:	4b33      	ldr	r3, [pc, #204]	; (8009280 <pvPortMalloc+0x170>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d04a      	beq.n	8009252 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2208      	movs	r2, #8
 80091c2:	4413      	add	r3, r2
 80091c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	1ad2      	subs	r2, r2, r3
 80091d6:	2308      	movs	r3, #8
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	429a      	cmp	r2, r3
 80091dc:	d91e      	bls.n	800921c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <pvPortMalloc+0xf4>
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	613b      	str	r3, [r7, #16]
 8009202:	e7fe      	b.n	8009202 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	1ad2      	subs	r2, r2, r3
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009216:	69b8      	ldr	r0, [r7, #24]
 8009218:	f000 f8f6 	bl	8009408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800921c:	4b1a      	ldr	r3, [pc, #104]	; (8009288 <pvPortMalloc+0x178>)
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	4a18      	ldr	r2, [pc, #96]	; (8009288 <pvPortMalloc+0x178>)
 8009228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800922a:	4b17      	ldr	r3, [pc, #92]	; (8009288 <pvPortMalloc+0x178>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4b18      	ldr	r3, [pc, #96]	; (8009290 <pvPortMalloc+0x180>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	d203      	bcs.n	800923e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009236:	4b14      	ldr	r3, [pc, #80]	; (8009288 <pvPortMalloc+0x178>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a15      	ldr	r2, [pc, #84]	; (8009290 <pvPortMalloc+0x180>)
 800923c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <pvPortMalloc+0x174>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	431a      	orrs	r2, r3
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009252:	f7fe ffe7 	bl	8008224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <pvPortMalloc+0x164>
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e7fe      	b.n	8009272 <pvPortMalloc+0x162>
	return pvReturn;
 8009274:	69fb      	ldr	r3, [r7, #28]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3728      	adds	r7, #40	; 0x28
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	2000404c 	.word	0x2000404c
 8009284:	20004058 	.word	0x20004058
 8009288:	20004050 	.word	0x20004050
 800928c:	20004044 	.word	0x20004044
 8009290:	20004054 	.word	0x20004054

08009294 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d046      	beq.n	8009334 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092a6:	2308      	movs	r3, #8
 80092a8:	425b      	negs	r3, r3
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	4413      	add	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	4b20      	ldr	r3, [pc, #128]	; (800933c <vPortFree+0xa8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4013      	ands	r3, r2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d109      	bne.n	80092d6 <vPortFree+0x42>
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e7fe      	b.n	80092d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <vPortFree+0x5e>
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	60bb      	str	r3, [r7, #8]
 80092f0:	e7fe      	b.n	80092f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	4b11      	ldr	r3, [pc, #68]	; (800933c <vPortFree+0xa8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4013      	ands	r3, r2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d019      	beq.n	8009334 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d115      	bne.n	8009334 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	4b0b      	ldr	r3, [pc, #44]	; (800933c <vPortFree+0xa8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	43db      	mvns	r3, r3
 8009312:	401a      	ands	r2, r3
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009318:	f7fe ff76 	bl	8008208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <vPortFree+0xac>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4413      	add	r3, r2
 8009326:	4a06      	ldr	r2, [pc, #24]	; (8009340 <vPortFree+0xac>)
 8009328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800932a:	6938      	ldr	r0, [r7, #16]
 800932c:	f000 f86c 	bl	8009408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009330:	f7fe ff78 	bl	8008224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009334:	bf00      	nop
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20004058 	.word	0x20004058
 8009340:	20004050 	.word	0x20004050

08009344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800934a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800934e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009350:	4b27      	ldr	r3, [pc, #156]	; (80093f0 <prvHeapInit+0xac>)
 8009352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00c      	beq.n	8009378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3307      	adds	r3, #7
 8009362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <prvHeapInit+0xac>)
 8009374:	4413      	add	r3, r2
 8009376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800937c:	4a1d      	ldr	r2, [pc, #116]	; (80093f4 <prvHeapInit+0xb0>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009382:	4b1c      	ldr	r3, [pc, #112]	; (80093f4 <prvHeapInit+0xb0>)
 8009384:	2200      	movs	r2, #0
 8009386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009390:	2208      	movs	r2, #8
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a15      	ldr	r2, [pc, #84]	; (80093f8 <prvHeapInit+0xb4>)
 80093a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093a6:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <prvHeapInit+0xb4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ae:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <prvHeapInit+0xb4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093c4:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <prvHeapInit+0xb4>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	4a0a      	ldr	r2, [pc, #40]	; (80093fc <prvHeapInit+0xb8>)
 80093d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4a09      	ldr	r2, [pc, #36]	; (8009400 <prvHeapInit+0xbc>)
 80093da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093dc:	4b09      	ldr	r3, [pc, #36]	; (8009404 <prvHeapInit+0xc0>)
 80093de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093e2:	601a      	str	r2, [r3, #0]
}
 80093e4:	bf00      	nop
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20000444 	.word	0x20000444
 80093f4:	20004044 	.word	0x20004044
 80093f8:	2000404c 	.word	0x2000404c
 80093fc:	20004054 	.word	0x20004054
 8009400:	20004050 	.word	0x20004050
 8009404:	20004058 	.word	0x20004058

08009408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009410:	4b28      	ldr	r3, [pc, #160]	; (80094b4 <prvInsertBlockIntoFreeList+0xac>)
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	e002      	b.n	800941c <prvInsertBlockIntoFreeList+0x14>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	429a      	cmp	r2, r3
 8009424:	d8f7      	bhi.n	8009416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d108      	bne.n	800944a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	441a      	add	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	441a      	add	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d118      	bne.n	8009490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d00d      	beq.n	8009486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	441a      	add	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	e008      	b.n	8009498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009486:	4b0c      	ldr	r3, [pc, #48]	; (80094b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e003      	b.n	8009498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d002      	beq.n	80094a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20004044 	.word	0x20004044
 80094b8:	2000404c 	.word	0x2000404c

080094bc <__errno>:
 80094bc:	4b01      	ldr	r3, [pc, #4]	; (80094c4 <__errno+0x8>)
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	20000030 	.word	0x20000030

080094c8 <__sflush_r>:
 80094c8:	898a      	ldrh	r2, [r1, #12]
 80094ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ce:	4605      	mov	r5, r0
 80094d0:	0710      	lsls	r0, r2, #28
 80094d2:	460c      	mov	r4, r1
 80094d4:	d458      	bmi.n	8009588 <__sflush_r+0xc0>
 80094d6:	684b      	ldr	r3, [r1, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dc05      	bgt.n	80094e8 <__sflush_r+0x20>
 80094dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	dc02      	bgt.n	80094e8 <__sflush_r+0x20>
 80094e2:	2000      	movs	r0, #0
 80094e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	d0f9      	beq.n	80094e2 <__sflush_r+0x1a>
 80094ee:	2300      	movs	r3, #0
 80094f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094f4:	682f      	ldr	r7, [r5, #0]
 80094f6:	6a21      	ldr	r1, [r4, #32]
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	d032      	beq.n	8009562 <__sflush_r+0x9a>
 80094fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094fe:	89a3      	ldrh	r3, [r4, #12]
 8009500:	075a      	lsls	r2, r3, #29
 8009502:	d505      	bpl.n	8009510 <__sflush_r+0x48>
 8009504:	6863      	ldr	r3, [r4, #4]
 8009506:	1ac0      	subs	r0, r0, r3
 8009508:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800950a:	b10b      	cbz	r3, 8009510 <__sflush_r+0x48>
 800950c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800950e:	1ac0      	subs	r0, r0, r3
 8009510:	2300      	movs	r3, #0
 8009512:	4602      	mov	r2, r0
 8009514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009516:	6a21      	ldr	r1, [r4, #32]
 8009518:	4628      	mov	r0, r5
 800951a:	47b0      	blx	r6
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	d106      	bne.n	8009530 <__sflush_r+0x68>
 8009522:	6829      	ldr	r1, [r5, #0]
 8009524:	291d      	cmp	r1, #29
 8009526:	d848      	bhi.n	80095ba <__sflush_r+0xf2>
 8009528:	4a29      	ldr	r2, [pc, #164]	; (80095d0 <__sflush_r+0x108>)
 800952a:	40ca      	lsrs	r2, r1
 800952c:	07d6      	lsls	r6, r2, #31
 800952e:	d544      	bpl.n	80095ba <__sflush_r+0xf2>
 8009530:	2200      	movs	r2, #0
 8009532:	6062      	str	r2, [r4, #4]
 8009534:	04d9      	lsls	r1, r3, #19
 8009536:	6922      	ldr	r2, [r4, #16]
 8009538:	6022      	str	r2, [r4, #0]
 800953a:	d504      	bpl.n	8009546 <__sflush_r+0x7e>
 800953c:	1c42      	adds	r2, r0, #1
 800953e:	d101      	bne.n	8009544 <__sflush_r+0x7c>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b903      	cbnz	r3, 8009546 <__sflush_r+0x7e>
 8009544:	6560      	str	r0, [r4, #84]	; 0x54
 8009546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009548:	602f      	str	r7, [r5, #0]
 800954a:	2900      	cmp	r1, #0
 800954c:	d0c9      	beq.n	80094e2 <__sflush_r+0x1a>
 800954e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009552:	4299      	cmp	r1, r3
 8009554:	d002      	beq.n	800955c <__sflush_r+0x94>
 8009556:	4628      	mov	r0, r5
 8009558:	f000 f96e 	bl	8009838 <_free_r>
 800955c:	2000      	movs	r0, #0
 800955e:	6360      	str	r0, [r4, #52]	; 0x34
 8009560:	e7c0      	b.n	80094e4 <__sflush_r+0x1c>
 8009562:	2301      	movs	r3, #1
 8009564:	4628      	mov	r0, r5
 8009566:	47b0      	blx	r6
 8009568:	1c41      	adds	r1, r0, #1
 800956a:	d1c8      	bne.n	80094fe <__sflush_r+0x36>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0c5      	beq.n	80094fe <__sflush_r+0x36>
 8009572:	2b1d      	cmp	r3, #29
 8009574:	d001      	beq.n	800957a <__sflush_r+0xb2>
 8009576:	2b16      	cmp	r3, #22
 8009578:	d101      	bne.n	800957e <__sflush_r+0xb6>
 800957a:	602f      	str	r7, [r5, #0]
 800957c:	e7b1      	b.n	80094e2 <__sflush_r+0x1a>
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	e7ad      	b.n	80094e4 <__sflush_r+0x1c>
 8009588:	690f      	ldr	r7, [r1, #16]
 800958a:	2f00      	cmp	r7, #0
 800958c:	d0a9      	beq.n	80094e2 <__sflush_r+0x1a>
 800958e:	0793      	lsls	r3, r2, #30
 8009590:	680e      	ldr	r6, [r1, #0]
 8009592:	bf08      	it	eq
 8009594:	694b      	ldreq	r3, [r1, #20]
 8009596:	600f      	str	r7, [r1, #0]
 8009598:	bf18      	it	ne
 800959a:	2300      	movne	r3, #0
 800959c:	eba6 0807 	sub.w	r8, r6, r7
 80095a0:	608b      	str	r3, [r1, #8]
 80095a2:	f1b8 0f00 	cmp.w	r8, #0
 80095a6:	dd9c      	ble.n	80094e2 <__sflush_r+0x1a>
 80095a8:	4643      	mov	r3, r8
 80095aa:	463a      	mov	r2, r7
 80095ac:	6a21      	ldr	r1, [r4, #32]
 80095ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b0      	blx	r6
 80095b4:	2800      	cmp	r0, #0
 80095b6:	dc06      	bgt.n	80095c6 <__sflush_r+0xfe>
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	e78e      	b.n	80094e4 <__sflush_r+0x1c>
 80095c6:	4407      	add	r7, r0
 80095c8:	eba8 0800 	sub.w	r8, r8, r0
 80095cc:	e7e9      	b.n	80095a2 <__sflush_r+0xda>
 80095ce:	bf00      	nop
 80095d0:	20400001 	.word	0x20400001

080095d4 <_fflush_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	690b      	ldr	r3, [r1, #16]
 80095d8:	4605      	mov	r5, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	b1db      	cbz	r3, 8009616 <_fflush_r+0x42>
 80095de:	b118      	cbz	r0, 80095e8 <_fflush_r+0x14>
 80095e0:	6983      	ldr	r3, [r0, #24]
 80095e2:	b90b      	cbnz	r3, 80095e8 <_fflush_r+0x14>
 80095e4:	f000 f872 	bl	80096cc <__sinit>
 80095e8:	4b0c      	ldr	r3, [pc, #48]	; (800961c <_fflush_r+0x48>)
 80095ea:	429c      	cmp	r4, r3
 80095ec:	d109      	bne.n	8009602 <_fflush_r+0x2e>
 80095ee:	686c      	ldr	r4, [r5, #4]
 80095f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f4:	b17b      	cbz	r3, 8009616 <_fflush_r+0x42>
 80095f6:	4621      	mov	r1, r4
 80095f8:	4628      	mov	r0, r5
 80095fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095fe:	f7ff bf63 	b.w	80094c8 <__sflush_r>
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <_fflush_r+0x4c>)
 8009604:	429c      	cmp	r4, r3
 8009606:	d101      	bne.n	800960c <_fflush_r+0x38>
 8009608:	68ac      	ldr	r4, [r5, #8]
 800960a:	e7f1      	b.n	80095f0 <_fflush_r+0x1c>
 800960c:	4b05      	ldr	r3, [pc, #20]	; (8009624 <_fflush_r+0x50>)
 800960e:	429c      	cmp	r4, r3
 8009610:	bf08      	it	eq
 8009612:	68ec      	ldreq	r4, [r5, #12]
 8009614:	e7ec      	b.n	80095f0 <_fflush_r+0x1c>
 8009616:	2000      	movs	r0, #0
 8009618:	bd38      	pop	{r3, r4, r5, pc}
 800961a:	bf00      	nop
 800961c:	0800a60c 	.word	0x0800a60c
 8009620:	0800a62c 	.word	0x0800a62c
 8009624:	0800a5ec 	.word	0x0800a5ec

08009628 <fflush>:
 8009628:	4601      	mov	r1, r0
 800962a:	b920      	cbnz	r0, 8009636 <fflush+0xe>
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <fflush+0x18>)
 800962e:	4905      	ldr	r1, [pc, #20]	; (8009644 <fflush+0x1c>)
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f000 b8b7 	b.w	80097a4 <_fwalk_reent>
 8009636:	4b04      	ldr	r3, [pc, #16]	; (8009648 <fflush+0x20>)
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f7ff bfcb 	b.w	80095d4 <_fflush_r>
 800963e:	bf00      	nop
 8009640:	0800a64c 	.word	0x0800a64c
 8009644:	080095d5 	.word	0x080095d5
 8009648:	20000030 	.word	0x20000030

0800964c <std>:
 800964c:	2300      	movs	r3, #0
 800964e:	b510      	push	{r4, lr}
 8009650:	4604      	mov	r4, r0
 8009652:	e9c0 3300 	strd	r3, r3, [r0]
 8009656:	6083      	str	r3, [r0, #8]
 8009658:	8181      	strh	r1, [r0, #12]
 800965a:	6643      	str	r3, [r0, #100]	; 0x64
 800965c:	81c2      	strh	r2, [r0, #14]
 800965e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009662:	6183      	str	r3, [r0, #24]
 8009664:	4619      	mov	r1, r3
 8009666:	2208      	movs	r2, #8
 8009668:	305c      	adds	r0, #92	; 0x5c
 800966a:	f000 f8dd 	bl	8009828 <memset>
 800966e:	4b05      	ldr	r3, [pc, #20]	; (8009684 <std+0x38>)
 8009670:	6263      	str	r3, [r4, #36]	; 0x24
 8009672:	4b05      	ldr	r3, [pc, #20]	; (8009688 <std+0x3c>)
 8009674:	62a3      	str	r3, [r4, #40]	; 0x28
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <std+0x40>)
 8009678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800967a:	4b05      	ldr	r3, [pc, #20]	; (8009690 <std+0x44>)
 800967c:	6224      	str	r4, [r4, #32]
 800967e:	6323      	str	r3, [r4, #48]	; 0x30
 8009680:	bd10      	pop	{r4, pc}
 8009682:	bf00      	nop
 8009684:	08009aa1 	.word	0x08009aa1
 8009688:	08009ac3 	.word	0x08009ac3
 800968c:	08009afb 	.word	0x08009afb
 8009690:	08009b1f 	.word	0x08009b1f

08009694 <_cleanup_r>:
 8009694:	4901      	ldr	r1, [pc, #4]	; (800969c <_cleanup_r+0x8>)
 8009696:	f000 b885 	b.w	80097a4 <_fwalk_reent>
 800969a:	bf00      	nop
 800969c:	080095d5 	.word	0x080095d5

080096a0 <__sfmoreglue>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	1e4a      	subs	r2, r1, #1
 80096a4:	2568      	movs	r5, #104	; 0x68
 80096a6:	4355      	muls	r5, r2
 80096a8:	460e      	mov	r6, r1
 80096aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096ae:	f000 f911 	bl	80098d4 <_malloc_r>
 80096b2:	4604      	mov	r4, r0
 80096b4:	b140      	cbz	r0, 80096c8 <__sfmoreglue+0x28>
 80096b6:	2100      	movs	r1, #0
 80096b8:	e9c0 1600 	strd	r1, r6, [r0]
 80096bc:	300c      	adds	r0, #12
 80096be:	60a0      	str	r0, [r4, #8]
 80096c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096c4:	f000 f8b0 	bl	8009828 <memset>
 80096c8:	4620      	mov	r0, r4
 80096ca:	bd70      	pop	{r4, r5, r6, pc}

080096cc <__sinit>:
 80096cc:	6983      	ldr	r3, [r0, #24]
 80096ce:	b510      	push	{r4, lr}
 80096d0:	4604      	mov	r4, r0
 80096d2:	bb33      	cbnz	r3, 8009722 <__sinit+0x56>
 80096d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80096d8:	6503      	str	r3, [r0, #80]	; 0x50
 80096da:	4b12      	ldr	r3, [pc, #72]	; (8009724 <__sinit+0x58>)
 80096dc:	4a12      	ldr	r2, [pc, #72]	; (8009728 <__sinit+0x5c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6282      	str	r2, [r0, #40]	; 0x28
 80096e2:	4298      	cmp	r0, r3
 80096e4:	bf04      	itt	eq
 80096e6:	2301      	moveq	r3, #1
 80096e8:	6183      	streq	r3, [r0, #24]
 80096ea:	f000 f81f 	bl	800972c <__sfp>
 80096ee:	6060      	str	r0, [r4, #4]
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 f81b 	bl	800972c <__sfp>
 80096f6:	60a0      	str	r0, [r4, #8]
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 f817 	bl	800972c <__sfp>
 80096fe:	2200      	movs	r2, #0
 8009700:	60e0      	str	r0, [r4, #12]
 8009702:	2104      	movs	r1, #4
 8009704:	6860      	ldr	r0, [r4, #4]
 8009706:	f7ff ffa1 	bl	800964c <std>
 800970a:	2201      	movs	r2, #1
 800970c:	2109      	movs	r1, #9
 800970e:	68a0      	ldr	r0, [r4, #8]
 8009710:	f7ff ff9c 	bl	800964c <std>
 8009714:	2202      	movs	r2, #2
 8009716:	2112      	movs	r1, #18
 8009718:	68e0      	ldr	r0, [r4, #12]
 800971a:	f7ff ff97 	bl	800964c <std>
 800971e:	2301      	movs	r3, #1
 8009720:	61a3      	str	r3, [r4, #24]
 8009722:	bd10      	pop	{r4, pc}
 8009724:	0800a64c 	.word	0x0800a64c
 8009728:	08009695 	.word	0x08009695

0800972c <__sfp>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	4b1b      	ldr	r3, [pc, #108]	; (800979c <__sfp+0x70>)
 8009730:	681e      	ldr	r6, [r3, #0]
 8009732:	69b3      	ldr	r3, [r6, #24]
 8009734:	4607      	mov	r7, r0
 8009736:	b913      	cbnz	r3, 800973e <__sfp+0x12>
 8009738:	4630      	mov	r0, r6
 800973a:	f7ff ffc7 	bl	80096cc <__sinit>
 800973e:	3648      	adds	r6, #72	; 0x48
 8009740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009744:	3b01      	subs	r3, #1
 8009746:	d503      	bpl.n	8009750 <__sfp+0x24>
 8009748:	6833      	ldr	r3, [r6, #0]
 800974a:	b133      	cbz	r3, 800975a <__sfp+0x2e>
 800974c:	6836      	ldr	r6, [r6, #0]
 800974e:	e7f7      	b.n	8009740 <__sfp+0x14>
 8009750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009754:	b16d      	cbz	r5, 8009772 <__sfp+0x46>
 8009756:	3468      	adds	r4, #104	; 0x68
 8009758:	e7f4      	b.n	8009744 <__sfp+0x18>
 800975a:	2104      	movs	r1, #4
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ff9f 	bl	80096a0 <__sfmoreglue>
 8009762:	6030      	str	r0, [r6, #0]
 8009764:	2800      	cmp	r0, #0
 8009766:	d1f1      	bne.n	800974c <__sfp+0x20>
 8009768:	230c      	movs	r3, #12
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	4604      	mov	r4, r0
 800976e:	4620      	mov	r0, r4
 8009770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <__sfp+0x74>)
 8009774:	6665      	str	r5, [r4, #100]	; 0x64
 8009776:	e9c4 5500 	strd	r5, r5, [r4]
 800977a:	60a5      	str	r5, [r4, #8]
 800977c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009780:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009784:	2208      	movs	r2, #8
 8009786:	4629      	mov	r1, r5
 8009788:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800978c:	f000 f84c 	bl	8009828 <memset>
 8009790:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009794:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009798:	e7e9      	b.n	800976e <__sfp+0x42>
 800979a:	bf00      	nop
 800979c:	0800a64c 	.word	0x0800a64c
 80097a0:	ffff0001 	.word	0xffff0001

080097a4 <_fwalk_reent>:
 80097a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a8:	4680      	mov	r8, r0
 80097aa:	4689      	mov	r9, r1
 80097ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097b0:	2600      	movs	r6, #0
 80097b2:	b914      	cbnz	r4, 80097ba <_fwalk_reent+0x16>
 80097b4:	4630      	mov	r0, r6
 80097b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80097be:	3f01      	subs	r7, #1
 80097c0:	d501      	bpl.n	80097c6 <_fwalk_reent+0x22>
 80097c2:	6824      	ldr	r4, [r4, #0]
 80097c4:	e7f5      	b.n	80097b2 <_fwalk_reent+0xe>
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d907      	bls.n	80097dc <_fwalk_reent+0x38>
 80097cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097d0:	3301      	adds	r3, #1
 80097d2:	d003      	beq.n	80097dc <_fwalk_reent+0x38>
 80097d4:	4629      	mov	r1, r5
 80097d6:	4640      	mov	r0, r8
 80097d8:	47c8      	blx	r9
 80097da:	4306      	orrs	r6, r0
 80097dc:	3568      	adds	r5, #104	; 0x68
 80097de:	e7ee      	b.n	80097be <_fwalk_reent+0x1a>

080097e0 <__libc_init_array>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4e0d      	ldr	r6, [pc, #52]	; (8009818 <__libc_init_array+0x38>)
 80097e4:	4c0d      	ldr	r4, [pc, #52]	; (800981c <__libc_init_array+0x3c>)
 80097e6:	1ba4      	subs	r4, r4, r6
 80097e8:	10a4      	asrs	r4, r4, #2
 80097ea:	2500      	movs	r5, #0
 80097ec:	42a5      	cmp	r5, r4
 80097ee:	d109      	bne.n	8009804 <__libc_init_array+0x24>
 80097f0:	4e0b      	ldr	r6, [pc, #44]	; (8009820 <__libc_init_array+0x40>)
 80097f2:	4c0c      	ldr	r4, [pc, #48]	; (8009824 <__libc_init_array+0x44>)
 80097f4:	f000 fdee 	bl	800a3d4 <_init>
 80097f8:	1ba4      	subs	r4, r4, r6
 80097fa:	10a4      	asrs	r4, r4, #2
 80097fc:	2500      	movs	r5, #0
 80097fe:	42a5      	cmp	r5, r4
 8009800:	d105      	bne.n	800980e <__libc_init_array+0x2e>
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009808:	4798      	blx	r3
 800980a:	3501      	adds	r5, #1
 800980c:	e7ee      	b.n	80097ec <__libc_init_array+0xc>
 800980e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009812:	4798      	blx	r3
 8009814:	3501      	adds	r5, #1
 8009816:	e7f2      	b.n	80097fe <__libc_init_array+0x1e>
 8009818:	0800a68c 	.word	0x0800a68c
 800981c:	0800a68c 	.word	0x0800a68c
 8009820:	0800a68c 	.word	0x0800a68c
 8009824:	0800a690 	.word	0x0800a690

08009828 <memset>:
 8009828:	4402      	add	r2, r0
 800982a:	4603      	mov	r3, r0
 800982c:	4293      	cmp	r3, r2
 800982e:	d100      	bne.n	8009832 <memset+0xa>
 8009830:	4770      	bx	lr
 8009832:	f803 1b01 	strb.w	r1, [r3], #1
 8009836:	e7f9      	b.n	800982c <memset+0x4>

08009838 <_free_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4605      	mov	r5, r0
 800983c:	2900      	cmp	r1, #0
 800983e:	d045      	beq.n	80098cc <_free_r+0x94>
 8009840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009844:	1f0c      	subs	r4, r1, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfb8      	it	lt
 800984a:	18e4      	addlt	r4, r4, r3
 800984c:	f000 fac4 	bl	8009dd8 <__malloc_lock>
 8009850:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <_free_r+0x98>)
 8009852:	6813      	ldr	r3, [r2, #0]
 8009854:	4610      	mov	r0, r2
 8009856:	b933      	cbnz	r3, 8009866 <_free_r+0x2e>
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	6014      	str	r4, [r2, #0]
 800985c:	4628      	mov	r0, r5
 800985e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009862:	f000 baba 	b.w	8009dda <__malloc_unlock>
 8009866:	42a3      	cmp	r3, r4
 8009868:	d90c      	bls.n	8009884 <_free_r+0x4c>
 800986a:	6821      	ldr	r1, [r4, #0]
 800986c:	1862      	adds	r2, r4, r1
 800986e:	4293      	cmp	r3, r2
 8009870:	bf04      	itt	eq
 8009872:	681a      	ldreq	r2, [r3, #0]
 8009874:	685b      	ldreq	r3, [r3, #4]
 8009876:	6063      	str	r3, [r4, #4]
 8009878:	bf04      	itt	eq
 800987a:	1852      	addeq	r2, r2, r1
 800987c:	6022      	streq	r2, [r4, #0]
 800987e:	6004      	str	r4, [r0, #0]
 8009880:	e7ec      	b.n	800985c <_free_r+0x24>
 8009882:	4613      	mov	r3, r2
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	b10a      	cbz	r2, 800988c <_free_r+0x54>
 8009888:	42a2      	cmp	r2, r4
 800988a:	d9fa      	bls.n	8009882 <_free_r+0x4a>
 800988c:	6819      	ldr	r1, [r3, #0]
 800988e:	1858      	adds	r0, r3, r1
 8009890:	42a0      	cmp	r0, r4
 8009892:	d10b      	bne.n	80098ac <_free_r+0x74>
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	4401      	add	r1, r0
 8009898:	1858      	adds	r0, r3, r1
 800989a:	4282      	cmp	r2, r0
 800989c:	6019      	str	r1, [r3, #0]
 800989e:	d1dd      	bne.n	800985c <_free_r+0x24>
 80098a0:	6810      	ldr	r0, [r2, #0]
 80098a2:	6852      	ldr	r2, [r2, #4]
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	4401      	add	r1, r0
 80098a8:	6019      	str	r1, [r3, #0]
 80098aa:	e7d7      	b.n	800985c <_free_r+0x24>
 80098ac:	d902      	bls.n	80098b4 <_free_r+0x7c>
 80098ae:	230c      	movs	r3, #12
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	e7d3      	b.n	800985c <_free_r+0x24>
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	1821      	adds	r1, r4, r0
 80098b8:	428a      	cmp	r2, r1
 80098ba:	bf04      	itt	eq
 80098bc:	6811      	ldreq	r1, [r2, #0]
 80098be:	6852      	ldreq	r2, [r2, #4]
 80098c0:	6062      	str	r2, [r4, #4]
 80098c2:	bf04      	itt	eq
 80098c4:	1809      	addeq	r1, r1, r0
 80098c6:	6021      	streq	r1, [r4, #0]
 80098c8:	605c      	str	r4, [r3, #4]
 80098ca:	e7c7      	b.n	800985c <_free_r+0x24>
 80098cc:	bd38      	pop	{r3, r4, r5, pc}
 80098ce:	bf00      	nop
 80098d0:	2000405c 	.word	0x2000405c

080098d4 <_malloc_r>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	1ccd      	adds	r5, r1, #3
 80098d8:	f025 0503 	bic.w	r5, r5, #3
 80098dc:	3508      	adds	r5, #8
 80098de:	2d0c      	cmp	r5, #12
 80098e0:	bf38      	it	cc
 80098e2:	250c      	movcc	r5, #12
 80098e4:	2d00      	cmp	r5, #0
 80098e6:	4606      	mov	r6, r0
 80098e8:	db01      	blt.n	80098ee <_malloc_r+0x1a>
 80098ea:	42a9      	cmp	r1, r5
 80098ec:	d903      	bls.n	80098f6 <_malloc_r+0x22>
 80098ee:	230c      	movs	r3, #12
 80098f0:	6033      	str	r3, [r6, #0]
 80098f2:	2000      	movs	r0, #0
 80098f4:	bd70      	pop	{r4, r5, r6, pc}
 80098f6:	f000 fa6f 	bl	8009dd8 <__malloc_lock>
 80098fa:	4a21      	ldr	r2, [pc, #132]	; (8009980 <_malloc_r+0xac>)
 80098fc:	6814      	ldr	r4, [r2, #0]
 80098fe:	4621      	mov	r1, r4
 8009900:	b991      	cbnz	r1, 8009928 <_malloc_r+0x54>
 8009902:	4c20      	ldr	r4, [pc, #128]	; (8009984 <_malloc_r+0xb0>)
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	b91b      	cbnz	r3, 8009910 <_malloc_r+0x3c>
 8009908:	4630      	mov	r0, r6
 800990a:	f000 f8b9 	bl	8009a80 <_sbrk_r>
 800990e:	6020      	str	r0, [r4, #0]
 8009910:	4629      	mov	r1, r5
 8009912:	4630      	mov	r0, r6
 8009914:	f000 f8b4 	bl	8009a80 <_sbrk_r>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d124      	bne.n	8009966 <_malloc_r+0x92>
 800991c:	230c      	movs	r3, #12
 800991e:	6033      	str	r3, [r6, #0]
 8009920:	4630      	mov	r0, r6
 8009922:	f000 fa5a 	bl	8009dda <__malloc_unlock>
 8009926:	e7e4      	b.n	80098f2 <_malloc_r+0x1e>
 8009928:	680b      	ldr	r3, [r1, #0]
 800992a:	1b5b      	subs	r3, r3, r5
 800992c:	d418      	bmi.n	8009960 <_malloc_r+0x8c>
 800992e:	2b0b      	cmp	r3, #11
 8009930:	d90f      	bls.n	8009952 <_malloc_r+0x7e>
 8009932:	600b      	str	r3, [r1, #0]
 8009934:	50cd      	str	r5, [r1, r3]
 8009936:	18cc      	adds	r4, r1, r3
 8009938:	4630      	mov	r0, r6
 800993a:	f000 fa4e 	bl	8009dda <__malloc_unlock>
 800993e:	f104 000b 	add.w	r0, r4, #11
 8009942:	1d23      	adds	r3, r4, #4
 8009944:	f020 0007 	bic.w	r0, r0, #7
 8009948:	1ac3      	subs	r3, r0, r3
 800994a:	d0d3      	beq.n	80098f4 <_malloc_r+0x20>
 800994c:	425a      	negs	r2, r3
 800994e:	50e2      	str	r2, [r4, r3]
 8009950:	e7d0      	b.n	80098f4 <_malloc_r+0x20>
 8009952:	428c      	cmp	r4, r1
 8009954:	684b      	ldr	r3, [r1, #4]
 8009956:	bf16      	itet	ne
 8009958:	6063      	strne	r3, [r4, #4]
 800995a:	6013      	streq	r3, [r2, #0]
 800995c:	460c      	movne	r4, r1
 800995e:	e7eb      	b.n	8009938 <_malloc_r+0x64>
 8009960:	460c      	mov	r4, r1
 8009962:	6849      	ldr	r1, [r1, #4]
 8009964:	e7cc      	b.n	8009900 <_malloc_r+0x2c>
 8009966:	1cc4      	adds	r4, r0, #3
 8009968:	f024 0403 	bic.w	r4, r4, #3
 800996c:	42a0      	cmp	r0, r4
 800996e:	d005      	beq.n	800997c <_malloc_r+0xa8>
 8009970:	1a21      	subs	r1, r4, r0
 8009972:	4630      	mov	r0, r6
 8009974:	f000 f884 	bl	8009a80 <_sbrk_r>
 8009978:	3001      	adds	r0, #1
 800997a:	d0cf      	beq.n	800991c <_malloc_r+0x48>
 800997c:	6025      	str	r5, [r4, #0]
 800997e:	e7db      	b.n	8009938 <_malloc_r+0x64>
 8009980:	2000405c 	.word	0x2000405c
 8009984:	20004060 	.word	0x20004060

08009988 <iprintf>:
 8009988:	b40f      	push	{r0, r1, r2, r3}
 800998a:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <iprintf+0x2c>)
 800998c:	b513      	push	{r0, r1, r4, lr}
 800998e:	681c      	ldr	r4, [r3, #0]
 8009990:	b124      	cbz	r4, 800999c <iprintf+0x14>
 8009992:	69a3      	ldr	r3, [r4, #24]
 8009994:	b913      	cbnz	r3, 800999c <iprintf+0x14>
 8009996:	4620      	mov	r0, r4
 8009998:	f7ff fe98 	bl	80096cc <__sinit>
 800999c:	ab05      	add	r3, sp, #20
 800999e:	9a04      	ldr	r2, [sp, #16]
 80099a0:	68a1      	ldr	r1, [r4, #8]
 80099a2:	9301      	str	r3, [sp, #4]
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 fa43 	bl	8009e30 <_vfiprintf_r>
 80099aa:	b002      	add	sp, #8
 80099ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b0:	b004      	add	sp, #16
 80099b2:	4770      	bx	lr
 80099b4:	20000030 	.word	0x20000030

080099b8 <_puts_r>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	460e      	mov	r6, r1
 80099bc:	4605      	mov	r5, r0
 80099be:	b118      	cbz	r0, 80099c8 <_puts_r+0x10>
 80099c0:	6983      	ldr	r3, [r0, #24]
 80099c2:	b90b      	cbnz	r3, 80099c8 <_puts_r+0x10>
 80099c4:	f7ff fe82 	bl	80096cc <__sinit>
 80099c8:	69ab      	ldr	r3, [r5, #24]
 80099ca:	68ac      	ldr	r4, [r5, #8]
 80099cc:	b913      	cbnz	r3, 80099d4 <_puts_r+0x1c>
 80099ce:	4628      	mov	r0, r5
 80099d0:	f7ff fe7c 	bl	80096cc <__sinit>
 80099d4:	4b23      	ldr	r3, [pc, #140]	; (8009a64 <_puts_r+0xac>)
 80099d6:	429c      	cmp	r4, r3
 80099d8:	d117      	bne.n	8009a0a <_puts_r+0x52>
 80099da:	686c      	ldr	r4, [r5, #4]
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	071b      	lsls	r3, r3, #28
 80099e0:	d51d      	bpl.n	8009a1e <_puts_r+0x66>
 80099e2:	6923      	ldr	r3, [r4, #16]
 80099e4:	b1db      	cbz	r3, 8009a1e <_puts_r+0x66>
 80099e6:	3e01      	subs	r6, #1
 80099e8:	68a3      	ldr	r3, [r4, #8]
 80099ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099ee:	3b01      	subs	r3, #1
 80099f0:	60a3      	str	r3, [r4, #8]
 80099f2:	b9e9      	cbnz	r1, 8009a30 <_puts_r+0x78>
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da2e      	bge.n	8009a56 <_puts_r+0x9e>
 80099f8:	4622      	mov	r2, r4
 80099fa:	210a      	movs	r1, #10
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 f893 	bl	8009b28 <__swbuf_r>
 8009a02:	3001      	adds	r0, #1
 8009a04:	d011      	beq.n	8009a2a <_puts_r+0x72>
 8009a06:	200a      	movs	r0, #10
 8009a08:	e011      	b.n	8009a2e <_puts_r+0x76>
 8009a0a:	4b17      	ldr	r3, [pc, #92]	; (8009a68 <_puts_r+0xb0>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	d101      	bne.n	8009a14 <_puts_r+0x5c>
 8009a10:	68ac      	ldr	r4, [r5, #8]
 8009a12:	e7e3      	b.n	80099dc <_puts_r+0x24>
 8009a14:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <_puts_r+0xb4>)
 8009a16:	429c      	cmp	r4, r3
 8009a18:	bf08      	it	eq
 8009a1a:	68ec      	ldreq	r4, [r5, #12]
 8009a1c:	e7de      	b.n	80099dc <_puts_r+0x24>
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 f8e5 	bl	8009bf0 <__swsetup_r>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d0dd      	beq.n	80099e6 <_puts_r+0x2e>
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	da04      	bge.n	8009a3e <_puts_r+0x86>
 8009a34:	69a2      	ldr	r2, [r4, #24]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	dc06      	bgt.n	8009a48 <_puts_r+0x90>
 8009a3a:	290a      	cmp	r1, #10
 8009a3c:	d004      	beq.n	8009a48 <_puts_r+0x90>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	6022      	str	r2, [r4, #0]
 8009a44:	7019      	strb	r1, [r3, #0]
 8009a46:	e7cf      	b.n	80099e8 <_puts_r+0x30>
 8009a48:	4622      	mov	r2, r4
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f000 f86c 	bl	8009b28 <__swbuf_r>
 8009a50:	3001      	adds	r0, #1
 8009a52:	d1c9      	bne.n	80099e8 <_puts_r+0x30>
 8009a54:	e7e9      	b.n	8009a2a <_puts_r+0x72>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	200a      	movs	r0, #10
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	6022      	str	r2, [r4, #0]
 8009a5e:	7018      	strb	r0, [r3, #0]
 8009a60:	e7e5      	b.n	8009a2e <_puts_r+0x76>
 8009a62:	bf00      	nop
 8009a64:	0800a60c 	.word	0x0800a60c
 8009a68:	0800a62c 	.word	0x0800a62c
 8009a6c:	0800a5ec 	.word	0x0800a5ec

08009a70 <puts>:
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <puts+0xc>)
 8009a72:	4601      	mov	r1, r0
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	f7ff bf9f 	b.w	80099b8 <_puts_r>
 8009a7a:	bf00      	nop
 8009a7c:	20000030 	.word	0x20000030

08009a80 <_sbrk_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4c06      	ldr	r4, [pc, #24]	; (8009a9c <_sbrk_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4605      	mov	r5, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	f7f7 ff88 	bl	80019a0 <_sbrk>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_sbrk_r+0x1a>
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_sbrk_r+0x1a>
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20004954 	.word	0x20004954

08009aa0 <__sread>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	f000 fc60 	bl	800a36c <_read_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	bfab      	itete	ge
 8009ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ab4:	181b      	addge	r3, r3, r0
 8009ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009aba:	bfac      	ite	ge
 8009abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009abe:	81a3      	strhlt	r3, [r4, #12]
 8009ac0:	bd10      	pop	{r4, pc}

08009ac2 <__swrite>:
 8009ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	461f      	mov	r7, r3
 8009ac8:	898b      	ldrh	r3, [r1, #12]
 8009aca:	05db      	lsls	r3, r3, #23
 8009acc:	4605      	mov	r5, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	d505      	bpl.n	8009ae0 <__swrite+0x1e>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009adc:	f000 f906 	bl	8009cec <_lseek_r>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	4628      	mov	r0, r5
 8009af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009af6:	f000 b869 	b.w	8009bcc <_write_r>

08009afa <__sseek>:
 8009afa:	b510      	push	{r4, lr}
 8009afc:	460c      	mov	r4, r1
 8009afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b02:	f000 f8f3 	bl	8009cec <_lseek_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	bf15      	itete	ne
 8009b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b16:	81a3      	strheq	r3, [r4, #12]
 8009b18:	bf18      	it	ne
 8009b1a:	81a3      	strhne	r3, [r4, #12]
 8009b1c:	bd10      	pop	{r4, pc}

08009b1e <__sclose>:
 8009b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b22:	f000 b8d3 	b.w	8009ccc <_close_r>
	...

08009b28 <__swbuf_r>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	460e      	mov	r6, r1
 8009b2c:	4614      	mov	r4, r2
 8009b2e:	4605      	mov	r5, r0
 8009b30:	b118      	cbz	r0, 8009b3a <__swbuf_r+0x12>
 8009b32:	6983      	ldr	r3, [r0, #24]
 8009b34:	b90b      	cbnz	r3, 8009b3a <__swbuf_r+0x12>
 8009b36:	f7ff fdc9 	bl	80096cc <__sinit>
 8009b3a:	4b21      	ldr	r3, [pc, #132]	; (8009bc0 <__swbuf_r+0x98>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	d12a      	bne.n	8009b96 <__swbuf_r+0x6e>
 8009b40:	686c      	ldr	r4, [r5, #4]
 8009b42:	69a3      	ldr	r3, [r4, #24]
 8009b44:	60a3      	str	r3, [r4, #8]
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	071a      	lsls	r2, r3, #28
 8009b4a:	d52e      	bpl.n	8009baa <__swbuf_r+0x82>
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	b363      	cbz	r3, 8009baa <__swbuf_r+0x82>
 8009b50:	6923      	ldr	r3, [r4, #16]
 8009b52:	6820      	ldr	r0, [r4, #0]
 8009b54:	1ac0      	subs	r0, r0, r3
 8009b56:	6963      	ldr	r3, [r4, #20]
 8009b58:	b2f6      	uxtb	r6, r6
 8009b5a:	4283      	cmp	r3, r0
 8009b5c:	4637      	mov	r7, r6
 8009b5e:	dc04      	bgt.n	8009b6a <__swbuf_r+0x42>
 8009b60:	4621      	mov	r1, r4
 8009b62:	4628      	mov	r0, r5
 8009b64:	f7ff fd36 	bl	80095d4 <_fflush_r>
 8009b68:	bb28      	cbnz	r0, 8009bb6 <__swbuf_r+0x8e>
 8009b6a:	68a3      	ldr	r3, [r4, #8]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	60a3      	str	r3, [r4, #8]
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	6022      	str	r2, [r4, #0]
 8009b76:	701e      	strb	r6, [r3, #0]
 8009b78:	6963      	ldr	r3, [r4, #20]
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	4283      	cmp	r3, r0
 8009b7e:	d004      	beq.n	8009b8a <__swbuf_r+0x62>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	07db      	lsls	r3, r3, #31
 8009b84:	d519      	bpl.n	8009bba <__swbuf_r+0x92>
 8009b86:	2e0a      	cmp	r6, #10
 8009b88:	d117      	bne.n	8009bba <__swbuf_r+0x92>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f7ff fd21 	bl	80095d4 <_fflush_r>
 8009b92:	b190      	cbz	r0, 8009bba <__swbuf_r+0x92>
 8009b94:	e00f      	b.n	8009bb6 <__swbuf_r+0x8e>
 8009b96:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <__swbuf_r+0x9c>)
 8009b98:	429c      	cmp	r4, r3
 8009b9a:	d101      	bne.n	8009ba0 <__swbuf_r+0x78>
 8009b9c:	68ac      	ldr	r4, [r5, #8]
 8009b9e:	e7d0      	b.n	8009b42 <__swbuf_r+0x1a>
 8009ba0:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <__swbuf_r+0xa0>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	bf08      	it	eq
 8009ba6:	68ec      	ldreq	r4, [r5, #12]
 8009ba8:	e7cb      	b.n	8009b42 <__swbuf_r+0x1a>
 8009baa:	4621      	mov	r1, r4
 8009bac:	4628      	mov	r0, r5
 8009bae:	f000 f81f 	bl	8009bf0 <__swsetup_r>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0cc      	beq.n	8009b50 <__swbuf_r+0x28>
 8009bb6:	f04f 37ff 	mov.w	r7, #4294967295
 8009bba:	4638      	mov	r0, r7
 8009bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	0800a60c 	.word	0x0800a60c
 8009bc4:	0800a62c 	.word	0x0800a62c
 8009bc8:	0800a5ec 	.word	0x0800a5ec

08009bcc <_write_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4c07      	ldr	r4, [pc, #28]	; (8009bec <_write_r+0x20>)
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	4608      	mov	r0, r1
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	6022      	str	r2, [r4, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f7f7 fe8f 	bl	80018fe <_write>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d102      	bne.n	8009bea <_write_r+0x1e>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	b103      	cbz	r3, 8009bea <_write_r+0x1e>
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	20004954 	.word	0x20004954

08009bf0 <__swsetup_r>:
 8009bf0:	4b32      	ldr	r3, [pc, #200]	; (8009cbc <__swsetup_r+0xcc>)
 8009bf2:	b570      	push	{r4, r5, r6, lr}
 8009bf4:	681d      	ldr	r5, [r3, #0]
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	b125      	cbz	r5, 8009c06 <__swsetup_r+0x16>
 8009bfc:	69ab      	ldr	r3, [r5, #24]
 8009bfe:	b913      	cbnz	r3, 8009c06 <__swsetup_r+0x16>
 8009c00:	4628      	mov	r0, r5
 8009c02:	f7ff fd63 	bl	80096cc <__sinit>
 8009c06:	4b2e      	ldr	r3, [pc, #184]	; (8009cc0 <__swsetup_r+0xd0>)
 8009c08:	429c      	cmp	r4, r3
 8009c0a:	d10f      	bne.n	8009c2c <__swsetup_r+0x3c>
 8009c0c:	686c      	ldr	r4, [r5, #4]
 8009c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	0715      	lsls	r5, r2, #28
 8009c16:	d42c      	bmi.n	8009c72 <__swsetup_r+0x82>
 8009c18:	06d0      	lsls	r0, r2, #27
 8009c1a:	d411      	bmi.n	8009c40 <__swsetup_r+0x50>
 8009c1c:	2209      	movs	r2, #9
 8009c1e:	6032      	str	r2, [r6, #0]
 8009c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2a:	e03e      	b.n	8009caa <__swsetup_r+0xba>
 8009c2c:	4b25      	ldr	r3, [pc, #148]	; (8009cc4 <__swsetup_r+0xd4>)
 8009c2e:	429c      	cmp	r4, r3
 8009c30:	d101      	bne.n	8009c36 <__swsetup_r+0x46>
 8009c32:	68ac      	ldr	r4, [r5, #8]
 8009c34:	e7eb      	b.n	8009c0e <__swsetup_r+0x1e>
 8009c36:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <__swsetup_r+0xd8>)
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	bf08      	it	eq
 8009c3c:	68ec      	ldreq	r4, [r5, #12]
 8009c3e:	e7e6      	b.n	8009c0e <__swsetup_r+0x1e>
 8009c40:	0751      	lsls	r1, r2, #29
 8009c42:	d512      	bpl.n	8009c6a <__swsetup_r+0x7a>
 8009c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c46:	b141      	cbz	r1, 8009c5a <__swsetup_r+0x6a>
 8009c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d002      	beq.n	8009c56 <__swsetup_r+0x66>
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff fdf1 	bl	8009838 <_free_r>
 8009c56:	2300      	movs	r3, #0
 8009c58:	6363      	str	r3, [r4, #52]	; 0x34
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	2300      	movs	r3, #0
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f043 0308 	orr.w	r3, r3, #8
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	b94b      	cbnz	r3, 8009c8a <__swsetup_r+0x9a>
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c80:	d003      	beq.n	8009c8a <__swsetup_r+0x9a>
 8009c82:	4621      	mov	r1, r4
 8009c84:	4630      	mov	r0, r6
 8009c86:	f000 f867 	bl	8009d58 <__smakebuf_r>
 8009c8a:	89a2      	ldrh	r2, [r4, #12]
 8009c8c:	f012 0301 	ands.w	r3, r2, #1
 8009c90:	d00c      	beq.n	8009cac <__swsetup_r+0xbc>
 8009c92:	2300      	movs	r3, #0
 8009c94:	60a3      	str	r3, [r4, #8]
 8009c96:	6963      	ldr	r3, [r4, #20]
 8009c98:	425b      	negs	r3, r3
 8009c9a:	61a3      	str	r3, [r4, #24]
 8009c9c:	6923      	ldr	r3, [r4, #16]
 8009c9e:	b953      	cbnz	r3, 8009cb6 <__swsetup_r+0xc6>
 8009ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009ca8:	d1ba      	bne.n	8009c20 <__swsetup_r+0x30>
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	0792      	lsls	r2, r2, #30
 8009cae:	bf58      	it	pl
 8009cb0:	6963      	ldrpl	r3, [r4, #20]
 8009cb2:	60a3      	str	r3, [r4, #8]
 8009cb4:	e7f2      	b.n	8009c9c <__swsetup_r+0xac>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	e7f7      	b.n	8009caa <__swsetup_r+0xba>
 8009cba:	bf00      	nop
 8009cbc:	20000030 	.word	0x20000030
 8009cc0:	0800a60c 	.word	0x0800a60c
 8009cc4:	0800a62c 	.word	0x0800a62c
 8009cc8:	0800a5ec 	.word	0x0800a5ec

08009ccc <_close_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4c06      	ldr	r4, [pc, #24]	; (8009ce8 <_close_r+0x1c>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	f7f7 fe2d 	bl	8001936 <_close>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_close_r+0x1a>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_close_r+0x1a>
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20004954 	.word	0x20004954

08009cec <_lseek_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4c07      	ldr	r4, [pc, #28]	; (8009d0c <_lseek_r+0x20>)
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	6022      	str	r2, [r4, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f7f7 fe42 	bl	8001984 <_lseek>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_lseek_r+0x1e>
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_lseek_r+0x1e>
 8009d08:	602b      	str	r3, [r5, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	20004954 	.word	0x20004954

08009d10 <__swhatbuf_r>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	460e      	mov	r6, r1
 8009d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	b096      	sub	sp, #88	; 0x58
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	461d      	mov	r5, r3
 8009d20:	da07      	bge.n	8009d32 <__swhatbuf_r+0x22>
 8009d22:	2300      	movs	r3, #0
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	89b3      	ldrh	r3, [r6, #12]
 8009d28:	061a      	lsls	r2, r3, #24
 8009d2a:	d410      	bmi.n	8009d4e <__swhatbuf_r+0x3e>
 8009d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d30:	e00e      	b.n	8009d50 <__swhatbuf_r+0x40>
 8009d32:	466a      	mov	r2, sp
 8009d34:	f000 fb2c 	bl	800a390 <_fstat_r>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	dbf2      	blt.n	8009d22 <__swhatbuf_r+0x12>
 8009d3c:	9a01      	ldr	r2, [sp, #4]
 8009d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d46:	425a      	negs	r2, r3
 8009d48:	415a      	adcs	r2, r3
 8009d4a:	602a      	str	r2, [r5, #0]
 8009d4c:	e7ee      	b.n	8009d2c <__swhatbuf_r+0x1c>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	2000      	movs	r0, #0
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	b016      	add	sp, #88	; 0x58
 8009d56:	bd70      	pop	{r4, r5, r6, pc}

08009d58 <__smakebuf_r>:
 8009d58:	898b      	ldrh	r3, [r1, #12]
 8009d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d5c:	079d      	lsls	r5, r3, #30
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	d507      	bpl.n	8009d74 <__smakebuf_r+0x1c>
 8009d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	6163      	str	r3, [r4, #20]
 8009d70:	b002      	add	sp, #8
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	ab01      	add	r3, sp, #4
 8009d76:	466a      	mov	r2, sp
 8009d78:	f7ff ffca 	bl	8009d10 <__swhatbuf_r>
 8009d7c:	9900      	ldr	r1, [sp, #0]
 8009d7e:	4605      	mov	r5, r0
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff fda7 	bl	80098d4 <_malloc_r>
 8009d86:	b948      	cbnz	r0, 8009d9c <__smakebuf_r+0x44>
 8009d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8c:	059a      	lsls	r2, r3, #22
 8009d8e:	d4ef      	bmi.n	8009d70 <__smakebuf_r+0x18>
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	f043 0302 	orr.w	r3, r3, #2
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	e7e3      	b.n	8009d64 <__smakebuf_r+0xc>
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <__smakebuf_r+0x7c>)
 8009d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	6020      	str	r0, [r4, #0]
 8009da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	6163      	str	r3, [r4, #20]
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	6120      	str	r0, [r4, #16]
 8009db2:	b15b      	cbz	r3, 8009dcc <__smakebuf_r+0x74>
 8009db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 fafb 	bl	800a3b4 <_isatty_r>
 8009dbe:	b128      	cbz	r0, 8009dcc <__smakebuf_r+0x74>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	431d      	orrs	r5, r3
 8009dd0:	81a5      	strh	r5, [r4, #12]
 8009dd2:	e7cd      	b.n	8009d70 <__smakebuf_r+0x18>
 8009dd4:	08009695 	.word	0x08009695

08009dd8 <__malloc_lock>:
 8009dd8:	4770      	bx	lr

08009dda <__malloc_unlock>:
 8009dda:	4770      	bx	lr

08009ddc <__sfputc_r>:
 8009ddc:	6893      	ldr	r3, [r2, #8]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	b410      	push	{r4}
 8009de4:	6093      	str	r3, [r2, #8]
 8009de6:	da08      	bge.n	8009dfa <__sfputc_r+0x1e>
 8009de8:	6994      	ldr	r4, [r2, #24]
 8009dea:	42a3      	cmp	r3, r4
 8009dec:	db01      	blt.n	8009df2 <__sfputc_r+0x16>
 8009dee:	290a      	cmp	r1, #10
 8009df0:	d103      	bne.n	8009dfa <__sfputc_r+0x1e>
 8009df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df6:	f7ff be97 	b.w	8009b28 <__swbuf_r>
 8009dfa:	6813      	ldr	r3, [r2, #0]
 8009dfc:	1c58      	adds	r0, r3, #1
 8009dfe:	6010      	str	r0, [r2, #0]
 8009e00:	7019      	strb	r1, [r3, #0]
 8009e02:	4608      	mov	r0, r1
 8009e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <__sfputs_r>:
 8009e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	460f      	mov	r7, r1
 8009e10:	4614      	mov	r4, r2
 8009e12:	18d5      	adds	r5, r2, r3
 8009e14:	42ac      	cmp	r4, r5
 8009e16:	d101      	bne.n	8009e1c <__sfputs_r+0x12>
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e007      	b.n	8009e2c <__sfputs_r+0x22>
 8009e1c:	463a      	mov	r2, r7
 8009e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7ff ffda 	bl	8009ddc <__sfputc_r>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d1f3      	bne.n	8009e14 <__sfputs_r+0xa>
 8009e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e30 <_vfiprintf_r>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	460c      	mov	r4, r1
 8009e36:	b09d      	sub	sp, #116	; 0x74
 8009e38:	4617      	mov	r7, r2
 8009e3a:	461d      	mov	r5, r3
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	b118      	cbz	r0, 8009e48 <_vfiprintf_r+0x18>
 8009e40:	6983      	ldr	r3, [r0, #24]
 8009e42:	b90b      	cbnz	r3, 8009e48 <_vfiprintf_r+0x18>
 8009e44:	f7ff fc42 	bl	80096cc <__sinit>
 8009e48:	4b7c      	ldr	r3, [pc, #496]	; (800a03c <_vfiprintf_r+0x20c>)
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	d158      	bne.n	8009f00 <_vfiprintf_r+0xd0>
 8009e4e:	6874      	ldr	r4, [r6, #4]
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	0718      	lsls	r0, r3, #28
 8009e54:	d55e      	bpl.n	8009f14 <_vfiprintf_r+0xe4>
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d05b      	beq.n	8009f14 <_vfiprintf_r+0xe4>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	2320      	movs	r3, #32
 8009e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e66:	2330      	movs	r3, #48	; 0x30
 8009e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e6c:	9503      	str	r5, [sp, #12]
 8009e6e:	f04f 0b01 	mov.w	fp, #1
 8009e72:	46b8      	mov	r8, r7
 8009e74:	4645      	mov	r5, r8
 8009e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e7a:	b10b      	cbz	r3, 8009e80 <_vfiprintf_r+0x50>
 8009e7c:	2b25      	cmp	r3, #37	; 0x25
 8009e7e:	d154      	bne.n	8009f2a <_vfiprintf_r+0xfa>
 8009e80:	ebb8 0a07 	subs.w	sl, r8, r7
 8009e84:	d00b      	beq.n	8009e9e <_vfiprintf_r+0x6e>
 8009e86:	4653      	mov	r3, sl
 8009e88:	463a      	mov	r2, r7
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff ffbc 	bl	8009e0a <__sfputs_r>
 8009e92:	3001      	adds	r0, #1
 8009e94:	f000 80c2 	beq.w	800a01c <_vfiprintf_r+0x1ec>
 8009e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9a:	4453      	add	r3, sl
 8009e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9e:	f898 3000 	ldrb.w	r3, [r8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 80ba 	beq.w	800a01c <_vfiprintf_r+0x1ec>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8009eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	9307      	str	r3, [sp, #28]
 8009eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eba:	931a      	str	r3, [sp, #104]	; 0x68
 8009ebc:	46a8      	mov	r8, r5
 8009ebe:	2205      	movs	r2, #5
 8009ec0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009ec4:	485e      	ldr	r0, [pc, #376]	; (800a040 <_vfiprintf_r+0x210>)
 8009ec6:	f7f6 f993 	bl	80001f0 <memchr>
 8009eca:	9b04      	ldr	r3, [sp, #16]
 8009ecc:	bb78      	cbnz	r0, 8009f2e <_vfiprintf_r+0xfe>
 8009ece:	06d9      	lsls	r1, r3, #27
 8009ed0:	bf44      	itt	mi
 8009ed2:	2220      	movmi	r2, #32
 8009ed4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ed8:	071a      	lsls	r2, r3, #28
 8009eda:	bf44      	itt	mi
 8009edc:	222b      	movmi	r2, #43	; 0x2b
 8009ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ee2:	782a      	ldrb	r2, [r5, #0]
 8009ee4:	2a2a      	cmp	r2, #42	; 0x2a
 8009ee6:	d02a      	beq.n	8009f3e <_vfiprintf_r+0x10e>
 8009ee8:	9a07      	ldr	r2, [sp, #28]
 8009eea:	46a8      	mov	r8, r5
 8009eec:	2000      	movs	r0, #0
 8009eee:	250a      	movs	r5, #10
 8009ef0:	4641      	mov	r1, r8
 8009ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef6:	3b30      	subs	r3, #48	; 0x30
 8009ef8:	2b09      	cmp	r3, #9
 8009efa:	d969      	bls.n	8009fd0 <_vfiprintf_r+0x1a0>
 8009efc:	b360      	cbz	r0, 8009f58 <_vfiprintf_r+0x128>
 8009efe:	e024      	b.n	8009f4a <_vfiprintf_r+0x11a>
 8009f00:	4b50      	ldr	r3, [pc, #320]	; (800a044 <_vfiprintf_r+0x214>)
 8009f02:	429c      	cmp	r4, r3
 8009f04:	d101      	bne.n	8009f0a <_vfiprintf_r+0xda>
 8009f06:	68b4      	ldr	r4, [r6, #8]
 8009f08:	e7a2      	b.n	8009e50 <_vfiprintf_r+0x20>
 8009f0a:	4b4f      	ldr	r3, [pc, #316]	; (800a048 <_vfiprintf_r+0x218>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	bf08      	it	eq
 8009f10:	68f4      	ldreq	r4, [r6, #12]
 8009f12:	e79d      	b.n	8009e50 <_vfiprintf_r+0x20>
 8009f14:	4621      	mov	r1, r4
 8009f16:	4630      	mov	r0, r6
 8009f18:	f7ff fe6a 	bl	8009bf0 <__swsetup_r>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d09d      	beq.n	8009e5c <_vfiprintf_r+0x2c>
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	b01d      	add	sp, #116	; 0x74
 8009f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2a:	46a8      	mov	r8, r5
 8009f2c:	e7a2      	b.n	8009e74 <_vfiprintf_r+0x44>
 8009f2e:	4a44      	ldr	r2, [pc, #272]	; (800a040 <_vfiprintf_r+0x210>)
 8009f30:	1a80      	subs	r0, r0, r2
 8009f32:	fa0b f000 	lsl.w	r0, fp, r0
 8009f36:	4318      	orrs	r0, r3
 8009f38:	9004      	str	r0, [sp, #16]
 8009f3a:	4645      	mov	r5, r8
 8009f3c:	e7be      	b.n	8009ebc <_vfiprintf_r+0x8c>
 8009f3e:	9a03      	ldr	r2, [sp, #12]
 8009f40:	1d11      	adds	r1, r2, #4
 8009f42:	6812      	ldr	r2, [r2, #0]
 8009f44:	9103      	str	r1, [sp, #12]
 8009f46:	2a00      	cmp	r2, #0
 8009f48:	db01      	blt.n	8009f4e <_vfiprintf_r+0x11e>
 8009f4a:	9207      	str	r2, [sp, #28]
 8009f4c:	e004      	b.n	8009f58 <_vfiprintf_r+0x128>
 8009f4e:	4252      	negs	r2, r2
 8009f50:	f043 0302 	orr.w	r3, r3, #2
 8009f54:	9207      	str	r2, [sp, #28]
 8009f56:	9304      	str	r3, [sp, #16]
 8009f58:	f898 3000 	ldrb.w	r3, [r8]
 8009f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f5e:	d10e      	bne.n	8009f7e <_vfiprintf_r+0x14e>
 8009f60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009f64:	2b2a      	cmp	r3, #42	; 0x2a
 8009f66:	d138      	bne.n	8009fda <_vfiprintf_r+0x1aa>
 8009f68:	9b03      	ldr	r3, [sp, #12]
 8009f6a:	1d1a      	adds	r2, r3, #4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	9203      	str	r2, [sp, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bfb8      	it	lt
 8009f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f78:	f108 0802 	add.w	r8, r8, #2
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	4d33      	ldr	r5, [pc, #204]	; (800a04c <_vfiprintf_r+0x21c>)
 8009f80:	f898 1000 	ldrb.w	r1, [r8]
 8009f84:	2203      	movs	r2, #3
 8009f86:	4628      	mov	r0, r5
 8009f88:	f7f6 f932 	bl	80001f0 <memchr>
 8009f8c:	b140      	cbz	r0, 8009fa0 <_vfiprintf_r+0x170>
 8009f8e:	2340      	movs	r3, #64	; 0x40
 8009f90:	1b40      	subs	r0, r0, r5
 8009f92:	fa03 f000 	lsl.w	r0, r3, r0
 8009f96:	9b04      	ldr	r3, [sp, #16]
 8009f98:	4303      	orrs	r3, r0
 8009f9a:	f108 0801 	add.w	r8, r8, #1
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	f898 1000 	ldrb.w	r1, [r8]
 8009fa4:	482a      	ldr	r0, [pc, #168]	; (800a050 <_vfiprintf_r+0x220>)
 8009fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009faa:	2206      	movs	r2, #6
 8009fac:	f108 0701 	add.w	r7, r8, #1
 8009fb0:	f7f6 f91e 	bl	80001f0 <memchr>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d037      	beq.n	800a028 <_vfiprintf_r+0x1f8>
 8009fb8:	4b26      	ldr	r3, [pc, #152]	; (800a054 <_vfiprintf_r+0x224>)
 8009fba:	bb1b      	cbnz	r3, 800a004 <_vfiprintf_r+0x1d4>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	3307      	adds	r3, #7
 8009fc0:	f023 0307 	bic.w	r3, r3, #7
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	9303      	str	r3, [sp, #12]
 8009fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fca:	444b      	add	r3, r9
 8009fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fce:	e750      	b.n	8009e72 <_vfiprintf_r+0x42>
 8009fd0:	fb05 3202 	mla	r2, r5, r2, r3
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	4688      	mov	r8, r1
 8009fd8:	e78a      	b.n	8009ef0 <_vfiprintf_r+0xc0>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f108 0801 	add.w	r8, r8, #1
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	250a      	movs	r5, #10
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fec:	3a30      	subs	r2, #48	; 0x30
 8009fee:	2a09      	cmp	r2, #9
 8009ff0:	d903      	bls.n	8009ffa <_vfiprintf_r+0x1ca>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0c3      	beq.n	8009f7e <_vfiprintf_r+0x14e>
 8009ff6:	9105      	str	r1, [sp, #20]
 8009ff8:	e7c1      	b.n	8009f7e <_vfiprintf_r+0x14e>
 8009ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8009ffe:	2301      	movs	r3, #1
 800a000:	4680      	mov	r8, r0
 800a002:	e7f0      	b.n	8009fe6 <_vfiprintf_r+0x1b6>
 800a004:	ab03      	add	r3, sp, #12
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	4622      	mov	r2, r4
 800a00a:	4b13      	ldr	r3, [pc, #76]	; (800a058 <_vfiprintf_r+0x228>)
 800a00c:	a904      	add	r1, sp, #16
 800a00e:	4630      	mov	r0, r6
 800a010:	f3af 8000 	nop.w
 800a014:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a018:	4681      	mov	r9, r0
 800a01a:	d1d5      	bne.n	8009fc8 <_vfiprintf_r+0x198>
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	065b      	lsls	r3, r3, #25
 800a020:	f53f af7e 	bmi.w	8009f20 <_vfiprintf_r+0xf0>
 800a024:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a026:	e77d      	b.n	8009f24 <_vfiprintf_r+0xf4>
 800a028:	ab03      	add	r3, sp, #12
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	4622      	mov	r2, r4
 800a02e:	4b0a      	ldr	r3, [pc, #40]	; (800a058 <_vfiprintf_r+0x228>)
 800a030:	a904      	add	r1, sp, #16
 800a032:	4630      	mov	r0, r6
 800a034:	f000 f888 	bl	800a148 <_printf_i>
 800a038:	e7ec      	b.n	800a014 <_vfiprintf_r+0x1e4>
 800a03a:	bf00      	nop
 800a03c:	0800a60c 	.word	0x0800a60c
 800a040:	0800a650 	.word	0x0800a650
 800a044:	0800a62c 	.word	0x0800a62c
 800a048:	0800a5ec 	.word	0x0800a5ec
 800a04c:	0800a656 	.word	0x0800a656
 800a050:	0800a65a 	.word	0x0800a65a
 800a054:	00000000 	.word	0x00000000
 800a058:	08009e0b 	.word	0x08009e0b

0800a05c <_printf_common>:
 800a05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a060:	4691      	mov	r9, r2
 800a062:	461f      	mov	r7, r3
 800a064:	688a      	ldr	r2, [r1, #8]
 800a066:	690b      	ldr	r3, [r1, #16]
 800a068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a06c:	4293      	cmp	r3, r2
 800a06e:	bfb8      	it	lt
 800a070:	4613      	movlt	r3, r2
 800a072:	f8c9 3000 	str.w	r3, [r9]
 800a076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a07a:	4606      	mov	r6, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	b112      	cbz	r2, 800a086 <_printf_common+0x2a>
 800a080:	3301      	adds	r3, #1
 800a082:	f8c9 3000 	str.w	r3, [r9]
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	0699      	lsls	r1, r3, #26
 800a08a:	bf42      	ittt	mi
 800a08c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a090:	3302      	addmi	r3, #2
 800a092:	f8c9 3000 	strmi.w	r3, [r9]
 800a096:	6825      	ldr	r5, [r4, #0]
 800a098:	f015 0506 	ands.w	r5, r5, #6
 800a09c:	d107      	bne.n	800a0ae <_printf_common+0x52>
 800a09e:	f104 0a19 	add.w	sl, r4, #25
 800a0a2:	68e3      	ldr	r3, [r4, #12]
 800a0a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a0a8:	1a9b      	subs	r3, r3, r2
 800a0aa:	42ab      	cmp	r3, r5
 800a0ac:	dc28      	bgt.n	800a100 <_printf_common+0xa4>
 800a0ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a0b2:	6822      	ldr	r2, [r4, #0]
 800a0b4:	3300      	adds	r3, #0
 800a0b6:	bf18      	it	ne
 800a0b8:	2301      	movne	r3, #1
 800a0ba:	0692      	lsls	r2, r2, #26
 800a0bc:	d42d      	bmi.n	800a11a <_printf_common+0xbe>
 800a0be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	47c0      	blx	r8
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d020      	beq.n	800a10e <_printf_common+0xb2>
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	68e5      	ldr	r5, [r4, #12]
 800a0d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a0d4:	f003 0306 	and.w	r3, r3, #6
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	bf08      	it	eq
 800a0dc:	1aad      	subeq	r5, r5, r2
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	6922      	ldr	r2, [r4, #16]
 800a0e2:	bf0c      	ite	eq
 800a0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0e8:	2500      	movne	r5, #0
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	bfc4      	itt	gt
 800a0ee:	1a9b      	subgt	r3, r3, r2
 800a0f0:	18ed      	addgt	r5, r5, r3
 800a0f2:	f04f 0900 	mov.w	r9, #0
 800a0f6:	341a      	adds	r4, #26
 800a0f8:	454d      	cmp	r5, r9
 800a0fa:	d11a      	bne.n	800a132 <_printf_common+0xd6>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e008      	b.n	800a112 <_printf_common+0xb6>
 800a100:	2301      	movs	r3, #1
 800a102:	4652      	mov	r2, sl
 800a104:	4639      	mov	r1, r7
 800a106:	4630      	mov	r0, r6
 800a108:	47c0      	blx	r8
 800a10a:	3001      	adds	r0, #1
 800a10c:	d103      	bne.n	800a116 <_printf_common+0xba>
 800a10e:	f04f 30ff 	mov.w	r0, #4294967295
 800a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a116:	3501      	adds	r5, #1
 800a118:	e7c3      	b.n	800a0a2 <_printf_common+0x46>
 800a11a:	18e1      	adds	r1, r4, r3
 800a11c:	1c5a      	adds	r2, r3, #1
 800a11e:	2030      	movs	r0, #48	; 0x30
 800a120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a124:	4422      	add	r2, r4
 800a126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a12a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a12e:	3302      	adds	r3, #2
 800a130:	e7c5      	b.n	800a0be <_printf_common+0x62>
 800a132:	2301      	movs	r3, #1
 800a134:	4622      	mov	r2, r4
 800a136:	4639      	mov	r1, r7
 800a138:	4630      	mov	r0, r6
 800a13a:	47c0      	blx	r8
 800a13c:	3001      	adds	r0, #1
 800a13e:	d0e6      	beq.n	800a10e <_printf_common+0xb2>
 800a140:	f109 0901 	add.w	r9, r9, #1
 800a144:	e7d8      	b.n	800a0f8 <_printf_common+0x9c>
	...

0800a148 <_printf_i>:
 800a148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a14c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a150:	460c      	mov	r4, r1
 800a152:	7e09      	ldrb	r1, [r1, #24]
 800a154:	b085      	sub	sp, #20
 800a156:	296e      	cmp	r1, #110	; 0x6e
 800a158:	4617      	mov	r7, r2
 800a15a:	4606      	mov	r6, r0
 800a15c:	4698      	mov	r8, r3
 800a15e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a160:	f000 80b3 	beq.w	800a2ca <_printf_i+0x182>
 800a164:	d822      	bhi.n	800a1ac <_printf_i+0x64>
 800a166:	2963      	cmp	r1, #99	; 0x63
 800a168:	d036      	beq.n	800a1d8 <_printf_i+0x90>
 800a16a:	d80a      	bhi.n	800a182 <_printf_i+0x3a>
 800a16c:	2900      	cmp	r1, #0
 800a16e:	f000 80b9 	beq.w	800a2e4 <_printf_i+0x19c>
 800a172:	2958      	cmp	r1, #88	; 0x58
 800a174:	f000 8083 	beq.w	800a27e <_printf_i+0x136>
 800a178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a17c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a180:	e032      	b.n	800a1e8 <_printf_i+0xa0>
 800a182:	2964      	cmp	r1, #100	; 0x64
 800a184:	d001      	beq.n	800a18a <_printf_i+0x42>
 800a186:	2969      	cmp	r1, #105	; 0x69
 800a188:	d1f6      	bne.n	800a178 <_printf_i+0x30>
 800a18a:	6820      	ldr	r0, [r4, #0]
 800a18c:	6813      	ldr	r3, [r2, #0]
 800a18e:	0605      	lsls	r5, r0, #24
 800a190:	f103 0104 	add.w	r1, r3, #4
 800a194:	d52a      	bpl.n	800a1ec <_printf_i+0xa4>
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6011      	str	r1, [r2, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da03      	bge.n	800a1a6 <_printf_i+0x5e>
 800a19e:	222d      	movs	r2, #45	; 0x2d
 800a1a0:	425b      	negs	r3, r3
 800a1a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a1a6:	486f      	ldr	r0, [pc, #444]	; (800a364 <_printf_i+0x21c>)
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	e039      	b.n	800a220 <_printf_i+0xd8>
 800a1ac:	2973      	cmp	r1, #115	; 0x73
 800a1ae:	f000 809d 	beq.w	800a2ec <_printf_i+0x1a4>
 800a1b2:	d808      	bhi.n	800a1c6 <_printf_i+0x7e>
 800a1b4:	296f      	cmp	r1, #111	; 0x6f
 800a1b6:	d020      	beq.n	800a1fa <_printf_i+0xb2>
 800a1b8:	2970      	cmp	r1, #112	; 0x70
 800a1ba:	d1dd      	bne.n	800a178 <_printf_i+0x30>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	f043 0320 	orr.w	r3, r3, #32
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	e003      	b.n	800a1ce <_printf_i+0x86>
 800a1c6:	2975      	cmp	r1, #117	; 0x75
 800a1c8:	d017      	beq.n	800a1fa <_printf_i+0xb2>
 800a1ca:	2978      	cmp	r1, #120	; 0x78
 800a1cc:	d1d4      	bne.n	800a178 <_printf_i+0x30>
 800a1ce:	2378      	movs	r3, #120	; 0x78
 800a1d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1d4:	4864      	ldr	r0, [pc, #400]	; (800a368 <_printf_i+0x220>)
 800a1d6:	e055      	b.n	800a284 <_printf_i+0x13c>
 800a1d8:	6813      	ldr	r3, [r2, #0]
 800a1da:	1d19      	adds	r1, r3, #4
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6011      	str	r1, [r2, #0]
 800a1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e08c      	b.n	800a306 <_printf_i+0x1be>
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6011      	str	r1, [r2, #0]
 800a1f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1f4:	bf18      	it	ne
 800a1f6:	b21b      	sxthne	r3, r3
 800a1f8:	e7cf      	b.n	800a19a <_printf_i+0x52>
 800a1fa:	6813      	ldr	r3, [r2, #0]
 800a1fc:	6825      	ldr	r5, [r4, #0]
 800a1fe:	1d18      	adds	r0, r3, #4
 800a200:	6010      	str	r0, [r2, #0]
 800a202:	0628      	lsls	r0, r5, #24
 800a204:	d501      	bpl.n	800a20a <_printf_i+0xc2>
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	e002      	b.n	800a210 <_printf_i+0xc8>
 800a20a:	0668      	lsls	r0, r5, #25
 800a20c:	d5fb      	bpl.n	800a206 <_printf_i+0xbe>
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	4854      	ldr	r0, [pc, #336]	; (800a364 <_printf_i+0x21c>)
 800a212:	296f      	cmp	r1, #111	; 0x6f
 800a214:	bf14      	ite	ne
 800a216:	220a      	movne	r2, #10
 800a218:	2208      	moveq	r2, #8
 800a21a:	2100      	movs	r1, #0
 800a21c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a220:	6865      	ldr	r5, [r4, #4]
 800a222:	60a5      	str	r5, [r4, #8]
 800a224:	2d00      	cmp	r5, #0
 800a226:	f2c0 8095 	blt.w	800a354 <_printf_i+0x20c>
 800a22a:	6821      	ldr	r1, [r4, #0]
 800a22c:	f021 0104 	bic.w	r1, r1, #4
 800a230:	6021      	str	r1, [r4, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d13d      	bne.n	800a2b2 <_printf_i+0x16a>
 800a236:	2d00      	cmp	r5, #0
 800a238:	f040 808e 	bne.w	800a358 <_printf_i+0x210>
 800a23c:	4665      	mov	r5, ip
 800a23e:	2a08      	cmp	r2, #8
 800a240:	d10b      	bne.n	800a25a <_printf_i+0x112>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	07db      	lsls	r3, r3, #31
 800a246:	d508      	bpl.n	800a25a <_printf_i+0x112>
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	6862      	ldr	r2, [r4, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	bfde      	ittt	le
 800a250:	2330      	movle	r3, #48	; 0x30
 800a252:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a256:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a25a:	ebac 0305 	sub.w	r3, ip, r5
 800a25e:	6123      	str	r3, [r4, #16]
 800a260:	f8cd 8000 	str.w	r8, [sp]
 800a264:	463b      	mov	r3, r7
 800a266:	aa03      	add	r2, sp, #12
 800a268:	4621      	mov	r1, r4
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7ff fef6 	bl	800a05c <_printf_common>
 800a270:	3001      	adds	r0, #1
 800a272:	d14d      	bne.n	800a310 <_printf_i+0x1c8>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	b005      	add	sp, #20
 800a27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a27e:	4839      	ldr	r0, [pc, #228]	; (800a364 <_printf_i+0x21c>)
 800a280:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a284:	6813      	ldr	r3, [r2, #0]
 800a286:	6821      	ldr	r1, [r4, #0]
 800a288:	1d1d      	adds	r5, r3, #4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6015      	str	r5, [r2, #0]
 800a28e:	060a      	lsls	r2, r1, #24
 800a290:	d50b      	bpl.n	800a2aa <_printf_i+0x162>
 800a292:	07ca      	lsls	r2, r1, #31
 800a294:	bf44      	itt	mi
 800a296:	f041 0120 	orrmi.w	r1, r1, #32
 800a29a:	6021      	strmi	r1, [r4, #0]
 800a29c:	b91b      	cbnz	r3, 800a2a6 <_printf_i+0x15e>
 800a29e:	6822      	ldr	r2, [r4, #0]
 800a2a0:	f022 0220 	bic.w	r2, r2, #32
 800a2a4:	6022      	str	r2, [r4, #0]
 800a2a6:	2210      	movs	r2, #16
 800a2a8:	e7b7      	b.n	800a21a <_printf_i+0xd2>
 800a2aa:	064d      	lsls	r5, r1, #25
 800a2ac:	bf48      	it	mi
 800a2ae:	b29b      	uxthmi	r3, r3
 800a2b0:	e7ef      	b.n	800a292 <_printf_i+0x14a>
 800a2b2:	4665      	mov	r5, ip
 800a2b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2b8:	fb02 3311 	mls	r3, r2, r1, r3
 800a2bc:	5cc3      	ldrb	r3, [r0, r3]
 800a2be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	d1f5      	bne.n	800a2b4 <_printf_i+0x16c>
 800a2c8:	e7b9      	b.n	800a23e <_printf_i+0xf6>
 800a2ca:	6813      	ldr	r3, [r2, #0]
 800a2cc:	6825      	ldr	r5, [r4, #0]
 800a2ce:	6961      	ldr	r1, [r4, #20]
 800a2d0:	1d18      	adds	r0, r3, #4
 800a2d2:	6010      	str	r0, [r2, #0]
 800a2d4:	0628      	lsls	r0, r5, #24
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	d501      	bpl.n	800a2de <_printf_i+0x196>
 800a2da:	6019      	str	r1, [r3, #0]
 800a2dc:	e002      	b.n	800a2e4 <_printf_i+0x19c>
 800a2de:	066a      	lsls	r2, r5, #25
 800a2e0:	d5fb      	bpl.n	800a2da <_printf_i+0x192>
 800a2e2:	8019      	strh	r1, [r3, #0]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	6123      	str	r3, [r4, #16]
 800a2e8:	4665      	mov	r5, ip
 800a2ea:	e7b9      	b.n	800a260 <_printf_i+0x118>
 800a2ec:	6813      	ldr	r3, [r2, #0]
 800a2ee:	1d19      	adds	r1, r3, #4
 800a2f0:	6011      	str	r1, [r2, #0]
 800a2f2:	681d      	ldr	r5, [r3, #0]
 800a2f4:	6862      	ldr	r2, [r4, #4]
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7f5 ff79 	bl	80001f0 <memchr>
 800a2fe:	b108      	cbz	r0, 800a304 <_printf_i+0x1bc>
 800a300:	1b40      	subs	r0, r0, r5
 800a302:	6060      	str	r0, [r4, #4]
 800a304:	6863      	ldr	r3, [r4, #4]
 800a306:	6123      	str	r3, [r4, #16]
 800a308:	2300      	movs	r3, #0
 800a30a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a30e:	e7a7      	b.n	800a260 <_printf_i+0x118>
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	462a      	mov	r2, r5
 800a314:	4639      	mov	r1, r7
 800a316:	4630      	mov	r0, r6
 800a318:	47c0      	blx	r8
 800a31a:	3001      	adds	r0, #1
 800a31c:	d0aa      	beq.n	800a274 <_printf_i+0x12c>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	079b      	lsls	r3, r3, #30
 800a322:	d413      	bmi.n	800a34c <_printf_i+0x204>
 800a324:	68e0      	ldr	r0, [r4, #12]
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	4298      	cmp	r0, r3
 800a32a:	bfb8      	it	lt
 800a32c:	4618      	movlt	r0, r3
 800a32e:	e7a3      	b.n	800a278 <_printf_i+0x130>
 800a330:	2301      	movs	r3, #1
 800a332:	464a      	mov	r2, r9
 800a334:	4639      	mov	r1, r7
 800a336:	4630      	mov	r0, r6
 800a338:	47c0      	blx	r8
 800a33a:	3001      	adds	r0, #1
 800a33c:	d09a      	beq.n	800a274 <_printf_i+0x12c>
 800a33e:	3501      	adds	r5, #1
 800a340:	68e3      	ldr	r3, [r4, #12]
 800a342:	9a03      	ldr	r2, [sp, #12]
 800a344:	1a9b      	subs	r3, r3, r2
 800a346:	42ab      	cmp	r3, r5
 800a348:	dcf2      	bgt.n	800a330 <_printf_i+0x1e8>
 800a34a:	e7eb      	b.n	800a324 <_printf_i+0x1dc>
 800a34c:	2500      	movs	r5, #0
 800a34e:	f104 0919 	add.w	r9, r4, #25
 800a352:	e7f5      	b.n	800a340 <_printf_i+0x1f8>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1ac      	bne.n	800a2b2 <_printf_i+0x16a>
 800a358:	7803      	ldrb	r3, [r0, #0]
 800a35a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a35e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a362:	e76c      	b.n	800a23e <_printf_i+0xf6>
 800a364:	0800a661 	.word	0x0800a661
 800a368:	0800a672 	.word	0x0800a672

0800a36c <_read_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4c07      	ldr	r4, [pc, #28]	; (800a38c <_read_r+0x20>)
 800a370:	4605      	mov	r5, r0
 800a372:	4608      	mov	r0, r1
 800a374:	4611      	mov	r1, r2
 800a376:	2200      	movs	r2, #0
 800a378:	6022      	str	r2, [r4, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f7f7 faa2 	bl	80018c4 <_read>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_read_r+0x1e>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	b103      	cbz	r3, 800a38a <_read_r+0x1e>
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20004954 	.word	0x20004954

0800a390 <_fstat_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4c07      	ldr	r4, [pc, #28]	; (800a3b0 <_fstat_r+0x20>)
 800a394:	2300      	movs	r3, #0
 800a396:	4605      	mov	r5, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	4611      	mov	r1, r2
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	f7f7 fad6 	bl	800194e <_fstat>
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	d102      	bne.n	800a3ac <_fstat_r+0x1c>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	b103      	cbz	r3, 800a3ac <_fstat_r+0x1c>
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	bd38      	pop	{r3, r4, r5, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20004954 	.word	0x20004954

0800a3b4 <_isatty_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4c06      	ldr	r4, [pc, #24]	; (800a3d0 <_isatty_r+0x1c>)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	6023      	str	r3, [r4, #0]
 800a3c0:	f7f7 fad5 	bl	800196e <_isatty>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d102      	bne.n	800a3ce <_isatty_r+0x1a>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	b103      	cbz	r3, 800a3ce <_isatty_r+0x1a>
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	20004954 	.word	0x20004954

0800a3d4 <_init>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	bf00      	nop
 800a3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3da:	bc08      	pop	{r3}
 800a3dc:	469e      	mov	lr, r3
 800a3de:	4770      	bx	lr

0800a3e0 <_fini>:
 800a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e2:	bf00      	nop
 800a3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e6:	bc08      	pop	{r3}
 800a3e8:	469e      	mov	lr, r3
 800a3ea:	4770      	bx	lr
