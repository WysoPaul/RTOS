
testFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009cd8  08009cd8  00019cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a140  0800a140  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a148  0800a148  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a14c  0800a14c  0001a14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004588  20000074  0800a1c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045fc  0800a1c4  000245fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000277c6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005334  00000000  00000000  0004786a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fa8  00000000  00000000  0004cba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d20  00000000  00000000  0004eb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b21a  00000000  00000000  00050868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d2b0  00000000  00000000  0007ba82  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0580  00000000  00000000  00098d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001892b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b10  00000000  00000000  00189330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009cc0 	.word	0x08009cc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08009cc0 	.word	0x08009cc0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_CRC_Init+0x20>)
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <MX_CRC_Init+0x24>)
 8000598:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_CRC_Init+0x20>)
 800059c:	f001 fc26 	bl	8001dec <HAL_CRC_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005a6:	f000 feb1 	bl	800130c <Error_Handler>
  }

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20004040 	.word	0x20004040
 80005b4:	40023000 	.word	0x40023000

080005b8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_CRC_MspInit+0x3c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10d      	bne.n	80005e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023000 	.word	0x40023000
 80005f8:	40023800 	.word	0x40023800

080005fc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000602:	4a16      	ldr	r2, [pc, #88]	; (800065c <MX_DMA2D_Init+0x60>)
 8000604:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000626:	2200      	movs	r2, #0
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800062c:	2200      	movs	r2, #0
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000632:	f001 fbf7 	bl	8001e24 <HAL_DMA2D_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800063c:	f000 fe66 	bl	800130c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000640:	2101      	movs	r1, #1
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000644:	f001 fd48 	bl	80020d8 <HAL_DMA2D_ConfigLayer>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800064e:	f000 fe5d 	bl	800130c <Error_Handler>
  }

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20004048 	.word	0x20004048
 800065c:	4002b000 	.word	0x4002b000

08000660 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_DMA2D_MspInit+0x48>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d115      	bne.n	800069e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 800067c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2105      	movs	r1, #5
 8000692:	205a      	movs	r0, #90	; 0x5a
 8000694:	f001 fb80 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000698:	205a      	movs	r0, #90	; 0x5a
 800069a:	f001 fb99 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	4002b000 	.word	0x4002b000
 80006ac:	40023800 	.word	0x40023800

080006b0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]
 80006c6:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_FMC_Init+0x98>)
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <MX_FMC_Init+0x9c>)
 80006cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_FMC_Init+0x98>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_FMC_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_FMC_Init+0x98>)
 80006dc:	2204      	movs	r2, #4
 80006de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_FMC_Init+0x98>)
 80006e2:	2210      	movs	r2, #16
 80006e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_FMC_Init+0x98>)
 80006e8:	2240      	movs	r2, #64	; 0x40
 80006ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_FMC_Init+0x98>)
 80006ee:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006f2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_FMC_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_FMC_Init+0x98>)
 80006fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000700:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_FMC_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_FMC_Init+0x98>)
 800070a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000720:	2303      	movs	r3, #3
 8000722:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_FMC_Init+0x98>)
 8000732:	f004 fd5b 	bl	80051ec <HAL_SDRAM_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800073c:	f000 fde6 	bl	800130c <Error_Handler>
  }

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20004088 	.word	0x20004088
 800074c:	a0000140 	.word	0xa0000140

08000750 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000764:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <HAL_FMC_MspInit+0x104>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d16f      	bne.n	800084c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800076c:	4b39      	ldr	r3, [pc, #228]	; (8000854 <HAL_FMC_MspInit+0x104>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b38      	ldr	r3, [pc, #224]	; (8000858 <HAL_FMC_MspInit+0x108>)
 8000778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077a:	4a37      	ldr	r2, [pc, #220]	; (8000858 <HAL_FMC_MspInit+0x108>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6393      	str	r3, [r2, #56]	; 0x38
 8000782:	4b35      	ldr	r3, [pc, #212]	; (8000858 <HAL_FMC_MspInit+0x108>)
 8000784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800078e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000792:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007a0:	230c      	movs	r3, #12
 80007a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_FMC_MspInit+0x10c>)
 80007aa:	f001 fd27 	bl	80021fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007ae:	2301      	movs	r3, #1
 80007b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007be:	230c      	movs	r3, #12
 80007c0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4826      	ldr	r0, [pc, #152]	; (8000860 <HAL_FMC_MspInit+0x110>)
 80007c8:	f001 fd18 	bl	80021fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80007cc:	f248 1333 	movw	r3, #33075	; 0x8133
 80007d0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007de:	230c      	movs	r3, #12
 80007e0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	481f      	ldr	r0, [pc, #124]	; (8000864 <HAL_FMC_MspInit+0x114>)
 80007e8:	f001 fd08 	bl	80021fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80007ec:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007f0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007fe:	230c      	movs	r3, #12
 8000800:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4818      	ldr	r0, [pc, #96]	; (8000868 <HAL_FMC_MspInit+0x118>)
 8000808:	f001 fcf8 	bl	80021fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 800080c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000810:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800081e:	230c      	movs	r3, #12
 8000820:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <HAL_FMC_MspInit+0x11c>)
 8000828:	f001 fce8 	bl	80021fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800083c:	230c      	movs	r3, #12
 800083e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4619      	mov	r1, r3
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <HAL_FMC_MspInit+0x120>)
 8000846:	f001 fcd9 	bl	80021fc <HAL_GPIO_Init>
 800084a:	e000      	b.n	800084e <HAL_FMC_MspInit+0xfe>
    return;
 800084c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000090 	.word	0x20000090
 8000858:	40023800 	.word	0x40023800
 800085c:	40021400 	.word	0x40021400
 8000860:	40020800 	.word	0x40020800
 8000864:	40021800 	.word	0x40021800
 8000868:	40021000 	.word	0x40021000
 800086c:	40020c00 	.word	0x40020c00
 8000870:	40020400 	.word	0x40020400

08000874 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800087c:	f7ff ff68 	bl	8000750 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <vApplicationGetIdleTaskMemory+0x30>)
 800089e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000094 	.word	0x20000094
 80008b8:	200000e8 	.word	0x200000e8

080008bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008bc:	b5b0      	push	{r4, r5, r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_FREERTOS_Init+0x30>)
 80008c4:	1d3c      	adds	r4, r7, #4
 80008c6:	461d      	mov	r5, r3
 80008c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f006 fa7d 	bl	8006dd8 <osThreadCreate>
 80008de:	4602      	mov	r2, r0
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <MX_FREERTOS_Init+0x34>)
 80008e2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bdb0      	pop	{r4, r5, r7, pc}
 80008ec:	08009ce4 	.word	0x08009ce4
 80008f0:	200040bc 	.word	0x200040bc

080008f4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f006 fab7 	bl	8006e70 <osDelay>
 8000902:	e7fb      	b.n	80008fc <StartDefaultTask+0x8>

08000904 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
 800091e:	4b84      	ldr	r3, [pc, #528]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a83      	ldr	r2, [pc, #524]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b81      	ldr	r3, [pc, #516]	; (8000b30 <MX_GPIO_Init+0x22c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	623b      	str	r3, [r7, #32]
 8000934:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	4b7d      	ldr	r3, [pc, #500]	; (8000b30 <MX_GPIO_Init+0x22c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a7c      	ldr	r2, [pc, #496]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b7a      	ldr	r3, [pc, #488]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0320 	and.w	r3, r3, #32
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b76      	ldr	r3, [pc, #472]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a75      	ldr	r2, [pc, #468]	; (8000b30 <MX_GPIO_Init+0x22c>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b73      	ldr	r3, [pc, #460]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b6f      	ldr	r3, [pc, #444]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a6e      	ldr	r2, [pc, #440]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b6c      	ldr	r3, [pc, #432]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b68      	ldr	r3, [pc, #416]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a67      	ldr	r2, [pc, #412]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b65      	ldr	r3, [pc, #404]	; (8000b30 <MX_GPIO_Init+0x22c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b61      	ldr	r3, [pc, #388]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a60      	ldr	r2, [pc, #384]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b5e      	ldr	r3, [pc, #376]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b5a      	ldr	r3, [pc, #360]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a59      	ldr	r2, [pc, #356]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b57      	ldr	r3, [pc, #348]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a52      	ldr	r2, [pc, #328]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b50      	ldr	r3, [pc, #320]	; (8000b30 <MX_GPIO_Init+0x22c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2116      	movs	r1, #22
 80009fe:	484d      	ldr	r0, [pc, #308]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000a00:	f001 fdbe 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	484b      	ldr	r0, [pc, #300]	; (8000b38 <MX_GPIO_Init+0x234>)
 8000a0a:	f001 fdb9 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a14:	4849      	ldr	r0, [pc, #292]	; (8000b3c <MX_GPIO_Init+0x238>)
 8000a16:	f001 fdb3 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000a20:	4847      	ldr	r0, [pc, #284]	; (8000b40 <MX_GPIO_Init+0x23c>)
 8000a22:	f001 fdad 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000a26:	2316      	movs	r3, #22
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	483d      	ldr	r0, [pc, #244]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000a3e:	f001 fbdd 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a42:	2301      	movs	r3, #1
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <MX_GPIO_Init+0x240>)
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4838      	ldr	r0, [pc, #224]	; (8000b38 <MX_GPIO_Init+0x234>)
 8000a56:	f001 fbd1 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000a5a:	f248 0306 	movw	r3, #32774	; 0x8006
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a60:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <MX_GPIO_Init+0x244>)
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4832      	ldr	r0, [pc, #200]	; (8000b38 <MX_GPIO_Init+0x234>)
 8000a70:	f001 fbc4 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	482b      	ldr	r0, [pc, #172]	; (8000b38 <MX_GPIO_Init+0x234>)
 8000a8c:	f001 fbb6 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <MX_GPIO_Init+0x244>)
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4824      	ldr	r0, [pc, #144]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000aa4:	f001 fbaa 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4824      	ldr	r0, [pc, #144]	; (8000b4c <MX_GPIO_Init+0x248>)
 8000abc:	f001 fb9e 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ac0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4819      	ldr	r0, [pc, #100]	; (8000b3c <MX_GPIO_Init+0x238>)
 8000ad6:	f001 fb91 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ada:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <MX_GPIO_Init+0x238>)
 8000af4:	f001 fb82 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000af8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_GPIO_Init+0x23c>)
 8000b12:	f001 fb73 	bl	80021fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2105      	movs	r1, #5
 8000b1a:	2006      	movs	r0, #6
 8000b1c:	f001 f93c 	bl	8001d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b20:	2006      	movs	r0, #6
 8000b22:	f001 f955 	bl	8001dd0 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40021800 	.word	0x40021800
 8000b44:	10110000 	.word	0x10110000
 8000b48:	10120000 	.word	0x10120000
 8000b4c:	40020400 	.word	0x40020400

08000b50 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_I2C3_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <MX_I2C3_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000b8e:	f002 ffbf 	bl	8003b10 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 fbb8 	bl	800130c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000ba0:	f003 f8ee 	bl	8003d80 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000baa:	f000 fbaf 	bl	800130c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_I2C3_Init+0x74>)
 8000bb2:	f003 f921 	bl	8003df8 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f000 fba6 	bl	800130c <Error_Handler>
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200040c0 	.word	0x200040c0
 8000bc8:	40005c00 	.word	0x40005c00
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a29      	ldr	r2, [pc, #164]	; (8000c94 <HAL_I2C_MspInit+0xc4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d14b      	bne.n	8000c8a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4815      	ldr	r0, [pc, #84]	; (8000c9c <HAL_I2C_MspInit+0xcc>)
 8000c48:	f001 fad8 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c52:	2312      	movs	r3, #18
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <HAL_I2C_MspInit+0xd0>)
 8000c6a:	f001 fac7 	bl	80021fc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000c78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_I2C_MspInit+0xc8>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40005c00 	.word	0x40005c00
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2234      	movs	r2, #52	; 0x34
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f008 f8b5 	bl	8008e20 <memset>

  hltdc.Instance = LTDC;
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cb8:	4a39      	ldr	r2, [pc, #228]	; (8000da0 <MX_LTDC_Init+0xfc>)
 8000cba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cbc:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cc8:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cce:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000cd4:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cd6:	2209      	movs	r2, #9
 8000cd8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000cda:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000ce2:	221d      	movs	r2, #29
 8000ce4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000ce8:	2203      	movs	r2, #3
 8000cea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cee:	f240 120d 	movw	r2, #269	; 0x10d
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cf6:	f240 1243 	movw	r2, #323	; 0x143
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000cfe:	f240 1217 	movw	r2, #279	; 0x117
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000d06:	f240 1247 	movw	r2, #327	; 0x147
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000d26:	f003 f8a7 	bl	8003e78 <HAL_LTDC_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000d30:	f000 faec 	bl	800130c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000d38:	23f0      	movs	r3, #240	; 0xf0
 8000d3a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000d40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d44:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d46:	2302      	movs	r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d4a:	23ff      	movs	r3, #255	; 0xff
 8000d4c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d56:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000d5c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000d62:	23f0      	movs	r3, #240	; 0xf0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000d66:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_LTDC_Init+0xf8>)
 8000d86:	f003 fa09 	bl	800419c <HAL_LTDC_ConfigLayer>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000d90:	f000 fabc 	bl	800130c <Error_Handler>
  }

}
 8000d94:	bf00      	nop
 8000d96:	3738      	adds	r7, #56	; 0x38
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20004114 	.word	0x20004114
 8000da0:	40016800 	.word	0x40016800

08000da4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a7b      	ldr	r2, [pc, #492]	; (8000fb0 <HAL_LTDC_MspInit+0x20c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f040 80f0 	bne.w	8000fa8 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
 8000dcc:	4b79      	ldr	r3, [pc, #484]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd0:	4a78      	ldr	r2, [pc, #480]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000dd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd8:	4b76      	ldr	r3, [pc, #472]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000de0:	623b      	str	r3, [r7, #32]
 8000de2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	4b72      	ldr	r3, [pc, #456]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a71      	ldr	r2, [pc, #452]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b6f      	ldr	r3, [pc, #444]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 0320 	and.w	r3, r3, #32
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	4b6b      	ldr	r3, [pc, #428]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a6a      	ldr	r2, [pc, #424]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	4b68      	ldr	r3, [pc, #416]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	4b64      	ldr	r3, [pc, #400]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a63      	ldr	r2, [pc, #396]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b61      	ldr	r3, [pc, #388]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	4a5c      	ldr	r2, [pc, #368]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e46:	6313      	str	r3, [r2, #48]	; 0x30
 8000e48:	4b5a      	ldr	r3, [pc, #360]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a55      	ldr	r2, [pc, #340]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <HAL_LTDC_MspInit+0x210>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e9e:	230e      	movs	r3, #14
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4843      	ldr	r0, [pc, #268]	; (8000fb8 <HAL_LTDC_MspInit+0x214>)
 8000eaa:	f001 f9a7 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8000eae:	f641 0358 	movw	r3, #6232	; 0x1858
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ec0:	230e      	movs	r3, #14
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	483c      	ldr	r0, [pc, #240]	; (8000fbc <HAL_LTDC_MspInit+0x218>)
 8000ecc:	f001 f996 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ee0:	2309      	movs	r3, #9
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4835      	ldr	r0, [pc, #212]	; (8000fc0 <HAL_LTDC_MspInit+0x21c>)
 8000eec:	f001 f986 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ef0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f02:	230e      	movs	r3, #14
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <HAL_LTDC_MspInit+0x21c>)
 8000f0e:	f001 f975 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f12:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f24:	230e      	movs	r3, #14
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4825      	ldr	r0, [pc, #148]	; (8000fc4 <HAL_LTDC_MspInit+0x220>)
 8000f30:	f001 f964 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f34:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f46:	230e      	movs	r3, #14
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <HAL_LTDC_MspInit+0x224>)
 8000f52:	f001 f953 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f56:	2348      	movs	r3, #72	; 0x48
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f66:	230e      	movs	r3, #14
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <HAL_LTDC_MspInit+0x228>)
 8000f72:	f001 f943 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f88:	2309      	movs	r3, #9
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <HAL_LTDC_MspInit+0x220>)
 8000f94:	f001 f932 	bl	80021fc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2105      	movs	r1, #5
 8000f9c:	2058      	movs	r0, #88	; 0x58
 8000f9e:	f000 fefb 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fa2:	2058      	movs	r0, #88	; 0x58
 8000fa4:	f000 ff14 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3738      	adds	r7, #56	; 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40016800 	.word	0x40016800
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40021400 	.word	0x40021400
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00

08000fd0 <__io_putchar>:



//Redéfinition de la fonction printf ... qui utilise io_putchar()
int __io_putchar(int ch)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000fd8:	1d39      	adds	r1, r7, #4
 8000fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <__io_putchar+0x20>)
 8000fe2:	f004 fde8 	bl	8005bb6 <HAL_UART_Transmit>
	return ch;
 8000fe6:	687b      	ldr	r3, [r7, #4]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200042f0 	.word	0x200042f0

08000ff4 <fonction3>:

//--------------------------------------------
//Fonction synchronizé avec IT du TIMER #2
//
void fonction3 (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	int i=0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
	printf("T2: BONJOUR\r\n");
 8000ffe:	4815      	ldr	r0, [pc, #84]	; (8001054 <fonction3+0x60>)
 8001000:	f007 ff8a 	bl	8008f18 <puts>

	while (i<5)
 8001004:	e018      	b.n	8001038 <fonction3+0x44>
	{
		//prendre
		printf("T2: J'essais de prendre le semaphore\r\n");
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <fonction3+0x64>)
 8001008:	f007 ff86 	bl	8008f18 <puts>
		//semTake(MonSem, WAIT_FOREVER);
		xSemaphoreTake(MonSem, portMAX_DELAY);
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <fonction3+0x68>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	4618      	mov	r0, r3
 8001016:	f006 f943 	bl	80072a0 <xQueueSemaphoreTake>
		HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 800101a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <fonction3+0x6c>)
 8001020:	f001 fac7 	bl	80025b2 <HAL_GPIO_TogglePin>
		printf("T2, J'ai la main, ReCoucou %d\r\n", i++);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	4619      	mov	r1, r3
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <fonction3+0x70>)
 800102e:	f007 feff 	bl	8008e30 <iprintf>
		printf("T2, Je fais mon lonnnnnng traitement (synchronise)\r\n");
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <fonction3+0x74>)
 8001034:	f007 ff70 	bl	8008f18 <puts>
	while (i<5)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b04      	cmp	r3, #4
 800103c:	dde3      	ble.n	8001006 <fonction3+0x12>
	}
	printf("T2, je me suicide x_x\r\n\n");
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <fonction3+0x78>)
 8001040:	f007 ff6a 	bl	8008f18 <puts>
	vTaskDelete(NULL);
 8001044:	2000      	movs	r0, #0
 8001046:	f006 fc43 	bl	80078d0 <vTaskDelete>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08009de4 	.word	0x08009de4
 8001058:	08009df4 	.word	0x08009df4
 800105c:	200041bc 	.word	0x200041bc
 8001060:	40021800 	.word	0x40021800
 8001064:	08009e1c 	.word	0x08009e1c
 8001068:	08009e80 	.word	0x08009e80
 800106c:	08009e68 	.word	0x08009e68

08001070 <main>:




int main(void)
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
uint8_t bidon = 0x58;
 8001076:	2358      	movs	r3, #88	; 0x58
 8001078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
uint8_t message[] = {"On va commencer\r\n"};
 800107c:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <main+0x140>)
 800107e:	1d3c      	adds	r4, r7, #4
 8001080:	461d      	mov	r5, r3
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	682b      	ldr	r3, [r5, #0]
 8001088:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108a:	f000 fd69 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108e:	f000 f8a9 	bl	80011e4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001092:	f7ff fc37 	bl	8000904 <MX_GPIO_Init>
  MX_CRC_Init();
 8001096:	f7ff fa7b 	bl	8000590 <MX_CRC_Init>
  MX_DMA2D_Init();
 800109a:	f7ff faaf 	bl	80005fc <MX_DMA2D_Init>
  MX_FMC_Init();
 800109e:	f7ff fb07 	bl	80006b0 <MX_FMC_Init>
  MX_I2C3_Init();
 80010a2:	f7ff fd55 	bl	8000b50 <MX_I2C3_Init>
  MX_LTDC_Init();
 80010a6:	f7ff fdfd 	bl	8000ca4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80010aa:	f000 f937 	bl	800131c <MX_SPI5_Init>
  MX_TIM1_Init();
 80010ae:	f000 fb57 	bl	8001760 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010b2:	f000 fc2f 	bl	8001914 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80010b6:	f000 fc9f 	bl	80019f8 <MX_USB_OTG_HS_HCD_Init>
  MX_TIM2_Init();
 80010ba:	f000 fba1 	bl	8001800 <MX_TIM2_Init>


  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart1, message, sizeof(message), 0xff);
 80010be:	1d39      	adds	r1, r7, #4
 80010c0:	23ff      	movs	r3, #255	; 0xff
 80010c2:	2212      	movs	r2, #18
 80010c4:	483b      	ldr	r0, [pc, #236]	; (80011b4 <main+0x144>)
 80010c6:	f004 fd76 	bl	8005bb6 <HAL_UART_Transmit>
  printf("T0: Tache INIT commence\r\n");
 80010ca:	483b      	ldr	r0, [pc, #236]	; (80011b8 <main+0x148>)
 80010cc:	f007 ff24 	bl	8008f18 <puts>

  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  int p1=1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  int p2=2;
 80010d8:	2302      	movs	r3, #2
 80010da:	61fb      	str	r3, [r7, #28]

  //Création d'un Meesage/Qeue
  BaL1 = xQueueCreate( 5, sizeof( QMessage ) );
 80010dc:	2200      	movs	r2, #0
 80010de:	2114      	movs	r1, #20
 80010e0:	2005      	movs	r0, #5
 80010e2:	f005 fff5 	bl	80070d0 <xQueueGenericCreate>
 80010e6:	4602      	mov	r2, r0
 80010e8:	4b34      	ldr	r3, [pc, #208]	; (80011bc <main+0x14c>)
 80010ea:	601a      	str	r2, [r3, #0]


  //Création du Semaphore
  //printf("T0: Creation du semaphore (vide)\r\n");
  //MonSem=semBCreate(SEM_Q_FIFO,SEM_EMPTY);		//Façon VxWorks
  MonSem = xSemaphoreCreateBinary();				//Façon FreeRTOS
 80010ec:	2203      	movs	r2, #3
 80010ee:	2100      	movs	r1, #0
 80010f0:	2001      	movs	r0, #1
 80010f2:	f005 ffed 	bl	80070d0 <xQueueGenericCreate>
 80010f6:	4602      	mov	r2, r0
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <main+0x150>)
 80010fa:	601a      	str	r2, [r3, #0]


  /* Create the task, storing the handle. */
  printf("T0: Creation tache 1\r\n");
 80010fc:	4831      	ldr	r0, [pc, #196]	; (80011c4 <main+0x154>)
 80010fe:	f007 ff0b 	bl	8008f18 <puts>
  xReturned = xTaskCreate(
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	463a      	mov	r2, r7
 8001106:	9201      	str	r2, [sp, #4]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001110:	492d      	ldr	r1, [pc, #180]	; (80011c8 <main+0x158>)
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <main+0x15c>)
 8001114:	f006 faa6 	bl	8007664 <xTaskCreate>
 8001118:	61b8      	str	r0, [r7, #24]
				  "fonction3",
				  1000,      		/* Stack size in words, not bytes. */
				  NULL,    			/* Parameter passed into the task. */
				  p1,				/* Priority at which the task is created. */
				  &xHandle );      /* Used to pass out the created task's handle. */
  if( xReturned == pdPASS )
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d103      	bne.n	8001128 <main+0xb8>
	  printf("T0: Tache1 cree avec priorite %d\r\n", p1);
 8001120:	6a39      	ldr	r1, [r7, #32]
 8001122:	482b      	ldr	r0, [pc, #172]	; (80011d0 <main+0x160>)
 8001124:	f007 fe84 	bl	8008e30 <iprintf>
//				  &xHandle );      /* Used to pass out the created task's handle. */
//  if( xReturned == pdPASS )
//	  printf("T0: Tache2 cree avec priorite %d\r\n", p2);


  printf("T0: Fin fct main x_x\r\n\n");
 8001128:	482a      	ldr	r0, [pc, #168]	; (80011d4 <main+0x164>)
 800112a:	f007 fef5 	bl	8008f18 <puts>


  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	4828      	ldr	r0, [pc, #160]	; (80011d8 <main+0x168>)
 8001136:	f001 fa23 	bl	8002580 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001140:	4825      	ldr	r0, [pc, #148]	; (80011d8 <main+0x168>)
 8001142:	f001 fa1d 	bl	8002580 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001146:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114a:	f000 fd4b 	bl	8001be4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4820      	ldr	r0, [pc, #128]	; (80011d8 <main+0x168>)
 8001156:	f001 fa13 	bl	8002580 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001160:	481d      	ldr	r0, [pc, #116]	; (80011d8 <main+0x168>)
 8001162:	f001 fa0d 	bl	8002580 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800116a:	f000 fd3b 	bl	8001be4 <HAL_Delay>

  //Initier le timer TIM2
  HAL_TIM_Base_Start_IT (&htim2);
 800116e:	481b      	ldr	r0, [pc, #108]	; (80011dc <main+0x16c>)
 8001170:	f004 f8ff 	bl	8005372 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001174:	f7ff fba2 	bl	80008bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001178:	f005 fe27 	bl	8006dca <osKernelStart>
//  		  HAL_UART_Transmit(&huart1, &bidon, sizeof(bidon), 0xff);
//  		  bidon=0x3;
//  	  }


  	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 800117c:	2101      	movs	r1, #1
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <main+0x170>)
 8001180:	f001 f9e6 	bl	8002550 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <main+0x128>
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <main+0x168>)
 8001192:	f001 f9f5 	bl	8002580 <HAL_GPIO_WritePin>
 8001196:	e005      	b.n	80011a4 <main+0x134>
  	        else HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <main+0x168>)
 80011a0:	f001 f9ee 	bl	8002580 <HAL_GPIO_WritePin>
 80011a4:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  //..
  /* USER CODE END 3 */
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bdb0      	pop	{r4, r5, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	0800a05c 	.word	0x0800a05c
 80011b4:	200042f0 	.word	0x200042f0
 80011b8:	08009fe0 	.word	0x08009fe0
 80011bc:	200041d4 	.word	0x200041d4
 80011c0:	200041bc 	.word	0x200041bc
 80011c4:	08009ffc 	.word	0x08009ffc
 80011c8:	0800a014 	.word	0x0800a014
 80011cc:	08000ff5 	.word	0x08000ff5
 80011d0:	0800a020 	.word	0x0800a020
 80011d4:	0800a044 	.word	0x0800a044
 80011d8:	40021800 	.word	0x40021800
 80011dc:	200042b0 	.word	0x200042b0
 80011e0:	40020000 	.word	0x40020000

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0a0      	sub	sp, #128	; 0x80
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f007 fe14 	bl	8008e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2230      	movs	r2, #48	; 0x30
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f007 fe05 	bl	8008e20 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <SystemClock_Config+0xfc>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <SystemClock_Config+0xfc>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <SystemClock_Config+0xfc>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <SystemClock_Config+0x100>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a2a      	ldr	r2, [pc, #168]	; (80012e4 <SystemClock_Config+0x100>)
 800123c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <SystemClock_Config+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124e:	2301      	movs	r3, #1
 8001250:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001260:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001262:	2304      	movs	r3, #4
 8001264:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001266:	23a8      	movs	r3, #168	; 0xa8
 8001268:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126a:	2302      	movs	r3, #2
 800126c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800126e:	2307      	movs	r3, #7
 8001270:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001276:	4618      	mov	r0, r3
 8001278:	f003 f966 	bl	8004548 <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001282:	f000 f843 	bl	800130c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	230f      	movs	r3, #15
 8001288:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128a:	2302      	movs	r3, #2
 800128c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001292:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800129e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012a2:	2105      	movs	r1, #5
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fbbf 	bl	8004a28 <HAL_RCC_ClockConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80012b0:	f000 f82c 	bl	800130c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012b4:	2308      	movs	r3, #8
 80012b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80012b8:	2332      	movs	r3, #50	; 0x32
 80012ba:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fdd1 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80012d4:	f000 f81a 	bl	800130c <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3780      	adds	r7, #128	; 0x80
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012fa:	f000 fc53 	bl	8001ba4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40001000 	.word	0x40001000

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_SPI5_Init+0x64>)
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_SPI5_Init+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_SPI5_Init+0x64>)
 8001328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800132c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_SPI5_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_SPI5_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_SPI5_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_SPI5_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_SPI5_Init+0x64>)
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_SPI5_Init+0x64>)
 8001350:	2218      	movs	r2, #24
 8001352:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_SPI5_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_SPI5_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <MX_SPI5_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_SPI5_Init+0x64>)
 8001368:	220a      	movs	r2, #10
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_SPI5_Init+0x64>)
 800136e:	f003 ff71 	bl	8005254 <HAL_SPI_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001378:	f7ff ffc8 	bl	800130c <Error_Handler>
  }

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200041d8 	.word	0x200041d8
 8001384:	40015000 	.word	0x40015000

08001388 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	; (800140c <HAL_SPI_MspInit+0x84>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12c      	bne.n	8001404 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_SPI_MspInit+0x88>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_SPI_MspInit+0x88>)
 80013b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_SPI_MspInit+0x88>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_SPI_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_SPI_MspInit+0x88>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_SPI_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80013e2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013f4:	2305      	movs	r3, #5
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_SPI_MspInit+0x8c>)
 8001400:	f000 fefc 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40015000 	.word	0x40015000
 8001410:	40023800 	.word	0x40023800
 8001414:	40021400 	.word	0x40021400

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_MspInit+0x54>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_MspInit+0x54>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x54>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_MspInit+0x54>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_MspInit+0x54>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_MspInit+0x54>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	210f      	movs	r1, #15
 800145a:	f06f 0001 	mvn.w	r0, #1
 800145e:	f000 fc9b 	bl	8001d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2036      	movs	r0, #54	; 0x36
 8001486:	f000 fc87 	bl	8001d98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800148a:	2036      	movs	r0, #54	; 0x36
 800148c:	f000 fca0 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_InitTick+0xa4>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <HAL_InitTick+0xa4>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_InitTick+0xa4>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014ac:	f107 0210 	add.w	r2, r7, #16
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 fca8 	bl	8004e0c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014bc:	f003 fc7e 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 80014c0:	4603      	mov	r3, r0
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80014c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c8:	4a13      	ldr	r2, [pc, #76]	; (8001518 <HAL_InitTick+0xa8>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	0c9b      	lsrs	r3, r3, #18
 80014d0:	3b01      	subs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_InitTick+0xac>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_InitTick+0xb0>)
 80014d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_InitTick+0xac>)
 80014dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <HAL_InitTick+0xac>)
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_InitTick+0xac>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_InitTick+0xac>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <HAL_InitTick+0xac>)
 80014f6:	f003 ff11 	bl	800531c <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d104      	bne.n	800150a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <HAL_InitTick+0xac>)
 8001502:	f003 ff36 	bl	8005372 <HAL_TIM_Base_Start_IT>
 8001506:	4603      	mov	r3, r0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3730      	adds	r7, #48	; 0x30
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	431bde83 	.word	0x431bde83
 800151c:	20004230 	.word	0x20004230
 8001520:	40001000 	.word	0x40001000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 800155c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <EXTI0_IRQHandler+0x18>)
 8001562:	f001 f826 	bl	80025b2 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001566:	2001      	movs	r0, #1
 8001568:	f001 f83e 	bl	80025e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021800 	.word	0x40021800

08001574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	printf("IT: TIMER #2 a claqué\r\n");		//A ne pas faire dans la vrai vie, c'est juste pour l'exo
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <TIM2_IRQHandler+0x2c>)
 800157a:	f007 fccd 	bl	8008f18 <puts>
	HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <TIM2_IRQHandler+0x30>)
 8001584:	f001 f815 	bl	80025b2 <HAL_GPIO_TogglePin>
	xSemaphoreGiveFromISR(MonSem,pdFALSE);
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <TIM2_IRQHandler+0x34>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f005 fdfc 	bl	800718c <xQueueGiveFromISR>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <TIM2_IRQHandler+0x38>)
 8001596:	f003 ff10 	bl	80053ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	0800a070 	.word	0x0800a070
 80015a4:	40021800 	.word	0x40021800
 80015a8:	200041bc 	.word	0x200041bc
 80015ac:	200042b0 	.word	0x200042b0

080015b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM6_DAC_IRQHandler+0x10>)
 80015b6:	f003 ff00 	bl	80053ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20004230 	.word	0x20004230

080015c4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <OTG_HS_IRQHandler+0x10>)
 80015ca:	f001 f892 	bl	80026f2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20004330 	.word	0x20004330

080015d8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <LTDC_IRQHandler+0x10>)
 80015de:	f002 fd1b 	bl	8004018 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20004114 	.word	0x20004114

080015ec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA2D_IRQHandler+0x10>)
 80015f2:	f000 fc60 	bl	8001eb6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20004048 	.word	0x20004048

08001600 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e00a      	b.n	8001628 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001612:	f3af 8000 	nop.w
 8001616:	4601      	mov	r1, r0
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	60ba      	str	r2, [r7, #8]
 800161e:	b2ca      	uxtb	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	dbf0      	blt.n	8001612 <_read+0x12>
	}

return len;
 8001630:	687b      	ldr	r3, [r7, #4]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e009      	b.n	8001660 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fcbb 	bl	8000fd0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf1      	blt.n	800164c <_write+0x12>
	}
	return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_close>:

int _close(int file)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	return -1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169a:	605a      	str	r2, [r3, #4]
	return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_isatty>:

int _isatty(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x50>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x16>
		heap_end = &end;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <_sbrk+0x50>)
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <_sbrk+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <_sbrk+0x50>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <_sbrk+0x50>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	466a      	mov	r2, sp
 8001702:	4293      	cmp	r3, r2
 8001704:	d907      	bls.n	8001716 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001706:	f007 fb61 	bl	8008dcc <__errno>
 800170a:	4602      	mov	r2, r0
 800170c:	230c      	movs	r3, #12
 800170e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	e006      	b.n	8001724 <_sbrk+0x48>
	}

	heap_end += incr;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <_sbrk+0x50>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a03      	ldr	r2, [pc, #12]	; (800172c <_sbrk+0x50>)
 8001720:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200002e8 	.word	0x200002e8
 8001730:	20004600 	.word	0x20004600

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <SystemInit+0x28>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <SystemInit+0x28>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <SystemInit+0x28>)
 800174a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174e:	609a      	str	r2, [r3, #8]
#endif
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_TIM1_Init+0x98>)
 800177e:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <MX_TIM1_Init+0x9c>)
 8001780:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_TIM1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_TIM1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_TIM1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_TIM1_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_TIM1_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_TIM1_Init+0x98>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <MX_TIM1_Init+0x98>)
 80017a8:	f003 fdb8 	bl	800531c <HAL_TIM_Base_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80017b2:	f7ff fdab 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_TIM1_Init+0x98>)
 80017c4:	f003 ff01 	bl	80055ca <HAL_TIM_ConfigClockSource>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80017ce:	f7ff fd9d 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_TIM1_Init+0x98>)
 80017e0:	f004 f90c 	bl	80059fc <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80017ea:	f7ff fd8f 	bl	800130c <Error_Handler>
  }

}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20004270 	.word	0x20004270
 80017fc:	40010000 	.word	0x40010000

08001800 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	463b      	mov	r3, r7
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_TIM2_Init+0x94>)
 800181e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_TIM2_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_TIM2_Init+0x94>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399999;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <MX_TIM2_Init+0x94>)
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <MX_TIM2_Init+0x98>)
 8001834:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_TIM2_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_TIM2_Init+0x94>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001842:	4814      	ldr	r0, [pc, #80]	; (8001894 <MX_TIM2_Init+0x94>)
 8001844:	f003 fd6a 	bl	800531c <HAL_TIM_Base_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800184e:	f7ff fd5d 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	4619      	mov	r1, r3
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_TIM2_Init+0x94>)
 8001860:	f003 feb3 	bl	80055ca <HAL_TIM_ConfigClockSource>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800186a:	f7ff fd4f 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001876:	463b      	mov	r3, r7
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_TIM2_Init+0x94>)
 800187c:	f004 f8be 	bl	80059fc <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001886:	f7ff fd41 	bl	800130c <Error_Handler>
  }

}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200042b0 	.word	0x200042b0
 8001898:	00802c7f 	.word	0x00802c7f

0800189c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a18      	ldr	r2, [pc, #96]	; (800190c <HAL_TIM_Base_MspInit+0x70>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10e      	bne.n	80018cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_TIM_Base_MspInit+0x74>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_TIM_Base_MspInit+0x74>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_TIM_Base_MspInit+0x74>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018ca:	e01a      	b.n	8001902 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d4:	d115      	bne.n	8001902 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_TIM_Base_MspInit+0x74>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <HAL_TIM_Base_MspInit+0x74>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_TIM_Base_MspInit+0x74>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2105      	movs	r1, #5
 80018f6:	201c      	movs	r0, #28
 80018f8:	f000 fa4e 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018fc:	201c      	movs	r0, #28
 80018fe:	f000 fa67 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40010000 	.word	0x40010000
 8001910:	40023800 	.word	0x40023800

08001914 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <MX_USART1_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800194c:	f004 f8e6 	bl	8005b1c <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f7ff fcd9 	bl	800130c <Error_Handler>
  }

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200042f0 	.word	0x200042f0
 8001964:	40011000 	.word	0x40011000

08001968 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_UART_MspInit+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12c      	bne.n	80019e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_UART_MspInit+0x88>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_UART_MspInit+0x88>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_UART_MspInit+0x88>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_UART_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d4:	2307      	movs	r3, #7
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_UART_MspInit+0x8c>)
 80019e0:	f000 fc0c 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40011000 	.word	0x40011000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000

080019f8 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019fe:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001a00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a04:	220c      	movs	r2, #12
 8001a06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001a34:	f000 fdfb 	bl	800262e <HAL_HCD_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001a3e:	f7ff fc65 	bl	800130c <Error_Handler>
  }

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20004330 	.word	0x20004330
 8001a4c:	40040000 	.word	0x40040000

08001a50 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <HAL_HCD_MspInit+0xb0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d141      	bne.n	8001af6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_HCD_MspInit+0xb4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_HCD_MspInit+0xb4>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_HCD_MspInit+0xb4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001a8e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4817      	ldr	r0, [pc, #92]	; (8001b08 <HAL_HCD_MspInit+0xb8>)
 8001aac:	f000 fba6 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <HAL_HCD_MspInit+0xb8>)
 8001ac6:	f000 fb99 	bl	80021fc <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_HCD_MspInit+0xb4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_HCD_MspInit+0xb4>)
 8001ad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_HCD_MspInit+0xb4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2105      	movs	r1, #5
 8001aea:	204d      	movs	r0, #77	; 0x4d
 8001aec:	f000 f954 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001af0:	204d      	movs	r0, #77	; 0x4d
 8001af2:	f000 f96d 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40040000 	.word	0x40040000
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020400 	.word	0x40020400

08001b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b12:	e003      	b.n	8001b1c <LoopCopyDataInit>

08001b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b1a:	3104      	adds	r1, #4

08001b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b24:	d3f6      	bcc.n	8001b14 <CopyDataInit>
  ldr  r2, =_sbss
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b28:	e002      	b.n	8001b30 <LoopFillZerobss>

08001b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b2c:	f842 3b04 	str.w	r3, [r2], #4

08001b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b34:	d3f9      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b36:	f7ff fdfd 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f007 f94d 	bl	8008dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3e:	f7ff fa97 	bl	8001070 <main>
  bx  lr    
 8001b42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b44:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001b48:	0800a150 	.word	0x0800a150
  ldr  r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b50:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001b54:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001b58:	200045fc 	.word	0x200045fc

08001b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_Init+0x40>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_Init+0x40>)
 8001b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_Init+0x40>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 f8fa 	bl	8001d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fc6e 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fc40 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x20>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	200045f4 	.word	0x200045f4

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	200045f4 	.word	0x200045f4

08001be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff ffee 	bl	8001bcc <HAL_GetTick>
 8001bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d005      	beq.n	8001c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_Delay+0x40>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0a:	bf00      	nop
 8001c0c:	f7ff ffde 	bl	8001bcc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8f7      	bhi.n	8001c0c <HAL_Delay+0x28>
  {
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000008 	.word	0x20000008

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff4c 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001daa:	f7ff ff61 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f7ff ffb1 	bl	8001d1c <NVIC_EncodePriority>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff80 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff54 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00e      	b.n	8001e1c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	795b      	ldrb	r3, [r3, #5]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fbd2 	bl	80005b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e03b      	b.n	8001eae <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fc08 	bl	8000660 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	f023 0107 	bic.w	r1, r3, #7
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68d1      	ldr	r1, [r2, #12]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d026      	beq.n	8001f26 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d021      	beq.n	8001f26 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ef0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d026      	beq.n	8001f7e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d021      	beq.n	8001f7e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f48:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	f043 0202 	orr.w	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2204      	movs	r2, #4
 8001f62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d026      	beq.n	8001fd6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d021      	beq.n	8001fd6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	f043 0204 	orr.w	r2, r3, #4
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2204      	movs	r2, #4
 8001fba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00e      	beq.n	8002008 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2204      	movs	r2, #4
 8002000:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f853 	bl	80020ae <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d024      	beq.n	800205c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01f      	beq.n	800205c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800202a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2202      	movs	r2, #2
 8002032:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01f      	beq.n	80020a6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01a      	beq.n	80020a6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800207e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2210      	movs	r2, #16
 8002086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f80e 	bl	80020c2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA2D_ConfigLayer+0x20>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e079      	b.n	80021ec <HAL_DMA2D_ConfigLayer+0x114>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	3318      	adds	r3, #24
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002124:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b0a      	cmp	r3, #10
 800212c:	d003      	beq.n	8002136 <HAL_DMA2D_ConfigLayer+0x5e>
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b09      	cmp	r3, #9
 8002134:	d107      	bne.n	8002146 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e005      	b.n	8002152 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	061b      	lsls	r3, r3, #24
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d120      	bne.n	800219a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	ea02 0103 	and.w	r1, r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	430a      	orrs	r2, r1
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b0a      	cmp	r3, #10
 8002180:	d003      	beq.n	800218a <HAL_DMA2D_ConfigLayer+0xb2>
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b09      	cmp	r3, #9
 8002188:	d127      	bne.n	80021da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
 8002198:	e01f      	b.n	80021da <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	ea02 0103 	and.w	r1, r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b0a      	cmp	r3, #10
 80021c2:	d003      	beq.n	80021cc <HAL_DMA2D_ConfigLayer+0xf4>
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b09      	cmp	r3, #9
 80021ca:	d106      	bne.n	80021da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80021d8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	ff03000f 	.word	0xff03000f

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e177      	b.n	8002508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8166 	bne.w	8002502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d00b      	beq.n	8002256 <HAL_GPIO_Init+0x5a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224a:	2b11      	cmp	r3, #17
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b12      	cmp	r3, #18
 8002254:	d130      	bne.n	80022b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0xfc>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80c0 	beq.w	8002502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_GPIO_Init+0x320>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a64      	ldr	r2, [pc, #400]	; (800251c <HAL_GPIO_Init+0x320>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_GPIO_Init+0x320>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239e:	4a60      	ldr	r2, [pc, #384]	; (8002520 <HAL_GPIO_Init+0x324>)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_GPIO_Init+0x328>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d037      	beq.n	800243a <HAL_GPIO_Init+0x23e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a56      	ldr	r2, [pc, #344]	; (8002528 <HAL_GPIO_Init+0x32c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d031      	beq.n	8002436 <HAL_GPIO_Init+0x23a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a55      	ldr	r2, [pc, #340]	; (800252c <HAL_GPIO_Init+0x330>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02b      	beq.n	8002432 <HAL_GPIO_Init+0x236>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a54      	ldr	r2, [pc, #336]	; (8002530 <HAL_GPIO_Init+0x334>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d025      	beq.n	800242e <HAL_GPIO_Init+0x232>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a53      	ldr	r2, [pc, #332]	; (8002534 <HAL_GPIO_Init+0x338>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01f      	beq.n	800242a <HAL_GPIO_Init+0x22e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x33c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x22a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_GPIO_Init+0x340>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x226>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x344>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x222>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x348>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x21e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_GPIO_Init+0x34c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x21a>
 8002412:	2309      	movs	r3, #9
 8002414:	e012      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002416:	230a      	movs	r3, #10
 8002418:	e010      	b.n	800243c <HAL_GPIO_Init+0x240>
 800241a:	2308      	movs	r3, #8
 800241c:	e00e      	b.n	800243c <HAL_GPIO_Init+0x240>
 800241e:	2307      	movs	r3, #7
 8002420:	e00c      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002422:	2306      	movs	r3, #6
 8002424:	e00a      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002426:	2305      	movs	r3, #5
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x240>
 800242a:	2304      	movs	r3, #4
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x240>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x240>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x240>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4934      	ldr	r1, [pc, #208]	; (8002520 <HAL_GPIO_Init+0x324>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <HAL_GPIO_Init+0x350>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247e:	4a33      	ldr	r2, [pc, #204]	; (800254c <HAL_GPIO_Init+0x350>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_GPIO_Init+0x350>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a8:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_GPIO_Init+0x350>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_GPIO_Init+0x350>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_GPIO_Init+0x350>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_GPIO_Init+0x350>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <HAL_GPIO_Init+0x350>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f ae84 	bls.w	8002218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	3724      	adds	r7, #36	; 0x24
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40023800 	.word	0x40023800
 8002520:	40013800 	.word	0x40013800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40021000 	.word	0x40021000
 8002538:	40021400 	.word	0x40021400
 800253c:	40021800 	.word	0x40021800
 8002540:	40021c00 	.word	0x40021c00
 8002544:	40022000 	.word	0x40022000
 8002548:	40022400 	.word	0x40022400
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e001      	b.n	8002572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	401a      	ands	r2, r3
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d104      	bne.n	80025d6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025cc:	887b      	ldrh	r3, [r7, #2]
 80025ce:	041a      	lsls	r2, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025fe:	4a05      	ldr	r2, [pc, #20]	; (8002614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f806 	bl	8002618 <HAL_GPIO_EXTI_Callback>
  }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800262e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002630:	b08f      	sub	sp, #60	; 0x3c
 8002632:	af0a      	add	r7, sp, #40	; 0x28
 8002634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e054      	b.n	80026ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff f9f8 	bl	8001a50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2203      	movs	r2, #3
 8002664:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f004 f84b 	bl	800671a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	687e      	ldr	r6, [r7, #4]
 800268c:	466d      	mov	r5, sp
 800268e:	f106 0410 	add.w	r4, r6, #16
 8002692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800269e:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a2:	1d33      	adds	r3, r6, #4
 80026a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a6:	6838      	ldr	r0, [r7, #0]
 80026a8:	f003 ffd6 	bl	8006658 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 f842 	bl	800673c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	687e      	ldr	r6, [r7, #4]
 80026c0:	466d      	mov	r5, sp
 80026c2:	f106 0410 	add.w	r4, r6, #16
 80026c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026d6:	1d33      	adds	r3, r6, #4
 80026d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026da:	6838      	ldr	r0, [r7, #0]
 80026dc:	f004 f91e 	bl	800691c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f004 f8c5 	bl	8006898 <USB_GetMode>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	f040 80ef 	bne.w	80028f4 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 f8a9 	bl	8006872 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80e5 	beq.w	80028f2 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f004 f8a0 	bl	8006872 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800273c:	d104      	bne.n	8002748 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002746:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f004 f890 	bl	8006872 <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800275c:	d104      	bne.n	8002768 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002766:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f004 f880 	bl	8006872 <USB_ReadInterrupts>
 8002772:	4603      	mov	r3, r0
 8002774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800277c:	d104      	bne.n	8002788 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002786:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f004 f870 	bl	8006872 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d103      	bne.n	80027a4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2202      	movs	r2, #2
 80027a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 f862 	bl	8006872 <USB_ReadInterrupts>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b8:	d115      	bne.n	80027e6 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027c2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d108      	bne.n	80027e6 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8a4 	bl	8002922 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 f957 	bl	8006a94 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 f841 	bl	8006872 <USB_ReadInterrupts>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fa:	d102      	bne.n	8002802 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f001 f913 	bl	8003a28 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 f833 	bl	8006872 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d106      	bne.n	8002824 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f86f 	bl	80028fa <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2208      	movs	r2, #8
 8002822:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f004 f822 	bl	8006872 <USB_ReadInterrupts>
 800282e:	4603      	mov	r3, r0
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002838:	d138      	bne.n	80028ac <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 f99b 	bl	8006b7a <USB_HC_ReadInterrupt>
 8002844:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e025      	b.n	8002898 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d018      	beq.n	8002892 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002876:	d106      	bne.n	8002886 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4619      	mov	r1, r3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f87b 	bl	800297a <HCD_HC_IN_IRQHandler>
 8002884:	e005      	b.n	8002892 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fca9 	bl	80031e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3d4      	bcc.n	800284c <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 ffde 	bl	8006872 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d101      	bne.n	80028c4 <HAL_HCD_IRQHandler+0x1d2>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_HCD_IRQHandler+0x1d4>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d014      	beq.n	80028f4 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0210 	bic.w	r2, r2, #16
 80028d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fff8 	bl	80038d0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0210 	orr.w	r2, r2, #16
 80028ee:	619a      	str	r2, [r3, #24]
 80028f0:	e000      	b.n	80028f4 <HAL_HCD_IRQHandler+0x202>
      return;
 80028f2:	bf00      	nop
    }
  }
}
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	70fb      	strb	r3, [r7, #3]
 800296a:	4613      	mov	r3, r2
 800296c:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d119      	bne.n	80029de <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	2304      	movs	r3, #4
 80029ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	0151      	lsls	r1, r2, #5
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	440a      	add	r2, r1
 80029d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	60d3      	str	r3, [r2, #12]
 80029dc:	e0ce      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f4:	d12c      	bne.n	8002a50 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	461a      	mov	r2, r3
 8002a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	335d      	adds	r3, #93	; 0x5d
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	0151      	lsls	r1, r2, #5
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	440a      	add	r2, r1
 8002a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 f8a7 	bl	8006b9c <USB_HC_Halt>
 8002a4e:	e095      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d109      	bne.n	8002a7a <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	461a      	mov	r2, r3
 8002a74:	2320      	movs	r3, #32
 8002a76:	6093      	str	r3, [r2, #8]
 8002a78:	e080      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d134      	bne.n	8002afa <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	0151      	lsls	r1, r2, #5
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	335d      	adds	r3, #93	; 0x5d
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 f852 	bl	8006b9c <USB_HC_Halt>
 8002af8:	e040      	b.n	8002b7c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b10:	d134      	bne.n	8002b7c <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	0151      	lsls	r1, r2, #5
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	440a      	add	r2, r1
 8002b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f004 f82d 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2310      	movs	r3, #16
 8002b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	335d      	adds	r3, #93	; 0x5d
 8002b64:	2208      	movs	r2, #8
 8002b66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b7a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b92:	d122      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 ffec 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002bd8:	e300      	b.n	80031dc <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 80fd 	bne.w	8002dec <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01b      	beq.n	8002c32 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	3348      	adds	r3, #72	; 0x48
 8002c0a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	0159      	lsls	r1, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	440b      	add	r3, r1
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c1e:	1ad1      	subs	r1, r2, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4403      	add	r3, r0
 8002c2e:	334c      	adds	r3, #76	; 0x4c
 8002c30:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	335d      	adds	r3, #93	; 0x5d
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	3358      	adds	r3, #88	; 0x58
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	2301      	movs	r3, #1
 8002c6a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	333f      	adds	r3, #63	; 0x3f
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	333f      	adds	r3, #63	; 0x3f
 8002c92:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d121      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	0151      	lsls	r1, r2, #5
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	440a      	add	r2, r1
 8002cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 ff6a 	bl	8006b9c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	6093      	str	r3, [r2, #8]
 8002cda:	e070      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	333f      	adds	r3, #63	; 0x3f
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d12a      	bne.n	8002d48 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	0151      	lsls	r1, r2, #5
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	440a      	add	r2, r1
 8002d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d10:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	335c      	adds	r3, #92	; 0x5c
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	b2d8      	uxtb	r0, r3
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	335c      	adds	r3, #92	; 0x5c
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4601      	mov	r1, r0
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff fe0c 	bl	800295e <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d46:	e03a      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	333f      	adds	r3, #63	; 0x3f
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d12f      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	335c      	adds	r3, #92	; 0x5c
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3350      	adds	r3, #80	; 0x50
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	f083 0301 	eor.w	r3, r3, #1
 8002d88:	b2d8      	uxtb	r0, r3
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	3350      	adds	r3, #80	; 0x50
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	b2d8      	uxtb	r0, r3
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	335c      	adds	r3, #92	; 0x5c
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4601      	mov	r1, r0
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff fdd0 	bl	800295e <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	3350      	adds	r3, #80	; 0x50
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2d8      	uxtb	r0, r3
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	3350      	adds	r3, #80	; 0x50
 8002de6:	4602      	mov	r2, r0
 8002de8:	701a      	strb	r2, [r3, #0]
}
 8002dea:	e1f7      	b.n	80031dc <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	f040 811a 	bne.w	8003038 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	0151      	lsls	r1, r2, #5
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	440a      	add	r2, r1
 8002e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1e:	f023 0302 	bic.w	r3, r3, #2
 8002e22:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	440b      	add	r3, r1
 8002e32:	335d      	adds	r3, #93	; 0x5d
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10a      	bne.n	8002e50 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	335c      	adds	r3, #92	; 0x5c
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e0d9      	b.n	8003004 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	335d      	adds	r3, #93	; 0x5d
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d10a      	bne.n	8002e7c <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	335c      	adds	r3, #92	; 0x5c
 8002e76:	2205      	movs	r2, #5
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e0c3      	b.n	8003004 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	335d      	adds	r3, #93	; 0x5d
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d00a      	beq.n	8002ea8 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	335d      	adds	r3, #93	; 0x5d
 8002ea2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d156      	bne.n	8002f56 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3358      	adds	r3, #88	; 0x58
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4403      	add	r3, r0
 8002eca:	3358      	adds	r3, #88	; 0x58
 8002ecc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	3358      	adds	r3, #88	; 0x58
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d914      	bls.n	8002f0e <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3358      	adds	r3, #88	; 0x58
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	335c      	adds	r3, #92	; 0x5c
 8002f08:	2204      	movs	r2, #4
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e009      	b.n	8002f22 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	335c      	adds	r3, #92	; 0x5c
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f38:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f40:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	e056      	b.n	8003004 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	335d      	adds	r3, #93	; 0x5d
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d123      	bne.n	8002fb4 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	335c      	adds	r3, #92	; 0x5c
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f96:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f9e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e027      	b.n	8003004 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	335d      	adds	r3, #93	; 0x5d
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b07      	cmp	r3, #7
 8002fc8:	d11c      	bne.n	8003004 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3358      	adds	r3, #88	; 0x58
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	1c59      	adds	r1, r3, #1
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4403      	add	r3, r0
 8002fec:	3358      	adds	r3, #88	; 0x58
 8002fee:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	335c      	adds	r3, #92	; 0x5c
 8003000:	2204      	movs	r2, #4
 8003002:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	2302      	movs	r3, #2
 8003014:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	b2d8      	uxtb	r0, r3
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	335c      	adds	r3, #92	; 0x5c
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4601      	mov	r1, r0
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fc94 	bl	800295e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003036:	e0d1      	b.n	80031dc <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d13e      	bne.n	80030cc <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	0151      	lsls	r1, r2, #5
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	440a      	add	r2, r1
 8003064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	3358      	adds	r3, #88	; 0x58
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	1c59      	adds	r1, r3, #1
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4403      	add	r3, r0
 8003090:	3358      	adds	r3, #88	; 0x58
 8003092:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	335d      	adds	r3, #93	; 0x5d
 80030a4:	2206      	movs	r2, #6
 80030a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fd72 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	6093      	str	r3, [r2, #8]
}
 80030ca:	e087      	b.n	80031dc <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d17c      	bne.n	80031dc <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	333f      	adds	r3, #63	; 0x3f
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d122      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	3358      	adds	r3, #88	; 0x58
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	0151      	lsls	r1, r2, #5
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	440a      	add	r2, r1
 8003122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fd30 	bl	8006b9c <USB_HC_Halt>
 800313c:	e045      	b.n	80031ca <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	333f      	adds	r3, #63	; 0x3f
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	333f      	adds	r3, #63	; 0x3f
 8003164:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003166:	2b02      	cmp	r3, #2
 8003168:	d12f      	bne.n	80031ca <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	3358      	adds	r3, #88	; 0x58
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d121      	bne.n	80031ca <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	335d      	adds	r3, #93	; 0x5d
 8003196:	2203      	movs	r2, #3
 8003198:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	0151      	lsls	r1, r2, #5
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	440a      	add	r2, r1
 80031b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fce9 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	461a      	mov	r2, r3
 80031d8:	2310      	movs	r3, #16
 80031da:	6093      	str	r3, [r2, #8]
}
 80031dc:	bf00      	nop
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d119      	bne.n	8003248 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	2304      	movs	r3, #4
 8003224:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	0151      	lsls	r1, r2, #5
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	440a      	add	r2, r1
 800323c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003246:	e33e      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b20      	cmp	r3, #32
 800325c:	d141      	bne.n	80032e2 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	461a      	mov	r2, r3
 800326c:	2320      	movs	r3, #32
 800326e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	333d      	adds	r3, #61	; 0x3d
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 831f 	bne.w	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	333d      	adds	r3, #61	; 0x3d
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	335c      	adds	r3, #92	; 0x5c
 80032ac:	2202      	movs	r2, #2
 80032ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	0151      	lsls	r1, r2, #5
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	440a      	add	r2, r1
 80032c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fc5e 	bl	8006b9c <USB_HC_Halt>
}
 80032e0:	e2f1      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d13f      	bne.n	8003378 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	335d      	adds	r3, #93	; 0x5d
 8003308:	2204      	movs	r2, #4
 800330a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	333d      	adds	r3, #61	; 0x3d
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	440b      	add	r3, r1
 800332e:	3358      	adds	r3, #88	; 0x58
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	440a      	add	r2, r1
 800334a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f003 fc1c 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	6093      	str	r3, [r2, #8]
}
 8003376:	e2a6      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338e:	d122      	bne.n	80033d6 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 fbee 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d2:	6093      	str	r3, [r2, #8]
}
 80033d4:	e277      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d135      	bne.n	8003458 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	3358      	adds	r3, #88	; 0x58
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	440a      	add	r2, r1
 8003416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f003 fbb6 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	2301      	movs	r3, #1
 8003440:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	335d      	adds	r3, #93	; 0x5d
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
}
 8003456:	e236      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b08      	cmp	r3, #8
 800346c:	d12b      	bne.n	80034c6 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	461a      	mov	r2, r3
 800347c:	2308      	movs	r3, #8
 800347e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	440a      	add	r2, r1
 8003496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 fb76 	bl	8006b9c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	335d      	adds	r3, #93	; 0x5d
 80034c0:	2205      	movs	r2, #5
 80034c2:	701a      	strb	r2, [r3, #0]
}
 80034c4:	e1ff      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d155      	bne.n	8003588 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	3358      	adds	r3, #88	; 0x58
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	335d      	adds	r3, #93	; 0x5d
 8003500:	2203      	movs	r2, #3
 8003502:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	333d      	adds	r3, #61	; 0x3d
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d114      	bne.n	8003544 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	333c      	adds	r3, #60	; 0x3c
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	333d      	adds	r3, #61	; 0x3d
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	0151      	lsls	r1, r2, #5
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	440a      	add	r2, r1
 800355a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800355e:	f043 0302 	orr.w	r3, r3, #2
 8003562:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f003 fb14 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	461a      	mov	r2, r3
 8003582:	2310      	movs	r3, #16
 8003584:	6093      	str	r3, [r2, #8]
}
 8003586:	e19e      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d12b      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	0151      	lsls	r1, r2, #5
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	440a      	add	r2, r1
 80035b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 fae7 	bl	8006b9c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	335d      	adds	r3, #93	; 0x5d
 80035de:	2206      	movs	r2, #6
 80035e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ee:	461a      	mov	r2, r3
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	6093      	str	r3, [r2, #8]
}
 80035f4:	e167      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360c:	d135      	bne.n	800367a <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	440a      	add	r2, r1
 8003624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f003 faaf 	bl	8006b9c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364a:	461a      	mov	r2, r3
 800364c:	2310      	movs	r3, #16
 800364e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	461a      	mov	r2, r3
 800365e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003662:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	335d      	adds	r3, #93	; 0x5d
 8003674:	2208      	movs	r2, #8
 8003676:	701a      	strb	r2, [r3, #0]
}
 8003678:	e125      	b.n	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	f040 811a 	bne.w	80038c6 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	0151      	lsls	r1, r2, #5
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	440a      	add	r2, r1
 80036a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ac:	f023 0302 	bic.w	r3, r3, #2
 80036b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	440b      	add	r3, r1
 80036c0:	335d      	adds	r3, #93	; 0x5d
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d137      	bne.n	8003738 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	335c      	adds	r3, #92	; 0x5c
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	333f      	adds	r3, #63	; 0x3f
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d00b      	beq.n	800370a <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	440b      	add	r3, r1
 8003700:	333f      	adds	r3, #63	; 0x3f
 8003702:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003704:	2b03      	cmp	r3, #3
 8003706:	f040 80c5 	bne.w	8003894 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	440b      	add	r3, r1
 8003718:	3351      	adds	r3, #81	; 0x51
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	f083 0301 	eor.w	r3, r3, #1
 8003720:	b2d8      	uxtb	r0, r3
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	440b      	add	r3, r1
 8003730:	3351      	adds	r3, #81	; 0x51
 8003732:	4602      	mov	r2, r0
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e0ad      	b.n	8003894 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	440b      	add	r3, r1
 8003746:	335d      	adds	r3, #93	; 0x5d
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d10a      	bne.n	8003764 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	335c      	adds	r3, #92	; 0x5c
 800375e:	2202      	movs	r2, #2
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e097      	b.n	8003894 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	440b      	add	r3, r1
 8003772:	335d      	adds	r3, #93	; 0x5d
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d10a      	bne.n	8003790 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	335c      	adds	r3, #92	; 0x5c
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e081      	b.n	8003894 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	440b      	add	r3, r1
 800379e:	335d      	adds	r3, #93	; 0x5d
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d10a      	bne.n	80037bc <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	440b      	add	r3, r1
 80037b4:	335c      	adds	r3, #92	; 0x5c
 80037b6:	2205      	movs	r2, #5
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e06b      	b.n	8003894 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	440b      	add	r3, r1
 80037ca:	335d      	adds	r3, #93	; 0x5d
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d00a      	beq.n	80037e8 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	335d      	adds	r3, #93	; 0x5d
 80037e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d155      	bne.n	8003894 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	440b      	add	r3, r1
 80037f6:	3358      	adds	r3, #88	; 0x58
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	1c59      	adds	r1, r3, #1
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4403      	add	r3, r0
 800380a:	3358      	adds	r3, #88	; 0x58
 800380c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	3358      	adds	r3, #88	; 0x58
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d914      	bls.n	800384e <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	440b      	add	r3, r1
 8003832:	3358      	adds	r3, #88	; 0x58
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	335c      	adds	r3, #92	; 0x5c
 8003848:	2204      	movs	r2, #4
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e009      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	440b      	add	r3, r1
 800385c:	335c      	adds	r3, #92	; 0x5c
 800385e:	2202      	movs	r2, #2
 8003860:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003878:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003880:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	461a      	mov	r2, r3
 80038a2:	2302      	movs	r3, #2
 80038a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	b2d8      	uxtb	r0, r3
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	440b      	add	r3, r1
 80038b8:	335c      	adds	r3, #92	; 0x5c
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	4601      	mov	r1, r0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff f84c 	bl	800295e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038c6:	bf00      	nop
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	0c5b      	lsrs	r3, r3, #17
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003904:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d003      	beq.n	8003914 <HCD_RXQLVL_IRQHandler+0x44>
 800390c:	2b05      	cmp	r3, #5
 800390e:	f000 8082 	beq.w	8003a16 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003912:	e083      	b.n	8003a1c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d07f      	beq.n	8003a1a <HCD_RXQLVL_IRQHandler+0x14a>
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	440b      	add	r3, r1
 8003928:	3344      	adds	r3, #68	; 0x44
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d074      	beq.n	8003a1a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	3344      	adds	r3, #68	; 0x44
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	b292      	uxth	r2, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f002 ff68 	bl	8006820 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	3344      	adds	r3, #68	; 0x44
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	18d1      	adds	r1, r2, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4403      	add	r3, r0
 8003974:	3344      	adds	r3, #68	; 0x44
 8003976:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	334c      	adds	r3, #76	; 0x4c
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	18d1      	adds	r1, r2, r3
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4403      	add	r3, r0
 800399c:	334c      	adds	r3, #76	; 0x4c
 800399e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HCD_RXQLVL_IRQHandler+0x154>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d031      	beq.n	8003a1a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039cc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039d4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	3350      	adds	r3, #80	; 0x50
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	f083 0301 	eor.w	r3, r3, #1
 80039fe:	b2d8      	uxtb	r0, r3
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3350      	adds	r3, #80	; 0x50
 8003a10:	4602      	mov	r2, r0
 8003a12:	701a      	strb	r2, [r3, #0]
      break;
 8003a14:	e001      	b.n	8003a1a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003a1a:	bf00      	nop
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3728      	adds	r7, #40	; 0x28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	1ff80000 	.word	0x1ff80000

08003a28 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a54:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d10b      	bne.n	8003a78 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe ff4f 	bl	800290e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f043 0302 	orr.w	r3, r3, #2
 8003a76:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d132      	bne.n	8003ae8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d126      	bne.n	8003ae2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d113      	bne.n	8003ac4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003aa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa6:	d106      	bne.n	8003ab6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 fff0 	bl	8006a94 <USB_InitFSLSPClkSel>
 8003ab4:	e011      	b.n	8003ada <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 ffe9 	bl	8006a94 <USB_InitFSLSPClkSel>
 8003ac2:	e00a      	b.n	8003ada <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ad8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fe ff2b 	bl	8002936 <HAL_HCD_PortEnabled_Callback>
 8003ae0:	e002      	b.n	8003ae8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe ff31 	bl	800294a <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d103      	bne.n	8003afa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f043 0320 	orr.w	r3, r3, #32
 8003af8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6013      	str	r3, [r2, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e11f      	b.n	8003d62 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd f84a 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b74:	f001 f922 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8003b78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a7b      	ldr	r2, [pc, #492]	; (8003d6c <HAL_I2C_Init+0x25c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d807      	bhi.n	8003b94 <HAL_I2C_Init+0x84>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a7a      	ldr	r2, [pc, #488]	; (8003d70 <HAL_I2C_Init+0x260>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bf94      	ite	ls
 8003b8c:	2301      	movls	r3, #1
 8003b8e:	2300      	movhi	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e006      	b.n	8003ba2 <HAL_I2C_Init+0x92>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a77      	ldr	r2, [pc, #476]	; (8003d74 <HAL_I2C_Init+0x264>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0db      	b.n	8003d62 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a72      	ldr	r2, [pc, #456]	; (8003d78 <HAL_I2C_Init+0x268>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0c9b      	lsrs	r3, r3, #18
 8003bb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a64      	ldr	r2, [pc, #400]	; (8003d6c <HAL_I2C_Init+0x25c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d802      	bhi.n	8003be4 <HAL_I2C_Init+0xd4>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3301      	adds	r3, #1
 8003be2:	e009      	b.n	8003bf8 <HAL_I2C_Init+0xe8>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	4a63      	ldr	r2, [pc, #396]	; (8003d7c <HAL_I2C_Init+0x26c>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4956      	ldr	r1, [pc, #344]	; (8003d6c <HAL_I2C_Init+0x25c>)
 8003c14:	428b      	cmp	r3, r1
 8003c16:	d80d      	bhi.n	8003c34 <HAL_I2C_Init+0x124>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e59      	subs	r1, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	bf38      	it	cc
 8003c30:	2304      	movcc	r3, #4
 8003c32:	e04f      	b.n	8003cd4 <HAL_I2C_Init+0x1c4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d111      	bne.n	8003c60 <HAL_I2C_Init+0x150>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e58      	subs	r0, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	440b      	add	r3, r1
 8003c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e012      	b.n	8003c86 <HAL_I2C_Init+0x176>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e58      	subs	r0, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	0099      	lsls	r1, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Init+0x17e>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e022      	b.n	8003cd4 <HAL_I2C_Init+0x1c4>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10e      	bne.n	8003cb4 <HAL_I2C_Init+0x1a4>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1e58      	subs	r0, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	440b      	add	r3, r1
 8003ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb2:	e00f      	b.n	8003cd4 <HAL_I2C_Init+0x1c4>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1e58      	subs	r0, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	0099      	lsls	r1, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	6809      	ldr	r1, [r1, #0]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6911      	ldr	r1, [r2, #16]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68d2      	ldr	r2, [r2, #12]
 8003d0e:	4311      	orrs	r1, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	000186a0 	.word	0x000186a0
 8003d70:	001e847f 	.word	0x001e847f
 8003d74:	003d08ff 	.word	0x003d08ff
 8003d78:	431bde83 	.word	0x431bde83
 8003d7c:	10624dd3 	.word	0x10624dd3

08003d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d129      	bne.n	8003dea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2224      	movs	r2, #36	; 0x24
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0210 	bic.w	r2, r2, #16
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e000      	b.n	8003dec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d12a      	bne.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2224      	movs	r2, #36	; 0x24
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e32:	89fb      	ldrh	r3, [r7, #14]
 8003e34:	f023 030f 	bic.w	r3, r3, #15
 8003e38:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	89fb      	ldrh	r3, [r7, #14]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	89fa      	ldrh	r2, [r7, #14]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e000      	b.n	8003e6a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0bf      	b.n	800400a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc ff80 	bl	8000da4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003eba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6999      	ldr	r1, [r3, #24]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ed0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <HAL_LTDC_Init+0x19c>)
 8003eec:	400b      	ands	r3, r1
 8003eee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6899      	ldr	r1, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68d9      	ldr	r1, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b3e      	ldr	r3, [pc, #248]	; (8004014 <HAL_LTDC_Init+0x19c>)
 8003f1a:	400b      	ands	r3, r1
 8003f1c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	041b      	lsls	r3, r3, #16
 8003f24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68d9      	ldr	r1, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b33      	ldr	r3, [pc, #204]	; (8004014 <HAL_LTDC_Init+0x19c>)
 8003f48:	400b      	ands	r3, r1
 8003f4a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6919      	ldr	r1, [r3, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6959      	ldr	r1, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b27      	ldr	r3, [pc, #156]	; (8004014 <HAL_LTDC_Init+0x19c>)
 8003f76:	400b      	ands	r3, r1
 8003f78:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6959      	ldr	r1, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0206 	orr.w	r2, r2, #6
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	f000f800 	.word	0xf000f800

08004018 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d023      	beq.n	8004082 <HAL_LTDC_IRQHandler+0x6a>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01e      	beq.n	8004082 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2204      	movs	r2, #4
 800405a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2204      	movs	r2, #4
 8004070:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f86f 	bl	8004160 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d023      	beq.n	80040d4 <HAL_LTDC_IRQHandler+0xbc>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01e      	beq.n	80040d4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0202 	bic.w	r2, r2, #2
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2202      	movs	r2, #2
 80040ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040b4:	f043 0202 	orr.w	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2204      	movs	r2, #4
 80040c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f846 	bl	8004160 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01b      	beq.n	8004116 <HAL_LTDC_IRQHandler+0xfe>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d016      	beq.n	8004116 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f82f 	bl	8004174 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_LTDC_IRQHandler+0x140>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0208 	bic.w	r2, r2, #8
 8004138:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2208      	movs	r2, #8
 8004140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f818 	bl	8004188 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800419c:	b5b0      	push	{r4, r5, r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_LTDC_ConfigLayer+0x1a>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e02c      	b.n	8004210 <HAL_LTDC_ConfigLayer+0x74>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2134      	movs	r1, #52	; 0x34
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4614      	mov	r4, r2
 80041da:	461d      	mov	r5, r3
 80041dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f811 	bl	8004218 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2201      	movs	r2, #1
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bdb0      	pop	{r4, r5, r7, pc}

08004218 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	; 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	4413      	add	r3, r2
 8004236:	041b      	lsls	r3, r3, #16
 8004238:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	01db      	lsls	r3, r3, #7
 8004244:	4413      	add	r3, r2
 8004246:	3384      	adds	r3, #132	; 0x84
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	4611      	mov	r1, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	01d2      	lsls	r2, r2, #7
 8004254:	440a      	add	r2, r1
 8004256:	3284      	adds	r2, #132	; 0x84
 8004258:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800425c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426e:	4413      	add	r3, r2
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	440b      	add	r3, r1
 800427e:	3384      	adds	r3, #132	; 0x84
 8004280:	4619      	mov	r1, r3
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004296:	4413      	add	r3, r2
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	01db      	lsls	r3, r3, #7
 80042a6:	4413      	add	r3, r2
 80042a8:	3384      	adds	r3, #132	; 0x84
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	4611      	mov	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	01d2      	lsls	r2, r2, #7
 80042b6:	440a      	add	r2, r1
 80042b8:	3284      	adds	r2, #132	; 0x84
 80042ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ce:	4413      	add	r3, r2
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4619      	mov	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	01db      	lsls	r3, r3, #7
 80042dc:	440b      	add	r3, r1
 80042de:	3384      	adds	r3, #132	; 0x84
 80042e0:	4619      	mov	r1, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	01db      	lsls	r3, r3, #7
 80042f2:	4413      	add	r3, r2
 80042f4:	3384      	adds	r3, #132	; 0x84
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	4611      	mov	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	01d2      	lsls	r2, r2, #7
 8004302:	440a      	add	r2, r1
 8004304:	3284      	adds	r2, #132	; 0x84
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	01db      	lsls	r3, r3, #7
 8004316:	4413      	add	r3, r2
 8004318:	3384      	adds	r3, #132	; 0x84
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	01db      	lsls	r3, r3, #7
 8004348:	4413      	add	r3, r2
 800434a:	3384      	adds	r3, #132	; 0x84
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	01db      	lsls	r3, r3, #7
 8004358:	4413      	add	r3, r2
 800435a:	3384      	adds	r3, #132	; 0x84
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004368:	461a      	mov	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	431a      	orrs	r2, r3
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4619      	mov	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	01db      	lsls	r3, r3, #7
 800437c:	440b      	add	r3, r1
 800437e:	3384      	adds	r3, #132	; 0x84
 8004380:	4619      	mov	r1, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	01db      	lsls	r3, r3, #7
 8004392:	4413      	add	r3, r2
 8004394:	3384      	adds	r3, #132	; 0x84
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	4611      	mov	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	01d2      	lsls	r2, r2, #7
 80043a2:	440a      	add	r2, r1
 80043a4:	3284      	adds	r2, #132	; 0x84
 80043a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	01db      	lsls	r3, r3, #7
 80043b6:	4413      	add	r3, r2
 80043b8:	3384      	adds	r3, #132	; 0x84
 80043ba:	461a      	mov	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	4413      	add	r3, r2
 80043ce:	3384      	adds	r3, #132	; 0x84
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	4611      	mov	r1, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	01d2      	lsls	r2, r2, #7
 80043dc:	440a      	add	r2, r1
 80043de:	3284      	adds	r2, #132	; 0x84
 80043e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043e4:	f023 0307 	bic.w	r3, r3, #7
 80043e8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	6809      	ldr	r1, [r1, #0]
 80043f6:	4608      	mov	r0, r1
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	01c9      	lsls	r1, r1, #7
 80043fc:	4401      	add	r1, r0
 80043fe:	3184      	adds	r1, #132	; 0x84
 8004400:	4313      	orrs	r3, r2
 8004402:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	01db      	lsls	r3, r3, #7
 800440e:	4413      	add	r3, r2
 8004410:	3384      	adds	r3, #132	; 0x84
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	01db      	lsls	r3, r3, #7
 800441e:	4413      	add	r3, r2
 8004420:	3384      	adds	r3, #132	; 0x84
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	01db      	lsls	r3, r3, #7
 8004432:	4413      	add	r3, r2
 8004434:	3384      	adds	r3, #132	; 0x84
 8004436:	461a      	mov	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004446:	2304      	movs	r3, #4
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	e01b      	b.n	8004484 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d102      	bne.n	800445a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004454:	2303      	movs	r3, #3
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	e014      	b.n	8004484 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d00b      	beq.n	800447a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004466:	2b02      	cmp	r3, #2
 8004468:	d007      	beq.n	800447a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800446e:	2b03      	cmp	r3, #3
 8004470:	d003      	beq.n	800447a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004476:	2b07      	cmp	r3, #7
 8004478:	d102      	bne.n	8004480 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800447a:	2302      	movs	r3, #2
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	e001      	b.n	8004484 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004480:	2301      	movs	r3, #1
 8004482:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	01db      	lsls	r3, r3, #7
 800448e:	4413      	add	r3, r2
 8004490:	3384      	adds	r3, #132	; 0x84
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	4611      	mov	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	01d2      	lsls	r2, r2, #7
 800449e:	440a      	add	r2, r1
 80044a0:	3284      	adds	r2, #132	; 0x84
 80044a2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80044a6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	041a      	lsls	r2, r3, #16
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	1acb      	subs	r3, r1, r3
 80044be:	69f9      	ldr	r1, [r7, #28]
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	3303      	adds	r3, #3
 80044c6:	68f9      	ldr	r1, [r7, #12]
 80044c8:	6809      	ldr	r1, [r1, #0]
 80044ca:	4608      	mov	r0, r1
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	01c9      	lsls	r1, r1, #7
 80044d0:	4401      	add	r1, r0
 80044d2:	3184      	adds	r1, #132	; 0x84
 80044d4:	4313      	orrs	r3, r2
 80044d6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	01db      	lsls	r3, r3, #7
 80044e2:	4413      	add	r3, r2
 80044e4:	3384      	adds	r3, #132	; 0x84
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	4611      	mov	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	01d2      	lsls	r2, r2, #7
 80044f2:	440a      	add	r2, r1
 80044f4:	3284      	adds	r2, #132	; 0x84
 80044f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044fa:	f023 0307 	bic.w	r3, r3, #7
 80044fe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	01db      	lsls	r3, r3, #7
 800450a:	4413      	add	r3, r2
 800450c:	3384      	adds	r3, #132	; 0x84
 800450e:	461a      	mov	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	01db      	lsls	r3, r3, #7
 8004520:	4413      	add	r3, r2
 8004522:	3384      	adds	r3, #132	; 0x84
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	4611      	mov	r1, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	01d2      	lsls	r2, r2, #7
 8004530:	440a      	add	r2, r1
 8004532:	3284      	adds	r2, #132	; 0x84
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6013      	str	r3, [r2, #0]
}
 800453a:	bf00      	nop
 800453c:	3724      	adds	r7, #36	; 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e25b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d075      	beq.n	8004652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004566:	4ba3      	ldr	r3, [pc, #652]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00c      	beq.n	800458c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004572:	4ba0      	ldr	r3, [pc, #640]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457a:	2b08      	cmp	r3, #8
 800457c:	d112      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b9d      	ldr	r3, [pc, #628]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d10b      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	4b99      	ldr	r3, [pc, #612]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05b      	beq.n	8004650 <HAL_RCC_OscConfig+0x108>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d157      	bne.n	8004650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e236      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x74>
 80045ae:	4b91      	ldr	r3, [pc, #580]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a90      	ldr	r2, [pc, #576]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0xb0>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0x98>
 80045c6:	4b8b      	ldr	r3, [pc, #556]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a8a      	ldr	r2, [pc, #552]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a87      	ldr	r2, [pc, #540]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xb0>
 80045e0:	4b84      	ldr	r3, [pc, #528]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a83      	ldr	r2, [pc, #524]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a80      	ldr	r2, [pc, #512]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fd fae4 	bl	8001bcc <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004608:	f7fd fae0 	bl	8001bcc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1fb      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b76      	ldr	r3, [pc, #472]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0xc0>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fd fad0 	bl	8001bcc <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd facc 	bl	8001bcc <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1e7      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	4b6c      	ldr	r3, [pc, #432]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0xe8>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465e:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800466a:	4b62      	ldr	r3, [pc, #392]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d11c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d116      	bne.n	80046b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004682:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_RCC_OscConfig+0x152>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e1bb      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4952      	ldr	r1, [pc, #328]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	e03a      	b.n	8004726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b8:	4b4f      	ldr	r3, [pc, #316]	; (80047f8 <HAL_RCC_OscConfig+0x2b0>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fd fa85 	bl	8001bcc <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c6:	f7fd fa81 	bl	8001bcc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e19c      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d8:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4940      	ldr	r1, [pc, #256]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]
 80046f8:	e015      	b.n	8004726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <HAL_RCC_OscConfig+0x2b0>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fa64 	bl	8001bcc <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004708:	f7fd fa60 	bl	8001bcc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e17b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471a:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d030      	beq.n	8004794 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473a:	4b30      	ldr	r3, [pc, #192]	; (80047fc <HAL_RCC_OscConfig+0x2b4>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fd fa44 	bl	8001bcc <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004748:	f7fd fa40 	bl	8001bcc <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e15b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x200>
 8004766:	e015      	b.n	8004794 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004768:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_RCC_OscConfig+0x2b4>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476e:	f7fd fa2d 	bl	8001bcc <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004776:	f7fd fa29 	bl	8001bcc <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e144      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800478a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a0 	beq.w	80048e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10f      	bne.n	80047d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d121      	bne.n	8004822 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ea:	f7fd f9ef 	bl	8001bcc <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	e011      	b.n	8004816 <HAL_RCC_OscConfig+0x2ce>
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470000 	.word	0x42470000
 80047fc:	42470e80 	.word	0x42470e80
 8004800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004804:	f7fd f9e2 	bl	8001bcc <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0fd      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b81      	ldr	r3, [pc, #516]	; (8004a1c <HAL_RCC_OscConfig+0x4d4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x2f0>
 800482a:	4b7d      	ldr	r3, [pc, #500]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a7c      	ldr	r2, [pc, #496]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	e01c      	b.n	8004872 <HAL_RCC_OscConfig+0x32a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b05      	cmp	r3, #5
 800483e:	d10c      	bne.n	800485a <HAL_RCC_OscConfig+0x312>
 8004840:	4b77      	ldr	r3, [pc, #476]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a76      	ldr	r2, [pc, #472]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004846:	f043 0304 	orr.w	r3, r3, #4
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	4b74      	ldr	r3, [pc, #464]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	4a73      	ldr	r2, [pc, #460]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6713      	str	r3, [r2, #112]	; 0x70
 8004858:	e00b      	b.n	8004872 <HAL_RCC_OscConfig+0x32a>
 800485a:	4b71      	ldr	r3, [pc, #452]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4a70      	ldr	r2, [pc, #448]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	6713      	str	r3, [r2, #112]	; 0x70
 8004866:	4b6e      	ldr	r3, [pc, #440]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	4a6d      	ldr	r2, [pc, #436]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d015      	beq.n	80048a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fd f9a7 	bl	8001bcc <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	e00a      	b.n	8004898 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004882:	f7fd f9a3 	bl	8001bcc <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004890:	4293      	cmp	r3, r2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0bc      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004898:	4b61      	ldr	r3, [pc, #388]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0ee      	beq.n	8004882 <HAL_RCC_OscConfig+0x33a>
 80048a4:	e014      	b.n	80048d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fd f991 	bl	8001bcc <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fd f98d 	bl	8001bcc <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e0a6      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c4:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ee      	bne.n	80048ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d6:	4b52      	ldr	r3, [pc, #328]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	4a51      	ldr	r2, [pc, #324]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8092 	beq.w	8004a10 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d05c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d141      	bne.n	8004984 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004900:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fd f961 	bl	8001bcc <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490e:	f7fd f95d 	bl	8001bcc <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e078      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004920:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	019b      	lsls	r3, r3, #6
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	3b01      	subs	r3, #1
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	4933      	ldr	r1, [pc, #204]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004956:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd f936 	bl	8001bcc <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd f932 	bl	8001bcc <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e04d      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004976:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x41c>
 8004982:	e045      	b.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fd f91f 	bl	8001bcc <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004992:	f7fd f91b 	bl	8001bcc <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e036      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a4:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x44a>
 80049b0:	e02e      	b.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e029      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d11c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d115      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10d      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	40023800 	.word	0x40023800
 8004a24:	42470060 	.word	0x42470060

08004a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0cc      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b68      	ldr	r3, [pc, #416]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d90c      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b65      	ldr	r3, [pc, #404]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b63      	ldr	r3, [pc, #396]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b8      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4a58      	ldr	r2, [pc, #352]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a94:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b50      	ldr	r3, [pc, #320]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	494d      	ldr	r1, [pc, #308]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d044      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e067      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b06:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4934      	ldr	r1, [pc, #208]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b18:	f7fd f858 	bl	8001bcc <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b20:	f7fd f854 	bl	8001bcc <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e04f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 020c 	and.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d1eb      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d20c      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e032      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4916      	ldr	r1, [pc, #88]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	5cd3      	ldrb	r3, [r2, r3]
 8004bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc fc4e 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023c00 	.word	0x40023c00
 8004be4:	40023800 	.word	0x40023800
 8004be8:	0800a090 	.word	0x0800a090
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000004 	.word	0x20000004

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	2300      	movs	r3, #0
 8004c04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0a:	4b63      	ldr	r3, [pc, #396]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d007      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x32>
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d008      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x38>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 80b4 	bne.w	8004d88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c22:	60bb      	str	r3, [r7, #8]
       break;
 8004c24:	e0b3      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c26:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004c28:	60bb      	str	r3, [r7, #8]
      break;
 8004c2a:	e0b0      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c2c:	4b5a      	ldr	r3, [pc, #360]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c36:	4b58      	ldr	r3, [pc, #352]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04a      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4b55      	ldr	r3, [pc, #340]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	f04f 0400 	mov.w	r4, #0
 8004c4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	ea03 0501 	and.w	r5, r3, r1
 8004c58:	ea04 0602 	and.w	r6, r4, r2
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4632      	mov	r2, r6
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	0154      	lsls	r4, r2, #5
 8004c6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c6e:	014b      	lsls	r3, r1, #5
 8004c70:	4619      	mov	r1, r3
 8004c72:	4622      	mov	r2, r4
 8004c74:	1b49      	subs	r1, r1, r5
 8004c76:	eb62 0206 	sbc.w	r2, r2, r6
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	0194      	lsls	r4, r2, #6
 8004c84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c88:	018b      	lsls	r3, r1, #6
 8004c8a:	1a5b      	subs	r3, r3, r1
 8004c8c:	eb64 0402 	sbc.w	r4, r4, r2
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	00e2      	lsls	r2, r4, #3
 8004c9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c9e:	00d9      	lsls	r1, r3, #3
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4614      	mov	r4, r2
 8004ca4:	195b      	adds	r3, r3, r5
 8004ca6:	eb44 0406 	adc.w	r4, r4, r6
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	0262      	lsls	r2, r4, #9
 8004cb4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004cb8:	0259      	lsls	r1, r3, #9
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f04f 0400 	mov.w	r4, #0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	f7fb fae0 	bl	8000290 <__aeabi_uldivmod>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e049      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	f04f 0400 	mov.w	r4, #0
 8004ce2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	ea03 0501 	and.w	r5, r3, r1
 8004cee:	ea04 0602 	and.w	r6, r4, r2
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	0154      	lsls	r4, r2, #5
 8004d00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d04:	014b      	lsls	r3, r1, #5
 8004d06:	4619      	mov	r1, r3
 8004d08:	4622      	mov	r2, r4
 8004d0a:	1b49      	subs	r1, r1, r5
 8004d0c:	eb62 0206 	sbc.w	r2, r2, r6
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	0194      	lsls	r4, r2, #6
 8004d1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d1e:	018b      	lsls	r3, r1, #6
 8004d20:	1a5b      	subs	r3, r3, r1
 8004d22:	eb64 0402 	sbc.w	r4, r4, r2
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	00e2      	lsls	r2, r4, #3
 8004d30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d34:	00d9      	lsls	r1, r3, #3
 8004d36:	460b      	mov	r3, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	195b      	adds	r3, r3, r5
 8004d3c:	eb44 0406 	adc.w	r4, r4, r6
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	02a2      	lsls	r2, r4, #10
 8004d4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d4e:	0299      	lsls	r1, r3, #10
 8004d50:	460b      	mov	r3, r1
 8004d52:	4614      	mov	r4, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	4621      	mov	r1, r4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	f7fb fa95 	bl	8000290 <__aeabi_uldivmod>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	60bb      	str	r3, [r7, #8]
      break;
 8004d86:	e002      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d8a:	60bb      	str	r3, [r7, #8]
      break;
 8004d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	007a1200 	.word	0x007a1200

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000000 	.word	0x20000000

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd2:	5cd3      	ldrb	r3, [r2, r3]
 8004dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	0800a0a0 	.word	0x0800a0a0

08004de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de8:	f7ff ffdc 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dec:	4601      	mov	r1, r0
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0b5b      	lsrs	r3, r3, #13
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4a03      	ldr	r2, [pc, #12]	; (8004e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	0800a0a0 	.word	0x0800a0a0

08004e0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	220f      	movs	r2, #15
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_RCC_GetClockConfig+0x5c>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0203 	and.w	r2, r3, #3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <HAL_RCC_GetClockConfig+0x5c>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <HAL_RCC_GetClockConfig+0x5c>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_GetClockConfig+0x5c>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e4e:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <HAL_RCC_GetClockConfig+0x60>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 020f 	and.w	r2, r3, #15
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	601a      	str	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40023c00 	.word	0x40023c00

08004e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d075      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ea4:	4bad      	ldr	r3, [pc, #692]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eaa:	f7fc fe8f 	bl	8001bcc <HAL_GetTick>
 8004eae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eb2:	f7fc fe8b 	bl	8001bcc <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e18b      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec4:	4ba6      	ldr	r3, [pc, #664]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	019a      	lsls	r2, r3, #6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	071b      	lsls	r3, r3, #28
 8004ee8:	499d      	ldr	r1, [pc, #628]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01f      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004efc:	4b98      	ldr	r3, [pc, #608]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f02:	0f1b      	lsrs	r3, r3, #28
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	019a      	lsls	r2, r3, #6
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	061b      	lsls	r3, r3, #24
 8004f16:	431a      	orrs	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	071b      	lsls	r3, r3, #28
 8004f1c:	4990      	ldr	r1, [pc, #576]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f24:	4b8e      	ldr	r3, [pc, #568]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f2a:	f023 021f 	bic.w	r2, r3, #31
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	498a      	ldr	r1, [pc, #552]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00d      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	019a      	lsls	r2, r3, #6
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	061b      	lsls	r3, r3, #24
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	071b      	lsls	r3, r3, #28
 8004f5c:	4980      	ldr	r1, [pc, #512]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f64:	4b7d      	ldr	r3, [pc, #500]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6a:	f7fc fe2f 	bl	8001bcc <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f72:	f7fc fe2b 	bl	8001bcc <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e12b      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f84:	4b76      	ldr	r3, [pc, #472]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d079      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fa8:	4b6e      	ldr	r3, [pc, #440]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fae:	f7fc fe0d 	bl	8001bcc <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fb6:	f7fc fe09 	bl	8001bcc <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e109      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fc8:	4b65      	ldr	r3, [pc, #404]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd4:	d0ef      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fe2:	4b5f      	ldr	r3, [pc, #380]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe8:	0f1b      	lsrs	r3, r3, #28
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	019a      	lsls	r2, r3, #6
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	4957      	ldr	r1, [pc, #348]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800500a:	4b55      	ldr	r3, [pc, #340]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800500c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005010:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	3b01      	subs	r3, #1
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	4950      	ldr	r1, [pc, #320]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005030:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	0e1b      	lsrs	r3, r3, #24
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	019a      	lsls	r2, r3, #6
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	071b      	lsls	r3, r3, #28
 8005050:	4943      	ldr	r1, [pc, #268]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005058:	4b41      	ldr	r3, [pc, #260]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	493e      	ldr	r1, [pc, #248]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800506e:	4b3d      	ldr	r3, [pc, #244]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005074:	f7fc fdaa 	bl	8001bcc <HAL_GetTick>
 8005078:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800507c:	f7fc fda6 	bl	8001bcc <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e0a6      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800508e:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509a:	d1ef      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 808d 	beq.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ba:	4b29      	ldr	r3, [pc, #164]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050c6:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a27      	ldr	r2, [pc, #156]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050d2:	f7fc fd7b 	bl	8001bcc <HAL_GetTick>
 80050d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050d8:	e008      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050da:	f7fc fd77 	bl	8001bcc <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e077      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050ec:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005100:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d039      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d032      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800512c:	4a0c      	ldr	r2, [pc, #48]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d11e      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800513e:	f7fc fd45 	bl	8001bcc <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005144:	e014      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fc fd41 	bl	8001bcc <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d90b      	bls.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e03f      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800515c:	42470068 	.word	0x42470068
 8005160:	40023800 	.word	0x40023800
 8005164:	42470070 	.word	0x42470070
 8005168:	40007000 	.word	0x40007000
 800516c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005170:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0e4      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005188:	d10d      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800519a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519e:	4911      	ldr	r1, [pc, #68]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]
 80051a4:	e005      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80051a6:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051b0:	6093      	str	r3, [r2, #8]
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051be:	4909      	ldr	r1, [pc, #36]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051d6:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40023800 	.word	0x40023800
 80051e8:	424711e0 	.word	0x424711e0

080051ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e025      	b.n	800524c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fb fb2d 	bl	8000874 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f001 f921 	bl	8006474 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	461a      	mov	r2, r3
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	f001 f98c 	bl	800655a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e056      	b.n	8005314 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fc f881 	bl	8001388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	ea42 0103 	orr.w	r1, r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	f003 0104 	and.w	r1, r3, #4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005302:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e01d      	b.n	800536a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc faaa 	bl	800189c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f000 fa14 	bl	8005788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b06      	cmp	r3, #6
 800539a:	d007      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d122      	bne.n	8005416 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d11b      	bne.n	8005416 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f06f 0202 	mvn.w	r2, #2
 80053e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f9a5 	bl	800574c <HAL_TIM_IC_CaptureCallback>
 8005402:	e005      	b.n	8005410 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f997 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9a8 	bl	8005760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d122      	bne.n	800546a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b04      	cmp	r3, #4
 8005430:	d11b      	bne.n	800546a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f06f 0204 	mvn.w	r2, #4
 800543a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f97b 	bl	800574c <HAL_TIM_IC_CaptureCallback>
 8005456:	e005      	b.n	8005464 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f96d 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f97e 	bl	8005760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d122      	bne.n	80054be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b08      	cmp	r3, #8
 8005484:	d11b      	bne.n	80054be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f06f 0208 	mvn.w	r2, #8
 800548e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2204      	movs	r2, #4
 8005494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f951 	bl	800574c <HAL_TIM_IC_CaptureCallback>
 80054aa:	e005      	b.n	80054b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f943 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f954 	bl	8005760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d122      	bne.n	8005512 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b10      	cmp	r3, #16
 80054d8:	d11b      	bne.n	8005512 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0210 	mvn.w	r2, #16
 80054e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2208      	movs	r2, #8
 80054e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f927 	bl	800574c <HAL_TIM_IC_CaptureCallback>
 80054fe:	e005      	b.n	800550c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f919 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f92a 	bl	8005760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0201 	mvn.w	r2, #1
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fb fed5 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b80      	cmp	r3, #128	; 0x80
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 facf 	bl	8005b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d10e      	bne.n	8005596 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d107      	bne.n	8005596 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800558e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f8ef 	bl	8005774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d10e      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d107      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f06f 0220 	mvn.w	r2, #32
 80055ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa99 	bl	8005af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_ConfigClockSource+0x18>
 80055de:	2302      	movs	r3, #2
 80055e0:	e0a6      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x166>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005600:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005608:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d067      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x120>
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d80b      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x6c>
 800561e:	2b10      	cmp	r3, #16
 8005620:	d073      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x140>
 8005622:	2b10      	cmp	r3, #16
 8005624:	d802      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x62>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d06f      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800562a:	e078      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800562c:	2b20      	cmp	r3, #32
 800562e:	d06c      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x140>
 8005630:	2b30      	cmp	r3, #48	; 0x30
 8005632:	d06a      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005634:	e073      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005636:	2b70      	cmp	r3, #112	; 0x70
 8005638:	d00d      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x8c>
 800563a:	2b70      	cmp	r3, #112	; 0x70
 800563c:	d804      	bhi.n	8005648 <HAL_TIM_ConfigClockSource+0x7e>
 800563e:	2b50      	cmp	r3, #80	; 0x50
 8005640:	d033      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0xe0>
 8005642:	2b60      	cmp	r3, #96	; 0x60
 8005644:	d041      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005646:	e06a      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564c:	d066      	beq.n	800571c <HAL_TIM_ConfigClockSource+0x152>
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005652:	d017      	beq.n	8005684 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005654:	e063      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6899      	ldr	r1, [r3, #8]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f000 f9a9 	bl	80059bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005678:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	609a      	str	r2, [r3, #8]
      break;
 8005682:	e04c      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	6899      	ldr	r1, [r3, #8]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f000 f992 	bl	80059bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a6:	609a      	str	r2, [r3, #8]
      break;
 80056a8:	e039      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 f906 	bl	80058c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2150      	movs	r1, #80	; 0x50
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f95f 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 80056c8:	e029      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6859      	ldr	r1, [r3, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f000 f925 	bl	8005926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2160      	movs	r1, #96	; 0x60
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f94f 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 80056e8:	e019      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f000 f8e6 	bl	80058c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2140      	movs	r1, #64	; 0x40
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f93f 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 8005708:	e009      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f000 f936 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 800571a:	e000      	b.n	800571e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800571c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a40      	ldr	r2, [pc, #256]	; (800589c <TIM_Base_SetConfig+0x114>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d013      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a6:	d00f      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a3d      	ldr	r2, [pc, #244]	; (80058a0 <TIM_Base_SetConfig+0x118>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3c      	ldr	r2, [pc, #240]	; (80058a4 <TIM_Base_SetConfig+0x11c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <TIM_Base_SetConfig+0x120>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a3a      	ldr	r2, [pc, #232]	; (80058ac <TIM_Base_SetConfig+0x124>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d108      	bne.n	80057da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2f      	ldr	r2, [pc, #188]	; (800589c <TIM_Base_SetConfig+0x114>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d02b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e8:	d027      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2c      	ldr	r2, [pc, #176]	; (80058a0 <TIM_Base_SetConfig+0x118>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d023      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2b      	ldr	r2, [pc, #172]	; (80058a4 <TIM_Base_SetConfig+0x11c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01f      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2a      	ldr	r2, [pc, #168]	; (80058a8 <TIM_Base_SetConfig+0x120>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a29      	ldr	r2, [pc, #164]	; (80058ac <TIM_Base_SetConfig+0x124>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d017      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <TIM_Base_SetConfig+0x128>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a27      	ldr	r2, [pc, #156]	; (80058b4 <TIM_Base_SetConfig+0x12c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00f      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <TIM_Base_SetConfig+0x130>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00b      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a25      	ldr	r2, [pc, #148]	; (80058bc <TIM_Base_SetConfig+0x134>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a24      	ldr	r2, [pc, #144]	; (80058c0 <TIM_Base_SetConfig+0x138>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a23      	ldr	r2, [pc, #140]	; (80058c4 <TIM_Base_SetConfig+0x13c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d108      	bne.n	800584c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <TIM_Base_SetConfig+0x114>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0xf8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <TIM_Base_SetConfig+0x124>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d103      	bne.n	8005888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	615a      	str	r2, [r3, #20]
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40010000 	.word	0x40010000
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40010400 	.word	0x40010400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800
 80058bc:	40001800 	.word	0x40001800
 80058c0:	40001c00 	.word	0x40001c00
 80058c4:	40002000 	.word	0x40002000

080058c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 030a 	bic.w	r3, r3, #10
 8005904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0210 	bic.w	r2, r3, #16
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	031b      	lsls	r3, r3, #12
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f043 0307 	orr.w	r3, r3, #7
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	431a      	orrs	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	609a      	str	r2, [r3, #8]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e05a      	b.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d022      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a60:	d01d      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40000c00 	.word	0x40000c00
 8005ae8:	40010400 	.word	0x40010400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40001800 	.word	0x40001800

08005af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e03f      	b.n	8005bae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fb ff10 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	; 0x24
 8005b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f90b 	bl	8005d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b088      	sub	sp, #32
 8005bba:	af02      	add	r7, sp, #8
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	f040 8083 	bne.w	8005cde <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_UART_Transmit+0x2e>
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e07b      	b.n	8005ce0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Transmit+0x40>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e074      	b.n	8005ce0 <HAL_UART_Transmit+0x12a>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2221      	movs	r2, #33	; 0x21
 8005c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c0c:	f7fb ffde 	bl	8001bcc <HAL_GetTick>
 8005c10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c26:	e042      	b.n	8005cae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d122      	bne.n	8005c86 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	2180      	movs	r1, #128	; 0x80
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f84c 	bl	8005ce8 <UART_WaitOnFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e042      	b.n	8005ce0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c6c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3302      	adds	r3, #2
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	e017      	b.n	8005cae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	e013      	b.n	8005cae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2180      	movs	r1, #128	; 0x80
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f829 	bl	8005ce8 <UART_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e01f      	b.n	8005ce0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	60ba      	str	r2, [r7, #8]
 8005ca6:	781a      	ldrb	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1b7      	bne.n	8005c28 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2140      	movs	r1, #64	; 0x40
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f810 	bl	8005ce8 <UART_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e006      	b.n	8005ce0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e000      	b.n	8005ce0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005cde:	2302      	movs	r3, #2
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf8:	e02c      	b.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d028      	beq.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d08:	f7fb ff60 	bl	8001bcc <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d21d      	bcs.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e00f      	b.n	8005d74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d0c3      	beq.n	8005cfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005dbe:	f023 030c 	bic.w	r3, r3, #12
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	68f9      	ldr	r1, [r7, #12]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dea:	f040 818b 	bne.w	8006104 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4ac1      	ldr	r2, [pc, #772]	; (80060f8 <UART_SetConfig+0x37c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d005      	beq.n	8005e04 <UART_SetConfig+0x88>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4abf      	ldr	r2, [pc, #764]	; (80060fc <UART_SetConfig+0x380>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	f040 80bd 	bne.w	8005f7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e04:	f7fe ffee 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 8005e08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	461d      	mov	r5, r3
 8005e0e:	f04f 0600 	mov.w	r6, #0
 8005e12:	46a8      	mov	r8, r5
 8005e14:	46b1      	mov	r9, r6
 8005e16:	eb18 0308 	adds.w	r3, r8, r8
 8005e1a:	eb49 0409 	adc.w	r4, r9, r9
 8005e1e:	4698      	mov	r8, r3
 8005e20:	46a1      	mov	r9, r4
 8005e22:	eb18 0805 	adds.w	r8, r8, r5
 8005e26:	eb49 0906 	adc.w	r9, r9, r6
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e3e:	4688      	mov	r8, r1
 8005e40:	4691      	mov	r9, r2
 8005e42:	eb18 0005 	adds.w	r0, r8, r5
 8005e46:	eb49 0106 	adc.w	r1, r9, r6
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f04f 0600 	mov.w	r6, #0
 8005e54:	196b      	adds	r3, r5, r5
 8005e56:	eb46 0406 	adc.w	r4, r6, r6
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	f7fa fa17 	bl	8000290 <__aeabi_uldivmod>
 8005e62:	4603      	mov	r3, r0
 8005e64:	460c      	mov	r4, r1
 8005e66:	461a      	mov	r2, r3
 8005e68:	4ba5      	ldr	r3, [pc, #660]	; (8006100 <UART_SetConfig+0x384>)
 8005e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	461d      	mov	r5, r3
 8005e78:	f04f 0600 	mov.w	r6, #0
 8005e7c:	46a9      	mov	r9, r5
 8005e7e:	46b2      	mov	sl, r6
 8005e80:	eb19 0309 	adds.w	r3, r9, r9
 8005e84:	eb4a 040a 	adc.w	r4, sl, sl
 8005e88:	4699      	mov	r9, r3
 8005e8a:	46a2      	mov	sl, r4
 8005e8c:	eb19 0905 	adds.w	r9, r9, r5
 8005e90:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ea0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ea4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ea8:	4689      	mov	r9, r1
 8005eaa:	4692      	mov	sl, r2
 8005eac:	eb19 0005 	adds.w	r0, r9, r5
 8005eb0:	eb4a 0106 	adc.w	r1, sl, r6
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	461d      	mov	r5, r3
 8005eba:	f04f 0600 	mov.w	r6, #0
 8005ebe:	196b      	adds	r3, r5, r5
 8005ec0:	eb46 0406 	adc.w	r4, r6, r6
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	f7fa f9e2 	bl	8000290 <__aeabi_uldivmod>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4b8b      	ldr	r3, [pc, #556]	; (8006100 <UART_SetConfig+0x384>)
 8005ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	2164      	movs	r1, #100	; 0x64
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	3332      	adds	r3, #50	; 0x32
 8005ee6:	4a86      	ldr	r2, [pc, #536]	; (8006100 <UART_SetConfig+0x384>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ef4:	4498      	add	r8, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	461d      	mov	r5, r3
 8005efa:	f04f 0600 	mov.w	r6, #0
 8005efe:	46a9      	mov	r9, r5
 8005f00:	46b2      	mov	sl, r6
 8005f02:	eb19 0309 	adds.w	r3, r9, r9
 8005f06:	eb4a 040a 	adc.w	r4, sl, sl
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	46a2      	mov	sl, r4
 8005f0e:	eb19 0905 	adds.w	r9, r9, r5
 8005f12:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f2a:	4689      	mov	r9, r1
 8005f2c:	4692      	mov	sl, r2
 8005f2e:	eb19 0005 	adds.w	r0, r9, r5
 8005f32:	eb4a 0106 	adc.w	r1, sl, r6
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	f04f 0600 	mov.w	r6, #0
 8005f40:	196b      	adds	r3, r5, r5
 8005f42:	eb46 0406 	adc.w	r4, r6, r6
 8005f46:	461a      	mov	r2, r3
 8005f48:	4623      	mov	r3, r4
 8005f4a:	f7fa f9a1 	bl	8000290 <__aeabi_uldivmod>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	460c      	mov	r4, r1
 8005f52:	461a      	mov	r2, r3
 8005f54:	4b6a      	ldr	r3, [pc, #424]	; (8006100 <UART_SetConfig+0x384>)
 8005f56:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	2164      	movs	r1, #100	; 0x64
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	3332      	adds	r3, #50	; 0x32
 8005f68:	4a65      	ldr	r2, [pc, #404]	; (8006100 <UART_SetConfig+0x384>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	f003 0207 	and.w	r2, r3, #7
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4442      	add	r2, r8
 8005f7a:	609a      	str	r2, [r3, #8]
 8005f7c:	e26f      	b.n	800645e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f7e:	f7fe ff1d 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8005f82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	461d      	mov	r5, r3
 8005f88:	f04f 0600 	mov.w	r6, #0
 8005f8c:	46a8      	mov	r8, r5
 8005f8e:	46b1      	mov	r9, r6
 8005f90:	eb18 0308 	adds.w	r3, r8, r8
 8005f94:	eb49 0409 	adc.w	r4, r9, r9
 8005f98:	4698      	mov	r8, r3
 8005f9a:	46a1      	mov	r9, r4
 8005f9c:	eb18 0805 	adds.w	r8, r8, r5
 8005fa0:	eb49 0906 	adc.w	r9, r9, r6
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fb8:	4688      	mov	r8, r1
 8005fba:	4691      	mov	r9, r2
 8005fbc:	eb18 0005 	adds.w	r0, r8, r5
 8005fc0:	eb49 0106 	adc.w	r1, r9, r6
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	461d      	mov	r5, r3
 8005fca:	f04f 0600 	mov.w	r6, #0
 8005fce:	196b      	adds	r3, r5, r5
 8005fd0:	eb46 0406 	adc.w	r4, r6, r6
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	f7fa f95a 	bl	8000290 <__aeabi_uldivmod>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4b47      	ldr	r3, [pc, #284]	; (8006100 <UART_SetConfig+0x384>)
 8005fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	461d      	mov	r5, r3
 8005ff2:	f04f 0600 	mov.w	r6, #0
 8005ff6:	46a9      	mov	r9, r5
 8005ff8:	46b2      	mov	sl, r6
 8005ffa:	eb19 0309 	adds.w	r3, r9, r9
 8005ffe:	eb4a 040a 	adc.w	r4, sl, sl
 8006002:	4699      	mov	r9, r3
 8006004:	46a2      	mov	sl, r4
 8006006:	eb19 0905 	adds.w	r9, r9, r5
 800600a:	eb4a 0a06 	adc.w	sl, sl, r6
 800600e:	f04f 0100 	mov.w	r1, #0
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800601a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800601e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006022:	4689      	mov	r9, r1
 8006024:	4692      	mov	sl, r2
 8006026:	eb19 0005 	adds.w	r0, r9, r5
 800602a:	eb4a 0106 	adc.w	r1, sl, r6
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	461d      	mov	r5, r3
 8006034:	f04f 0600 	mov.w	r6, #0
 8006038:	196b      	adds	r3, r5, r5
 800603a:	eb46 0406 	adc.w	r4, r6, r6
 800603e:	461a      	mov	r2, r3
 8006040:	4623      	mov	r3, r4
 8006042:	f7fa f925 	bl	8000290 <__aeabi_uldivmod>
 8006046:	4603      	mov	r3, r0
 8006048:	460c      	mov	r4, r1
 800604a:	461a      	mov	r2, r3
 800604c:	4b2c      	ldr	r3, [pc, #176]	; (8006100 <UART_SetConfig+0x384>)
 800604e:	fba3 1302 	umull	r1, r3, r3, r2
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	2164      	movs	r1, #100	; 0x64
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	3332      	adds	r3, #50	; 0x32
 8006060:	4a27      	ldr	r2, [pc, #156]	; (8006100 <UART_SetConfig+0x384>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800606e:	4498      	add	r8, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	461d      	mov	r5, r3
 8006074:	f04f 0600 	mov.w	r6, #0
 8006078:	46a9      	mov	r9, r5
 800607a:	46b2      	mov	sl, r6
 800607c:	eb19 0309 	adds.w	r3, r9, r9
 8006080:	eb4a 040a 	adc.w	r4, sl, sl
 8006084:	4699      	mov	r9, r3
 8006086:	46a2      	mov	sl, r4
 8006088:	eb19 0905 	adds.w	r9, r9, r5
 800608c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800609c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060a4:	4689      	mov	r9, r1
 80060a6:	4692      	mov	sl, r2
 80060a8:	eb19 0005 	adds.w	r0, r9, r5
 80060ac:	eb4a 0106 	adc.w	r1, sl, r6
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	461d      	mov	r5, r3
 80060b6:	f04f 0600 	mov.w	r6, #0
 80060ba:	196b      	adds	r3, r5, r5
 80060bc:	eb46 0406 	adc.w	r4, r6, r6
 80060c0:	461a      	mov	r2, r3
 80060c2:	4623      	mov	r3, r4
 80060c4:	f7fa f8e4 	bl	8000290 <__aeabi_uldivmod>
 80060c8:	4603      	mov	r3, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <UART_SetConfig+0x384>)
 80060d0:	fba3 1302 	umull	r1, r3, r3, r2
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	2164      	movs	r1, #100	; 0x64
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	3332      	adds	r3, #50	; 0x32
 80060e2:	4a07      	ldr	r2, [pc, #28]	; (8006100 <UART_SetConfig+0x384>)
 80060e4:	fba2 2303 	umull	r2, r3, r2, r3
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	f003 0207 	and.w	r2, r3, #7
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4442      	add	r2, r8
 80060f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80060f6:	e1b2      	b.n	800645e <UART_SetConfig+0x6e2>
 80060f8:	40011000 	.word	0x40011000
 80060fc:	40011400 	.word	0x40011400
 8006100:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4ad7      	ldr	r2, [pc, #860]	; (8006468 <UART_SetConfig+0x6ec>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d005      	beq.n	800611a <UART_SetConfig+0x39e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4ad6      	ldr	r2, [pc, #856]	; (800646c <UART_SetConfig+0x6f0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	f040 80d1 	bne.w	80062bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800611a:	f7fe fe63 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 800611e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	469a      	mov	sl, r3
 8006124:	f04f 0b00 	mov.w	fp, #0
 8006128:	46d0      	mov	r8, sl
 800612a:	46d9      	mov	r9, fp
 800612c:	eb18 0308 	adds.w	r3, r8, r8
 8006130:	eb49 0409 	adc.w	r4, r9, r9
 8006134:	4698      	mov	r8, r3
 8006136:	46a1      	mov	r9, r4
 8006138:	eb18 080a 	adds.w	r8, r8, sl
 800613c:	eb49 090b 	adc.w	r9, r9, fp
 8006140:	f04f 0100 	mov.w	r1, #0
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800614c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006150:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006154:	4688      	mov	r8, r1
 8006156:	4691      	mov	r9, r2
 8006158:	eb1a 0508 	adds.w	r5, sl, r8
 800615c:	eb4b 0609 	adc.w	r6, fp, r9
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4619      	mov	r1, r3
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	f04f 0400 	mov.w	r4, #0
 8006172:	0094      	lsls	r4, r2, #2
 8006174:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006178:	008b      	lsls	r3, r1, #2
 800617a:	461a      	mov	r2, r3
 800617c:	4623      	mov	r3, r4
 800617e:	4628      	mov	r0, r5
 8006180:	4631      	mov	r1, r6
 8006182:	f7fa f885 	bl	8000290 <__aeabi_uldivmod>
 8006186:	4603      	mov	r3, r0
 8006188:	460c      	mov	r4, r1
 800618a:	461a      	mov	r2, r3
 800618c:	4bb8      	ldr	r3, [pc, #736]	; (8006470 <UART_SetConfig+0x6f4>)
 800618e:	fba3 2302 	umull	r2, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	469b      	mov	fp, r3
 800619c:	f04f 0c00 	mov.w	ip, #0
 80061a0:	46d9      	mov	r9, fp
 80061a2:	46e2      	mov	sl, ip
 80061a4:	eb19 0309 	adds.w	r3, r9, r9
 80061a8:	eb4a 040a 	adc.w	r4, sl, sl
 80061ac:	4699      	mov	r9, r3
 80061ae:	46a2      	mov	sl, r4
 80061b0:	eb19 090b 	adds.w	r9, r9, fp
 80061b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061cc:	4689      	mov	r9, r1
 80061ce:	4692      	mov	sl, r2
 80061d0:	eb1b 0509 	adds.w	r5, fp, r9
 80061d4:	eb4c 060a 	adc.w	r6, ip, sl
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4619      	mov	r1, r3
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	f04f 0400 	mov.w	r4, #0
 80061ea:	0094      	lsls	r4, r2, #2
 80061ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061f0:	008b      	lsls	r3, r1, #2
 80061f2:	461a      	mov	r2, r3
 80061f4:	4623      	mov	r3, r4
 80061f6:	4628      	mov	r0, r5
 80061f8:	4631      	mov	r1, r6
 80061fa:	f7fa f849 	bl	8000290 <__aeabi_uldivmod>
 80061fe:	4603      	mov	r3, r0
 8006200:	460c      	mov	r4, r1
 8006202:	461a      	mov	r2, r3
 8006204:	4b9a      	ldr	r3, [pc, #616]	; (8006470 <UART_SetConfig+0x6f4>)
 8006206:	fba3 1302 	umull	r1, r3, r3, r2
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	2164      	movs	r1, #100	; 0x64
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	3332      	adds	r3, #50	; 0x32
 8006218:	4a95      	ldr	r2, [pc, #596]	; (8006470 <UART_SetConfig+0x6f4>)
 800621a:	fba2 2303 	umull	r2, r3, r2, r3
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006224:	4498      	add	r8, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	469b      	mov	fp, r3
 800622a:	f04f 0c00 	mov.w	ip, #0
 800622e:	46d9      	mov	r9, fp
 8006230:	46e2      	mov	sl, ip
 8006232:	eb19 0309 	adds.w	r3, r9, r9
 8006236:	eb4a 040a 	adc.w	r4, sl, sl
 800623a:	4699      	mov	r9, r3
 800623c:	46a2      	mov	sl, r4
 800623e:	eb19 090b 	adds.w	r9, r9, fp
 8006242:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006246:	f04f 0100 	mov.w	r1, #0
 800624a:	f04f 0200 	mov.w	r2, #0
 800624e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006252:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006256:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800625a:	4689      	mov	r9, r1
 800625c:	4692      	mov	sl, r2
 800625e:	eb1b 0509 	adds.w	r5, fp, r9
 8006262:	eb4c 060a 	adc.w	r6, ip, sl
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4619      	mov	r1, r3
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	f04f 0400 	mov.w	r4, #0
 8006278:	0094      	lsls	r4, r2, #2
 800627a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800627e:	008b      	lsls	r3, r1, #2
 8006280:	461a      	mov	r2, r3
 8006282:	4623      	mov	r3, r4
 8006284:	4628      	mov	r0, r5
 8006286:	4631      	mov	r1, r6
 8006288:	f7fa f802 	bl	8000290 <__aeabi_uldivmod>
 800628c:	4603      	mov	r3, r0
 800628e:	460c      	mov	r4, r1
 8006290:	461a      	mov	r2, r3
 8006292:	4b77      	ldr	r3, [pc, #476]	; (8006470 <UART_SetConfig+0x6f4>)
 8006294:	fba3 1302 	umull	r1, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	2164      	movs	r1, #100	; 0x64
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	3332      	adds	r3, #50	; 0x32
 80062a6:	4a72      	ldr	r2, [pc, #456]	; (8006470 <UART_SetConfig+0x6f4>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	f003 020f 	and.w	r2, r3, #15
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4442      	add	r2, r8
 80062b8:	609a      	str	r2, [r3, #8]
 80062ba:	e0d0      	b.n	800645e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80062bc:	f7fe fd7e 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 80062c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	469a      	mov	sl, r3
 80062c6:	f04f 0b00 	mov.w	fp, #0
 80062ca:	46d0      	mov	r8, sl
 80062cc:	46d9      	mov	r9, fp
 80062ce:	eb18 0308 	adds.w	r3, r8, r8
 80062d2:	eb49 0409 	adc.w	r4, r9, r9
 80062d6:	4698      	mov	r8, r3
 80062d8:	46a1      	mov	r9, r4
 80062da:	eb18 080a 	adds.w	r8, r8, sl
 80062de:	eb49 090b 	adc.w	r9, r9, fp
 80062e2:	f04f 0100 	mov.w	r1, #0
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062f6:	4688      	mov	r8, r1
 80062f8:	4691      	mov	r9, r2
 80062fa:	eb1a 0508 	adds.w	r5, sl, r8
 80062fe:	eb4b 0609 	adc.w	r6, fp, r9
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	4619      	mov	r1, r3
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	f04f 0400 	mov.w	r4, #0
 8006314:	0094      	lsls	r4, r2, #2
 8006316:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800631a:	008b      	lsls	r3, r1, #2
 800631c:	461a      	mov	r2, r3
 800631e:	4623      	mov	r3, r4
 8006320:	4628      	mov	r0, r5
 8006322:	4631      	mov	r1, r6
 8006324:	f7f9 ffb4 	bl	8000290 <__aeabi_uldivmod>
 8006328:	4603      	mov	r3, r0
 800632a:	460c      	mov	r4, r1
 800632c:	461a      	mov	r2, r3
 800632e:	4b50      	ldr	r3, [pc, #320]	; (8006470 <UART_SetConfig+0x6f4>)
 8006330:	fba3 2302 	umull	r2, r3, r3, r2
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	469b      	mov	fp, r3
 800633e:	f04f 0c00 	mov.w	ip, #0
 8006342:	46d9      	mov	r9, fp
 8006344:	46e2      	mov	sl, ip
 8006346:	eb19 0309 	adds.w	r3, r9, r9
 800634a:	eb4a 040a 	adc.w	r4, sl, sl
 800634e:	4699      	mov	r9, r3
 8006350:	46a2      	mov	sl, r4
 8006352:	eb19 090b 	adds.w	r9, r9, fp
 8006356:	eb4a 0a0c 	adc.w	sl, sl, ip
 800635a:	f04f 0100 	mov.w	r1, #0
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006366:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800636a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800636e:	4689      	mov	r9, r1
 8006370:	4692      	mov	sl, r2
 8006372:	eb1b 0509 	adds.w	r5, fp, r9
 8006376:	eb4c 060a 	adc.w	r6, ip, sl
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4619      	mov	r1, r3
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	f04f 0400 	mov.w	r4, #0
 800638c:	0094      	lsls	r4, r2, #2
 800638e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006392:	008b      	lsls	r3, r1, #2
 8006394:	461a      	mov	r2, r3
 8006396:	4623      	mov	r3, r4
 8006398:	4628      	mov	r0, r5
 800639a:	4631      	mov	r1, r6
 800639c:	f7f9 ff78 	bl	8000290 <__aeabi_uldivmod>
 80063a0:	4603      	mov	r3, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	461a      	mov	r2, r3
 80063a6:	4b32      	ldr	r3, [pc, #200]	; (8006470 <UART_SetConfig+0x6f4>)
 80063a8:	fba3 1302 	umull	r1, r3, r3, r2
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	2164      	movs	r1, #100	; 0x64
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	3332      	adds	r3, #50	; 0x32
 80063ba:	4a2d      	ldr	r2, [pc, #180]	; (8006470 <UART_SetConfig+0x6f4>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c6:	4498      	add	r8, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	469b      	mov	fp, r3
 80063cc:	f04f 0c00 	mov.w	ip, #0
 80063d0:	46d9      	mov	r9, fp
 80063d2:	46e2      	mov	sl, ip
 80063d4:	eb19 0309 	adds.w	r3, r9, r9
 80063d8:	eb4a 040a 	adc.w	r4, sl, sl
 80063dc:	4699      	mov	r9, r3
 80063de:	46a2      	mov	sl, r4
 80063e0:	eb19 090b 	adds.w	r9, r9, fp
 80063e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063e8:	f04f 0100 	mov.w	r1, #0
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063fc:	4689      	mov	r9, r1
 80063fe:	4692      	mov	sl, r2
 8006400:	eb1b 0509 	adds.w	r5, fp, r9
 8006404:	eb4c 060a 	adc.w	r6, ip, sl
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4619      	mov	r1, r3
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	f04f 0400 	mov.w	r4, #0
 800641a:	0094      	lsls	r4, r2, #2
 800641c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006420:	008b      	lsls	r3, r1, #2
 8006422:	461a      	mov	r2, r3
 8006424:	4623      	mov	r3, r4
 8006426:	4628      	mov	r0, r5
 8006428:	4631      	mov	r1, r6
 800642a:	f7f9 ff31 	bl	8000290 <__aeabi_uldivmod>
 800642e:	4603      	mov	r3, r0
 8006430:	460c      	mov	r4, r1
 8006432:	461a      	mov	r2, r3
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <UART_SetConfig+0x6f4>)
 8006436:	fba3 1302 	umull	r1, r3, r3, r2
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	2164      	movs	r1, #100	; 0x64
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	3332      	adds	r3, #50	; 0x32
 8006448:	4a09      	ldr	r2, [pc, #36]	; (8006470 <UART_SetConfig+0x6f4>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4442      	add	r2, r8
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	e7ff      	b.n	800645e <UART_SetConfig+0x6e2>
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	40011000 	.word	0x40011000
 800646c:	40011400 	.word	0x40011400
 8006470:	51eb851f 	.word	0x51eb851f

08006474 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d029      	beq.n	80064e2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800649a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800649e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80064a8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80064ae:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80064b4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80064ba:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80064c0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80064c6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80064cc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80064d2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e034      	b.n	800654c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ee:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80064f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80064fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006512:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006516:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006520:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006526:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800652c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006532:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006538:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800655a:	b480      	push	{r7}
 800655c:	b087      	sub	sp, #28
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d02e      	beq.n	80065d2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006580:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	3b01      	subs	r3, #1
 800658e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006590:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	3b01      	subs	r3, #1
 8006598:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800659a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80065a4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80065ae:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80065b8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	3b01      	subs	r3, #1
 80065c0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80065c2:	4313      	orrs	r3, r2
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	e03b      	b.n	800664a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80065f4:	4313      	orrs	r3, r2
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006608:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	3b01      	subs	r3, #1
 8006616:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006618:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	3b01      	subs	r3, #1
 8006620:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006622:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	3b01      	subs	r3, #1
 800662a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800662c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	3b01      	subs	r3, #1
 8006634:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006636:	4313      	orrs	r3, r2
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006658:	b084      	sub	sp, #16
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	f107 001c 	add.w	r0, r7, #28
 8006666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2b01      	cmp	r3, #1
 800666e:	d122      	bne.n	80066b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	2b01      	cmp	r3, #1
 800669c:	d105      	bne.n	80066aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f902 	bl	80068b4 <USB_CoreReset>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
 80066b4:	e01a      	b.n	80066ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8f6 	bl	80068b4 <USB_CoreReset>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
 80066de:	e005      	b.n	80066ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10b      	bne.n	800670a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f043 0206 	orr.w	r2, r3, #6
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006716:	b004      	add	sp, #16
 8006718:	4770      	bx	lr

0800671a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f023 0201 	bic.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d106      	bne.n	8006768 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60da      	str	r2, [r3, #12]
 8006766:	e00b      	b.n	8006780 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e001      	b.n	8006780 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e003      	b.n	8006788 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006780:	2032      	movs	r0, #50	; 0x32
 8006782:	f7fb fa2f 	bl	8001be4 <HAL_Delay>

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	019b      	lsls	r3, r3, #6
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <USB_FlushTxFifo+0x48>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e006      	b.n	80067ca <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d0f0      	beq.n	80067aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	00030d40 	.word	0x00030d40

080067dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2210      	movs	r2, #16
 80067ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <USB_FlushRxFifo+0x40>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e006      	b.n	800680e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b10      	cmp	r3, #16
 800680a:	d0f0      	beq.n	80067ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	00030d40 	.word	0x00030d40

08006820 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006820:	b480      	push	{r7}
 8006822:	b089      	sub	sp, #36	; 0x24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	3303      	adds	r3, #3
 800683a:	089b      	lsrs	r3, r3, #2
 800683c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e00b      	b.n	800685c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	3304      	adds	r3, #4
 8006854:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	3301      	adds	r3, #1
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	429a      	cmp	r2, r3
 8006862:	d3ef      	bcc.n	8006844 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006864:	69fb      	ldr	r3, [r7, #28]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3724      	adds	r7, #36	; 0x24
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4013      	ands	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800688a:	68fb      	ldr	r3, [r7, #12]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0301 	and.w	r3, r3, #1
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3301      	adds	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4a13      	ldr	r2, [pc, #76]	; (8006918 <USB_CoreReset+0x64>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d901      	bls.n	80068d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e01b      	b.n	800690a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	daf2      	bge.n	80068c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f043 0201 	orr.w	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4a09      	ldr	r2, [pc, #36]	; (8006918 <USB_CoreReset+0x64>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d901      	bls.n	80068fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e006      	b.n	800690a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d0f0      	beq.n	80068ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	00030d40 	.word	0x00030d40

0800691c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800691c:	b084      	sub	sp, #16
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	f107 001c 	add.w	r0, r7, #28
 800692a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	2b01      	cmp	r3, #1
 8006972:	d10a      	bne.n	800698a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006982:	f043 0304 	orr.w	r3, r3, #4
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	e014      	b.n	80069b4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	e009      	b.n	80069b4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069ae:	f023 0304 	bic.w	r3, r3, #4
 80069b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80069b4:	2110      	movs	r1, #16
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff feea 	bl	8006790 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ff0d 	bl	80067dc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e015      	b.n	80069f4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d4:	461a      	mov	r2, r3
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295
 80069da:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e8:	461a      	mov	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3301      	adds	r3, #1
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d3e5      	bcc.n	80069c8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80069fc:	2101      	movs	r1, #1
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f882 	bl	8006b08 <USB_DriveVbus>

  HAL_Delay(200U);
 8006a04:	20c8      	movs	r0, #200	; 0xc8
 8006a06:	f7fb f8ed 	bl	8001be4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f04f 32ff 	mov.w	r2, #4294967295
 8006a16:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <USB_HostInit+0x164>)
 8006a30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a13      	ldr	r2, [pc, #76]	; (8006a84 <USB_HostInit+0x168>)
 8006a36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006a3a:	e009      	b.n	8006a50 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2280      	movs	r2, #128	; 0x80
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a10      	ldr	r2, [pc, #64]	; (8006a88 <USB_HostInit+0x16c>)
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <USB_HostInit+0x170>)
 8006a4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d105      	bne.n	8006a62 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f043 0210 	orr.w	r2, r3, #16
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <USB_HostInit+0x174>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a7a:	b004      	add	sp, #16
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	01000200 	.word	0x01000200
 8006a84:	00e00300 	.word	0x00e00300
 8006a88:	00600080 	.word	0x00600080
 8006a8c:	004000e0 	.word	0x004000e0
 8006a90:	a3200008 	.word	0xa3200008

08006a94 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006acc:	4313      	orrs	r3, r2
 8006ace:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006adc:	461a      	mov	r2, r3
 8006ade:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006ae2:	6053      	str	r3, [r2, #4]
 8006ae4:	e009      	b.n	8006afa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d106      	bne.n	8006afa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af2:	461a      	mov	r2, r3
 8006af4:	f241 7370 	movw	r3, #6000	; 0x1770
 8006af8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <USB_DriveVbus+0x44>
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d106      	bne.n	8006b4c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b4a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b56:	d109      	bne.n	8006b6c <USB_DriveVbus+0x64>
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b6a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	b29b      	uxth	r3, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	0c9b      	lsrs	r3, r3, #18
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <USB_HC_Halt+0x3a>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d16c      	bne.n	8006cb0 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf4:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d143      	bne.n	8006c8a <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c20:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c40:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c60:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	3301      	adds	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c6e:	d81d      	bhi.n	8006cac <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c86:	d0ec      	beq.n	8006c62 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c88:	e080      	b.n	8006d8c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca8:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006caa:	e06f      	b.n	8006d8c <USB_HC_Halt+0x1f0>
          break;
 8006cac:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006cae:	e06d      	b.n	8006d8c <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d143      	bne.n	8006d68 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d3e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	3301      	adds	r3, #1
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d4c:	d81d      	bhi.n	8006d8a <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d64:	d0ec      	beq.n	8006d40 <USB_HC_Halt+0x1a4>
 8006d66:	e011      	b.n	8006d8c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e000      	b.n	8006d8c <USB_HC_Halt+0x1f0>
          break;
 8006d8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	4603      	mov	r3, r0
 8006da2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dac:	2b84      	cmp	r3, #132	; 0x84
 8006dae:	d005      	beq.n	8006dbc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006db0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	3303      	adds	r3, #3
 8006dba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006dce:	f000 fe41 	bl	8007a54 <vTaskStartScheduler>
  
  return osOK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	b089      	sub	sp, #36	; 0x24
 8006ddc:	af04      	add	r7, sp, #16
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d020      	beq.n	8006e2c <osThreadCreate+0x54>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01c      	beq.n	8006e2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685c      	ldr	r4, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681d      	ldr	r5, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691e      	ldr	r6, [r3, #16]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff ffc8 	bl	8006d9a <makeFreeRtosPriority>
 8006e0a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e14:	9202      	str	r2, [sp, #8]
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	9100      	str	r1, [sp, #0]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 fbc5 	bl	80075b0 <xTaskCreateStatic>
 8006e26:	4603      	mov	r3, r0
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e01c      	b.n	8006e66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685c      	ldr	r4, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e38:	b29e      	uxth	r6, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ffaa 	bl	8006d9a <makeFreeRtosPriority>
 8006e46:	4602      	mov	r2, r0
 8006e48:	f107 030c 	add.w	r3, r7, #12
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	9200      	str	r2, [sp, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4632      	mov	r2, r6
 8006e54:	4629      	mov	r1, r5
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 fc04 	bl	8007664 <xTaskCreate>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d001      	beq.n	8006e66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e000      	b.n	8006e68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e66:	68fb      	ldr	r3, [r7, #12]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <osDelay+0x16>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	e000      	b.n	8006e88 <osDelay+0x18>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fdaf 	bl	80079ec <vTaskDelay>
  
  return osOK;
 8006e8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f103 0208 	add.w	r2, r3, #8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f103 0208 	add.w	r2, r3, #8
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f103 0208 	add.w	r2, r3, #8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d103      	bne.n	8006f5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	e00c      	b.n	8006f74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e002      	b.n	8006f68 <vListInsert+0x2e>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d2f6      	bcs.n	8006f62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	601a      	str	r2, [r3, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6892      	ldr	r2, [r2, #8]
 8006fc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6852      	ldr	r2, [r2, #4]
 8006fcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d103      	bne.n	8006fe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	1e5a      	subs	r2, r3, #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	e7fe      	b.n	8007026 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007028:	f001 fbe0 	bl	80087ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	68f9      	ldr	r1, [r7, #12]
 8007036:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007058:	3b01      	subs	r3, #1
 800705a:	68f9      	ldr	r1, [r7, #12]
 800705c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800705e:	fb01 f303 	mul.w	r3, r1, r3
 8007062:	441a      	add	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	22ff      	movs	r2, #255	; 0xff
 800706c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	22ff      	movs	r2, #255	; 0xff
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d114      	bne.n	80070a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01a      	beq.n	80070bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3310      	adds	r3, #16
 800708a:	4618      	mov	r0, r3
 800708c:	f000 ff20 	bl	8007ed0 <xTaskRemoveFromEventList>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d012      	beq.n	80070bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <xQueueGenericReset+0xcc>)
 8007098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	e009      	b.n	80070bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3310      	adds	r3, #16
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff fef3 	bl	8006e98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3324      	adds	r3, #36	; 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff feee 	bl	8006e98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070bc:	f001 fbc4 	bl	8008848 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070c0:	2301      	movs	r3, #1
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d109      	bne.n	80070f8 <xQueueGenericCreate+0x28>
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	e7fe      	b.n	80070f6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d102      	bne.n	8007104 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
 8007102:	e004      	b.n	800710e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	fb02 f303 	mul.w	r3, r2, r3
 800710c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3348      	adds	r3, #72	; 0x48
 8007112:	4618      	mov	r0, r3
 8007114:	f001 fc84 	bl	8008a20 <pvPortMalloc>
 8007118:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d011      	beq.n	8007144 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	3348      	adds	r3, #72	; 0x48
 8007128:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007132:	79fa      	ldrb	r2, [r7, #7]
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	4613      	mov	r3, r2
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f805 	bl	800714e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007144:	69bb      	ldr	r3, [r7, #24]
	}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
 800715a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e002      	b.n	8007170 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800717c:	2101      	movs	r1, #1
 800717e:	69b8      	ldr	r0, [r7, #24]
 8007180:	f7ff ff3e 	bl	8007000 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08e      	sub	sp, #56	; 0x38
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <xQueueGiveFromISR+0x28>
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	e7fe      	b.n	80071b2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <xQueueGiveFromISR+0x44>
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	e7fe      	b.n	80071ce <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <xQueueGiveFromISR+0x54>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <xQueueGiveFromISR+0x58>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e000      	b.n	80071e6 <xQueueGiveFromISR+0x5a>
 80071e4:	2300      	movs	r3, #0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <xQueueGiveFromISR+0x72>
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	e7fe      	b.n	80071fc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071fe:	f001 fbd1 	bl	80089a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007202:	f3ef 8211 	mrs	r2, BASEPRI
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	617a      	str	r2, [r7, #20]
 8007218:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800721a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800721c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800722a:	429a      	cmp	r2, r3
 800722c:	d22b      	bcs.n	8007286 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d112      	bne.n	8007270 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	3324      	adds	r3, #36	; 0x24
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fe3a 	bl	8007ed0 <xTaskRemoveFromEventList>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2201      	movs	r2, #1
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e007      	b.n	8007280 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007274:	3301      	adds	r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	b25a      	sxtb	r2, r3
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007280:	2301      	movs	r3, #1
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
 8007284:	e001      	b.n	800728a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007296:	4618      	mov	r0, r3
 8007298:	3738      	adds	r7, #56	; 0x38
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08e      	sub	sp, #56	; 0x38
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80072b2:	2300      	movs	r3, #0
 80072b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <xQueueSemaphoreTake+0x30>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	e7fe      	b.n	80072ce <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d009      	beq.n	80072ec <xQueueSemaphoreTake+0x4c>
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	e7fe      	b.n	80072ea <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072ec:	f000 ffa6 	bl	800823c <xTaskGetSchedulerState>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <xQueueSemaphoreTake+0x5c>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <xQueueSemaphoreTake+0x60>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <xQueueSemaphoreTake+0x62>
 8007300:	2300      	movs	r3, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <xQueueSemaphoreTake+0x7a>
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	61bb      	str	r3, [r7, #24]
 8007318:	e7fe      	b.n	8007318 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800731a:	f001 fa67 	bl	80087ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	d024      	beq.n	8007374 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	1e5a      	subs	r2, r3, #1
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800733a:	f001 f8b5 	bl	80084a8 <pvTaskIncrementMutexHeldCount>
 800733e:	4602      	mov	r2, r0
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00f      	beq.n	800736c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	3310      	adds	r3, #16
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fdbd 	bl	8007ed0 <xTaskRemoveFromEventList>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800735c:	4b53      	ldr	r3, [pc, #332]	; (80074ac <xQueueSemaphoreTake+0x20c>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800736c:	f001 fa6c 	bl	8008848 <vPortExitCritical>
				return pdPASS;
 8007370:	2301      	movs	r3, #1
 8007372:	e096      	b.n	80074a2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d110      	bne.n	800739c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	2b00      	cmp	r3, #0
 800737e:	d009      	beq.n	8007394 <xQueueSemaphoreTake+0xf4>
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e7fe      	b.n	8007392 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007394:	f001 fa58 	bl	8008848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007398:	2300      	movs	r3, #0
 800739a:	e082      	b.n	80074a2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800739c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073a2:	f107 030c 	add.w	r3, r7, #12
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fdf4 	bl	8007f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073b0:	f001 fa4a 	bl	8008848 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073b4:	f000 fbac 	bl	8007b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073b8:	f001 fa18 	bl	80087ec <vPortEnterCritical>
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073c2:	b25b      	sxtb	r3, r3
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c8:	d103      	bne.n	80073d2 <xQueueSemaphoreTake+0x132>
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073d8:	b25b      	sxtb	r3, r3
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d103      	bne.n	80073e8 <xQueueSemaphoreTake+0x148>
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073e8:	f001 fa2e 	bl	8008848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073ec:	463a      	mov	r2, r7
 80073ee:	f107 030c 	add.w	r3, r7, #12
 80073f2:	4611      	mov	r1, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fde3 	bl	8007fc0 <xTaskCheckForTimeOut>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d132      	bne.n	8007466 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007402:	f000 f8bf 	bl	8007584 <prvIsQueueEmpty>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d026      	beq.n	800745a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d109      	bne.n	8007428 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007414:	f001 f9ea 	bl	80087ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 ff2b 	bl	8008278 <xTaskPriorityInherit>
 8007422:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007424:	f001 fa10 	bl	8008848 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	3324      	adds	r3, #36	; 0x24
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	4611      	mov	r1, r2
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fd29 	bl	8007e88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007438:	f000 f852 	bl	80074e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800743c:	f000 fb76 	bl	8007b2c <xTaskResumeAll>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	f47f af69 	bne.w	800731a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007448:	4b18      	ldr	r3, [pc, #96]	; (80074ac <xQueueSemaphoreTake+0x20c>)
 800744a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	e75f      	b.n	800731a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800745a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800745c:	f000 f840 	bl	80074e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007460:	f000 fb64 	bl	8007b2c <xTaskResumeAll>
 8007464:	e759      	b.n	800731a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007468:	f000 f83a 	bl	80074e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800746c:	f000 fb5e 	bl	8007b2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007472:	f000 f887 	bl	8007584 <prvIsQueueEmpty>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	f43f af4e 	beq.w	800731a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00d      	beq.n	80074a0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007484:	f001 f9b2 	bl	80087ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800748a:	f000 f811 	bl	80074b0 <prvGetDisinheritPriorityAfterTimeout>
 800748e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007496:	4618      	mov	r0, r3
 8007498:	f000 ff6e 	bl	8008378 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800749c:	f001 f9d4 	bl	8008848 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3738      	adds	r7, #56	; 0x38
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	e000ed04 	.word	0xe000ed04

080074b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d006      	beq.n	80074ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f1c3 0307 	rsb	r3, r3, #7
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e001      	b.n	80074d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074d2:	68fb      	ldr	r3, [r7, #12]
	}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074e8:	f001 f980 	bl	80087ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074f4:	e011      	b.n	800751a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d012      	beq.n	8007524 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3324      	adds	r3, #36	; 0x24
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fce4 	bl	8007ed0 <xTaskRemoveFromEventList>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800750e:	f000 fdb7 	bl	8008080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	3b01      	subs	r3, #1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800751a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800751e:	2b00      	cmp	r3, #0
 8007520:	dce9      	bgt.n	80074f6 <prvUnlockQueue+0x16>
 8007522:	e000      	b.n	8007526 <prvUnlockQueue+0x46>
					break;
 8007524:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	22ff      	movs	r2, #255	; 0xff
 800752a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800752e:	f001 f98b 	bl	8008848 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007532:	f001 f95b 	bl	80087ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800753c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800753e:	e011      	b.n	8007564 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d012      	beq.n	800756e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3310      	adds	r3, #16
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fcbf 	bl	8007ed0 <xTaskRemoveFromEventList>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007558:	f000 fd92 	bl	8008080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	3b01      	subs	r3, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	dce9      	bgt.n	8007540 <prvUnlockQueue+0x60>
 800756c:	e000      	b.n	8007570 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800756e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	22ff      	movs	r2, #255	; 0xff
 8007574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007578:	f001 f966 	bl	8008848 <vPortExitCritical>
}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800758c:	f001 f92e 	bl	80087ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e001      	b.n	80075a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075a2:	f001 f951 	bl	8008848 <vPortExitCritical>

	return xReturn;
 80075a6:	68fb      	ldr	r3, [r7, #12]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08e      	sub	sp, #56	; 0x38
 80075b4:	af04      	add	r7, sp, #16
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d109      	bne.n	80075d8 <xTaskCreateStatic+0x28>
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	623b      	str	r3, [r7, #32]
 80075d6:	e7fe      	b.n	80075d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <xTaskCreateStatic+0x42>
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	e7fe      	b.n	80075f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075f2:	2354      	movs	r3, #84	; 0x54
 80075f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b54      	cmp	r3, #84	; 0x54
 80075fa:	d009      	beq.n	8007610 <xTaskCreateStatic+0x60>
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	e7fe      	b.n	800760e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007610:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01e      	beq.n	8007656 <xTaskCreateStatic+0xa6>
 8007618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01b      	beq.n	8007656 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007626:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	2202      	movs	r2, #2
 800762c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007630:	2300      	movs	r3, #0
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	9302      	str	r3, [sp, #8]
 8007638:	f107 0314 	add.w	r3, r7, #20
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	68b9      	ldr	r1, [r7, #8]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f850 	bl	80076ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800764e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007650:	f000 f8d4 	bl	80077fc <prvAddNewTaskToReadyList>
 8007654:	e001      	b.n	800765a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800765a:	697b      	ldr	r3, [r7, #20]
	}
 800765c:	4618      	mov	r0, r3
 800765e:	3728      	adds	r7, #40	; 0x28
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	; 0x30
 8007668:	af04      	add	r7, sp, #16
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007674:	88fb      	ldrh	r3, [r7, #6]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4618      	mov	r0, r3
 800767a:	f001 f9d1 	bl	8008a20 <pvPortMalloc>
 800767e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00e      	beq.n	80076a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007686:	2054      	movs	r0, #84	; 0x54
 8007688:	f001 f9ca 	bl	8008a20 <pvPortMalloc>
 800768c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
 800769a:	e005      	b.n	80076a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800769c:	6978      	ldr	r0, [r7, #20]
 800769e:	f001 fa81 	bl	8008ba4 <vPortFree>
 80076a2:	e001      	b.n	80076a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d017      	beq.n	80076de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	2300      	movs	r3, #0
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	9302      	str	r3, [sp, #8]
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 f80e 	bl	80076ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076d2:	69f8      	ldr	r0, [r7, #28]
 80076d4:	f000 f892 	bl	80077fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076d8:	2301      	movs	r3, #1
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	e002      	b.n	80076e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076de:	f04f 33ff 	mov.w	r3, #4294967295
 80076e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076e4:	69bb      	ldr	r3, [r7, #24]
	}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3720      	adds	r7, #32
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b088      	sub	sp, #32
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007706:	3b01      	subs	r3, #1
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	f023 0307 	bic.w	r3, r3, #7
 8007714:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <prvInitialiseNewTask+0x46>
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e7fe      	b.n	8007732 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d01f      	beq.n	800777a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	e012      	b.n	8007766 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	7819      	ldrb	r1, [r3, #0]
 8007748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	4413      	add	r3, r2
 800774e:	3334      	adds	r3, #52	; 0x34
 8007750:	460a      	mov	r2, r1
 8007752:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d006      	beq.n	800776e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	3301      	adds	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	2b0f      	cmp	r3, #15
 800776a:	d9e9      	bls.n	8007740 <prvInitialiseNewTask+0x52>
 800776c:	e000      	b.n	8007770 <prvInitialiseNewTask+0x82>
			{
				break;
 800776e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007778:	e003      	b.n	8007782 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	2b06      	cmp	r3, #6
 8007786:	d901      	bls.n	800778c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007788:	2306      	movs	r3, #6
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007790:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007796:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	2200      	movs	r2, #0
 800779c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	3304      	adds	r3, #4
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fb98 	bl	8006ed8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	3318      	adds	r3, #24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff fb93 	bl	8006ed8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	f1c3 0207 	rsb	r2, r3, #7
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	2200      	movs	r2, #0
 80077cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	68f9      	ldr	r1, [r7, #12]
 80077da:	69b8      	ldr	r0, [r7, #24]
 80077dc:	f000 fede 	bl	800859c <pxPortInitialiseStack>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077f2:	bf00      	nop
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007804:	f000 fff2 	bl	80087ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007808:	4b2a      	ldr	r3, [pc, #168]	; (80078b4 <prvAddNewTaskToReadyList+0xb8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3301      	adds	r3, #1
 800780e:	4a29      	ldr	r2, [pc, #164]	; (80078b4 <prvAddNewTaskToReadyList+0xb8>)
 8007810:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007812:	4b29      	ldr	r3, [pc, #164]	; (80078b8 <prvAddNewTaskToReadyList+0xbc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800781a:	4a27      	ldr	r2, [pc, #156]	; (80078b8 <prvAddNewTaskToReadyList+0xbc>)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007820:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <prvAddNewTaskToReadyList+0xb8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d110      	bne.n	800784a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007828:	f000 fc4e 	bl	80080c8 <prvInitialiseTaskLists>
 800782c:	e00d      	b.n	800784a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800782e:	4b23      	ldr	r3, [pc, #140]	; (80078bc <prvAddNewTaskToReadyList+0xc0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007836:	4b20      	ldr	r3, [pc, #128]	; (80078b8 <prvAddNewTaskToReadyList+0xbc>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	429a      	cmp	r2, r3
 8007842:	d802      	bhi.n	800784a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007844:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <prvAddNewTaskToReadyList+0xbc>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800784a:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <prvAddNewTaskToReadyList+0xc4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3301      	adds	r3, #1
 8007850:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <prvAddNewTaskToReadyList+0xc4>)
 8007852:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	2201      	movs	r2, #1
 800785a:	409a      	lsls	r2, r3
 800785c:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <prvAddNewTaskToReadyList+0xc8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4313      	orrs	r3, r2
 8007862:	4a18      	ldr	r2, [pc, #96]	; (80078c4 <prvAddNewTaskToReadyList+0xc8>)
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4a15      	ldr	r2, [pc, #84]	; (80078c8 <prvAddNewTaskToReadyList+0xcc>)
 8007874:	441a      	add	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3304      	adds	r3, #4
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f7ff fb38 	bl	8006ef2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007882:	f000 ffe1 	bl	8008848 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007886:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <prvAddNewTaskToReadyList+0xc0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00e      	beq.n	80078ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800788e:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <prvAddNewTaskToReadyList+0xbc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	429a      	cmp	r2, r3
 800789a:	d207      	bcs.n	80078ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800789c:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <prvAddNewTaskToReadyList+0xd0>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200003ec 	.word	0x200003ec
 80078b8:	200002ec 	.word	0x200002ec
 80078bc:	200003f8 	.word	0x200003f8
 80078c0:	20000408 	.word	0x20000408
 80078c4:	200003f4 	.word	0x200003f4
 80078c8:	200002f0 	.word	0x200002f0
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80078d8:	f000 ff88 	bl	80087ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <vTaskDelete+0x18>
 80078e2:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <vTaskDelete+0xf4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	e000      	b.n	80078ea <vTaskDelete+0x1a>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff fb5b 	bl	8006fac <uxListRemove>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d115      	bne.n	8007928 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4931      	ldr	r1, [pc, #196]	; (80079c8 <vTaskDelete+0xf8>)
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <vTaskDelete+0x58>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	2201      	movs	r2, #1
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	43da      	mvns	r2, r3
 800791e:	4b2b      	ldr	r3, [pc, #172]	; (80079cc <vTaskDelete+0xfc>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4013      	ands	r3, r2
 8007924:	4a29      	ldr	r2, [pc, #164]	; (80079cc <vTaskDelete+0xfc>)
 8007926:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3318      	adds	r3, #24
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff fb39 	bl	8006fac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800793a:	4b25      	ldr	r3, [pc, #148]	; (80079d0 <vTaskDelete+0x100>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	4a23      	ldr	r2, [pc, #140]	; (80079d0 <vTaskDelete+0x100>)
 8007942:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007944:	4b1f      	ldr	r3, [pc, #124]	; (80079c4 <vTaskDelete+0xf4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	429a      	cmp	r2, r3
 800794c:	d10b      	bne.n	8007966 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	481f      	ldr	r0, [pc, #124]	; (80079d4 <vTaskDelete+0x104>)
 8007956:	f7ff facc 	bl	8006ef2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800795a:	4b1f      	ldr	r3, [pc, #124]	; (80079d8 <vTaskDelete+0x108>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	4a1d      	ldr	r2, [pc, #116]	; (80079d8 <vTaskDelete+0x108>)
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	e009      	b.n	800797a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007966:	4b1d      	ldr	r3, [pc, #116]	; (80079dc <vTaskDelete+0x10c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3b01      	subs	r3, #1
 800796c:	4a1b      	ldr	r2, [pc, #108]	; (80079dc <vTaskDelete+0x10c>)
 800796e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fc15 	bl	80081a0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007976:	f000 fc41 	bl	80081fc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800797a:	f000 ff65 	bl	8008848 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800797e:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <vTaskDelete+0x110>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01a      	beq.n	80079bc <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <vTaskDelete+0xf4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d115      	bne.n	80079bc <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007990:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <vTaskDelete+0x114>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <vTaskDelete+0xdc>
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	e7fe      	b.n	80079aa <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80079ac:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <vTaskDelete+0x118>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200002ec 	.word	0x200002ec
 80079c8:	200002f0 	.word	0x200002f0
 80079cc:	200003f4 	.word	0x200003f4
 80079d0:	20000408 	.word	0x20000408
 80079d4:	200003c0 	.word	0x200003c0
 80079d8:	200003d4 	.word	0x200003d4
 80079dc:	200003ec 	.word	0x200003ec
 80079e0:	200003f8 	.word	0x200003f8
 80079e4:	20000414 	.word	0x20000414
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d016      	beq.n	8007a2c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <vTaskDelay+0x60>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <vTaskDelay+0x2e>
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	60bb      	str	r3, [r7, #8]
 8007a18:	e7fe      	b.n	8007a18 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007a1a:	f000 f879 	bl	8007b10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a1e:	2100      	movs	r1, #0
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fd55 	bl	80084d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a26:	f000 f881 	bl	8007b2c <xTaskResumeAll>
 8007a2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d107      	bne.n	8007a42 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007a32:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <vTaskDelay+0x64>)
 8007a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000414 	.word	0x20000414
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	; 0x28
 8007a58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a62:	463a      	mov	r2, r7
 8007a64:	1d39      	adds	r1, r7, #4
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f8 ff0c 	bl	8000888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	9202      	str	r2, [sp, #8]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	460a      	mov	r2, r1
 8007a82:	491d      	ldr	r1, [pc, #116]	; (8007af8 <vTaskStartScheduler+0xa4>)
 8007a84:	481d      	ldr	r0, [pc, #116]	; (8007afc <vTaskStartScheduler+0xa8>)
 8007a86:	f7ff fd93 	bl	80075b0 <xTaskCreateStatic>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	4b1c      	ldr	r3, [pc, #112]	; (8007b00 <vTaskStartScheduler+0xac>)
 8007a8e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a90:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <vTaskStartScheduler+0xac>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e001      	b.n	8007aa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d115      	bne.n	8007ad4 <vTaskStartScheduler+0x80>
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007aba:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <vTaskStartScheduler+0xb0>)
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ac2:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <vTaskStartScheduler+0xb4>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ac8:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <vTaskStartScheduler+0xb8>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ace:	f000 fdef 	bl	80086b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ad2:	e00d      	b.n	8007af0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d109      	bne.n	8007af0 <vTaskStartScheduler+0x9c>
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	e7fe      	b.n	8007aee <vTaskStartScheduler+0x9a>
}
 8007af0:	bf00      	nop
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	0800a088 	.word	0x0800a088
 8007afc:	08008099 	.word	0x08008099
 8007b00:	20000410 	.word	0x20000410
 8007b04:	2000040c 	.word	0x2000040c
 8007b08:	200003f8 	.word	0x200003f8
 8007b0c:	200003f0 	.word	0x200003f0

08007b10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b14:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <vTaskSuspendAll+0x18>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	4a03      	ldr	r2, [pc, #12]	; (8007b28 <vTaskSuspendAll+0x18>)
 8007b1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007b1e:	bf00      	nop
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	20000414 	.word	0x20000414

08007b2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b3a:	4b41      	ldr	r3, [pc, #260]	; (8007c40 <xTaskResumeAll+0x114>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <xTaskResumeAll+0x2a>
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	e7fe      	b.n	8007b54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b56:	f000 fe49 	bl	80087ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b5a:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <xTaskResumeAll+0x114>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	4a37      	ldr	r2, [pc, #220]	; (8007c40 <xTaskResumeAll+0x114>)
 8007b62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b64:	4b36      	ldr	r3, [pc, #216]	; (8007c40 <xTaskResumeAll+0x114>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d161      	bne.n	8007c30 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b6c:	4b35      	ldr	r3, [pc, #212]	; (8007c44 <xTaskResumeAll+0x118>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d05d      	beq.n	8007c30 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b74:	e02e      	b.n	8007bd4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b76:	4b34      	ldr	r3, [pc, #208]	; (8007c48 <xTaskResumeAll+0x11c>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3318      	adds	r3, #24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fa12 	bl	8006fac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fa0d 	bl	8006fac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	2201      	movs	r2, #1
 8007b98:	409a      	lsls	r2, r3
 8007b9a:	4b2c      	ldr	r3, [pc, #176]	; (8007c4c <xTaskResumeAll+0x120>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	4a2a      	ldr	r2, [pc, #168]	; (8007c4c <xTaskResumeAll+0x120>)
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4a27      	ldr	r2, [pc, #156]	; (8007c50 <xTaskResumeAll+0x124>)
 8007bb2:	441a      	add	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7ff f999 	bl	8006ef2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <xTaskResumeAll+0x128>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007bce:	4b22      	ldr	r3, [pc, #136]	; (8007c58 <xTaskResumeAll+0x12c>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <xTaskResumeAll+0x11c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1cc      	bne.n	8007b76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007be2:	f000 fb0b 	bl	80081fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007be6:	4b1d      	ldr	r3, [pc, #116]	; (8007c5c <xTaskResumeAll+0x130>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d010      	beq.n	8007c14 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bf2:	f000 f837 	bl	8007c64 <xTaskIncrementTick>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007bfc:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <xTaskResumeAll+0x12c>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f1      	bne.n	8007bf2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <xTaskResumeAll+0x130>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c14:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <xTaskResumeAll+0x12c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c20:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <xTaskResumeAll+0x134>)
 8007c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c30:	f000 fe0a 	bl	8008848 <vPortExitCritical>

	return xAlreadyYielded;
 8007c34:	68bb      	ldr	r3, [r7, #8]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000414 	.word	0x20000414
 8007c44:	200003ec 	.word	0x200003ec
 8007c48:	200003ac 	.word	0x200003ac
 8007c4c:	200003f4 	.word	0x200003f4
 8007c50:	200002f0 	.word	0x200002f0
 8007c54:	200002ec 	.word	0x200002ec
 8007c58:	20000400 	.word	0x20000400
 8007c5c:	200003fc 	.word	0x200003fc
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6e:	4b4e      	ldr	r3, [pc, #312]	; (8007da8 <xTaskIncrementTick+0x144>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f040 8087 	bne.w	8007d86 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c78:	4b4c      	ldr	r3, [pc, #304]	; (8007dac <xTaskIncrementTick+0x148>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c80:	4a4a      	ldr	r2, [pc, #296]	; (8007dac <xTaskIncrementTick+0x148>)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11f      	bne.n	8007ccc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c8c:	4b48      	ldr	r3, [pc, #288]	; (8007db0 <xTaskIncrementTick+0x14c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d009      	beq.n	8007caa <xTaskIncrementTick+0x46>
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	e7fe      	b.n	8007ca8 <xTaskIncrementTick+0x44>
 8007caa:	4b41      	ldr	r3, [pc, #260]	; (8007db0 <xTaskIncrementTick+0x14c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	4b40      	ldr	r3, [pc, #256]	; (8007db4 <xTaskIncrementTick+0x150>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a3e      	ldr	r2, [pc, #248]	; (8007db0 <xTaskIncrementTick+0x14c>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	4a3e      	ldr	r2, [pc, #248]	; (8007db4 <xTaskIncrementTick+0x150>)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	4b3e      	ldr	r3, [pc, #248]	; (8007db8 <xTaskIncrementTick+0x154>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	4a3c      	ldr	r2, [pc, #240]	; (8007db8 <xTaskIncrementTick+0x154>)
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	f000 fa98 	bl	80081fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ccc:	4b3b      	ldr	r3, [pc, #236]	; (8007dbc <xTaskIncrementTick+0x158>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d348      	bcc.n	8007d68 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd6:	4b36      	ldr	r3, [pc, #216]	; (8007db0 <xTaskIncrementTick+0x14c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce0:	4b36      	ldr	r3, [pc, #216]	; (8007dbc <xTaskIncrementTick+0x158>)
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	601a      	str	r2, [r3, #0]
					break;
 8007ce8:	e03e      	b.n	8007d68 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <xTaskIncrementTick+0x14c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d203      	bcs.n	8007d0a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d02:	4a2e      	ldr	r2, [pc, #184]	; (8007dbc <xTaskIncrementTick+0x158>)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d08:	e02e      	b.n	8007d68 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff f94c 	bl	8006fac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	3318      	adds	r3, #24
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff f943 	bl	8006fac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	409a      	lsls	r2, r3
 8007d2e:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <xTaskIncrementTick+0x15c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	4a22      	ldr	r2, [pc, #136]	; (8007dc0 <xTaskIncrementTick+0x15c>)
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4a1f      	ldr	r2, [pc, #124]	; (8007dc4 <xTaskIncrementTick+0x160>)
 8007d46:	441a      	add	r2, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7ff f8cf 	bl	8006ef2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d58:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <xTaskIncrementTick+0x164>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3b9      	bcc.n	8007cd6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007d62:	2301      	movs	r3, #1
 8007d64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d66:	e7b6      	b.n	8007cd6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d68:	4b17      	ldr	r3, [pc, #92]	; (8007dc8 <xTaskIncrementTick+0x164>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6e:	4915      	ldr	r1, [pc, #84]	; (8007dc4 <xTaskIncrementTick+0x160>)
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d907      	bls.n	8007d90 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007d80:	2301      	movs	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	e004      	b.n	8007d90 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <xTaskIncrementTick+0x168>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	4a0f      	ldr	r2, [pc, #60]	; (8007dcc <xTaskIncrementTick+0x168>)
 8007d8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <xTaskIncrementTick+0x16c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d9c:	697b      	ldr	r3, [r7, #20]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20000414 	.word	0x20000414
 8007dac:	200003f0 	.word	0x200003f0
 8007db0:	200003a4 	.word	0x200003a4
 8007db4:	200003a8 	.word	0x200003a8
 8007db8:	20000404 	.word	0x20000404
 8007dbc:	2000040c 	.word	0x2000040c
 8007dc0:	200003f4 	.word	0x200003f4
 8007dc4:	200002f0 	.word	0x200002f0
 8007dc8:	200002ec 	.word	0x200002ec
 8007dcc:	200003fc 	.word	0x200003fc
 8007dd0:	20000400 	.word	0x20000400

08007dd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dda:	4b26      	ldr	r3, [pc, #152]	; (8007e74 <vTaskSwitchContext+0xa0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007de2:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <vTaskSwitchContext+0xa4>)
 8007de4:	2201      	movs	r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007de8:	e03e      	b.n	8007e68 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007dea:	4b23      	ldr	r3, [pc, #140]	; (8007e78 <vTaskSwitchContext+0xa4>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df0:	4b22      	ldr	r3, [pc, #136]	; (8007e7c <vTaskSwitchContext+0xa8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	fab3 f383 	clz	r3, r3
 8007dfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	f1c3 031f 	rsb	r3, r3, #31
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	491e      	ldr	r1, [pc, #120]	; (8007e80 <vTaskSwitchContext+0xac>)
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d109      	bne.n	8007e2e <vTaskSwitchContext+0x5a>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	e7fe      	b.n	8007e2c <vTaskSwitchContext+0x58>
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4a11      	ldr	r2, [pc, #68]	; (8007e80 <vTaskSwitchContext+0xac>)
 8007e3a:	4413      	add	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	605a      	str	r2, [r3, #4]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d104      	bne.n	8007e5e <vTaskSwitchContext+0x8a>
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	605a      	str	r2, [r3, #4]
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4a07      	ldr	r2, [pc, #28]	; (8007e84 <vTaskSwitchContext+0xb0>)
 8007e66:	6013      	str	r3, [r2, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	20000414 	.word	0x20000414
 8007e78:	20000400 	.word	0x20000400
 8007e7c:	200003f4 	.word	0x200003f4
 8007e80:	200002f0 	.word	0x200002f0
 8007e84:	200002ec 	.word	0x200002ec

08007e88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d109      	bne.n	8007eac <vTaskPlaceOnEventList+0x24>
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e7fe      	b.n	8007eaa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eac:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <vTaskPlaceOnEventList+0x44>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3318      	adds	r3, #24
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff f840 	bl	8006f3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eba:	2101      	movs	r1, #1
 8007ebc:	6838      	ldr	r0, [r7, #0]
 8007ebe:	f000 fb07 	bl	80084d0 <prvAddCurrentTaskToDelayedList>
}
 8007ec2:	bf00      	nop
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	200002ec 	.word	0x200002ec

08007ed0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d109      	bne.n	8007efa <xTaskRemoveFromEventList+0x2a>
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e7fe      	b.n	8007ef8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3318      	adds	r3, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff f854 	bl	8006fac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f04:	4b1d      	ldr	r3, [pc, #116]	; (8007f7c <xTaskRemoveFromEventList+0xac>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d11c      	bne.n	8007f46 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff f84b 	bl	8006fac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	409a      	lsls	r2, r3
 8007f1e:	4b18      	ldr	r3, [pc, #96]	; (8007f80 <xTaskRemoveFromEventList+0xb0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <xTaskRemoveFromEventList+0xb0>)
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4a13      	ldr	r2, [pc, #76]	; (8007f84 <xTaskRemoveFromEventList+0xb4>)
 8007f36:	441a      	add	r2, r3
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f7fe ffd7 	bl	8006ef2 <vListInsertEnd>
 8007f44:	e005      	b.n	8007f52 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	3318      	adds	r3, #24
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	480e      	ldr	r0, [pc, #56]	; (8007f88 <xTaskRemoveFromEventList+0xb8>)
 8007f4e:	f7fe ffd0 	bl	8006ef2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <xTaskRemoveFromEventList+0xbc>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d905      	bls.n	8007f6c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f64:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <xTaskRemoveFromEventList+0xc0>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e001      	b.n	8007f70 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f70:	697b      	ldr	r3, [r7, #20]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000414 	.word	0x20000414
 8007f80:	200003f4 	.word	0x200003f4
 8007f84:	200002f0 	.word	0x200002f0
 8007f88:	200003ac 	.word	0x200003ac
 8007f8c:	200002ec 	.word	0x200002ec
 8007f90:	20000400 	.word	0x20000400

08007f94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <vTaskInternalSetTimeOutState+0x24>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fa4:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <vTaskInternalSetTimeOutState+0x28>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	605a      	str	r2, [r3, #4]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20000404 	.word	0x20000404
 8007fbc:	200003f0 	.word	0x200003f0

08007fc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d109      	bne.n	8007fe4 <xTaskCheckForTimeOut+0x24>
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	e7fe      	b.n	8007fe2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <xTaskCheckForTimeOut+0x3e>
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	e7fe      	b.n	8007ffc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007ffe:	f000 fbf5 	bl	80087ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008002:	4b1d      	ldr	r3, [pc, #116]	; (8008078 <xTaskCheckForTimeOut+0xb8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801a:	d102      	bne.n	8008022 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800801c:	2300      	movs	r3, #0
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	e023      	b.n	800806a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	4b15      	ldr	r3, [pc, #84]	; (800807c <xTaskCheckForTimeOut+0xbc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d007      	beq.n	800803e <xTaskCheckForTimeOut+0x7e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	429a      	cmp	r2, r3
 8008036:	d302      	bcc.n	800803e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008038:	2301      	movs	r3, #1
 800803a:	61fb      	str	r3, [r7, #28]
 800803c:	e015      	b.n	800806a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	429a      	cmp	r2, r3
 8008046:	d20b      	bcs.n	8008060 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff ff9d 	bl	8007f94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
 800805e:	e004      	b.n	800806a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008066:	2301      	movs	r3, #1
 8008068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800806a:	f000 fbed 	bl	8008848 <vPortExitCritical>

	return xReturn;
 800806e:	69fb      	ldr	r3, [r7, #28]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3720      	adds	r7, #32
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	200003f0 	.word	0x200003f0
 800807c:	20000404 	.word	0x20000404

08008080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008084:	4b03      	ldr	r3, [pc, #12]	; (8008094 <vTaskMissedYield+0x14>)
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]
}
 800808a:	bf00      	nop
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	20000400 	.word	0x20000400

08008098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080a0:	f000 f852 	bl	8008148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080a4:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <prvIdleTask+0x28>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d9f9      	bls.n	80080a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <prvIdleTask+0x2c>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080bc:	e7f0      	b.n	80080a0 <prvIdleTask+0x8>
 80080be:	bf00      	nop
 80080c0:	200002f0 	.word	0x200002f0
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080ce:	2300      	movs	r3, #0
 80080d0:	607b      	str	r3, [r7, #4]
 80080d2:	e00c      	b.n	80080ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a12      	ldr	r2, [pc, #72]	; (8008128 <prvInitialiseTaskLists+0x60>)
 80080e0:	4413      	add	r3, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe fed8 	bl	8006e98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3301      	adds	r3, #1
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b06      	cmp	r3, #6
 80080f2:	d9ef      	bls.n	80080d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080f4:	480d      	ldr	r0, [pc, #52]	; (800812c <prvInitialiseTaskLists+0x64>)
 80080f6:	f7fe fecf 	bl	8006e98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080fa:	480d      	ldr	r0, [pc, #52]	; (8008130 <prvInitialiseTaskLists+0x68>)
 80080fc:	f7fe fecc 	bl	8006e98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008100:	480c      	ldr	r0, [pc, #48]	; (8008134 <prvInitialiseTaskLists+0x6c>)
 8008102:	f7fe fec9 	bl	8006e98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008106:	480c      	ldr	r0, [pc, #48]	; (8008138 <prvInitialiseTaskLists+0x70>)
 8008108:	f7fe fec6 	bl	8006e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800810c:	480b      	ldr	r0, [pc, #44]	; (800813c <prvInitialiseTaskLists+0x74>)
 800810e:	f7fe fec3 	bl	8006e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008112:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <prvInitialiseTaskLists+0x78>)
 8008114:	4a05      	ldr	r2, [pc, #20]	; (800812c <prvInitialiseTaskLists+0x64>)
 8008116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008118:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <prvInitialiseTaskLists+0x7c>)
 800811a:	4a05      	ldr	r2, [pc, #20]	; (8008130 <prvInitialiseTaskLists+0x68>)
 800811c:	601a      	str	r2, [r3, #0]
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	200002f0 	.word	0x200002f0
 800812c:	2000037c 	.word	0x2000037c
 8008130:	20000390 	.word	0x20000390
 8008134:	200003ac 	.word	0x200003ac
 8008138:	200003c0 	.word	0x200003c0
 800813c:	200003d8 	.word	0x200003d8
 8008140:	200003a4 	.word	0x200003a4
 8008144:	200003a8 	.word	0x200003a8

08008148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800814e:	e019      	b.n	8008184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008150:	f000 fb4c 	bl	80087ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008154:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <prvCheckTasksWaitingTermination+0x4c>)
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3304      	adds	r3, #4
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe ff23 	bl	8006fac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008166:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <prvCheckTasksWaitingTermination+0x50>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3b01      	subs	r3, #1
 800816c:	4a0a      	ldr	r2, [pc, #40]	; (8008198 <prvCheckTasksWaitingTermination+0x50>)
 800816e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <prvCheckTasksWaitingTermination+0x54>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3b01      	subs	r3, #1
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <prvCheckTasksWaitingTermination+0x54>)
 8008178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800817a:	f000 fb65 	bl	8008848 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f80e 	bl	80081a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <prvCheckTasksWaitingTermination+0x54>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e1      	bne.n	8008150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	200003c0 	.word	0x200003c0
 8008198:	200003ec 	.word	0x200003ec
 800819c:	200003d4 	.word	0x200003d4

080081a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d108      	bne.n	80081c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fcf4 	bl	8008ba4 <vPortFree>
				vPortFree( pxTCB );
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fcf1 	bl	8008ba4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081c2:	e017      	b.n	80081f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d103      	bne.n	80081d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fce8 	bl	8008ba4 <vPortFree>
	}
 80081d4:	e00e      	b.n	80081f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d009      	beq.n	80081f4 <prvDeleteTCB+0x54>
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e7fe      	b.n	80081f2 <prvDeleteTCB+0x52>
	}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008202:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <prvResetNextTaskUnblockTime+0x38>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <prvResetNextTaskUnblockTime+0x3c>)
 800820e:	f04f 32ff 	mov.w	r2, #4294967295
 8008212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008214:	e008      	b.n	8008228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008216:	4b07      	ldr	r3, [pc, #28]	; (8008234 <prvResetNextTaskUnblockTime+0x38>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	4a04      	ldr	r2, [pc, #16]	; (8008238 <prvResetNextTaskUnblockTime+0x3c>)
 8008226:	6013      	str	r3, [r2, #0]
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	200003a4 	.word	0x200003a4
 8008238:	2000040c 	.word	0x2000040c

0800823c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008242:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <xTaskGetSchedulerState+0x34>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800824a:	2301      	movs	r3, #1
 800824c:	607b      	str	r3, [r7, #4]
 800824e:	e008      	b.n	8008262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <xTaskGetSchedulerState+0x38>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008258:	2302      	movs	r3, #2
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	e001      	b.n	8008262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800825e:	2300      	movs	r3, #0
 8008260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008262:	687b      	ldr	r3, [r7, #4]
	}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	200003f8 	.word	0x200003f8
 8008274:	20000414 	.word	0x20000414

08008278 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d069      	beq.n	8008362 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008292:	4b36      	ldr	r3, [pc, #216]	; (800836c <xTaskPriorityInherit+0xf4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	429a      	cmp	r2, r3
 800829a:	d259      	bcs.n	8008350 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	db06      	blt.n	80082b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a4:	4b31      	ldr	r3, [pc, #196]	; (800836c <xTaskPriorityInherit+0xf4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	f1c3 0207 	rsb	r2, r3, #7
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6959      	ldr	r1, [r3, #20]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4a2b      	ldr	r2, [pc, #172]	; (8008370 <xTaskPriorityInherit+0xf8>)
 80082c4:	4413      	add	r3, r2
 80082c6:	4299      	cmp	r1, r3
 80082c8:	d13a      	bne.n	8008340 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fe6c 	bl	8006fac <uxListRemove>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d115      	bne.n	8008306 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082de:	4924      	ldr	r1, [pc, #144]	; (8008370 <xTaskPriorityInherit+0xf8>)
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <xTaskPriorityInherit+0x8e>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	2201      	movs	r2, #1
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	43da      	mvns	r2, r3
 80082fc:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <xTaskPriorityInherit+0xfc>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4013      	ands	r3, r2
 8008302:	4a1c      	ldr	r2, [pc, #112]	; (8008374 <xTaskPriorityInherit+0xfc>)
 8008304:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008306:	4b19      	ldr	r3, [pc, #100]	; (800836c <xTaskPriorityInherit+0xf4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	2201      	movs	r2, #1
 8008316:	409a      	lsls	r2, r3
 8008318:	4b16      	ldr	r3, [pc, #88]	; (8008374 <xTaskPriorityInherit+0xfc>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4313      	orrs	r3, r2
 800831e:	4a15      	ldr	r2, [pc, #84]	; (8008374 <xTaskPriorityInherit+0xfc>)
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4a10      	ldr	r2, [pc, #64]	; (8008370 <xTaskPriorityInherit+0xf8>)
 8008330:	441a      	add	r2, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	3304      	adds	r3, #4
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7fe fdda 	bl	8006ef2 <vListInsertEnd>
 800833e:	e004      	b.n	800834a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <xTaskPriorityInherit+0xf4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800834a:	2301      	movs	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	e008      	b.n	8008362 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <xTaskPriorityInherit+0xf4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835a:	429a      	cmp	r2, r3
 800835c:	d201      	bcs.n	8008362 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800835e:	2301      	movs	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008362:	68fb      	ldr	r3, [r7, #12]
	}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	200002ec 	.word	0x200002ec
 8008370:	200002f0 	.word	0x200002f0
 8008374:	200003f4 	.word	0x200003f4

08008378 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008386:	2301      	movs	r3, #1
 8008388:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 8081 	beq.w	8008494 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <vTaskPriorityDisinheritAfterTimeout+0x36>
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	e7fe      	b.n	80083ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d902      	bls.n	80083be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	61fb      	str	r3, [r7, #28]
 80083bc:	e002      	b.n	80083c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d062      	beq.n	8008494 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d15d      	bne.n	8008494 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80083d8:	4b30      	ldr	r3, [pc, #192]	; (800849c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d109      	bne.n	80083f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	60bb      	str	r3, [r7, #8]
 80083f4:	e7fe      	b.n	80083f4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	2b00      	cmp	r3, #0
 8008408:	db04      	blt.n	8008414 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	f1c3 0207 	rsb	r2, r3, #7
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	6959      	ldr	r1, [r3, #20]
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4a1f      	ldr	r2, [pc, #124]	; (80084a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008424:	4413      	add	r3, r2
 8008426:	4299      	cmp	r1, r3
 8008428:	d134      	bne.n	8008494 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	3304      	adds	r3, #4
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fdbc 	bl	8006fac <uxListRemove>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d115      	bne.n	8008466 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843e:	4918      	ldr	r1, [pc, #96]	; (80084a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	440b      	add	r3, r1
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	2201      	movs	r2, #1
 8008456:	fa02 f303 	lsl.w	r3, r2, r3
 800845a:	43da      	mvns	r2, r3
 800845c:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4013      	ands	r3, r2
 8008462:	4a10      	ldr	r2, [pc, #64]	; (80084a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008464:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	2201      	movs	r2, #1
 800846c:	409a      	lsls	r2, r3
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4313      	orrs	r3, r2
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4a06      	ldr	r2, [pc, #24]	; (80084a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008486:	441a      	add	r2, r3
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	3304      	adds	r3, #4
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7fe fd2f 	bl	8006ef2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008494:	bf00      	nop
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200002ec 	.word	0x200002ec
 80084a0:	200002f0 	.word	0x200002f0
 80084a4:	200003f4 	.word	0x200003f4

080084a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80084ac:	4b07      	ldr	r3, [pc, #28]	; (80084cc <pvTaskIncrementMutexHeldCount+0x24>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d004      	beq.n	80084be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <pvTaskIncrementMutexHeldCount+0x24>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084ba:	3201      	adds	r2, #1
 80084bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80084be:	4b03      	ldr	r3, [pc, #12]	; (80084cc <pvTaskIncrementMutexHeldCount+0x24>)
 80084c0:	681b      	ldr	r3, [r3, #0]
	}
 80084c2:	4618      	mov	r0, r3
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	200002ec 	.word	0x200002ec

080084d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084da:	4b29      	ldr	r3, [pc, #164]	; (8008580 <prvAddCurrentTaskToDelayedList+0xb0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084e0:	4b28      	ldr	r3, [pc, #160]	; (8008584 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fd60 	bl	8006fac <uxListRemove>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10b      	bne.n	800850a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084f2:	4b24      	ldr	r3, [pc, #144]	; (8008584 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	2201      	movs	r2, #1
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	43da      	mvns	r2, r3
 8008500:	4b21      	ldr	r3, [pc, #132]	; (8008588 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4013      	ands	r3, r2
 8008506:	4a20      	ldr	r2, [pc, #128]	; (8008588 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008508:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d10a      	bne.n	8008528 <prvAddCurrentTaskToDelayedList+0x58>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008518:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3304      	adds	r3, #4
 800851e:	4619      	mov	r1, r3
 8008520:	481a      	ldr	r0, [pc, #104]	; (800858c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008522:	f7fe fce6 	bl	8006ef2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008526:	e026      	b.n	8008576 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008530:	4b14      	ldr	r3, [pc, #80]	; (8008584 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	429a      	cmp	r2, r3
 800853e:	d209      	bcs.n	8008554 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008540:	4b13      	ldr	r3, [pc, #76]	; (8008590 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3304      	adds	r3, #4
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f7fe fcf4 	bl	8006f3a <vListInsert>
}
 8008552:	e010      	b.n	8008576 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3304      	adds	r3, #4
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f7fe fcea 	bl	8006f3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008566:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	429a      	cmp	r2, r3
 800856e:	d202      	bcs.n	8008576 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008570:	4a09      	ldr	r2, [pc, #36]	; (8008598 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6013      	str	r3, [r2, #0]
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	200003f0 	.word	0x200003f0
 8008584:	200002ec 	.word	0x200002ec
 8008588:	200003f4 	.word	0x200003f4
 800858c:	200003d8 	.word	0x200003d8
 8008590:	200003a8 	.word	0x200003a8
 8008594:	200003a4 	.word	0x200003a4
 8008598:	2000040c 	.word	0x2000040c

0800859c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3b04      	subs	r3, #4
 80085ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3b04      	subs	r3, #4
 80085ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f023 0201 	bic.w	r2, r3, #1
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3b04      	subs	r3, #4
 80085ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085cc:	4a0c      	ldr	r2, [pc, #48]	; (8008600 <pxPortInitialiseStack+0x64>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3b14      	subs	r3, #20
 80085d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3b04      	subs	r3, #4
 80085e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f06f 0202 	mvn.w	r2, #2
 80085ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3b20      	subs	r3, #32
 80085f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085f2:	68fb      	ldr	r3, [r7, #12]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	08008605 	.word	0x08008605

08008604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800860e:	4b11      	ldr	r3, [pc, #68]	; (8008654 <prvTaskExitError+0x50>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	d009      	beq.n	800862c <prvTaskExitError+0x28>
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e7fe      	b.n	800862a <prvTaskExitError+0x26>
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800863e:	bf00      	nop
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0fc      	beq.n	8008640 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	2000000c 	.word	0x2000000c
	...

08008660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <pxCurrentTCBConst2>)
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	6808      	ldr	r0, [r1, #0]
 8008666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866a:	f380 8809 	msr	PSP, r0
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f380 8811 	msr	BASEPRI, r0
 800867a:	4770      	bx	lr
 800867c:	f3af 8000 	nop.w

08008680 <pxCurrentTCBConst2>:
 8008680:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop

08008688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008688:	4808      	ldr	r0, [pc, #32]	; (80086ac <prvPortStartFirstTask+0x24>)
 800868a:	6800      	ldr	r0, [r0, #0]
 800868c:	6800      	ldr	r0, [r0, #0]
 800868e:	f380 8808 	msr	MSP, r0
 8008692:	f04f 0000 	mov.w	r0, #0
 8008696:	f380 8814 	msr	CONTROL, r0
 800869a:	b662      	cpsie	i
 800869c:	b661      	cpsie	f
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	df00      	svc	0
 80086a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086aa:	bf00      	nop
 80086ac:	e000ed08 	.word	0xe000ed08

080086b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086b6:	4b44      	ldr	r3, [pc, #272]	; (80087c8 <xPortStartScheduler+0x118>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a44      	ldr	r2, [pc, #272]	; (80087cc <xPortStartScheduler+0x11c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d109      	bne.n	80086d4 <xPortStartScheduler+0x24>
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	e7fe      	b.n	80086d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086d4:	4b3c      	ldr	r3, [pc, #240]	; (80087c8 <xPortStartScheduler+0x118>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a3d      	ldr	r2, [pc, #244]	; (80087d0 <xPortStartScheduler+0x120>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d109      	bne.n	80086f2 <xPortStartScheduler+0x42>
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e7fe      	b.n	80086f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086f2:	4b38      	ldr	r3, [pc, #224]	; (80087d4 <xPortStartScheduler+0x124>)
 80086f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	22ff      	movs	r2, #255	; 0xff
 8008702:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008714:	b2da      	uxtb	r2, r3
 8008716:	4b30      	ldr	r3, [pc, #192]	; (80087d8 <xPortStartScheduler+0x128>)
 8008718:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800871a:	4b30      	ldr	r3, [pc, #192]	; (80087dc <xPortStartScheduler+0x12c>)
 800871c:	2207      	movs	r2, #7
 800871e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008720:	e009      	b.n	8008736 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008722:	4b2e      	ldr	r3, [pc, #184]	; (80087dc <xPortStartScheduler+0x12c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3b01      	subs	r3, #1
 8008728:	4a2c      	ldr	r2, [pc, #176]	; (80087dc <xPortStartScheduler+0x12c>)
 800872a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	b2db      	uxtb	r3, r3
 8008734:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873e:	2b80      	cmp	r3, #128	; 0x80
 8008740:	d0ef      	beq.n	8008722 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008742:	4b26      	ldr	r3, [pc, #152]	; (80087dc <xPortStartScheduler+0x12c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f1c3 0307 	rsb	r3, r3, #7
 800874a:	2b04      	cmp	r3, #4
 800874c:	d009      	beq.n	8008762 <xPortStartScheduler+0xb2>
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	60bb      	str	r3, [r7, #8]
 8008760:	e7fe      	b.n	8008760 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008762:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <xPortStartScheduler+0x12c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	4a1c      	ldr	r2, [pc, #112]	; (80087dc <xPortStartScheduler+0x12c>)
 800876a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800876c:	4b1b      	ldr	r3, [pc, #108]	; (80087dc <xPortStartScheduler+0x12c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008774:	4a19      	ldr	r2, [pc, #100]	; (80087dc <xPortStartScheduler+0x12c>)
 8008776:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	b2da      	uxtb	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008780:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <xPortStartScheduler+0x130>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a16      	ldr	r2, [pc, #88]	; (80087e0 <xPortStartScheduler+0x130>)
 8008786:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800878a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800878c:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <xPortStartScheduler+0x130>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a13      	ldr	r2, [pc, #76]	; (80087e0 <xPortStartScheduler+0x130>)
 8008792:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008796:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008798:	f000 f8d6 	bl	8008948 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800879c:	4b11      	ldr	r3, [pc, #68]	; (80087e4 <xPortStartScheduler+0x134>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087a2:	f000 f8f5 	bl	8008990 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087a6:	4b10      	ldr	r3, [pc, #64]	; (80087e8 <xPortStartScheduler+0x138>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a0f      	ldr	r2, [pc, #60]	; (80087e8 <xPortStartScheduler+0x138>)
 80087ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087b2:	f7ff ff69 	bl	8008688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087b6:	f7ff fb0d 	bl	8007dd4 <vTaskSwitchContext>
	prvTaskExitError();
 80087ba:	f7ff ff23 	bl	8008604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	e000ed00 	.word	0xe000ed00
 80087cc:	410fc271 	.word	0x410fc271
 80087d0:	410fc270 	.word	0x410fc270
 80087d4:	e000e400 	.word	0xe000e400
 80087d8:	20000418 	.word	0x20000418
 80087dc:	2000041c 	.word	0x2000041c
 80087e0:	e000ed20 	.word	0xe000ed20
 80087e4:	2000000c 	.word	0x2000000c
 80087e8:	e000ef34 	.word	0xe000ef34

080087ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008804:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <vPortEnterCritical+0x54>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3301      	adds	r3, #1
 800880a:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <vPortEnterCritical+0x54>)
 800880c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <vPortEnterCritical+0x54>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d10e      	bne.n	8008834 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008816:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <vPortEnterCritical+0x58>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d009      	beq.n	8008834 <vPortEnterCritical+0x48>
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	603b      	str	r3, [r7, #0]
 8008832:	e7fe      	b.n	8008832 <vPortEnterCritical+0x46>
	}
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	2000000c 	.word	0x2000000c
 8008844:	e000ed04 	.word	0xe000ed04

08008848 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800884e:	4b11      	ldr	r3, [pc, #68]	; (8008894 <vPortExitCritical+0x4c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <vPortExitCritical+0x22>
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	607b      	str	r3, [r7, #4]
 8008868:	e7fe      	b.n	8008868 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800886a:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <vPortExitCritical+0x4c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3b01      	subs	r3, #1
 8008870:	4a08      	ldr	r2, [pc, #32]	; (8008894 <vPortExitCritical+0x4c>)
 8008872:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008874:	4b07      	ldr	r3, [pc, #28]	; (8008894 <vPortExitCritical+0x4c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <vPortExitCritical+0x3e>
 800887c:	2300      	movs	r3, #0
 800887e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	2000000c 	.word	0x2000000c
	...

080088a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088a0:	f3ef 8009 	mrs	r0, PSP
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	4b15      	ldr	r3, [pc, #84]	; (8008900 <pxCurrentTCBConst>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	f01e 0f10 	tst.w	lr, #16
 80088b0:	bf08      	it	eq
 80088b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	6010      	str	r0, [r2, #0]
 80088bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088c4:	f380 8811 	msr	BASEPRI, r0
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f7ff fa80 	bl	8007dd4 <vTaskSwitchContext>
 80088d4:	f04f 0000 	mov.w	r0, #0
 80088d8:	f380 8811 	msr	BASEPRI, r0
 80088dc:	bc09      	pop	{r0, r3}
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	6808      	ldr	r0, [r1, #0]
 80088e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e6:	f01e 0f10 	tst.w	lr, #16
 80088ea:	bf08      	it	eq
 80088ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088f0:	f380 8809 	msr	PSP, r0
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w

08008900 <pxCurrentTCBConst>:
 8008900:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop

08008908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008920:	f7ff f9a0 	bl	8007c64 <xTaskIncrementTick>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <SysTick_Handler+0x3c>)
 800892c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	2300      	movs	r3, #0
 8008934:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	e000ed04 	.word	0xe000ed04

08008948 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800894c:	4b0b      	ldr	r3, [pc, #44]	; (800897c <vPortSetupTimerInterrupt+0x34>)
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008952:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <vPortSetupTimerInterrupt+0x38>)
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <vPortSetupTimerInterrupt+0x3c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a0a      	ldr	r2, [pc, #40]	; (8008988 <vPortSetupTimerInterrupt+0x40>)
 800895e:	fba2 2303 	umull	r2, r3, r2, r3
 8008962:	099b      	lsrs	r3, r3, #6
 8008964:	4a09      	ldr	r2, [pc, #36]	; (800898c <vPortSetupTimerInterrupt+0x44>)
 8008966:	3b01      	subs	r3, #1
 8008968:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800896a:	4b04      	ldr	r3, [pc, #16]	; (800897c <vPortSetupTimerInterrupt+0x34>)
 800896c:	2207      	movs	r2, #7
 800896e:	601a      	str	r2, [r3, #0]
}
 8008970:	bf00      	nop
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	e000e010 	.word	0xe000e010
 8008980:	e000e018 	.word	0xe000e018
 8008984:	20000000 	.word	0x20000000
 8008988:	10624dd3 	.word	0x10624dd3
 800898c:	e000e014 	.word	0xe000e014

08008990 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008990:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089a0 <vPortEnableVFP+0x10>
 8008994:	6801      	ldr	r1, [r0, #0]
 8008996:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800899a:	6001      	str	r1, [r0, #0]
 800899c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800899e:	bf00      	nop
 80089a0:	e000ed88 	.word	0xe000ed88

080089a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089aa:	f3ef 8305 	mrs	r3, IPSR
 80089ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b0f      	cmp	r3, #15
 80089b4:	d913      	bls.n	80089de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089b6:	4a16      	ldr	r2, [pc, #88]	; (8008a10 <vPortValidateInterruptPriority+0x6c>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089c0:	4b14      	ldr	r3, [pc, #80]	; (8008a14 <vPortValidateInterruptPriority+0x70>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	7afa      	ldrb	r2, [r7, #11]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d209      	bcs.n	80089de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	e7fe      	b.n	80089dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089de:	4b0e      	ldr	r3, [pc, #56]	; (8008a18 <vPortValidateInterruptPriority+0x74>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089e6:	4b0d      	ldr	r3, [pc, #52]	; (8008a1c <vPortValidateInterruptPriority+0x78>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d909      	bls.n	8008a02 <vPortValidateInterruptPriority+0x5e>
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	e7fe      	b.n	8008a00 <vPortValidateInterruptPriority+0x5c>
	}
 8008a02:	bf00      	nop
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	e000e3f0 	.word	0xe000e3f0
 8008a14:	20000418 	.word	0x20000418
 8008a18:	e000ed0c 	.word	0xe000ed0c
 8008a1c:	2000041c 	.word	0x2000041c

08008a20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08a      	sub	sp, #40	; 0x28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a2c:	f7ff f870 	bl	8007b10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a30:	4b57      	ldr	r3, [pc, #348]	; (8008b90 <pvPortMalloc+0x170>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a38:	f000 f90c 	bl	8008c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a3c:	4b55      	ldr	r3, [pc, #340]	; (8008b94 <pvPortMalloc+0x174>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4013      	ands	r3, r2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f040 808c 	bne.w	8008b62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01c      	beq.n	8008a8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008a50:	2208      	movs	r2, #8
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4413      	add	r3, r2
 8008a56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d013      	beq.n	8008a8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f023 0307 	bic.w	r3, r3, #7
 8008a68:	3308      	adds	r3, #8
 8008a6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d009      	beq.n	8008a8a <pvPortMalloc+0x6a>
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	e7fe      	b.n	8008a88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d068      	beq.n	8008b62 <pvPortMalloc+0x142>
 8008a90:	4b41      	ldr	r3, [pc, #260]	; (8008b98 <pvPortMalloc+0x178>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d863      	bhi.n	8008b62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a9a:	4b40      	ldr	r3, [pc, #256]	; (8008b9c <pvPortMalloc+0x17c>)
 8008a9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a9e:	4b3f      	ldr	r3, [pc, #252]	; (8008b9c <pvPortMalloc+0x17c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aa4:	e004      	b.n	8008ab0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d903      	bls.n	8008ac2 <pvPortMalloc+0xa2>
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f1      	bne.n	8008aa6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ac2:	4b33      	ldr	r3, [pc, #204]	; (8008b90 <pvPortMalloc+0x170>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d04a      	beq.n	8008b62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2208      	movs	r2, #8
 8008ad2:	4413      	add	r3, r2
 8008ad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	1ad2      	subs	r2, r2, r3
 8008ae6:	2308      	movs	r3, #8
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d91e      	bls.n	8008b2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4413      	add	r3, r2
 8008af4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d009      	beq.n	8008b14 <pvPortMalloc+0xf4>
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	e7fe      	b.n	8008b12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b26:	69b8      	ldr	r0, [r7, #24]
 8008b28:	f000 f8f6 	bl	8008d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b2c:	4b1a      	ldr	r3, [pc, #104]	; (8008b98 <pvPortMalloc+0x178>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	4a18      	ldr	r2, [pc, #96]	; (8008b98 <pvPortMalloc+0x178>)
 8008b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b3a:	4b17      	ldr	r3, [pc, #92]	; (8008b98 <pvPortMalloc+0x178>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b18      	ldr	r3, [pc, #96]	; (8008ba0 <pvPortMalloc+0x180>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d203      	bcs.n	8008b4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <pvPortMalloc+0x178>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a15      	ldr	r2, [pc, #84]	; (8008ba0 <pvPortMalloc+0x180>)
 8008b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <pvPortMalloc+0x174>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	431a      	orrs	r2, r3
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b62:	f7fe ffe3 	bl	8007b2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <pvPortMalloc+0x164>
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	e7fe      	b.n	8008b82 <pvPortMalloc+0x162>
	return pvReturn;
 8008b84:	69fb      	ldr	r3, [r7, #28]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3728      	adds	r7, #40	; 0x28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20004028 	.word	0x20004028
 8008b94:	20004034 	.word	0x20004034
 8008b98:	2000402c 	.word	0x2000402c
 8008b9c:	20004020 	.word	0x20004020
 8008ba0:	20004030 	.word	0x20004030

08008ba4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d046      	beq.n	8008c44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bb6:	2308      	movs	r3, #8
 8008bb8:	425b      	negs	r3, r3
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	4b20      	ldr	r3, [pc, #128]	; (8008c4c <vPortFree+0xa8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d109      	bne.n	8008be6 <vPortFree+0x42>
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e7fe      	b.n	8008be4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d009      	beq.n	8008c02 <vPortFree+0x5e>
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	60bb      	str	r3, [r7, #8]
 8008c00:	e7fe      	b.n	8008c00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <vPortFree+0xa8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d019      	beq.n	8008c44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d115      	bne.n	8008c44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <vPortFree+0xa8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	43db      	mvns	r3, r3
 8008c22:	401a      	ands	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c28:	f7fe ff72 	bl	8007b10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <vPortFree+0xac>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4413      	add	r3, r2
 8008c36:	4a06      	ldr	r2, [pc, #24]	; (8008c50 <vPortFree+0xac>)
 8008c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c3a:	6938      	ldr	r0, [r7, #16]
 8008c3c:	f000 f86c 	bl	8008d18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c40:	f7fe ff74 	bl	8007b2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c44:	bf00      	nop
 8008c46:	3718      	adds	r7, #24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	20004034 	.word	0x20004034
 8008c50:	2000402c 	.word	0x2000402c

08008c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c60:	4b27      	ldr	r3, [pc, #156]	; (8008d00 <prvHeapInit+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00c      	beq.n	8008c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3307      	adds	r3, #7
 8008c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0307 	bic.w	r3, r3, #7
 8008c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <prvHeapInit+0xac>)
 8008c84:	4413      	add	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c8c:	4a1d      	ldr	r2, [pc, #116]	; (8008d04 <prvHeapInit+0xb0>)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c92:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <prvHeapInit+0xb0>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0307 	bic.w	r3, r3, #7
 8008cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a15      	ldr	r2, [pc, #84]	; (8008d08 <prvHeapInit+0xb4>)
 8008cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <prvHeapInit+0xb4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <prvHeapInit+0xb4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cd4:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvHeapInit+0xb4>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <prvHeapInit+0xb8>)
 8008ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <prvHeapInit+0xbc>)
 8008cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cec:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <prvHeapInit+0xc0>)
 8008cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20000420 	.word	0x20000420
 8008d04:	20004020 	.word	0x20004020
 8008d08:	20004028 	.word	0x20004028
 8008d0c:	20004030 	.word	0x20004030
 8008d10:	2000402c 	.word	0x2000402c
 8008d14:	20004034 	.word	0x20004034

08008d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d20:	4b28      	ldr	r3, [pc, #160]	; (8008dc4 <prvInsertBlockIntoFreeList+0xac>)
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	e002      	b.n	8008d2c <prvInsertBlockIntoFreeList+0x14>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d8f7      	bhi.n	8008d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d108      	bne.n	8008d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	441a      	add	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	441a      	add	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d118      	bne.n	8008da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d00d      	beq.n	8008d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	441a      	add	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e008      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	e003      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d002      	beq.n	8008db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008db6:	bf00      	nop
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20004020 	.word	0x20004020
 8008dc8:	20004028 	.word	0x20004028

08008dcc <__errno>:
 8008dcc:	4b01      	ldr	r3, [pc, #4]	; (8008dd4 <__errno+0x8>)
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000010 	.word	0x20000010

08008dd8 <__libc_init_array>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	4e0d      	ldr	r6, [pc, #52]	; (8008e10 <__libc_init_array+0x38>)
 8008ddc:	4c0d      	ldr	r4, [pc, #52]	; (8008e14 <__libc_init_array+0x3c>)
 8008dde:	1ba4      	subs	r4, r4, r6
 8008de0:	10a4      	asrs	r4, r4, #2
 8008de2:	2500      	movs	r5, #0
 8008de4:	42a5      	cmp	r5, r4
 8008de6:	d109      	bne.n	8008dfc <__libc_init_array+0x24>
 8008de8:	4e0b      	ldr	r6, [pc, #44]	; (8008e18 <__libc_init_array+0x40>)
 8008dea:	4c0c      	ldr	r4, [pc, #48]	; (8008e1c <__libc_init_array+0x44>)
 8008dec:	f000 ff68 	bl	8009cc0 <_init>
 8008df0:	1ba4      	subs	r4, r4, r6
 8008df2:	10a4      	asrs	r4, r4, #2
 8008df4:	2500      	movs	r5, #0
 8008df6:	42a5      	cmp	r5, r4
 8008df8:	d105      	bne.n	8008e06 <__libc_init_array+0x2e>
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e00:	4798      	blx	r3
 8008e02:	3501      	adds	r5, #1
 8008e04:	e7ee      	b.n	8008de4 <__libc_init_array+0xc>
 8008e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e0a:	4798      	blx	r3
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	e7f2      	b.n	8008df6 <__libc_init_array+0x1e>
 8008e10:	0800a148 	.word	0x0800a148
 8008e14:	0800a148 	.word	0x0800a148
 8008e18:	0800a148 	.word	0x0800a148
 8008e1c:	0800a14c 	.word	0x0800a14c

08008e20 <memset>:
 8008e20:	4402      	add	r2, r0
 8008e22:	4603      	mov	r3, r0
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d100      	bne.n	8008e2a <memset+0xa>
 8008e28:	4770      	bx	lr
 8008e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e2e:	e7f9      	b.n	8008e24 <memset+0x4>

08008e30 <iprintf>:
 8008e30:	b40f      	push	{r0, r1, r2, r3}
 8008e32:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <iprintf+0x2c>)
 8008e34:	b513      	push	{r0, r1, r4, lr}
 8008e36:	681c      	ldr	r4, [r3, #0]
 8008e38:	b124      	cbz	r4, 8008e44 <iprintf+0x14>
 8008e3a:	69a3      	ldr	r3, [r4, #24]
 8008e3c:	b913      	cbnz	r3, 8008e44 <iprintf+0x14>
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 fa22 	bl	8009288 <__sinit>
 8008e44:	ab05      	add	r3, sp, #20
 8008e46:	9a04      	ldr	r2, [sp, #16]
 8008e48:	68a1      	ldr	r1, [r4, #8]
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f000 fbdb 	bl	8009608 <_vfiprintf_r>
 8008e52:	b002      	add	sp, #8
 8008e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e58:	b004      	add	sp, #16
 8008e5a:	4770      	bx	lr
 8008e5c:	20000010 	.word	0x20000010

08008e60 <_puts_r>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	460e      	mov	r6, r1
 8008e64:	4605      	mov	r5, r0
 8008e66:	b118      	cbz	r0, 8008e70 <_puts_r+0x10>
 8008e68:	6983      	ldr	r3, [r0, #24]
 8008e6a:	b90b      	cbnz	r3, 8008e70 <_puts_r+0x10>
 8008e6c:	f000 fa0c 	bl	8009288 <__sinit>
 8008e70:	69ab      	ldr	r3, [r5, #24]
 8008e72:	68ac      	ldr	r4, [r5, #8]
 8008e74:	b913      	cbnz	r3, 8008e7c <_puts_r+0x1c>
 8008e76:	4628      	mov	r0, r5
 8008e78:	f000 fa06 	bl	8009288 <__sinit>
 8008e7c:	4b23      	ldr	r3, [pc, #140]	; (8008f0c <_puts_r+0xac>)
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d117      	bne.n	8008eb2 <_puts_r+0x52>
 8008e82:	686c      	ldr	r4, [r5, #4]
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	071b      	lsls	r3, r3, #28
 8008e88:	d51d      	bpl.n	8008ec6 <_puts_r+0x66>
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	b1db      	cbz	r3, 8008ec6 <_puts_r+0x66>
 8008e8e:	3e01      	subs	r6, #1
 8008e90:	68a3      	ldr	r3, [r4, #8]
 8008e92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e96:	3b01      	subs	r3, #1
 8008e98:	60a3      	str	r3, [r4, #8]
 8008e9a:	b9e9      	cbnz	r1, 8008ed8 <_puts_r+0x78>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	da2e      	bge.n	8008efe <_puts_r+0x9e>
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	210a      	movs	r1, #10
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f000 f83f 	bl	8008f28 <__swbuf_r>
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d011      	beq.n	8008ed2 <_puts_r+0x72>
 8008eae:	200a      	movs	r0, #10
 8008eb0:	e011      	b.n	8008ed6 <_puts_r+0x76>
 8008eb2:	4b17      	ldr	r3, [pc, #92]	; (8008f10 <_puts_r+0xb0>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	d101      	bne.n	8008ebc <_puts_r+0x5c>
 8008eb8:	68ac      	ldr	r4, [r5, #8]
 8008eba:	e7e3      	b.n	8008e84 <_puts_r+0x24>
 8008ebc:	4b15      	ldr	r3, [pc, #84]	; (8008f14 <_puts_r+0xb4>)
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	bf08      	it	eq
 8008ec2:	68ec      	ldreq	r4, [r5, #12]
 8008ec4:	e7de      	b.n	8008e84 <_puts_r+0x24>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f87f 	bl	8008fcc <__swsetup_r>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d0dd      	beq.n	8008e8e <_puts_r+0x2e>
 8008ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	da04      	bge.n	8008ee6 <_puts_r+0x86>
 8008edc:	69a2      	ldr	r2, [r4, #24]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	dc06      	bgt.n	8008ef0 <_puts_r+0x90>
 8008ee2:	290a      	cmp	r1, #10
 8008ee4:	d004      	beq.n	8008ef0 <_puts_r+0x90>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	6022      	str	r2, [r4, #0]
 8008eec:	7019      	strb	r1, [r3, #0]
 8008eee:	e7cf      	b.n	8008e90 <_puts_r+0x30>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f818 	bl	8008f28 <__swbuf_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1c9      	bne.n	8008e90 <_puts_r+0x30>
 8008efc:	e7e9      	b.n	8008ed2 <_puts_r+0x72>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	200a      	movs	r0, #10
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	6022      	str	r2, [r4, #0]
 8008f06:	7018      	strb	r0, [r3, #0]
 8008f08:	e7e5      	b.n	8008ed6 <_puts_r+0x76>
 8008f0a:	bf00      	nop
 8008f0c:	0800a0cc 	.word	0x0800a0cc
 8008f10:	0800a0ec 	.word	0x0800a0ec
 8008f14:	0800a0ac 	.word	0x0800a0ac

08008f18 <puts>:
 8008f18:	4b02      	ldr	r3, [pc, #8]	; (8008f24 <puts+0xc>)
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	f7ff bf9f 	b.w	8008e60 <_puts_r>
 8008f22:	bf00      	nop
 8008f24:	20000010 	.word	0x20000010

08008f28 <__swbuf_r>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	460e      	mov	r6, r1
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	4605      	mov	r5, r0
 8008f30:	b118      	cbz	r0, 8008f3a <__swbuf_r+0x12>
 8008f32:	6983      	ldr	r3, [r0, #24]
 8008f34:	b90b      	cbnz	r3, 8008f3a <__swbuf_r+0x12>
 8008f36:	f000 f9a7 	bl	8009288 <__sinit>
 8008f3a:	4b21      	ldr	r3, [pc, #132]	; (8008fc0 <__swbuf_r+0x98>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	d12a      	bne.n	8008f96 <__swbuf_r+0x6e>
 8008f40:	686c      	ldr	r4, [r5, #4]
 8008f42:	69a3      	ldr	r3, [r4, #24]
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	071a      	lsls	r2, r3, #28
 8008f4a:	d52e      	bpl.n	8008faa <__swbuf_r+0x82>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	b363      	cbz	r3, 8008faa <__swbuf_r+0x82>
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	1ac0      	subs	r0, r0, r3
 8008f56:	6963      	ldr	r3, [r4, #20]
 8008f58:	b2f6      	uxtb	r6, r6
 8008f5a:	4283      	cmp	r3, r0
 8008f5c:	4637      	mov	r7, r6
 8008f5e:	dc04      	bgt.n	8008f6a <__swbuf_r+0x42>
 8008f60:	4621      	mov	r1, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 f926 	bl	80091b4 <_fflush_r>
 8008f68:	bb28      	cbnz	r0, 8008fb6 <__swbuf_r+0x8e>
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	60a3      	str	r3, [r4, #8]
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	6022      	str	r2, [r4, #0]
 8008f76:	701e      	strb	r6, [r3, #0]
 8008f78:	6963      	ldr	r3, [r4, #20]
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	d004      	beq.n	8008f8a <__swbuf_r+0x62>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	07db      	lsls	r3, r3, #31
 8008f84:	d519      	bpl.n	8008fba <__swbuf_r+0x92>
 8008f86:	2e0a      	cmp	r6, #10
 8008f88:	d117      	bne.n	8008fba <__swbuf_r+0x92>
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f000 f911 	bl	80091b4 <_fflush_r>
 8008f92:	b190      	cbz	r0, 8008fba <__swbuf_r+0x92>
 8008f94:	e00f      	b.n	8008fb6 <__swbuf_r+0x8e>
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <__swbuf_r+0x9c>)
 8008f98:	429c      	cmp	r4, r3
 8008f9a:	d101      	bne.n	8008fa0 <__swbuf_r+0x78>
 8008f9c:	68ac      	ldr	r4, [r5, #8]
 8008f9e:	e7d0      	b.n	8008f42 <__swbuf_r+0x1a>
 8008fa0:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <__swbuf_r+0xa0>)
 8008fa2:	429c      	cmp	r4, r3
 8008fa4:	bf08      	it	eq
 8008fa6:	68ec      	ldreq	r4, [r5, #12]
 8008fa8:	e7cb      	b.n	8008f42 <__swbuf_r+0x1a>
 8008faa:	4621      	mov	r1, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	f000 f80d 	bl	8008fcc <__swsetup_r>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0cc      	beq.n	8008f50 <__swbuf_r+0x28>
 8008fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8008fba:	4638      	mov	r0, r7
 8008fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0800a0cc 	.word	0x0800a0cc
 8008fc4:	0800a0ec 	.word	0x0800a0ec
 8008fc8:	0800a0ac 	.word	0x0800a0ac

08008fcc <__swsetup_r>:
 8008fcc:	4b32      	ldr	r3, [pc, #200]	; (8009098 <__swsetup_r+0xcc>)
 8008fce:	b570      	push	{r4, r5, r6, lr}
 8008fd0:	681d      	ldr	r5, [r3, #0]
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	b125      	cbz	r5, 8008fe2 <__swsetup_r+0x16>
 8008fd8:	69ab      	ldr	r3, [r5, #24]
 8008fda:	b913      	cbnz	r3, 8008fe2 <__swsetup_r+0x16>
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 f953 	bl	8009288 <__sinit>
 8008fe2:	4b2e      	ldr	r3, [pc, #184]	; (800909c <__swsetup_r+0xd0>)
 8008fe4:	429c      	cmp	r4, r3
 8008fe6:	d10f      	bne.n	8009008 <__swsetup_r+0x3c>
 8008fe8:	686c      	ldr	r4, [r5, #4]
 8008fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	0715      	lsls	r5, r2, #28
 8008ff2:	d42c      	bmi.n	800904e <__swsetup_r+0x82>
 8008ff4:	06d0      	lsls	r0, r2, #27
 8008ff6:	d411      	bmi.n	800901c <__swsetup_r+0x50>
 8008ff8:	2209      	movs	r2, #9
 8008ffa:	6032      	str	r2, [r6, #0]
 8008ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	f04f 30ff 	mov.w	r0, #4294967295
 8009006:	e03e      	b.n	8009086 <__swsetup_r+0xba>
 8009008:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <__swsetup_r+0xd4>)
 800900a:	429c      	cmp	r4, r3
 800900c:	d101      	bne.n	8009012 <__swsetup_r+0x46>
 800900e:	68ac      	ldr	r4, [r5, #8]
 8009010:	e7eb      	b.n	8008fea <__swsetup_r+0x1e>
 8009012:	4b24      	ldr	r3, [pc, #144]	; (80090a4 <__swsetup_r+0xd8>)
 8009014:	429c      	cmp	r4, r3
 8009016:	bf08      	it	eq
 8009018:	68ec      	ldreq	r4, [r5, #12]
 800901a:	e7e6      	b.n	8008fea <__swsetup_r+0x1e>
 800901c:	0751      	lsls	r1, r2, #29
 800901e:	d512      	bpl.n	8009046 <__swsetup_r+0x7a>
 8009020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009022:	b141      	cbz	r1, 8009036 <__swsetup_r+0x6a>
 8009024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009028:	4299      	cmp	r1, r3
 800902a:	d002      	beq.n	8009032 <__swsetup_r+0x66>
 800902c:	4630      	mov	r0, r6
 800902e:	f000 fa19 	bl	8009464 <_free_r>
 8009032:	2300      	movs	r3, #0
 8009034:	6363      	str	r3, [r4, #52]	; 0x34
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	2300      	movs	r3, #0
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f043 0308 	orr.w	r3, r3, #8
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	b94b      	cbnz	r3, 8009066 <__swsetup_r+0x9a>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905c:	d003      	beq.n	8009066 <__swsetup_r+0x9a>
 800905e:	4621      	mov	r1, r4
 8009060:	4630      	mov	r0, r6
 8009062:	f000 f9bf 	bl	80093e4 <__smakebuf_r>
 8009066:	89a2      	ldrh	r2, [r4, #12]
 8009068:	f012 0301 	ands.w	r3, r2, #1
 800906c:	d00c      	beq.n	8009088 <__swsetup_r+0xbc>
 800906e:	2300      	movs	r3, #0
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	6963      	ldr	r3, [r4, #20]
 8009074:	425b      	negs	r3, r3
 8009076:	61a3      	str	r3, [r4, #24]
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	b953      	cbnz	r3, 8009092 <__swsetup_r+0xc6>
 800907c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009080:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009084:	d1ba      	bne.n	8008ffc <__swsetup_r+0x30>
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	0792      	lsls	r2, r2, #30
 800908a:	bf58      	it	pl
 800908c:	6963      	ldrpl	r3, [r4, #20]
 800908e:	60a3      	str	r3, [r4, #8]
 8009090:	e7f2      	b.n	8009078 <__swsetup_r+0xac>
 8009092:	2000      	movs	r0, #0
 8009094:	e7f7      	b.n	8009086 <__swsetup_r+0xba>
 8009096:	bf00      	nop
 8009098:	20000010 	.word	0x20000010
 800909c:	0800a0cc 	.word	0x0800a0cc
 80090a0:	0800a0ec 	.word	0x0800a0ec
 80090a4:	0800a0ac 	.word	0x0800a0ac

080090a8 <__sflush_r>:
 80090a8:	898a      	ldrh	r2, [r1, #12]
 80090aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ae:	4605      	mov	r5, r0
 80090b0:	0710      	lsls	r0, r2, #28
 80090b2:	460c      	mov	r4, r1
 80090b4:	d458      	bmi.n	8009168 <__sflush_r+0xc0>
 80090b6:	684b      	ldr	r3, [r1, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dc05      	bgt.n	80090c8 <__sflush_r+0x20>
 80090bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090be:	2b00      	cmp	r3, #0
 80090c0:	dc02      	bgt.n	80090c8 <__sflush_r+0x20>
 80090c2:	2000      	movs	r0, #0
 80090c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ca:	2e00      	cmp	r6, #0
 80090cc:	d0f9      	beq.n	80090c2 <__sflush_r+0x1a>
 80090ce:	2300      	movs	r3, #0
 80090d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090d4:	682f      	ldr	r7, [r5, #0]
 80090d6:	6a21      	ldr	r1, [r4, #32]
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	d032      	beq.n	8009142 <__sflush_r+0x9a>
 80090dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	075a      	lsls	r2, r3, #29
 80090e2:	d505      	bpl.n	80090f0 <__sflush_r+0x48>
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	1ac0      	subs	r0, r0, r3
 80090e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090ea:	b10b      	cbz	r3, 80090f0 <__sflush_r+0x48>
 80090ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090ee:	1ac0      	subs	r0, r0, r3
 80090f0:	2300      	movs	r3, #0
 80090f2:	4602      	mov	r2, r0
 80090f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090f6:	6a21      	ldr	r1, [r4, #32]
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b0      	blx	r6
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	d106      	bne.n	8009110 <__sflush_r+0x68>
 8009102:	6829      	ldr	r1, [r5, #0]
 8009104:	291d      	cmp	r1, #29
 8009106:	d848      	bhi.n	800919a <__sflush_r+0xf2>
 8009108:	4a29      	ldr	r2, [pc, #164]	; (80091b0 <__sflush_r+0x108>)
 800910a:	40ca      	lsrs	r2, r1
 800910c:	07d6      	lsls	r6, r2, #31
 800910e:	d544      	bpl.n	800919a <__sflush_r+0xf2>
 8009110:	2200      	movs	r2, #0
 8009112:	6062      	str	r2, [r4, #4]
 8009114:	04d9      	lsls	r1, r3, #19
 8009116:	6922      	ldr	r2, [r4, #16]
 8009118:	6022      	str	r2, [r4, #0]
 800911a:	d504      	bpl.n	8009126 <__sflush_r+0x7e>
 800911c:	1c42      	adds	r2, r0, #1
 800911e:	d101      	bne.n	8009124 <__sflush_r+0x7c>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b903      	cbnz	r3, 8009126 <__sflush_r+0x7e>
 8009124:	6560      	str	r0, [r4, #84]	; 0x54
 8009126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009128:	602f      	str	r7, [r5, #0]
 800912a:	2900      	cmp	r1, #0
 800912c:	d0c9      	beq.n	80090c2 <__sflush_r+0x1a>
 800912e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009132:	4299      	cmp	r1, r3
 8009134:	d002      	beq.n	800913c <__sflush_r+0x94>
 8009136:	4628      	mov	r0, r5
 8009138:	f000 f994 	bl	8009464 <_free_r>
 800913c:	2000      	movs	r0, #0
 800913e:	6360      	str	r0, [r4, #52]	; 0x34
 8009140:	e7c0      	b.n	80090c4 <__sflush_r+0x1c>
 8009142:	2301      	movs	r3, #1
 8009144:	4628      	mov	r0, r5
 8009146:	47b0      	blx	r6
 8009148:	1c41      	adds	r1, r0, #1
 800914a:	d1c8      	bne.n	80090de <__sflush_r+0x36>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0c5      	beq.n	80090de <__sflush_r+0x36>
 8009152:	2b1d      	cmp	r3, #29
 8009154:	d001      	beq.n	800915a <__sflush_r+0xb2>
 8009156:	2b16      	cmp	r3, #22
 8009158:	d101      	bne.n	800915e <__sflush_r+0xb6>
 800915a:	602f      	str	r7, [r5, #0]
 800915c:	e7b1      	b.n	80090c2 <__sflush_r+0x1a>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	e7ad      	b.n	80090c4 <__sflush_r+0x1c>
 8009168:	690f      	ldr	r7, [r1, #16]
 800916a:	2f00      	cmp	r7, #0
 800916c:	d0a9      	beq.n	80090c2 <__sflush_r+0x1a>
 800916e:	0793      	lsls	r3, r2, #30
 8009170:	680e      	ldr	r6, [r1, #0]
 8009172:	bf08      	it	eq
 8009174:	694b      	ldreq	r3, [r1, #20]
 8009176:	600f      	str	r7, [r1, #0]
 8009178:	bf18      	it	ne
 800917a:	2300      	movne	r3, #0
 800917c:	eba6 0807 	sub.w	r8, r6, r7
 8009180:	608b      	str	r3, [r1, #8]
 8009182:	f1b8 0f00 	cmp.w	r8, #0
 8009186:	dd9c      	ble.n	80090c2 <__sflush_r+0x1a>
 8009188:	4643      	mov	r3, r8
 800918a:	463a      	mov	r2, r7
 800918c:	6a21      	ldr	r1, [r4, #32]
 800918e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009190:	4628      	mov	r0, r5
 8009192:	47b0      	blx	r6
 8009194:	2800      	cmp	r0, #0
 8009196:	dc06      	bgt.n	80091a6 <__sflush_r+0xfe>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800919e:	81a3      	strh	r3, [r4, #12]
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
 80091a4:	e78e      	b.n	80090c4 <__sflush_r+0x1c>
 80091a6:	4407      	add	r7, r0
 80091a8:	eba8 0800 	sub.w	r8, r8, r0
 80091ac:	e7e9      	b.n	8009182 <__sflush_r+0xda>
 80091ae:	bf00      	nop
 80091b0:	20400001 	.word	0x20400001

080091b4 <_fflush_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	690b      	ldr	r3, [r1, #16]
 80091b8:	4605      	mov	r5, r0
 80091ba:	460c      	mov	r4, r1
 80091bc:	b1db      	cbz	r3, 80091f6 <_fflush_r+0x42>
 80091be:	b118      	cbz	r0, 80091c8 <_fflush_r+0x14>
 80091c0:	6983      	ldr	r3, [r0, #24]
 80091c2:	b90b      	cbnz	r3, 80091c8 <_fflush_r+0x14>
 80091c4:	f000 f860 	bl	8009288 <__sinit>
 80091c8:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <_fflush_r+0x48>)
 80091ca:	429c      	cmp	r4, r3
 80091cc:	d109      	bne.n	80091e2 <_fflush_r+0x2e>
 80091ce:	686c      	ldr	r4, [r5, #4]
 80091d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d4:	b17b      	cbz	r3, 80091f6 <_fflush_r+0x42>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091de:	f7ff bf63 	b.w	80090a8 <__sflush_r>
 80091e2:	4b07      	ldr	r3, [pc, #28]	; (8009200 <_fflush_r+0x4c>)
 80091e4:	429c      	cmp	r4, r3
 80091e6:	d101      	bne.n	80091ec <_fflush_r+0x38>
 80091e8:	68ac      	ldr	r4, [r5, #8]
 80091ea:	e7f1      	b.n	80091d0 <_fflush_r+0x1c>
 80091ec:	4b05      	ldr	r3, [pc, #20]	; (8009204 <_fflush_r+0x50>)
 80091ee:	429c      	cmp	r4, r3
 80091f0:	bf08      	it	eq
 80091f2:	68ec      	ldreq	r4, [r5, #12]
 80091f4:	e7ec      	b.n	80091d0 <_fflush_r+0x1c>
 80091f6:	2000      	movs	r0, #0
 80091f8:	bd38      	pop	{r3, r4, r5, pc}
 80091fa:	bf00      	nop
 80091fc:	0800a0cc 	.word	0x0800a0cc
 8009200:	0800a0ec 	.word	0x0800a0ec
 8009204:	0800a0ac 	.word	0x0800a0ac

08009208 <std>:
 8009208:	2300      	movs	r3, #0
 800920a:	b510      	push	{r4, lr}
 800920c:	4604      	mov	r4, r0
 800920e:	e9c0 3300 	strd	r3, r3, [r0]
 8009212:	6083      	str	r3, [r0, #8]
 8009214:	8181      	strh	r1, [r0, #12]
 8009216:	6643      	str	r3, [r0, #100]	; 0x64
 8009218:	81c2      	strh	r2, [r0, #14]
 800921a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800921e:	6183      	str	r3, [r0, #24]
 8009220:	4619      	mov	r1, r3
 8009222:	2208      	movs	r2, #8
 8009224:	305c      	adds	r0, #92	; 0x5c
 8009226:	f7ff fdfb 	bl	8008e20 <memset>
 800922a:	4b05      	ldr	r3, [pc, #20]	; (8009240 <std+0x38>)
 800922c:	6263      	str	r3, [r4, #36]	; 0x24
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <std+0x3c>)
 8009230:	62a3      	str	r3, [r4, #40]	; 0x28
 8009232:	4b05      	ldr	r3, [pc, #20]	; (8009248 <std+0x40>)
 8009234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009236:	4b05      	ldr	r3, [pc, #20]	; (800924c <std+0x44>)
 8009238:	6224      	str	r4, [r4, #32]
 800923a:	6323      	str	r3, [r4, #48]	; 0x30
 800923c:	bd10      	pop	{r4, pc}
 800923e:	bf00      	nop
 8009240:	08009b65 	.word	0x08009b65
 8009244:	08009b87 	.word	0x08009b87
 8009248:	08009bbf 	.word	0x08009bbf
 800924c:	08009be3 	.word	0x08009be3

08009250 <_cleanup_r>:
 8009250:	4901      	ldr	r1, [pc, #4]	; (8009258 <_cleanup_r+0x8>)
 8009252:	f000 b885 	b.w	8009360 <_fwalk_reent>
 8009256:	bf00      	nop
 8009258:	080091b5 	.word	0x080091b5

0800925c <__sfmoreglue>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	1e4a      	subs	r2, r1, #1
 8009260:	2568      	movs	r5, #104	; 0x68
 8009262:	4355      	muls	r5, r2
 8009264:	460e      	mov	r6, r1
 8009266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800926a:	f000 f949 	bl	8009500 <_malloc_r>
 800926e:	4604      	mov	r4, r0
 8009270:	b140      	cbz	r0, 8009284 <__sfmoreglue+0x28>
 8009272:	2100      	movs	r1, #0
 8009274:	e9c0 1600 	strd	r1, r6, [r0]
 8009278:	300c      	adds	r0, #12
 800927a:	60a0      	str	r0, [r4, #8]
 800927c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009280:	f7ff fdce 	bl	8008e20 <memset>
 8009284:	4620      	mov	r0, r4
 8009286:	bd70      	pop	{r4, r5, r6, pc}

08009288 <__sinit>:
 8009288:	6983      	ldr	r3, [r0, #24]
 800928a:	b510      	push	{r4, lr}
 800928c:	4604      	mov	r4, r0
 800928e:	bb33      	cbnz	r3, 80092de <__sinit+0x56>
 8009290:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009294:	6503      	str	r3, [r0, #80]	; 0x50
 8009296:	4b12      	ldr	r3, [pc, #72]	; (80092e0 <__sinit+0x58>)
 8009298:	4a12      	ldr	r2, [pc, #72]	; (80092e4 <__sinit+0x5c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6282      	str	r2, [r0, #40]	; 0x28
 800929e:	4298      	cmp	r0, r3
 80092a0:	bf04      	itt	eq
 80092a2:	2301      	moveq	r3, #1
 80092a4:	6183      	streq	r3, [r0, #24]
 80092a6:	f000 f81f 	bl	80092e8 <__sfp>
 80092aa:	6060      	str	r0, [r4, #4]
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 f81b 	bl	80092e8 <__sfp>
 80092b2:	60a0      	str	r0, [r4, #8]
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 f817 	bl	80092e8 <__sfp>
 80092ba:	2200      	movs	r2, #0
 80092bc:	60e0      	str	r0, [r4, #12]
 80092be:	2104      	movs	r1, #4
 80092c0:	6860      	ldr	r0, [r4, #4]
 80092c2:	f7ff ffa1 	bl	8009208 <std>
 80092c6:	2201      	movs	r2, #1
 80092c8:	2109      	movs	r1, #9
 80092ca:	68a0      	ldr	r0, [r4, #8]
 80092cc:	f7ff ff9c 	bl	8009208 <std>
 80092d0:	2202      	movs	r2, #2
 80092d2:	2112      	movs	r1, #18
 80092d4:	68e0      	ldr	r0, [r4, #12]
 80092d6:	f7ff ff97 	bl	8009208 <std>
 80092da:	2301      	movs	r3, #1
 80092dc:	61a3      	str	r3, [r4, #24]
 80092de:	bd10      	pop	{r4, pc}
 80092e0:	0800a0a8 	.word	0x0800a0a8
 80092e4:	08009251 	.word	0x08009251

080092e8 <__sfp>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	4b1b      	ldr	r3, [pc, #108]	; (8009358 <__sfp+0x70>)
 80092ec:	681e      	ldr	r6, [r3, #0]
 80092ee:	69b3      	ldr	r3, [r6, #24]
 80092f0:	4607      	mov	r7, r0
 80092f2:	b913      	cbnz	r3, 80092fa <__sfp+0x12>
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff ffc7 	bl	8009288 <__sinit>
 80092fa:	3648      	adds	r6, #72	; 0x48
 80092fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009300:	3b01      	subs	r3, #1
 8009302:	d503      	bpl.n	800930c <__sfp+0x24>
 8009304:	6833      	ldr	r3, [r6, #0]
 8009306:	b133      	cbz	r3, 8009316 <__sfp+0x2e>
 8009308:	6836      	ldr	r6, [r6, #0]
 800930a:	e7f7      	b.n	80092fc <__sfp+0x14>
 800930c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009310:	b16d      	cbz	r5, 800932e <__sfp+0x46>
 8009312:	3468      	adds	r4, #104	; 0x68
 8009314:	e7f4      	b.n	8009300 <__sfp+0x18>
 8009316:	2104      	movs	r1, #4
 8009318:	4638      	mov	r0, r7
 800931a:	f7ff ff9f 	bl	800925c <__sfmoreglue>
 800931e:	6030      	str	r0, [r6, #0]
 8009320:	2800      	cmp	r0, #0
 8009322:	d1f1      	bne.n	8009308 <__sfp+0x20>
 8009324:	230c      	movs	r3, #12
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	4604      	mov	r4, r0
 800932a:	4620      	mov	r0, r4
 800932c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800932e:	4b0b      	ldr	r3, [pc, #44]	; (800935c <__sfp+0x74>)
 8009330:	6665      	str	r5, [r4, #100]	; 0x64
 8009332:	e9c4 5500 	strd	r5, r5, [r4]
 8009336:	60a5      	str	r5, [r4, #8]
 8009338:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800933c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009340:	2208      	movs	r2, #8
 8009342:	4629      	mov	r1, r5
 8009344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009348:	f7ff fd6a 	bl	8008e20 <memset>
 800934c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009354:	e7e9      	b.n	800932a <__sfp+0x42>
 8009356:	bf00      	nop
 8009358:	0800a0a8 	.word	0x0800a0a8
 800935c:	ffff0001 	.word	0xffff0001

08009360 <_fwalk_reent>:
 8009360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009364:	4680      	mov	r8, r0
 8009366:	4689      	mov	r9, r1
 8009368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800936c:	2600      	movs	r6, #0
 800936e:	b914      	cbnz	r4, 8009376 <_fwalk_reent+0x16>
 8009370:	4630      	mov	r0, r6
 8009372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009376:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800937a:	3f01      	subs	r7, #1
 800937c:	d501      	bpl.n	8009382 <_fwalk_reent+0x22>
 800937e:	6824      	ldr	r4, [r4, #0]
 8009380:	e7f5      	b.n	800936e <_fwalk_reent+0xe>
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d907      	bls.n	8009398 <_fwalk_reent+0x38>
 8009388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800938c:	3301      	adds	r3, #1
 800938e:	d003      	beq.n	8009398 <_fwalk_reent+0x38>
 8009390:	4629      	mov	r1, r5
 8009392:	4640      	mov	r0, r8
 8009394:	47c8      	blx	r9
 8009396:	4306      	orrs	r6, r0
 8009398:	3568      	adds	r5, #104	; 0x68
 800939a:	e7ee      	b.n	800937a <_fwalk_reent+0x1a>

0800939c <__swhatbuf_r>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	460e      	mov	r6, r1
 80093a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a4:	2900      	cmp	r1, #0
 80093a6:	b096      	sub	sp, #88	; 0x58
 80093a8:	4614      	mov	r4, r2
 80093aa:	461d      	mov	r5, r3
 80093ac:	da07      	bge.n	80093be <__swhatbuf_r+0x22>
 80093ae:	2300      	movs	r3, #0
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	89b3      	ldrh	r3, [r6, #12]
 80093b4:	061a      	lsls	r2, r3, #24
 80093b6:	d410      	bmi.n	80093da <__swhatbuf_r+0x3e>
 80093b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093bc:	e00e      	b.n	80093dc <__swhatbuf_r+0x40>
 80093be:	466a      	mov	r2, sp
 80093c0:	f000 fc36 	bl	8009c30 <_fstat_r>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	dbf2      	blt.n	80093ae <__swhatbuf_r+0x12>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093d2:	425a      	negs	r2, r3
 80093d4:	415a      	adcs	r2, r3
 80093d6:	602a      	str	r2, [r5, #0]
 80093d8:	e7ee      	b.n	80093b8 <__swhatbuf_r+0x1c>
 80093da:	2340      	movs	r3, #64	; 0x40
 80093dc:	2000      	movs	r0, #0
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	b016      	add	sp, #88	; 0x58
 80093e2:	bd70      	pop	{r4, r5, r6, pc}

080093e4 <__smakebuf_r>:
 80093e4:	898b      	ldrh	r3, [r1, #12]
 80093e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093e8:	079d      	lsls	r5, r3, #30
 80093ea:	4606      	mov	r6, r0
 80093ec:	460c      	mov	r4, r1
 80093ee:	d507      	bpl.n	8009400 <__smakebuf_r+0x1c>
 80093f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	2301      	movs	r3, #1
 80093fa:	6163      	str	r3, [r4, #20]
 80093fc:	b002      	add	sp, #8
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	ab01      	add	r3, sp, #4
 8009402:	466a      	mov	r2, sp
 8009404:	f7ff ffca 	bl	800939c <__swhatbuf_r>
 8009408:	9900      	ldr	r1, [sp, #0]
 800940a:	4605      	mov	r5, r0
 800940c:	4630      	mov	r0, r6
 800940e:	f000 f877 	bl	8009500 <_malloc_r>
 8009412:	b948      	cbnz	r0, 8009428 <__smakebuf_r+0x44>
 8009414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009418:	059a      	lsls	r2, r3, #22
 800941a:	d4ef      	bmi.n	80093fc <__smakebuf_r+0x18>
 800941c:	f023 0303 	bic.w	r3, r3, #3
 8009420:	f043 0302 	orr.w	r3, r3, #2
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	e7e3      	b.n	80093f0 <__smakebuf_r+0xc>
 8009428:	4b0d      	ldr	r3, [pc, #52]	; (8009460 <__smakebuf_r+0x7c>)
 800942a:	62b3      	str	r3, [r6, #40]	; 0x28
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	6020      	str	r0, [r4, #0]
 8009430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	6163      	str	r3, [r4, #20]
 800943a:	9b01      	ldr	r3, [sp, #4]
 800943c:	6120      	str	r0, [r4, #16]
 800943e:	b15b      	cbz	r3, 8009458 <__smakebuf_r+0x74>
 8009440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009444:	4630      	mov	r0, r6
 8009446:	f000 fc05 	bl	8009c54 <_isatty_r>
 800944a:	b128      	cbz	r0, 8009458 <__smakebuf_r+0x74>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	f023 0303 	bic.w	r3, r3, #3
 8009452:	f043 0301 	orr.w	r3, r3, #1
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	431d      	orrs	r5, r3
 800945c:	81a5      	strh	r5, [r4, #12]
 800945e:	e7cd      	b.n	80093fc <__smakebuf_r+0x18>
 8009460:	08009251 	.word	0x08009251

08009464 <_free_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4605      	mov	r5, r0
 8009468:	2900      	cmp	r1, #0
 800946a:	d045      	beq.n	80094f8 <_free_r+0x94>
 800946c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009470:	1f0c      	subs	r4, r1, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	bfb8      	it	lt
 8009476:	18e4      	addlt	r4, r4, r3
 8009478:	f000 fc0e 	bl	8009c98 <__malloc_lock>
 800947c:	4a1f      	ldr	r2, [pc, #124]	; (80094fc <_free_r+0x98>)
 800947e:	6813      	ldr	r3, [r2, #0]
 8009480:	4610      	mov	r0, r2
 8009482:	b933      	cbnz	r3, 8009492 <_free_r+0x2e>
 8009484:	6063      	str	r3, [r4, #4]
 8009486:	6014      	str	r4, [r2, #0]
 8009488:	4628      	mov	r0, r5
 800948a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800948e:	f000 bc04 	b.w	8009c9a <__malloc_unlock>
 8009492:	42a3      	cmp	r3, r4
 8009494:	d90c      	bls.n	80094b0 <_free_r+0x4c>
 8009496:	6821      	ldr	r1, [r4, #0]
 8009498:	1862      	adds	r2, r4, r1
 800949a:	4293      	cmp	r3, r2
 800949c:	bf04      	itt	eq
 800949e:	681a      	ldreq	r2, [r3, #0]
 80094a0:	685b      	ldreq	r3, [r3, #4]
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	bf04      	itt	eq
 80094a6:	1852      	addeq	r2, r2, r1
 80094a8:	6022      	streq	r2, [r4, #0]
 80094aa:	6004      	str	r4, [r0, #0]
 80094ac:	e7ec      	b.n	8009488 <_free_r+0x24>
 80094ae:	4613      	mov	r3, r2
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	b10a      	cbz	r2, 80094b8 <_free_r+0x54>
 80094b4:	42a2      	cmp	r2, r4
 80094b6:	d9fa      	bls.n	80094ae <_free_r+0x4a>
 80094b8:	6819      	ldr	r1, [r3, #0]
 80094ba:	1858      	adds	r0, r3, r1
 80094bc:	42a0      	cmp	r0, r4
 80094be:	d10b      	bne.n	80094d8 <_free_r+0x74>
 80094c0:	6820      	ldr	r0, [r4, #0]
 80094c2:	4401      	add	r1, r0
 80094c4:	1858      	adds	r0, r3, r1
 80094c6:	4282      	cmp	r2, r0
 80094c8:	6019      	str	r1, [r3, #0]
 80094ca:	d1dd      	bne.n	8009488 <_free_r+0x24>
 80094cc:	6810      	ldr	r0, [r2, #0]
 80094ce:	6852      	ldr	r2, [r2, #4]
 80094d0:	605a      	str	r2, [r3, #4]
 80094d2:	4401      	add	r1, r0
 80094d4:	6019      	str	r1, [r3, #0]
 80094d6:	e7d7      	b.n	8009488 <_free_r+0x24>
 80094d8:	d902      	bls.n	80094e0 <_free_r+0x7c>
 80094da:	230c      	movs	r3, #12
 80094dc:	602b      	str	r3, [r5, #0]
 80094de:	e7d3      	b.n	8009488 <_free_r+0x24>
 80094e0:	6820      	ldr	r0, [r4, #0]
 80094e2:	1821      	adds	r1, r4, r0
 80094e4:	428a      	cmp	r2, r1
 80094e6:	bf04      	itt	eq
 80094e8:	6811      	ldreq	r1, [r2, #0]
 80094ea:	6852      	ldreq	r2, [r2, #4]
 80094ec:	6062      	str	r2, [r4, #4]
 80094ee:	bf04      	itt	eq
 80094f0:	1809      	addeq	r1, r1, r0
 80094f2:	6021      	streq	r1, [r4, #0]
 80094f4:	605c      	str	r4, [r3, #4]
 80094f6:	e7c7      	b.n	8009488 <_free_r+0x24>
 80094f8:	bd38      	pop	{r3, r4, r5, pc}
 80094fa:	bf00      	nop
 80094fc:	20004038 	.word	0x20004038

08009500 <_malloc_r>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	1ccd      	adds	r5, r1, #3
 8009504:	f025 0503 	bic.w	r5, r5, #3
 8009508:	3508      	adds	r5, #8
 800950a:	2d0c      	cmp	r5, #12
 800950c:	bf38      	it	cc
 800950e:	250c      	movcc	r5, #12
 8009510:	2d00      	cmp	r5, #0
 8009512:	4606      	mov	r6, r0
 8009514:	db01      	blt.n	800951a <_malloc_r+0x1a>
 8009516:	42a9      	cmp	r1, r5
 8009518:	d903      	bls.n	8009522 <_malloc_r+0x22>
 800951a:	230c      	movs	r3, #12
 800951c:	6033      	str	r3, [r6, #0]
 800951e:	2000      	movs	r0, #0
 8009520:	bd70      	pop	{r4, r5, r6, pc}
 8009522:	f000 fbb9 	bl	8009c98 <__malloc_lock>
 8009526:	4a21      	ldr	r2, [pc, #132]	; (80095ac <_malloc_r+0xac>)
 8009528:	6814      	ldr	r4, [r2, #0]
 800952a:	4621      	mov	r1, r4
 800952c:	b991      	cbnz	r1, 8009554 <_malloc_r+0x54>
 800952e:	4c20      	ldr	r4, [pc, #128]	; (80095b0 <_malloc_r+0xb0>)
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	b91b      	cbnz	r3, 800953c <_malloc_r+0x3c>
 8009534:	4630      	mov	r0, r6
 8009536:	f000 fb05 	bl	8009b44 <_sbrk_r>
 800953a:	6020      	str	r0, [r4, #0]
 800953c:	4629      	mov	r1, r5
 800953e:	4630      	mov	r0, r6
 8009540:	f000 fb00 	bl	8009b44 <_sbrk_r>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d124      	bne.n	8009592 <_malloc_r+0x92>
 8009548:	230c      	movs	r3, #12
 800954a:	6033      	str	r3, [r6, #0]
 800954c:	4630      	mov	r0, r6
 800954e:	f000 fba4 	bl	8009c9a <__malloc_unlock>
 8009552:	e7e4      	b.n	800951e <_malloc_r+0x1e>
 8009554:	680b      	ldr	r3, [r1, #0]
 8009556:	1b5b      	subs	r3, r3, r5
 8009558:	d418      	bmi.n	800958c <_malloc_r+0x8c>
 800955a:	2b0b      	cmp	r3, #11
 800955c:	d90f      	bls.n	800957e <_malloc_r+0x7e>
 800955e:	600b      	str	r3, [r1, #0]
 8009560:	50cd      	str	r5, [r1, r3]
 8009562:	18cc      	adds	r4, r1, r3
 8009564:	4630      	mov	r0, r6
 8009566:	f000 fb98 	bl	8009c9a <__malloc_unlock>
 800956a:	f104 000b 	add.w	r0, r4, #11
 800956e:	1d23      	adds	r3, r4, #4
 8009570:	f020 0007 	bic.w	r0, r0, #7
 8009574:	1ac3      	subs	r3, r0, r3
 8009576:	d0d3      	beq.n	8009520 <_malloc_r+0x20>
 8009578:	425a      	negs	r2, r3
 800957a:	50e2      	str	r2, [r4, r3]
 800957c:	e7d0      	b.n	8009520 <_malloc_r+0x20>
 800957e:	428c      	cmp	r4, r1
 8009580:	684b      	ldr	r3, [r1, #4]
 8009582:	bf16      	itet	ne
 8009584:	6063      	strne	r3, [r4, #4]
 8009586:	6013      	streq	r3, [r2, #0]
 8009588:	460c      	movne	r4, r1
 800958a:	e7eb      	b.n	8009564 <_malloc_r+0x64>
 800958c:	460c      	mov	r4, r1
 800958e:	6849      	ldr	r1, [r1, #4]
 8009590:	e7cc      	b.n	800952c <_malloc_r+0x2c>
 8009592:	1cc4      	adds	r4, r0, #3
 8009594:	f024 0403 	bic.w	r4, r4, #3
 8009598:	42a0      	cmp	r0, r4
 800959a:	d005      	beq.n	80095a8 <_malloc_r+0xa8>
 800959c:	1a21      	subs	r1, r4, r0
 800959e:	4630      	mov	r0, r6
 80095a0:	f000 fad0 	bl	8009b44 <_sbrk_r>
 80095a4:	3001      	adds	r0, #1
 80095a6:	d0cf      	beq.n	8009548 <_malloc_r+0x48>
 80095a8:	6025      	str	r5, [r4, #0]
 80095aa:	e7db      	b.n	8009564 <_malloc_r+0x64>
 80095ac:	20004038 	.word	0x20004038
 80095b0:	2000403c 	.word	0x2000403c

080095b4 <__sfputc_r>:
 80095b4:	6893      	ldr	r3, [r2, #8]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	b410      	push	{r4}
 80095bc:	6093      	str	r3, [r2, #8]
 80095be:	da08      	bge.n	80095d2 <__sfputc_r+0x1e>
 80095c0:	6994      	ldr	r4, [r2, #24]
 80095c2:	42a3      	cmp	r3, r4
 80095c4:	db01      	blt.n	80095ca <__sfputc_r+0x16>
 80095c6:	290a      	cmp	r1, #10
 80095c8:	d103      	bne.n	80095d2 <__sfputc_r+0x1e>
 80095ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ce:	f7ff bcab 	b.w	8008f28 <__swbuf_r>
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	1c58      	adds	r0, r3, #1
 80095d6:	6010      	str	r0, [r2, #0]
 80095d8:	7019      	strb	r1, [r3, #0]
 80095da:	4608      	mov	r0, r1
 80095dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <__sfputs_r>:
 80095e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e4:	4606      	mov	r6, r0
 80095e6:	460f      	mov	r7, r1
 80095e8:	4614      	mov	r4, r2
 80095ea:	18d5      	adds	r5, r2, r3
 80095ec:	42ac      	cmp	r4, r5
 80095ee:	d101      	bne.n	80095f4 <__sfputs_r+0x12>
 80095f0:	2000      	movs	r0, #0
 80095f2:	e007      	b.n	8009604 <__sfputs_r+0x22>
 80095f4:	463a      	mov	r2, r7
 80095f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff ffda 	bl	80095b4 <__sfputc_r>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d1f3      	bne.n	80095ec <__sfputs_r+0xa>
 8009604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009608 <_vfiprintf_r>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	b09d      	sub	sp, #116	; 0x74
 8009610:	4617      	mov	r7, r2
 8009612:	461d      	mov	r5, r3
 8009614:	4606      	mov	r6, r0
 8009616:	b118      	cbz	r0, 8009620 <_vfiprintf_r+0x18>
 8009618:	6983      	ldr	r3, [r0, #24]
 800961a:	b90b      	cbnz	r3, 8009620 <_vfiprintf_r+0x18>
 800961c:	f7ff fe34 	bl	8009288 <__sinit>
 8009620:	4b7c      	ldr	r3, [pc, #496]	; (8009814 <_vfiprintf_r+0x20c>)
 8009622:	429c      	cmp	r4, r3
 8009624:	d158      	bne.n	80096d8 <_vfiprintf_r+0xd0>
 8009626:	6874      	ldr	r4, [r6, #4]
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	0718      	lsls	r0, r3, #28
 800962c:	d55e      	bpl.n	80096ec <_vfiprintf_r+0xe4>
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d05b      	beq.n	80096ec <_vfiprintf_r+0xe4>
 8009634:	2300      	movs	r3, #0
 8009636:	9309      	str	r3, [sp, #36]	; 0x24
 8009638:	2320      	movs	r3, #32
 800963a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800963e:	2330      	movs	r3, #48	; 0x30
 8009640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009644:	9503      	str	r5, [sp, #12]
 8009646:	f04f 0b01 	mov.w	fp, #1
 800964a:	46b8      	mov	r8, r7
 800964c:	4645      	mov	r5, r8
 800964e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009652:	b10b      	cbz	r3, 8009658 <_vfiprintf_r+0x50>
 8009654:	2b25      	cmp	r3, #37	; 0x25
 8009656:	d154      	bne.n	8009702 <_vfiprintf_r+0xfa>
 8009658:	ebb8 0a07 	subs.w	sl, r8, r7
 800965c:	d00b      	beq.n	8009676 <_vfiprintf_r+0x6e>
 800965e:	4653      	mov	r3, sl
 8009660:	463a      	mov	r2, r7
 8009662:	4621      	mov	r1, r4
 8009664:	4630      	mov	r0, r6
 8009666:	f7ff ffbc 	bl	80095e2 <__sfputs_r>
 800966a:	3001      	adds	r0, #1
 800966c:	f000 80c2 	beq.w	80097f4 <_vfiprintf_r+0x1ec>
 8009670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009672:	4453      	add	r3, sl
 8009674:	9309      	str	r3, [sp, #36]	; 0x24
 8009676:	f898 3000 	ldrb.w	r3, [r8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 80ba 	beq.w	80097f4 <_vfiprintf_r+0x1ec>
 8009680:	2300      	movs	r3, #0
 8009682:	f04f 32ff 	mov.w	r2, #4294967295
 8009686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	9307      	str	r3, [sp, #28]
 800968e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009692:	931a      	str	r3, [sp, #104]	; 0x68
 8009694:	46a8      	mov	r8, r5
 8009696:	2205      	movs	r2, #5
 8009698:	f818 1b01 	ldrb.w	r1, [r8], #1
 800969c:	485e      	ldr	r0, [pc, #376]	; (8009818 <_vfiprintf_r+0x210>)
 800969e:	f7f6 fda7 	bl	80001f0 <memchr>
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	bb78      	cbnz	r0, 8009706 <_vfiprintf_r+0xfe>
 80096a6:	06d9      	lsls	r1, r3, #27
 80096a8:	bf44      	itt	mi
 80096aa:	2220      	movmi	r2, #32
 80096ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096b0:	071a      	lsls	r2, r3, #28
 80096b2:	bf44      	itt	mi
 80096b4:	222b      	movmi	r2, #43	; 0x2b
 80096b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096ba:	782a      	ldrb	r2, [r5, #0]
 80096bc:	2a2a      	cmp	r2, #42	; 0x2a
 80096be:	d02a      	beq.n	8009716 <_vfiprintf_r+0x10e>
 80096c0:	9a07      	ldr	r2, [sp, #28]
 80096c2:	46a8      	mov	r8, r5
 80096c4:	2000      	movs	r0, #0
 80096c6:	250a      	movs	r5, #10
 80096c8:	4641      	mov	r1, r8
 80096ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ce:	3b30      	subs	r3, #48	; 0x30
 80096d0:	2b09      	cmp	r3, #9
 80096d2:	d969      	bls.n	80097a8 <_vfiprintf_r+0x1a0>
 80096d4:	b360      	cbz	r0, 8009730 <_vfiprintf_r+0x128>
 80096d6:	e024      	b.n	8009722 <_vfiprintf_r+0x11a>
 80096d8:	4b50      	ldr	r3, [pc, #320]	; (800981c <_vfiprintf_r+0x214>)
 80096da:	429c      	cmp	r4, r3
 80096dc:	d101      	bne.n	80096e2 <_vfiprintf_r+0xda>
 80096de:	68b4      	ldr	r4, [r6, #8]
 80096e0:	e7a2      	b.n	8009628 <_vfiprintf_r+0x20>
 80096e2:	4b4f      	ldr	r3, [pc, #316]	; (8009820 <_vfiprintf_r+0x218>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	bf08      	it	eq
 80096e8:	68f4      	ldreq	r4, [r6, #12]
 80096ea:	e79d      	b.n	8009628 <_vfiprintf_r+0x20>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff fc6c 	bl	8008fcc <__swsetup_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d09d      	beq.n	8009634 <_vfiprintf_r+0x2c>
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	b01d      	add	sp, #116	; 0x74
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	46a8      	mov	r8, r5
 8009704:	e7a2      	b.n	800964c <_vfiprintf_r+0x44>
 8009706:	4a44      	ldr	r2, [pc, #272]	; (8009818 <_vfiprintf_r+0x210>)
 8009708:	1a80      	subs	r0, r0, r2
 800970a:	fa0b f000 	lsl.w	r0, fp, r0
 800970e:	4318      	orrs	r0, r3
 8009710:	9004      	str	r0, [sp, #16]
 8009712:	4645      	mov	r5, r8
 8009714:	e7be      	b.n	8009694 <_vfiprintf_r+0x8c>
 8009716:	9a03      	ldr	r2, [sp, #12]
 8009718:	1d11      	adds	r1, r2, #4
 800971a:	6812      	ldr	r2, [r2, #0]
 800971c:	9103      	str	r1, [sp, #12]
 800971e:	2a00      	cmp	r2, #0
 8009720:	db01      	blt.n	8009726 <_vfiprintf_r+0x11e>
 8009722:	9207      	str	r2, [sp, #28]
 8009724:	e004      	b.n	8009730 <_vfiprintf_r+0x128>
 8009726:	4252      	negs	r2, r2
 8009728:	f043 0302 	orr.w	r3, r3, #2
 800972c:	9207      	str	r2, [sp, #28]
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	f898 3000 	ldrb.w	r3, [r8]
 8009734:	2b2e      	cmp	r3, #46	; 0x2e
 8009736:	d10e      	bne.n	8009756 <_vfiprintf_r+0x14e>
 8009738:	f898 3001 	ldrb.w	r3, [r8, #1]
 800973c:	2b2a      	cmp	r3, #42	; 0x2a
 800973e:	d138      	bne.n	80097b2 <_vfiprintf_r+0x1aa>
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	1d1a      	adds	r2, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	9203      	str	r2, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfb8      	it	lt
 800974c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009750:	f108 0802 	add.w	r8, r8, #2
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	4d33      	ldr	r5, [pc, #204]	; (8009824 <_vfiprintf_r+0x21c>)
 8009758:	f898 1000 	ldrb.w	r1, [r8]
 800975c:	2203      	movs	r2, #3
 800975e:	4628      	mov	r0, r5
 8009760:	f7f6 fd46 	bl	80001f0 <memchr>
 8009764:	b140      	cbz	r0, 8009778 <_vfiprintf_r+0x170>
 8009766:	2340      	movs	r3, #64	; 0x40
 8009768:	1b40      	subs	r0, r0, r5
 800976a:	fa03 f000 	lsl.w	r0, r3, r0
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	4303      	orrs	r3, r0
 8009772:	f108 0801 	add.w	r8, r8, #1
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	f898 1000 	ldrb.w	r1, [r8]
 800977c:	482a      	ldr	r0, [pc, #168]	; (8009828 <_vfiprintf_r+0x220>)
 800977e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009782:	2206      	movs	r2, #6
 8009784:	f108 0701 	add.w	r7, r8, #1
 8009788:	f7f6 fd32 	bl	80001f0 <memchr>
 800978c:	2800      	cmp	r0, #0
 800978e:	d037      	beq.n	8009800 <_vfiprintf_r+0x1f8>
 8009790:	4b26      	ldr	r3, [pc, #152]	; (800982c <_vfiprintf_r+0x224>)
 8009792:	bb1b      	cbnz	r3, 80097dc <_vfiprintf_r+0x1d4>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	3307      	adds	r3, #7
 8009798:	f023 0307 	bic.w	r3, r3, #7
 800979c:	3308      	adds	r3, #8
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	444b      	add	r3, r9
 80097a4:	9309      	str	r3, [sp, #36]	; 0x24
 80097a6:	e750      	b.n	800964a <_vfiprintf_r+0x42>
 80097a8:	fb05 3202 	mla	r2, r5, r2, r3
 80097ac:	2001      	movs	r0, #1
 80097ae:	4688      	mov	r8, r1
 80097b0:	e78a      	b.n	80096c8 <_vfiprintf_r+0xc0>
 80097b2:	2300      	movs	r3, #0
 80097b4:	f108 0801 	add.w	r8, r8, #1
 80097b8:	9305      	str	r3, [sp, #20]
 80097ba:	4619      	mov	r1, r3
 80097bc:	250a      	movs	r5, #10
 80097be:	4640      	mov	r0, r8
 80097c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c4:	3a30      	subs	r2, #48	; 0x30
 80097c6:	2a09      	cmp	r2, #9
 80097c8:	d903      	bls.n	80097d2 <_vfiprintf_r+0x1ca>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0c3      	beq.n	8009756 <_vfiprintf_r+0x14e>
 80097ce:	9105      	str	r1, [sp, #20]
 80097d0:	e7c1      	b.n	8009756 <_vfiprintf_r+0x14e>
 80097d2:	fb05 2101 	mla	r1, r5, r1, r2
 80097d6:	2301      	movs	r3, #1
 80097d8:	4680      	mov	r8, r0
 80097da:	e7f0      	b.n	80097be <_vfiprintf_r+0x1b6>
 80097dc:	ab03      	add	r3, sp, #12
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	4622      	mov	r2, r4
 80097e2:	4b13      	ldr	r3, [pc, #76]	; (8009830 <_vfiprintf_r+0x228>)
 80097e4:	a904      	add	r1, sp, #16
 80097e6:	4630      	mov	r0, r6
 80097e8:	f3af 8000 	nop.w
 80097ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80097f0:	4681      	mov	r9, r0
 80097f2:	d1d5      	bne.n	80097a0 <_vfiprintf_r+0x198>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	065b      	lsls	r3, r3, #25
 80097f8:	f53f af7e 	bmi.w	80096f8 <_vfiprintf_r+0xf0>
 80097fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fe:	e77d      	b.n	80096fc <_vfiprintf_r+0xf4>
 8009800:	ab03      	add	r3, sp, #12
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	4622      	mov	r2, r4
 8009806:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <_vfiprintf_r+0x228>)
 8009808:	a904      	add	r1, sp, #16
 800980a:	4630      	mov	r0, r6
 800980c:	f000 f888 	bl	8009920 <_printf_i>
 8009810:	e7ec      	b.n	80097ec <_vfiprintf_r+0x1e4>
 8009812:	bf00      	nop
 8009814:	0800a0cc 	.word	0x0800a0cc
 8009818:	0800a10c 	.word	0x0800a10c
 800981c:	0800a0ec 	.word	0x0800a0ec
 8009820:	0800a0ac 	.word	0x0800a0ac
 8009824:	0800a112 	.word	0x0800a112
 8009828:	0800a116 	.word	0x0800a116
 800982c:	00000000 	.word	0x00000000
 8009830:	080095e3 	.word	0x080095e3

08009834 <_printf_common>:
 8009834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009838:	4691      	mov	r9, r2
 800983a:	461f      	mov	r7, r3
 800983c:	688a      	ldr	r2, [r1, #8]
 800983e:	690b      	ldr	r3, [r1, #16]
 8009840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009844:	4293      	cmp	r3, r2
 8009846:	bfb8      	it	lt
 8009848:	4613      	movlt	r3, r2
 800984a:	f8c9 3000 	str.w	r3, [r9]
 800984e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009852:	4606      	mov	r6, r0
 8009854:	460c      	mov	r4, r1
 8009856:	b112      	cbz	r2, 800985e <_printf_common+0x2a>
 8009858:	3301      	adds	r3, #1
 800985a:	f8c9 3000 	str.w	r3, [r9]
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	0699      	lsls	r1, r3, #26
 8009862:	bf42      	ittt	mi
 8009864:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009868:	3302      	addmi	r3, #2
 800986a:	f8c9 3000 	strmi.w	r3, [r9]
 800986e:	6825      	ldr	r5, [r4, #0]
 8009870:	f015 0506 	ands.w	r5, r5, #6
 8009874:	d107      	bne.n	8009886 <_printf_common+0x52>
 8009876:	f104 0a19 	add.w	sl, r4, #25
 800987a:	68e3      	ldr	r3, [r4, #12]
 800987c:	f8d9 2000 	ldr.w	r2, [r9]
 8009880:	1a9b      	subs	r3, r3, r2
 8009882:	42ab      	cmp	r3, r5
 8009884:	dc28      	bgt.n	80098d8 <_printf_common+0xa4>
 8009886:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800988a:	6822      	ldr	r2, [r4, #0]
 800988c:	3300      	adds	r3, #0
 800988e:	bf18      	it	ne
 8009890:	2301      	movne	r3, #1
 8009892:	0692      	lsls	r2, r2, #26
 8009894:	d42d      	bmi.n	80098f2 <_printf_common+0xbe>
 8009896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800989a:	4639      	mov	r1, r7
 800989c:	4630      	mov	r0, r6
 800989e:	47c0      	blx	r8
 80098a0:	3001      	adds	r0, #1
 80098a2:	d020      	beq.n	80098e6 <_printf_common+0xb2>
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	68e5      	ldr	r5, [r4, #12]
 80098a8:	f8d9 2000 	ldr.w	r2, [r9]
 80098ac:	f003 0306 	and.w	r3, r3, #6
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	bf08      	it	eq
 80098b4:	1aad      	subeq	r5, r5, r2
 80098b6:	68a3      	ldr	r3, [r4, #8]
 80098b8:	6922      	ldr	r2, [r4, #16]
 80098ba:	bf0c      	ite	eq
 80098bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098c0:	2500      	movne	r5, #0
 80098c2:	4293      	cmp	r3, r2
 80098c4:	bfc4      	itt	gt
 80098c6:	1a9b      	subgt	r3, r3, r2
 80098c8:	18ed      	addgt	r5, r5, r3
 80098ca:	f04f 0900 	mov.w	r9, #0
 80098ce:	341a      	adds	r4, #26
 80098d0:	454d      	cmp	r5, r9
 80098d2:	d11a      	bne.n	800990a <_printf_common+0xd6>
 80098d4:	2000      	movs	r0, #0
 80098d6:	e008      	b.n	80098ea <_printf_common+0xb6>
 80098d8:	2301      	movs	r3, #1
 80098da:	4652      	mov	r2, sl
 80098dc:	4639      	mov	r1, r7
 80098de:	4630      	mov	r0, r6
 80098e0:	47c0      	blx	r8
 80098e2:	3001      	adds	r0, #1
 80098e4:	d103      	bne.n	80098ee <_printf_common+0xba>
 80098e6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ee:	3501      	adds	r5, #1
 80098f0:	e7c3      	b.n	800987a <_printf_common+0x46>
 80098f2:	18e1      	adds	r1, r4, r3
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	2030      	movs	r0, #48	; 0x30
 80098f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098fc:	4422      	add	r2, r4
 80098fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009902:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009906:	3302      	adds	r3, #2
 8009908:	e7c5      	b.n	8009896 <_printf_common+0x62>
 800990a:	2301      	movs	r3, #1
 800990c:	4622      	mov	r2, r4
 800990e:	4639      	mov	r1, r7
 8009910:	4630      	mov	r0, r6
 8009912:	47c0      	blx	r8
 8009914:	3001      	adds	r0, #1
 8009916:	d0e6      	beq.n	80098e6 <_printf_common+0xb2>
 8009918:	f109 0901 	add.w	r9, r9, #1
 800991c:	e7d8      	b.n	80098d0 <_printf_common+0x9c>
	...

08009920 <_printf_i>:
 8009920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009924:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009928:	460c      	mov	r4, r1
 800992a:	7e09      	ldrb	r1, [r1, #24]
 800992c:	b085      	sub	sp, #20
 800992e:	296e      	cmp	r1, #110	; 0x6e
 8009930:	4617      	mov	r7, r2
 8009932:	4606      	mov	r6, r0
 8009934:	4698      	mov	r8, r3
 8009936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009938:	f000 80b3 	beq.w	8009aa2 <_printf_i+0x182>
 800993c:	d822      	bhi.n	8009984 <_printf_i+0x64>
 800993e:	2963      	cmp	r1, #99	; 0x63
 8009940:	d036      	beq.n	80099b0 <_printf_i+0x90>
 8009942:	d80a      	bhi.n	800995a <_printf_i+0x3a>
 8009944:	2900      	cmp	r1, #0
 8009946:	f000 80b9 	beq.w	8009abc <_printf_i+0x19c>
 800994a:	2958      	cmp	r1, #88	; 0x58
 800994c:	f000 8083 	beq.w	8009a56 <_printf_i+0x136>
 8009950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009954:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009958:	e032      	b.n	80099c0 <_printf_i+0xa0>
 800995a:	2964      	cmp	r1, #100	; 0x64
 800995c:	d001      	beq.n	8009962 <_printf_i+0x42>
 800995e:	2969      	cmp	r1, #105	; 0x69
 8009960:	d1f6      	bne.n	8009950 <_printf_i+0x30>
 8009962:	6820      	ldr	r0, [r4, #0]
 8009964:	6813      	ldr	r3, [r2, #0]
 8009966:	0605      	lsls	r5, r0, #24
 8009968:	f103 0104 	add.w	r1, r3, #4
 800996c:	d52a      	bpl.n	80099c4 <_printf_i+0xa4>
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6011      	str	r1, [r2, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	da03      	bge.n	800997e <_printf_i+0x5e>
 8009976:	222d      	movs	r2, #45	; 0x2d
 8009978:	425b      	negs	r3, r3
 800997a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800997e:	486f      	ldr	r0, [pc, #444]	; (8009b3c <_printf_i+0x21c>)
 8009980:	220a      	movs	r2, #10
 8009982:	e039      	b.n	80099f8 <_printf_i+0xd8>
 8009984:	2973      	cmp	r1, #115	; 0x73
 8009986:	f000 809d 	beq.w	8009ac4 <_printf_i+0x1a4>
 800998a:	d808      	bhi.n	800999e <_printf_i+0x7e>
 800998c:	296f      	cmp	r1, #111	; 0x6f
 800998e:	d020      	beq.n	80099d2 <_printf_i+0xb2>
 8009990:	2970      	cmp	r1, #112	; 0x70
 8009992:	d1dd      	bne.n	8009950 <_printf_i+0x30>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	f043 0320 	orr.w	r3, r3, #32
 800999a:	6023      	str	r3, [r4, #0]
 800999c:	e003      	b.n	80099a6 <_printf_i+0x86>
 800999e:	2975      	cmp	r1, #117	; 0x75
 80099a0:	d017      	beq.n	80099d2 <_printf_i+0xb2>
 80099a2:	2978      	cmp	r1, #120	; 0x78
 80099a4:	d1d4      	bne.n	8009950 <_printf_i+0x30>
 80099a6:	2378      	movs	r3, #120	; 0x78
 80099a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099ac:	4864      	ldr	r0, [pc, #400]	; (8009b40 <_printf_i+0x220>)
 80099ae:	e055      	b.n	8009a5c <_printf_i+0x13c>
 80099b0:	6813      	ldr	r3, [r2, #0]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6011      	str	r1, [r2, #0]
 80099b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099c0:	2301      	movs	r3, #1
 80099c2:	e08c      	b.n	8009ade <_printf_i+0x1be>
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6011      	str	r1, [r2, #0]
 80099c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099cc:	bf18      	it	ne
 80099ce:	b21b      	sxthne	r3, r3
 80099d0:	e7cf      	b.n	8009972 <_printf_i+0x52>
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	6825      	ldr	r5, [r4, #0]
 80099d6:	1d18      	adds	r0, r3, #4
 80099d8:	6010      	str	r0, [r2, #0]
 80099da:	0628      	lsls	r0, r5, #24
 80099dc:	d501      	bpl.n	80099e2 <_printf_i+0xc2>
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	e002      	b.n	80099e8 <_printf_i+0xc8>
 80099e2:	0668      	lsls	r0, r5, #25
 80099e4:	d5fb      	bpl.n	80099de <_printf_i+0xbe>
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	4854      	ldr	r0, [pc, #336]	; (8009b3c <_printf_i+0x21c>)
 80099ea:	296f      	cmp	r1, #111	; 0x6f
 80099ec:	bf14      	ite	ne
 80099ee:	220a      	movne	r2, #10
 80099f0:	2208      	moveq	r2, #8
 80099f2:	2100      	movs	r1, #0
 80099f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099f8:	6865      	ldr	r5, [r4, #4]
 80099fa:	60a5      	str	r5, [r4, #8]
 80099fc:	2d00      	cmp	r5, #0
 80099fe:	f2c0 8095 	blt.w	8009b2c <_printf_i+0x20c>
 8009a02:	6821      	ldr	r1, [r4, #0]
 8009a04:	f021 0104 	bic.w	r1, r1, #4
 8009a08:	6021      	str	r1, [r4, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d13d      	bne.n	8009a8a <_printf_i+0x16a>
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	f040 808e 	bne.w	8009b30 <_printf_i+0x210>
 8009a14:	4665      	mov	r5, ip
 8009a16:	2a08      	cmp	r2, #8
 8009a18:	d10b      	bne.n	8009a32 <_printf_i+0x112>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	07db      	lsls	r3, r3, #31
 8009a1e:	d508      	bpl.n	8009a32 <_printf_i+0x112>
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	6862      	ldr	r2, [r4, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	bfde      	ittt	le
 8009a28:	2330      	movle	r3, #48	; 0x30
 8009a2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a32:	ebac 0305 	sub.w	r3, ip, r5
 8009a36:	6123      	str	r3, [r4, #16]
 8009a38:	f8cd 8000 	str.w	r8, [sp]
 8009a3c:	463b      	mov	r3, r7
 8009a3e:	aa03      	add	r2, sp, #12
 8009a40:	4621      	mov	r1, r4
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff fef6 	bl	8009834 <_printf_common>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d14d      	bne.n	8009ae8 <_printf_i+0x1c8>
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	b005      	add	sp, #20
 8009a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a56:	4839      	ldr	r0, [pc, #228]	; (8009b3c <_printf_i+0x21c>)
 8009a58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009a5c:	6813      	ldr	r3, [r2, #0]
 8009a5e:	6821      	ldr	r1, [r4, #0]
 8009a60:	1d1d      	adds	r5, r3, #4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6015      	str	r5, [r2, #0]
 8009a66:	060a      	lsls	r2, r1, #24
 8009a68:	d50b      	bpl.n	8009a82 <_printf_i+0x162>
 8009a6a:	07ca      	lsls	r2, r1, #31
 8009a6c:	bf44      	itt	mi
 8009a6e:	f041 0120 	orrmi.w	r1, r1, #32
 8009a72:	6021      	strmi	r1, [r4, #0]
 8009a74:	b91b      	cbnz	r3, 8009a7e <_printf_i+0x15e>
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	f022 0220 	bic.w	r2, r2, #32
 8009a7c:	6022      	str	r2, [r4, #0]
 8009a7e:	2210      	movs	r2, #16
 8009a80:	e7b7      	b.n	80099f2 <_printf_i+0xd2>
 8009a82:	064d      	lsls	r5, r1, #25
 8009a84:	bf48      	it	mi
 8009a86:	b29b      	uxthmi	r3, r3
 8009a88:	e7ef      	b.n	8009a6a <_printf_i+0x14a>
 8009a8a:	4665      	mov	r5, ip
 8009a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a90:	fb02 3311 	mls	r3, r2, r1, r3
 8009a94:	5cc3      	ldrb	r3, [r0, r3]
 8009a96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d1f5      	bne.n	8009a8c <_printf_i+0x16c>
 8009aa0:	e7b9      	b.n	8009a16 <_printf_i+0xf6>
 8009aa2:	6813      	ldr	r3, [r2, #0]
 8009aa4:	6825      	ldr	r5, [r4, #0]
 8009aa6:	6961      	ldr	r1, [r4, #20]
 8009aa8:	1d18      	adds	r0, r3, #4
 8009aaa:	6010      	str	r0, [r2, #0]
 8009aac:	0628      	lsls	r0, r5, #24
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	d501      	bpl.n	8009ab6 <_printf_i+0x196>
 8009ab2:	6019      	str	r1, [r3, #0]
 8009ab4:	e002      	b.n	8009abc <_printf_i+0x19c>
 8009ab6:	066a      	lsls	r2, r5, #25
 8009ab8:	d5fb      	bpl.n	8009ab2 <_printf_i+0x192>
 8009aba:	8019      	strh	r1, [r3, #0]
 8009abc:	2300      	movs	r3, #0
 8009abe:	6123      	str	r3, [r4, #16]
 8009ac0:	4665      	mov	r5, ip
 8009ac2:	e7b9      	b.n	8009a38 <_printf_i+0x118>
 8009ac4:	6813      	ldr	r3, [r2, #0]
 8009ac6:	1d19      	adds	r1, r3, #4
 8009ac8:	6011      	str	r1, [r2, #0]
 8009aca:	681d      	ldr	r5, [r3, #0]
 8009acc:	6862      	ldr	r2, [r4, #4]
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f7f6 fb8d 	bl	80001f0 <memchr>
 8009ad6:	b108      	cbz	r0, 8009adc <_printf_i+0x1bc>
 8009ad8:	1b40      	subs	r0, r0, r5
 8009ada:	6060      	str	r0, [r4, #4]
 8009adc:	6863      	ldr	r3, [r4, #4]
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae6:	e7a7      	b.n	8009a38 <_printf_i+0x118>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	462a      	mov	r2, r5
 8009aec:	4639      	mov	r1, r7
 8009aee:	4630      	mov	r0, r6
 8009af0:	47c0      	blx	r8
 8009af2:	3001      	adds	r0, #1
 8009af4:	d0aa      	beq.n	8009a4c <_printf_i+0x12c>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	079b      	lsls	r3, r3, #30
 8009afa:	d413      	bmi.n	8009b24 <_printf_i+0x204>
 8009afc:	68e0      	ldr	r0, [r4, #12]
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	4298      	cmp	r0, r3
 8009b02:	bfb8      	it	lt
 8009b04:	4618      	movlt	r0, r3
 8009b06:	e7a3      	b.n	8009a50 <_printf_i+0x130>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	464a      	mov	r2, r9
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	4630      	mov	r0, r6
 8009b10:	47c0      	blx	r8
 8009b12:	3001      	adds	r0, #1
 8009b14:	d09a      	beq.n	8009a4c <_printf_i+0x12c>
 8009b16:	3501      	adds	r5, #1
 8009b18:	68e3      	ldr	r3, [r4, #12]
 8009b1a:	9a03      	ldr	r2, [sp, #12]
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	42ab      	cmp	r3, r5
 8009b20:	dcf2      	bgt.n	8009b08 <_printf_i+0x1e8>
 8009b22:	e7eb      	b.n	8009afc <_printf_i+0x1dc>
 8009b24:	2500      	movs	r5, #0
 8009b26:	f104 0919 	add.w	r9, r4, #25
 8009b2a:	e7f5      	b.n	8009b18 <_printf_i+0x1f8>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1ac      	bne.n	8009a8a <_printf_i+0x16a>
 8009b30:	7803      	ldrb	r3, [r0, #0]
 8009b32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b3a:	e76c      	b.n	8009a16 <_printf_i+0xf6>
 8009b3c:	0800a11d 	.word	0x0800a11d
 8009b40:	0800a12e 	.word	0x0800a12e

08009b44 <_sbrk_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4c06      	ldr	r4, [pc, #24]	; (8009b60 <_sbrk_r+0x1c>)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	f7f7 fdc4 	bl	80016dc <_sbrk>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_sbrk_r+0x1a>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_sbrk_r+0x1a>
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	200045f8 	.word	0x200045f8

08009b64 <__sread>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	460c      	mov	r4, r1
 8009b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6c:	f000 f896 	bl	8009c9c <_read_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	bfab      	itete	ge
 8009b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b76:	89a3      	ldrhlt	r3, [r4, #12]
 8009b78:	181b      	addge	r3, r3, r0
 8009b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b7e:	bfac      	ite	ge
 8009b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b82:	81a3      	strhlt	r3, [r4, #12]
 8009b84:	bd10      	pop	{r4, pc}

08009b86 <__swrite>:
 8009b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8a:	461f      	mov	r7, r3
 8009b8c:	898b      	ldrh	r3, [r1, #12]
 8009b8e:	05db      	lsls	r3, r3, #23
 8009b90:	4605      	mov	r5, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	4616      	mov	r6, r2
 8009b96:	d505      	bpl.n	8009ba4 <__swrite+0x1e>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba0:	f000 f868 	bl	8009c74 <_lseek_r>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bba:	f000 b817 	b.w	8009bec <_write_r>

08009bbe <__sseek>:
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc6:	f000 f855 	bl	8009c74 <_lseek_r>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	bf15      	itete	ne
 8009bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bda:	81a3      	strheq	r3, [r4, #12]
 8009bdc:	bf18      	it	ne
 8009bde:	81a3      	strhne	r3, [r4, #12]
 8009be0:	bd10      	pop	{r4, pc}

08009be2 <__sclose>:
 8009be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be6:	f000 b813 	b.w	8009c10 <_close_r>
	...

08009bec <_write_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4c07      	ldr	r4, [pc, #28]	; (8009c0c <_write_r+0x20>)
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	6022      	str	r2, [r4, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f7f7 fd1d 	bl	800163a <_write>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d102      	bne.n	8009c0a <_write_r+0x1e>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	b103      	cbz	r3, 8009c0a <_write_r+0x1e>
 8009c08:	602b      	str	r3, [r5, #0]
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	200045f8 	.word	0x200045f8

08009c10 <_close_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4c06      	ldr	r4, [pc, #24]	; (8009c2c <_close_r+0x1c>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4605      	mov	r5, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	6023      	str	r3, [r4, #0]
 8009c1c:	f7f7 fd29 	bl	8001672 <_close>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_close_r+0x1a>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_close_r+0x1a>
 8009c28:	602b      	str	r3, [r5, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	200045f8 	.word	0x200045f8

08009c30 <_fstat_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4c07      	ldr	r4, [pc, #28]	; (8009c50 <_fstat_r+0x20>)
 8009c34:	2300      	movs	r3, #0
 8009c36:	4605      	mov	r5, r0
 8009c38:	4608      	mov	r0, r1
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	f7f7 fd24 	bl	800168a <_fstat>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d102      	bne.n	8009c4c <_fstat_r+0x1c>
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	b103      	cbz	r3, 8009c4c <_fstat_r+0x1c>
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	bd38      	pop	{r3, r4, r5, pc}
 8009c4e:	bf00      	nop
 8009c50:	200045f8 	.word	0x200045f8

08009c54 <_isatty_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4c06      	ldr	r4, [pc, #24]	; (8009c70 <_isatty_r+0x1c>)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	f7f7 fd23 	bl	80016aa <_isatty>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_isatty_r+0x1a>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_isatty_r+0x1a>
 8009c6c:	602b      	str	r3, [r5, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	200045f8 	.word	0x200045f8

08009c74 <_lseek_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4c07      	ldr	r4, [pc, #28]	; (8009c94 <_lseek_r+0x20>)
 8009c78:	4605      	mov	r5, r0
 8009c7a:	4608      	mov	r0, r1
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	6022      	str	r2, [r4, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	f7f7 fd1c 	bl	80016c0 <_lseek>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_lseek_r+0x1e>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_lseek_r+0x1e>
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	200045f8 	.word	0x200045f8

08009c98 <__malloc_lock>:
 8009c98:	4770      	bx	lr

08009c9a <__malloc_unlock>:
 8009c9a:	4770      	bx	lr

08009c9c <_read_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4c07      	ldr	r4, [pc, #28]	; (8009cbc <_read_r+0x20>)
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	4608      	mov	r0, r1
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	6022      	str	r2, [r4, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	f7f7 fca8 	bl	8001600 <_read>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_read_r+0x1e>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_read_r+0x1e>
 8009cb8:	602b      	str	r3, [r5, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	200045f8 	.word	0x200045f8

08009cc0 <_init>:
 8009cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc2:	bf00      	nop
 8009cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc6:	bc08      	pop	{r3}
 8009cc8:	469e      	mov	lr, r3
 8009cca:	4770      	bx	lr

08009ccc <_fini>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	bf00      	nop
 8009cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd2:	bc08      	pop	{r3}
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	4770      	bx	lr
