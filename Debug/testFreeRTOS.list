
testFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a288  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c4  0800a9c4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9c4  0800a9c4  0001a9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9cc  0800a9cc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9cc  0800a9cc  0001a9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9d0  0800a9d0  0001a9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a9d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048b8  20000094  0800aa68  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000494c  0800aa68  0002494c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000296ff  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005807  00000000  00000000  000497c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020a0  00000000  00000000  0004efd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001df8  00000000  00000000  00051070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ba13  00000000  00000000  00052e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e8f9  00000000  00000000  0007e87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f09bc  00000000  00000000  0009d174  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018db30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ec8  00000000  00000000  0018dbac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a420 	.word	0x0800a420

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800a420 	.word	0x0800a420

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <uart_read>:
/******************************************
 * UART READ
 *
 ******************************************/

char uart_read() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
//	while(HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF) == HAL_TIMEOUT)
//	{
//		printf("HAL_UART_Receive timeout. This should not cause any issue.\r\n");
//	}

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	2201      	movs	r2, #1
 800059a:	4619      	mov	r1, r3
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <uart_read+0x1c>)
 800059e:	f005 fd4b 	bl	8006038 <HAL_UART_Receive_IT>

	return c;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20004640 	.word	0x20004640

080005b0 <uart_write>:
/******************************************
 * UART WRITE
 *
 ******************************************/

int uart_write(char * s, uint16_t size) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 80005bc:	887a      	ldrh	r2, [r7, #2]
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <uart_write+0x24>)
 80005c6:	f005 fc9e 	bl	8005f06 <HAL_UART_Transmit>
	return size;
 80005ca:	887b      	ldrh	r3, [r7, #2]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20004640 	.word	0x20004640

080005d8 <sh_help>:
/******************************************
 * SHELL HELP
 *
 ******************************************/

int sh_help(int argc, char ** argv) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
    int i;
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e019      	b.n	800061c <sh_help+0x44>
        printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80005e8:	4911      	ldr	r1, [pc, #68]	; (8000630 <sh_help+0x58>)
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	440b      	add	r3, r1
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <sh_help+0x58>)
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4613      	mov	r3, r2
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	4413      	add	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	3308      	adds	r3, #8
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4601      	mov	r1, r0
 8000610:	4808      	ldr	r0, [pc, #32]	; (8000634 <sh_help+0x5c>)
 8000612:	f008 ffbd 	bl	8009590 <iprintf>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3301      	adds	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <sh_help+0x60>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	429a      	cmp	r2, r3
 8000624:	dbe0      	blt.n	80005e8 <sh_help+0x10>
    }

    return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20004064 	.word	0x20004064
 8000634:	0800a438 	.word	0x0800a438
 8000638:	200000b0 	.word	0x200000b0

0800063c <shell_init>:
/******************************************
 * SHELL INIT
 *
 ******************************************/

void shell_init() {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <shell_init+0x38>)
 8000644:	f009 f818 	bl	8009678 <puts>

	shell_add('h', sh_help, help);
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <shell_init+0x3c>)
 800064a:	490c      	ldr	r1, [pc, #48]	; (800067c <shell_init+0x40>)
 800064c:	2068      	movs	r0, #104	; 0x68
 800064e:	f000 f817 	bl	8000680 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e005      	b.n	8000664 <shell_init+0x28>

		HAL_Delay(200);
 8000658:	20c8      	movs	r0, #200	; 0xc8
 800065a:	f001 fc49 	bl	8001ef0 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b02      	cmp	r3, #2
 8000668:	ddf6      	ble.n	8000658 <shell_init+0x1c>
	}
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	0800a440 	.word	0x0800a440
 8000678:	20000000 	.word	0x20000000
 800067c:	080005d9 	.word	0x080005d9

08000680 <shell_add>:
/******************************************
 * SHELL ADD
 *
 ******************************************/

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	73fb      	strb	r3, [r7, #15]
    if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <shell_add+0x74>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b3f      	cmp	r3, #63	; 0x3f
 8000694:	dc26      	bgt.n	80006e4 <shell_add+0x64>
        shell_func_list[shell_func_list_size].c = c;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <shell_add+0x74>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4917      	ldr	r1, [pc, #92]	; (80006f8 <shell_add+0x78>)
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	440b      	add	r3, r1
 80006a6:	7bfa      	ldrb	r2, [r7, #15]
 80006a8:	701a      	strb	r2, [r3, #0]
        shell_func_list[shell_func_list_size].func = pfunc;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <shell_add+0x74>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4912      	ldr	r1, [pc, #72]	; (80006f8 <shell_add+0x78>)
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	3304      	adds	r3, #4
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	601a      	str	r2, [r3, #0]
        shell_func_list[shell_func_list_size].description = description;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <shell_add+0x74>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <shell_add+0x78>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	3308      	adds	r3, #8
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
        shell_func_list_size++;
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <shell_add+0x74>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <shell_add+0x74>)
 80006de:	6013      	str	r3, [r2, #0]
        return 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	e001      	b.n	80006e8 <shell_add+0x68>
    }

    return -1;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	200000b0 	.word	0x200000b0
 80006f8:	20004064 	.word	0x20004064

080006fc <shell_exec>:
 * SHELL EXE
 *
 ******************************************/

int shell_exec(char c, char * buf)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]

    int argc;
    char * argv[ARGC_MAX];
    char *p;

    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	637b      	str	r3, [r7, #52]	; 0x34
 800070c:	e040      	b.n	8000790 <shell_exec+0x94>
        if (shell_func_list[i].c == c) {
 800070e:	4928      	ldr	r1, [pc, #160]	; (80007b0 <shell_exec+0xb4>)
 8000710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	429a      	cmp	r2, r3
 8000722:	d132      	bne.n	800078a <shell_exec+0x8e>
            argc = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
            argv[0] = buf;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	60fb      	str	r3, [r7, #12]

            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000730:	e014      	b.n	800075c <shell_exec+0x60>
                if(*p == ' ') {
 8000732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b20      	cmp	r3, #32
 8000738:	d10d      	bne.n	8000756 <shell_exec+0x5a>
                    *p = '\0';
 800073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
                    argv[argc++] = p+1;
 8000740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	633a      	str	r2, [r7, #48]	; 0x30
 8000746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000748:	3201      	adds	r2, #1
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000750:	440b      	add	r3, r1
 8000752:	f843 2c2c 	str.w	r2, [r3, #-44]
            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000758:	3301      	adds	r3, #1
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <shell_exec+0x6e>
 8000764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000766:	2b07      	cmp	r3, #7
 8000768:	dde3      	ble.n	8000732 <shell_exec+0x36>
                }
            }

            return shell_func_list[i].func(argc, argv);
 800076a:	4911      	ldr	r1, [pc, #68]	; (80007b0 <shell_exec+0xb4>)
 800076c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800076e:	4613      	mov	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4413      	add	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	440b      	add	r3, r1
 8000778:	3304      	adds	r3, #4
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f107 020c 	add.w	r2, r7, #12
 8000780:	4611      	mov	r1, r2
 8000782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000784:	4798      	blx	r3
 8000786:	4603      	mov	r3, r0
 8000788:	e00e      	b.n	80007a8 <shell_exec+0xac>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 800078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078c:	3301      	adds	r3, #1
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <shell_exec+0xb8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000796:	429a      	cmp	r2, r3
 8000798:	dbb9      	blt.n	800070e <shell_exec+0x12>
        }
    }
    printf("%c: no such command\r\n", c);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <shell_exec+0xbc>)
 80007a0:	f008 fef6 	bl	8009590 <iprintf>
    return -1;
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3738      	adds	r7, #56	; 0x38
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20004064 	.word	0x20004064
 80007b4:	200000b0 	.word	0x200000b0
 80007b8:	0800a468 	.word	0x0800a468

080007bc <shell_run>:

/******************************************
 * SHELL RUN
 *
 ******************************************/
int shell_run(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
	int reading = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]

	while (1)
	{
		  uart_write(prompt, 2);
 80007ca:	2102      	movs	r1, #2
 80007cc:	4826      	ldr	r0, [pc, #152]	; (8000868 <shell_run+0xac>)
 80007ce:	f7ff feef 	bl	80005b0 <uart_write>
		  reading = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]

		  while(reading){
 80007d6:	e03c      	b.n	8000852 <shell_run+0x96>
			  xSemaphoreTake(MonSemUART, portMAX_DELAY);
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <shell_run+0xb0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	4618      	mov	r0, r3
 80007e2:	f007 f99b 	bl	8007b1c <xQueueSemaphoreTake>
			  char c = uart_read();
 80007e6:	f7ff fed3 	bl	8000590 <uart_read>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]

			  switch (c) {
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d013      	beq.n	800081c <shell_run+0x60>
 80007f4:	2b0d      	cmp	r3, #13
 80007f6:	d11c      	bne.n	8000832 <shell_run+0x76>
				  //process RETURN key
				  case '\r':
					  //case '\n':
					  printf("\r\n");    //finish line
 80007f8:	481d      	ldr	r0, [pc, #116]	; (8000870 <shell_run+0xb4>)
 80007fa:	f008 ff3d 	bl	8009678 <puts>
					  buf[pos++] = 0;     //to use cprintf...
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	60ba      	str	r2, [r7, #8]
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <shell_run+0xb8>)
 8000806:	2100      	movs	r1, #0
 8000808:	54d1      	strb	r1, [r2, r3]
					  printf(":%s\r\n", buf);
 800080a:	491a      	ldr	r1, [pc, #104]	; (8000874 <shell_run+0xb8>)
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <shell_run+0xbc>)
 800080e:	f008 febf 	bl	8009590 <iprintf>
					  reading = 0;        //exit read loop
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
					  pos = 0;            //reset buffer
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
					  break;
 800081a:	e01a      	b.n	8000852 <shell_run+0x96>
					  //backspace
				  case '\b':
					  if (pos > 0) {      //is there a char to delete?
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd16      	ble.n	8000850 <shell_run+0x94>
						  pos--;          //remove it in buffer
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3b01      	subs	r3, #1
 8000826:	60bb      	str	r3, [r7, #8]

						  uart_write(backspace, 3);
 8000828:	2103      	movs	r1, #3
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <shell_run+0xc0>)
 800082c:	f7ff fec0 	bl	80005b0 <uart_write>
					  }
					  break;
 8000830:	e00e      	b.n	8000850 <shell_run+0x94>
					  //other characters
				  default:
					  //only store characters if buffer has space
					  if (pos < sizeof(buf)) {
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b27      	cmp	r3, #39	; 0x27
 8000836:	d80c      	bhi.n	8000852 <shell_run+0x96>
						  uart_write(&c, 1);
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff feb7 	bl	80005b0 <uart_write>
						  buf[pos++] = c; //store
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	60ba      	str	r2, [r7, #8]
 8000848:	79f9      	ldrb	r1, [r7, #7]
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <shell_run+0xb8>)
 800084c:	54d1      	strb	r1, [r2, r3]
 800084e:	e000      	b.n	8000852 <shell_run+0x96>
					  break;
 8000850:	bf00      	nop
		  while(reading){
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1bf      	bne.n	80007d8 <shell_run+0x1c>
					  }
			  }
		  }
		  shell_exec(buf[0], buf);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <shell_run+0xb8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4905      	ldr	r1, [pc, #20]	; (8000874 <shell_run+0xb8>)
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff4c 	bl	80006fc <shell_exec>
		  uart_write(prompt, 2);
 8000864:	e7b1      	b.n	80007ca <shell_run+0xe>
 8000866:	bf00      	nop
 8000868:	2000001c 	.word	0x2000001c
 800086c:	20004508 	.word	0x20004508
 8000870:	0800a480 	.word	0x0800a480
 8000874:	20004364 	.word	0x20004364
 8000878:	0800a484 	.word	0x0800a484
 800087c:	20000018 	.word	0x20000018

08000880 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_CRC_Init+0x20>)
 8000886:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <MX_CRC_Init+0x24>)
 8000888:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_CRC_Init+0x20>)
 800088c:	f001 fc34 	bl	80020f8 <HAL_CRC_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000896:	f000 fea5 	bl	80015e4 <Error_Handler>
  }

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000438c 	.word	0x2000438c
 80008a4:	40023000 	.word	0x40023000

080008a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_CRC_MspInit+0x3c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10d      	bne.n	80008d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_CRC_MspInit+0x40>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <HAL_CRC_MspInit+0x40>)
 80008c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <HAL_CRC_MspInit+0x40>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023000 	.word	0x40023000
 80008e8:	40023800 	.word	0x40023800

080008ec <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_DMA2D_Init+0x5c>)
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <MX_DMA2D_Init+0x60>)
 80008f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_DMA2D_Init+0x5c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_DMA2D_Init+0x5c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_DMA2D_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_DMA2D_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_DMA2D_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_DMA2D_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_DMA2D_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <MX_DMA2D_Init+0x5c>)
 8000922:	f001 fc27 	bl	8002174 <HAL_DMA2D_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800092c:	f000 fe5a 	bl	80015e4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000930:	2101      	movs	r1, #1
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_DMA2D_Init+0x5c>)
 8000934:	f001 fd78 	bl	8002428 <HAL_DMA2D_ConfigLayer>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800093e:	f000 fe51 	bl	80015e4 <Error_Handler>
  }

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20004394 	.word	0x20004394
 800094c:	4002b000 	.word	0x4002b000

08000950 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_DMA2D_MspInit+0x48>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d115      	bne.n	800098e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_DMA2D_MspInit+0x4c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a0c      	ldr	r2, [pc, #48]	; (800099c <HAL_DMA2D_MspInit+0x4c>)
 800096c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_DMA2D_MspInit+0x4c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	205a      	movs	r0, #90	; 0x5a
 8000984:	f001 fb8e 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000988:	205a      	movs	r0, #90	; 0x5a
 800098a:	f001 fba7 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	4002b000 	.word	0x4002b000
 800099c:	40023800 	.word	0x40023800

080009a0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]
 80009b6:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_FMC_Init+0x98>)
 80009ba:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <MX_FMC_Init+0x9c>)
 80009bc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_FMC_Init+0x98>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_FMC_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_FMC_Init+0x98>)
 80009cc:	2204      	movs	r2, #4
 80009ce:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_FMC_Init+0x98>)
 80009d2:	2210      	movs	r2, #16
 80009d4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_FMC_Init+0x98>)
 80009d8:	2240      	movs	r2, #64	; 0x40
 80009da:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_FMC_Init+0x98>)
 80009de:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009e2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_FMC_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_FMC_Init+0x98>)
 80009ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009f0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_FMC_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_FMC_Init+0x98>)
 80009fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a04:	2307      	movs	r3, #7
 8000a06:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a10:	2303      	movs	r3, #3
 8000a12:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_FMC_Init+0x98>)
 8000a22:	f004 fd8b 	bl	800553c <HAL_SDRAM_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a2c:	f000 fdda 	bl	80015e4 <Error_Handler>
  }

}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200043d4 	.word	0x200043d4
 8000a3c:	a0000140 	.word	0xa0000140

08000a40 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <HAL_FMC_MspInit+0x104>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d16f      	bne.n	8000b3c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000a5c:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <HAL_FMC_MspInit+0x104>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <HAL_FMC_MspInit+0x108>)
 8000a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a6a:	4a37      	ldr	r2, [pc, #220]	; (8000b48 <HAL_FMC_MspInit+0x108>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6393      	str	r3, [r2, #56]	; 0x38
 8000a72:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <HAL_FMC_MspInit+0x108>)
 8000a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8000a7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a82:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a90:	230c      	movs	r3, #12
 8000a92:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	482c      	ldr	r0, [pc, #176]	; (8000b4c <HAL_FMC_MspInit+0x10c>)
 8000a9a:	f001 fd57 	bl	800254c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4826      	ldr	r0, [pc, #152]	; (8000b50 <HAL_FMC_MspInit+0x110>)
 8000ab8:	f001 fd48 	bl	800254c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000abc:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ac0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <HAL_FMC_MspInit+0x114>)
 8000ad8:	f001 fd38 	bl	800254c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000adc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ae0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	4818      	ldr	r0, [pc, #96]	; (8000b58 <HAL_FMC_MspInit+0x118>)
 8000af8:	f001 fd28 	bl	800254c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8000afc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b00:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <HAL_FMC_MspInit+0x11c>)
 8000b18:	f001 fd18 	bl	800254c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b1c:	2360      	movs	r3, #96	; 0x60
 8000b1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <HAL_FMC_MspInit+0x120>)
 8000b36:	f001 fd09 	bl	800254c <HAL_GPIO_Init>
 8000b3a:	e000      	b.n	8000b3e <HAL_FMC_MspInit+0xfe>
    return;
 8000b3c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000b4 	.word	0x200000b4
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40021400 	.word	0x40021400
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	40020400 	.word	0x40020400

08000b64 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b6c:	f7ff ff68 	bl	8000a40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <vApplicationGetIdleTaskMemory+0x30>)
 8000b8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000b8 	.word	0x200000b8
 8000ba8:	2000010c 	.word	0x2000010c

08000bac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_FREERTOS_Init+0x30>)
 8000bb4:	1d3c      	adds	r4, r7, #4
 8000bb6:	461d      	mov	r5, r3
 8000bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f006 fd43 	bl	8007654 <osThreadCreate>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <MX_FREERTOS_Init+0x34>)
 8000bd2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bdb0      	pop	{r4, r5, r7, pc}
 8000bdc:	0800a498 	.word	0x0800a498
 8000be0:	20004408 	.word	0x20004408

08000be4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f006 fd7d 	bl	80076ec <osDelay>
 8000bf2:	e7fb      	b.n	8000bec <StartDefaultTask+0x8>

08000bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
 8000c0e:	4b84      	ldr	r3, [pc, #528]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a83      	ldr	r2, [pc, #524]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b81      	ldr	r3, [pc, #516]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	623b      	str	r3, [r7, #32]
 8000c24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	4b7d      	ldr	r3, [pc, #500]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a7c      	ldr	r2, [pc, #496]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b7a      	ldr	r3, [pc, #488]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	4b76      	ldr	r3, [pc, #472]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a75      	ldr	r2, [pc, #468]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b73      	ldr	r3, [pc, #460]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a6e      	ldr	r2, [pc, #440]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b6c      	ldr	r3, [pc, #432]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a67      	ldr	r2, [pc, #412]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b61      	ldr	r3, [pc, #388]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a60      	ldr	r2, [pc, #384]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b5e      	ldr	r3, [pc, #376]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b5a      	ldr	r3, [pc, #360]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a52      	ldr	r2, [pc, #328]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <MX_GPIO_Init+0x22c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2116      	movs	r1, #22
 8000cee:	484d      	ldr	r0, [pc, #308]	; (8000e24 <MX_GPIO_Init+0x230>)
 8000cf0:	f001 fdee 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	484b      	ldr	r0, [pc, #300]	; (8000e28 <MX_GPIO_Init+0x234>)
 8000cfa:	f001 fde9 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d04:	4849      	ldr	r0, [pc, #292]	; (8000e2c <MX_GPIO_Init+0x238>)
 8000d06:	f001 fde3 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d10:	4847      	ldr	r0, [pc, #284]	; (8000e30 <MX_GPIO_Init+0x23c>)
 8000d12:	f001 fddd 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d16:	2316      	movs	r3, #22
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	483d      	ldr	r0, [pc, #244]	; (8000e24 <MX_GPIO_Init+0x230>)
 8000d2e:	f001 fc0d 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d32:	2301      	movs	r3, #1
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <MX_GPIO_Init+0x240>)
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4838      	ldr	r0, [pc, #224]	; (8000e28 <MX_GPIO_Init+0x234>)
 8000d46:	f001 fc01 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d4a:	f248 0306 	movw	r3, #32774	; 0x8006
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d50:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <MX_GPIO_Init+0x244>)
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4832      	ldr	r0, [pc, #200]	; (8000e28 <MX_GPIO_Init+0x234>)
 8000d60:	f001 fbf4 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	482b      	ldr	r0, [pc, #172]	; (8000e28 <MX_GPIO_Init+0x234>)
 8000d7c:	f001 fbe6 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d80:	2320      	movs	r3, #32
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_GPIO_Init+0x244>)
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4824      	ldr	r0, [pc, #144]	; (8000e24 <MX_GPIO_Init+0x230>)
 8000d94:	f001 fbda 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4824      	ldr	r0, [pc, #144]	; (8000e3c <MX_GPIO_Init+0x248>)
 8000dac:	f001 fbce 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4819      	ldr	r0, [pc, #100]	; (8000e2c <MX_GPIO_Init+0x238>)
 8000dc6:	f001 fbc1 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000dca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_GPIO_Init+0x238>)
 8000de4:	f001 fbb2 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000de8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <MX_GPIO_Init+0x23c>)
 8000e02:	f001 fba3 	bl	800254c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	2006      	movs	r0, #6
 8000e0c:	f001 f94a 	bl	80020a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e10:	2006      	movs	r0, #6
 8000e12:	f001 f963 	bl	80020dc <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40021800 	.word	0x40021800
 8000e34:	10110000 	.word	0x10110000
 8000e38:	10120000 	.word	0x10120000
 8000e3c:	40020400 	.word	0x40020400

08000e40 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_I2C3_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <MX_I2C3_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e7e:	f002 ffef 	bl	8003e60 <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e88:	f000 fbac 	bl	80015e4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000e90:	f003 f91e 	bl	80040d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000e9a:	f000 fba3 	bl	80015e4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_I2C3_Init+0x74>)
 8000ea2:	f003 f951 	bl	8004148 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000eac:	f000 fb9a 	bl	80015e4 <Error_Handler>
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2000440c 	.word	0x2000440c
 8000eb8:	40005c00 	.word	0x40005c00
 8000ebc:	000186a0 	.word	0x000186a0

08000ec0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <HAL_I2C_MspInit+0xc4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d14b      	bne.n	8000f7a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <HAL_I2C_MspInit+0xcc>)
 8000f38:	f001 fb08 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f42:	2312      	movs	r3, #18
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <HAL_I2C_MspInit+0xd0>)
 8000f5a:	f001 faf7 	bl	800254c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40005c00 	.word	0x40005c00
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000

08000f94 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08e      	sub	sp, #56	; 0x38
 8000f98:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2234      	movs	r2, #52	; 0x34
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f008 faed 	bl	8009580 <memset>

  hltdc.Instance = LTDC;
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fa8:	4a39      	ldr	r2, [pc, #228]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000faa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fb8:	4b34      	ldr	r3, [pc, #208]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fbe:	4b33      	ldr	r3, [pc, #204]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000fc4:	4b31      	ldr	r3, [pc, #196]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fc6:	2209      	movs	r2, #9
 8000fc8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fd2:	221d      	movs	r2, #29
 8000fd4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fde:	f240 120d 	movw	r2, #269	; 0x10d
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fe6:	f240 1243 	movw	r2, #323	; 0x143
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <MX_LTDC_Init+0xf8>)
 8000fee:	f240 1217 	movw	r2, #279	; 0x117
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <MX_LTDC_Init+0xf8>)
 8000ff6:	f240 1247 	movw	r2, #327	; 0x147
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_LTDC_Init+0xf8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_LTDC_Init+0xf8>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_LTDC_Init+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001014:	481d      	ldr	r0, [pc, #116]	; (800108c <MX_LTDC_Init+0xf8>)
 8001016:	f003 f8d7 	bl	80041c8 <HAL_LTDC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001020:	f000 fae0 	bl	80015e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001028:	23f0      	movs	r3, #240	; 0xf0
 800102a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001030:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001034:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001036:	2302      	movs	r3, #2
 8001038:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800103a:	23ff      	movs	r3, #255	; 0xff
 800103c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001042:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001046:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001048:	2307      	movs	r3, #7
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800104c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001052:	23f0      	movs	r3, #240	; 0xf0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001056:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_LTDC_Init+0xf8>)
 8001076:	f003 fa39 	bl	80044ec <HAL_LTDC_ConfigLayer>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001080:	f000 fab0 	bl	80015e4 <Error_Handler>
  }

}
 8001084:	bf00      	nop
 8001086:	3738      	adds	r7, #56	; 0x38
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20004460 	.word	0x20004460
 8001090:	40016800 	.word	0x40016800

08001094 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a7b      	ldr	r2, [pc, #492]	; (80012a0 <HAL_LTDC_MspInit+0x20c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f040 80f0 	bne.w	8001298 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	4b79      	ldr	r3, [pc, #484]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	4a78      	ldr	r2, [pc, #480]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 80010c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010c6:	6453      	str	r3, [r2, #68]	; 0x44
 80010c8:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010d0:	623b      	str	r3, [r7, #32]
 80010d2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	4b72      	ldr	r3, [pc, #456]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a71      	ldr	r2, [pc, #452]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
 80010e4:	4b6f      	ldr	r3, [pc, #444]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f003 0320 	and.w	r3, r3, #32
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	4a6a      	ldr	r2, [pc, #424]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001100:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a63      	ldr	r2, [pc, #396]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a5c      	ldr	r2, [pc, #368]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 8001132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b5a      	ldr	r3, [pc, #360]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a55      	ldr	r2, [pc, #340]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b4f      	ldr	r3, [pc, #316]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 800116a:	f043 0308 	orr.w	r3, r3, #8
 800116e:	6313      	str	r3, [r2, #48]	; 0x30
 8001170:	4b4c      	ldr	r3, [pc, #304]	; (80012a4 <HAL_LTDC_MspInit+0x210>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118e:	230e      	movs	r3, #14
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4843      	ldr	r0, [pc, #268]	; (80012a8 <HAL_LTDC_MspInit+0x214>)
 800119a:	f001 f9d7 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800119e:	f641 0358 	movw	r3, #6232	; 0x1858
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b0:	230e      	movs	r3, #14
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	483c      	ldr	r0, [pc, #240]	; (80012ac <HAL_LTDC_MspInit+0x218>)
 80011bc:	f001 f9c6 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011c0:	2303      	movs	r3, #3
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011d0:	2309      	movs	r3, #9
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4835      	ldr	r0, [pc, #212]	; (80012b0 <HAL_LTDC_MspInit+0x21c>)
 80011dc:	f001 f9b6 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011e0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f2:	230e      	movs	r3, #14
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	482c      	ldr	r0, [pc, #176]	; (80012b0 <HAL_LTDC_MspInit+0x21c>)
 80011fe:	f001 f9a5 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001202:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001214:	230e      	movs	r3, #14
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	4825      	ldr	r0, [pc, #148]	; (80012b4 <HAL_LTDC_MspInit+0x220>)
 8001220:	f001 f994 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001224:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001236:	230e      	movs	r3, #14
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	481d      	ldr	r0, [pc, #116]	; (80012b8 <HAL_LTDC_MspInit+0x224>)
 8001242:	f001 f983 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001246:	2348      	movs	r3, #72	; 0x48
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001256:	230e      	movs	r3, #14
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <HAL_LTDC_MspInit+0x228>)
 8001262:	f001 f973 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001266:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001278:	2309      	movs	r3, #9
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <HAL_LTDC_MspInit+0x220>)
 8001284:	f001 f962 	bl	800254c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2105      	movs	r1, #5
 800128c:	2058      	movs	r0, #88	; 0x58
 800128e:	f000 ff09 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001292:	2058      	movs	r0, #88	; 0x58
 8001294:	f000 ff22 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001298:	bf00      	nop
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40016800 	.word	0x40016800
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40021800 	.word	0x40021800
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <__io_putchar>:



//Redéfinition de la fonction printf ... qui utilise io_putchar()
int __io_putchar(int ch)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80012c8:	1d39      	adds	r1, r7, #4
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	2201      	movs	r2, #1
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <__io_putchar+0x20>)
 80012d2:	f004 fe18 	bl	8005f06 <HAL_UART_Transmit>
	return ch;
 80012d6:	687b      	ldr	r3, [r7, #4]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20004640 	.word	0x20004640

080012e4 <FctBidon>:



//fonction1 reveil fonction2
void FctBidon(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	int i=0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
	printf("T1: BONJOUR\r\n");
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <FctBidon+0x20>)
 80012f0:	f008 f9c2 	bl	8009678 <puts>
	while (1)
	{
		printf("Je suis une fonction bidon ... %d\r\n",i++);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <FctBidon+0x24>)
 80012fe:	f008 f947 	bl	8009590 <iprintf>
 8001302:	e7f7      	b.n	80012f4 <FctBidon+0x10>
 8001304:	0800a4b4 	.word	0x0800a4b4
 8001308:	0800a4c4 	.word	0x0800a4c4

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
uint8_t bidon = 0x58;
 8001312:	2358      	movs	r3, #88	; 0x58
 8001314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
uint8_t message[] = {"On va commencer\r\n"};
 8001318:	4b58      	ldr	r3, [pc, #352]	; (800147c <main+0x170>)
 800131a:	1d3c      	adds	r4, r7, #4
 800131c:	461d      	mov	r5, r3
 800131e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001326:	f000 fda1 	bl	8001e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 f8c7 	bl	80014bc <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132e:	f7ff fc61 	bl	8000bf4 <MX_GPIO_Init>
  MX_CRC_Init();
 8001332:	f7ff faa5 	bl	8000880 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001336:	f7ff fad9 	bl	80008ec <MX_DMA2D_Init>
  MX_FMC_Init();
 800133a:	f7ff fb31 	bl	80009a0 <MX_FMC_Init>
  MX_I2C3_Init();
 800133e:	f7ff fd7f 	bl	8000e40 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001342:	f7ff fe27 	bl	8000f94 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001346:	f000 f955 	bl	80015f4 <MX_SPI5_Init>
  MX_TIM1_Init();
 800134a:	f000 fb87 	bl	8001a5c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800134e:	f000 fc5f 	bl	8001c10 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8001352:	f000 fcd7 	bl	8001d04 <MX_USB_OTG_HS_HCD_Init>
  MX_TIM2_Init();
 8001356:	f000 fbd1 	bl	8001afc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Transmit(&huart1, message, sizeof(message), 0xff);
  printf("T0: Tache INIT commence\r\n");
 800135a:	4849      	ldr	r0, [pc, #292]	; (8001480 <main+0x174>)
 800135c:	f008 f98c 	bl	8009678 <puts>


  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 8001360:	2300      	movs	r3, #0
 8001362:	603b      	str	r3, [r7, #0]
  int p1=1;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  int p2=2;
 8001368:	2302      	movs	r3, #2
 800136a:	61fb      	str	r3, [r7, #28]

  //Création d'un Meesage/Qeue
  //BaL1 = xQueueCreate( 5, sizeof( QMessage ) );

  //Création du Semaphore
  printf("T0: Creation du semaphore (vide)\r\n");
 800136c:	4845      	ldr	r0, [pc, #276]	; (8001484 <main+0x178>)
 800136e:	f008 f983 	bl	8009678 <puts>
  //MonSem=semBCreate(SEM_Q_FIFO,SEM_EMPTY);		//Façon VxWorks
  MonSem = xSemaphoreCreateBinary();				//Façon FreeRTOS
 8001372:	2203      	movs	r2, #3
 8001374:	2100      	movs	r1, #0
 8001376:	2001      	movs	r0, #1
 8001378:	f006 fae8 	bl	800794c <xQueueGenericCreate>
 800137c:	4602      	mov	r2, r0
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <main+0x17c>)
 8001380:	601a      	str	r2, [r3, #0]
  MonSemUART = xSemaphoreCreateBinary();				//Façon FreeRTOS
 8001382:	2203      	movs	r2, #3
 8001384:	2100      	movs	r1, #0
 8001386:	2001      	movs	r0, #1
 8001388:	f006 fae0 	bl	800794c <xQueueGenericCreate>
 800138c:	4602      	mov	r2, r0
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <main+0x180>)
 8001390:	601a      	str	r2, [r3, #0]
  shell_init();
 8001392:	f7ff f953 	bl	800063c <shell_init>


  /* Create the task, storing the handle. */

   printf("T0: Creation tache 1\r\n");
 8001396:	483e      	ldr	r0, [pc, #248]	; (8001490 <main+0x184>)
 8001398:	f008 f96e 	bl	8009678 <puts>
	  xReturned = xTaskCreate(
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	463a      	mov	r2, r7
 80013a0:	9201      	str	r2, [sp, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2300      	movs	r3, #0
 80013a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013aa:	493a      	ldr	r1, [pc, #232]	; (8001494 <main+0x188>)
 80013ac:	483a      	ldr	r0, [pc, #232]	; (8001498 <main+0x18c>)
 80013ae:	f006 fd97 	bl	8007ee0 <xTaskCreate>
 80013b2:	61b8      	str	r0, [r7, #24]
			  	  	  "FctBidon",
					  1000,      		/* Stack size in words, not bytes. */
					  NULL,    			/* Parameter passed into the task. */
					  p2,				/* Priority at which the task is created. */
					  &xHandle );      /* Used to pass out the created task's handle. */
	  if( xReturned == pdPASS )
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d103      	bne.n	80013c2 <main+0xb6>
	  printf("T0: Tache ''Bidon'' cree avec priorite %d\r\n", p1);
 80013ba:	6a39      	ldr	r1, [r7, #32]
 80013bc:	4837      	ldr	r0, [pc, #220]	; (800149c <main+0x190>)
 80013be:	f008 f8e7 	bl	8009590 <iprintf>


  printf("T0: Creation tache 2\r\n");
 80013c2:	4837      	ldr	r0, [pc, #220]	; (80014a0 <main+0x194>)
 80013c4:	f008 f958 	bl	8009678 <puts>
  xReturned = xTaskCreate(
		  	  	  //(void *)fonction2,       	/* Function that implements the task. */
				  //"fonction2",     	/* Text name for the task. */
		  	  	  //(void *)Recepteur,
				  //"RX",
		  	  	  (void*)shell_run(),
 80013c8:	f7ff f9f8 	bl	80007bc <shell_run>
 80013cc:	4603      	mov	r3, r0
  xReturned = xTaskCreate(
 80013ce:	4618      	mov	r0, r3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	463a      	mov	r2, r7
 80013d4:	9201      	str	r2, [sp, #4]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2300      	movs	r3, #0
 80013da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013de:	4931      	ldr	r1, [pc, #196]	; (80014a4 <main+0x198>)
 80013e0:	f006 fd7e 	bl	8007ee0 <xTaskCreate>
 80013e4:	61b8      	str	r0, [r7, #24]
				  "Shell_RUN",
		  	  	  1000,      		/* Stack size in words, not bytes. */
				  NULL,    			/* Parameter passed into the task. */
				  p2,				/* Priority at which the task is created. */
				  &xHandle );      /* Used to pass out the created task's handle. */
  if( xReturned == pdPASS )
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d103      	bne.n	80013f4 <main+0xe8>
	  printf("T0: Tache ''Shell RUN'' cree avec priorite %d\r\n", p2);
 80013ec:	69f9      	ldr	r1, [r7, #28]
 80013ee:	482e      	ldr	r0, [pc, #184]	; (80014a8 <main+0x19c>)
 80013f0:	f008 f8ce 	bl	8009590 <iprintf>


  printf("T0: Fin fct main x_x\r\n\n");
 80013f4:	482d      	ldr	r0, [pc, #180]	; (80014ac <main+0x1a0>)
 80013f6:	f008 f93f 	bl	8009678 <puts>


  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001400:	482b      	ldr	r0, [pc, #172]	; (80014b0 <main+0x1a4>)
 8001402:	f001 fa65 	bl	80028d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140c:	4828      	ldr	r0, [pc, #160]	; (80014b0 <main+0x1a4>)
 800140e:	f001 fa5f 	bl	80028d0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001416:	f000 fd6b 	bl	8001ef0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001420:	4823      	ldr	r0, [pc, #140]	; (80014b0 <main+0x1a4>)
 8001422:	f001 fa55 	bl	80028d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142c:	4820      	ldr	r0, [pc, #128]	; (80014b0 <main+0x1a4>)
 800142e:	f001 fa4f 	bl	80028d0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001436:	f000 fd5b 	bl	8001ef0 <HAL_Delay>

  //Initier le timer TIM2
  HAL_TIM_Base_Start_IT (&htim2);
 800143a:	481e      	ldr	r0, [pc, #120]	; (80014b4 <main+0x1a8>)
 800143c:	f004 f941 	bl	80056c2 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001440:	f7ff fbb4 	bl	8000bac <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001444:	f006 f8ff 	bl	8007646 <osKernelStart>
//  		  HAL_UART_Transmit(&huart1, &bidon, sizeof(bidon), 0xff);
//  		  bidon=0x3;
//  	  }


  	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8001448:	2101      	movs	r1, #1
 800144a:	481b      	ldr	r0, [pc, #108]	; (80014b8 <main+0x1ac>)
 800144c:	f001 fa28 	bl	80028a0 <HAL_GPIO_ReadPin>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <main+0x158>
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4814      	ldr	r0, [pc, #80]	; (80014b0 <main+0x1a4>)
 800145e:	f001 fa37 	bl	80028d0 <HAL_GPIO_WritePin>
 8001462:	e005      	b.n	8001470 <main+0x164>
  	        else HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <main+0x1a4>)
 800146c:	f001 fa30 	bl	80028d0 <HAL_GPIO_WritePin>
 8001470:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  //..
  /* USER CODE END 3 */
}
 8001472:	4618      	mov	r0, r3
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bdb0      	pop	{r4, r5, r7, pc}
 800147a:	bf00      	nop
 800147c:	0800a8e0 	.word	0x0800a8e0
 8001480:	0800a7e4 	.word	0x0800a7e4
 8001484:	0800a800 	.word	0x0800a800
 8001488:	2000450c 	.word	0x2000450c
 800148c:	20004508 	.word	0x20004508
 8001490:	0800a824 	.word	0x0800a824
 8001494:	0800a83c 	.word	0x0800a83c
 8001498:	080012e5 	.word	0x080012e5
 800149c:	0800a848 	.word	0x0800a848
 80014a0:	0800a874 	.word	0x0800a874
 80014a4:	0800a88c 	.word	0x0800a88c
 80014a8:	0800a898 	.word	0x0800a898
 80014ac:	0800a8c8 	.word	0x0800a8c8
 80014b0:	40021800 	.word	0x40021800
 80014b4:	20004600 	.word	0x20004600
 80014b8:	40020000 	.word	0x40020000

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0a0      	sub	sp, #128	; 0x80
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014c6:	2230      	movs	r2, #48	; 0x30
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f008 f858 	bl	8009580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2230      	movs	r2, #48	; 0x30
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f008 f849 	bl	8009580 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <SystemClock_Config+0xfc>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a30      	ldr	r2, [pc, #192]	; (80015b8 <SystemClock_Config+0xfc>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <SystemClock_Config+0xfc>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <SystemClock_Config+0x100>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a2a      	ldr	r2, [pc, #168]	; (80015bc <SystemClock_Config+0x100>)
 8001514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <SystemClock_Config+0x100>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001526:	2301      	movs	r3, #1
 8001528:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800152e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	2302      	movs	r3, #2
 8001532:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001538:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800153a:	2304      	movs	r3, #4
 800153c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 800153e:	23a8      	movs	r3, #168	; 0xa8
 8001540:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001546:	2307      	movs	r3, #7
 8001548:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f9a2 	bl	8004898 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800155a:	f000 f843 	bl	80015e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2302      	movs	r3, #2
 8001564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800156a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001576:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800157a:	2105      	movs	r1, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fbfb 	bl	8004d78 <HAL_RCC_ClockConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001588:	f000 f82c 	bl	80015e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800158c:	2308      	movs	r3, #8
 800158e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001590:	2332      	movs	r3, #50	; 0x32
 8001592:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fe0d 	bl	80051c0 <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80015ac:	f000 f81a 	bl	80015e4 <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3780      	adds	r7, #128	; 0x80
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40007000 	.word	0x40007000

080015c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015d2:	f000 fc6d 	bl	8001eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40001000 	.word	0x40001000

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_SPI5_Init+0x64>)
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <MX_SPI5_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_SPI5_Init+0x64>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_SPI5_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_SPI5_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_SPI5_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_SPI5_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_SPI5_Init+0x64>)
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_SPI5_Init+0x64>)
 8001628:	2218      	movs	r2, #24
 800162a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_SPI5_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_SPI5_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_SPI5_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_SPI5_Init+0x64>)
 8001640:	220a      	movs	r2, #10
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_SPI5_Init+0x64>)
 8001646:	f003 ffad 	bl	80055a4 <HAL_SPI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001650:	f7ff ffc8 	bl	80015e4 <Error_Handler>
  }

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20004528 	.word	0x20004528
 800165c:	40015000 	.word	0x40015000

08001660 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_SPI_MspInit+0x84>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d12c      	bne.n	80016dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 800168c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 80016a8:	f043 0320 	orr.w	r3, r3, #32
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_SPI_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80016ba:	f44f 7360 	mov.w	r3, #896	; 0x380
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016cc:	2305      	movs	r3, #5
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_SPI_MspInit+0x8c>)
 80016d8:	f000 ff38 	bl	800254c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40015000 	.word	0x40015000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40021400 	.word	0x40021400

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_MspInit+0x54>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_MspInit+0x54>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_MspInit+0x54>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_MspInit+0x54>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_MspInit+0x54>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_MspInit+0x54>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	210f      	movs	r1, #15
 8001732:	f06f 0001 	mvn.w	r0, #1
 8001736:	f000 fcb5 	bl	80020a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	2036      	movs	r0, #54	; 0x36
 800175e:	f000 fca1 	bl	80020a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001762:	2036      	movs	r0, #54	; 0x36
 8001764:	f000 fcba 	bl	80020dc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_InitTick+0xa4>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_InitTick+0xa4>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_InitTick+0xa4>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001784:	f107 0210 	add.w	r2, r7, #16
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f003 fce4 	bl	800515c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001794:	f003 fcba 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8001798:	4603      	mov	r3, r0
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <HAL_InitTick+0xa8>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	0c9b      	lsrs	r3, r3, #18
 80017a8:	3b01      	subs	r3, #1
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_InitTick+0xac>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_InitTick+0xb0>)
 80017b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_InitTick+0xac>)
 80017b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_InitTick+0xac>)
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_InitTick+0xac>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_InitTick+0xac>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_InitTick+0xac>)
 80017ce:	f003 ff4d 	bl	800566c <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d104      	bne.n	80017e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017d8:	4806      	ldr	r0, [pc, #24]	; (80017f4 <HAL_InitTick+0xac>)
 80017da:	f003 ff72 	bl	80056c2 <HAL_TIM_Base_Start_IT>
 80017de:	4603      	mov	r3, r0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3730      	adds	r7, #48	; 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800
 80017f0:	431bde83 	.word	0x431bde83
 80017f4:	20004580 	.word	0x20004580
 80017f8:	40001000 	.word	0x40001000

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8001834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <EXTI0_IRQHandler+0x18>)
 800183a:	f001 f862 	bl	8002902 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800183e:	2001      	movs	r0, #1
 8001840:	f001 f87a 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021800 	.word	0x40021800

0800184c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	printf("IT: TIMER #2 a claqué\r\n");		//A ne pas faire dans la vrai vie, c'est juste pour l'exo
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <TIM2_IRQHandler+0x2c>)
 8001852:	f007 ff11 	bl	8009678 <puts>
	HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <TIM2_IRQHandler+0x30>)
 800185c:	f001 f851 	bl	8002902 <HAL_GPIO_TogglePin>
	xSemaphoreGiveFromISR(MonSem,pdFALSE);
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <TIM2_IRQHandler+0x34>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f006 f8ce 	bl	8007a08 <xQueueGiveFromISR>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <TIM2_IRQHandler+0x38>)
 800186e:	f003 ff4c 	bl	800570a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	0800a8f4 	.word	0x0800a8f4
 800187c:	40021800 	.word	0x40021800
 8001880:	2000450c 	.word	0x2000450c
 8001884:	20004600 	.word	0x20004600

08001888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	xSemaphoreGiveFromISR(MonSemUART,pdFALSE);
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <USART1_IRQHandler+0x1c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f006 f8b8 	bl	8007a08 <xQueueGiveFromISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <USART1_IRQHandler+0x20>)
 800189a:	f004 fc23 	bl	80060e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20004508 	.word	0x20004508
 80018a8:	20004640 	.word	0x20004640

080018ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <TIM6_DAC_IRQHandler+0x10>)
 80018b2:	f003 ff2a 	bl	800570a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20004580 	.word	0x20004580

080018c0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <OTG_HS_IRQHandler+0x10>)
 80018c6:	f001 f8bc 	bl	8002a42 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20004680 	.word	0x20004680

080018d4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <LTDC_IRQHandler+0x10>)
 80018da:	f002 fd45 	bl	8004368 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20004460 	.word	0x20004460

080018e8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <DMA2D_IRQHandler+0x10>)
 80018ee:	f000 fc8a 	bl	8002206 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20004394 	.word	0x20004394

080018fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e00a      	b.n	8001924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190e:	f3af 8000 	nop.w
 8001912:	4601      	mov	r1, r0
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	b2ca      	uxtb	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf0      	blt.n	800190e <_read+0x12>
	}

return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e009      	b.n	800195c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fcb5 	bl	80012c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf1      	blt.n	8001948 <_write+0x12>
	}
	return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_close>:

int _close(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_sbrk+0x50>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x16>
		heap_end = &end;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <_sbrk+0x50>)
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <_sbrk+0x54>)
 80019ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <_sbrk+0x50>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <_sbrk+0x50>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	466a      	mov	r2, sp
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d907      	bls.n	8001a12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a02:	f007 fd93 	bl	800952c <__errno>
 8001a06:	4602      	mov	r2, r0
 8001a08:	230c      	movs	r3, #12
 8001a0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	e006      	b.n	8001a20 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <_sbrk+0x50>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <_sbrk+0x50>)
 8001a1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000030c 	.word	0x2000030c
 8001a2c:	20004950 	.word	0x20004950

08001a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <SystemInit+0x28>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3a:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <SystemInit+0x28>)
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SystemInit+0x28>)
 8001a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <MX_TIM1_Init+0x9c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aa2:	4814      	ldr	r0, [pc, #80]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001aa4:	f003 fde2 	bl	800566c <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001aae:	f7ff fd99 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	4619      	mov	r1, r3
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001ac0:	f003 ff2b 	bl	800591a <HAL_TIM_ConfigClockSource>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001aca:	f7ff fd8b 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <MX_TIM1_Init+0x98>)
 8001adc:	f004 f936 	bl	8005d4c <HAL_TIMEx_MasterConfigSynchronization>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001ae6:	f7ff fd7d 	bl	80015e4 <Error_Handler>
  }

}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200045c0 	.word	0x200045c0
 8001af8:	40010000 	.word	0x40010000

08001afc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	463b      	mov	r3, r7
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399999;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b2e:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <MX_TIM2_Init+0x98>)
 8001b30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b3e:	4814      	ldr	r0, [pc, #80]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b40:	f003 fd94 	bl	800566c <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001b4a:	f7ff fd4b 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b5c:	f003 fedd 	bl	800591a <HAL_TIM_ConfigClockSource>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001b66:	f7ff fd3d 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <MX_TIM2_Init+0x94>)
 8001b78:	f004 f8e8 	bl	8005d4c <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b82:	f7ff fd2f 	bl	80015e4 <Error_Handler>
  }

}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20004600 	.word	0x20004600
 8001b94:	00802c7f 	.word	0x00802c7f

08001b98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_TIM_Base_MspInit+0x70>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_TIM_Base_MspInit+0x74>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <HAL_TIM_Base_MspInit+0x74>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_TIM_Base_MspInit+0x74>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bc6:	e01a      	b.n	8001bfe <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d115      	bne.n	8001bfe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_TIM_Base_MspInit+0x74>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_TIM_Base_MspInit+0x74>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_TIM_Base_MspInit+0x74>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	201c      	movs	r0, #28
 8001bf4:	f000 fa56 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf8:	201c      	movs	r0, #28
 8001bfa:	f000 fa6f 	bl	80020dc <HAL_NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40023800 	.word	0x40023800

08001c10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <MX_USART1_UART_Init+0x50>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c48:	f004 f910 	bl	8005e6c <HAL_UART_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c52:	f7ff fcc7 	bl	80015e4 <Error_Handler>
  }

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20004640 	.word	0x20004640
 8001c60:	40011000 	.word	0x40011000

08001c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_UART_MspInit+0x94>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d134      	bne.n	8001cf0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_UART_MspInit+0x98>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4809      	ldr	r0, [pc, #36]	; (8001d00 <HAL_UART_MspInit+0x9c>)
 8001cdc:	f000 fc36 	bl	800254c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2105      	movs	r1, #5
 8001ce4:	2025      	movs	r0, #37	; 0x25
 8001ce6:	f000 f9dd 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cea:	2025      	movs	r0, #37	; 0x25
 8001cec:	f000 f9f6 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40011000 	.word	0x40011000
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020000 	.word	0x40020000

08001d04 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d0a:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d10:	220c      	movs	r2, #12
 8001d12:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d22:	2202      	movs	r2, #2
 8001d24:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d40:	f000 fe1d 	bl	800297e <HAL_HCD_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001d4a:	f7ff fc4b 	bl	80015e4 <Error_Handler>
  }

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20004680 	.word	0x20004680
 8001d58:	40040000 	.word	0x40040000

08001d5c <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <HAL_HCD_MspInit+0xb0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d141      	bne.n	8001e02 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <HAL_HCD_MspInit+0xb4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <HAL_HCD_MspInit+0xb4>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_HCD_MspInit+0xb4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001d9a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001dac:	230c      	movs	r3, #12
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4817      	ldr	r0, [pc, #92]	; (8001e14 <HAL_HCD_MspInit+0xb8>)
 8001db8:	f000 fbc8 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4810      	ldr	r0, [pc, #64]	; (8001e14 <HAL_HCD_MspInit+0xb8>)
 8001dd2:	f000 fbbb 	bl	800254c <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_HCD_MspInit+0xb4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <HAL_HCD_MspInit+0xb4>)
 8001de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_HCD_MspInit+0xb4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2105      	movs	r1, #5
 8001df6:	204d      	movs	r0, #77	; 0x4d
 8001df8:	f000 f954 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001dfc:	204d      	movs	r0, #77	; 0x4d
 8001dfe:	f000 f96d 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40040000 	.word	0x40040000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020400 	.word	0x40020400

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e1e:	e003      	b.n	8001e28 <LoopCopyDataInit>

08001e20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e26:	3104      	adds	r1, #4

08001e28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e30:	d3f6      	bcc.n	8001e20 <CopyDataInit>
  ldr  r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e34:	e002      	b.n	8001e3c <LoopFillZerobss>

08001e36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e38:	f842 3b04 	str.w	r3, [r2], #4

08001e3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e40:	d3f9      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e42:	f7ff fdf5 	bl	8001a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f007 fb77 	bl	8009538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7ff fa5f 	bl	800130c <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e50:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e54:	0800a9d4 	.word	0x0800a9d4
  ldr  r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e5c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001e60:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001e64:	2000494c 	.word	0x2000494c

08001e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_Init+0x40>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_Init+0x40>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_Init+0x40>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f8fa 	bl	800208e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fc54 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff fc26 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000028 	.word	0x20000028
 8001ed4:	20004944 	.word	0x20004944

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20004944 	.word	0x20004944

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_Delay+0x40>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000028 	.word	0x20000028

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff4c 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b6:	f7ff ff61 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	6978      	ldr	r0, [r7, #20]
 80020c2:	f7ff ffb1 	bl	8002028 <NVIC_EncodePriority>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff80 	bl	8001fd4 <__NVIC_SetPriority>
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff54 	bl	8001f98 <__NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00e      	b.n	8002128 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	795b      	ldrb	r3, [r3, #5]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fbc4 	bl	80008a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d004      	beq.n	800214e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2280      	movs	r2, #128	; 0x80
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e00c      	b.n	8002168 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2205      	movs	r2, #5
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e03b      	b.n	80021fe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fbd8 	bl	8000950 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c4:	f023 0107 	bic.w	r1, r3, #7
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68d1      	ldr	r1, [r2, #12]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d026      	beq.n	8002276 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d021      	beq.n	8002276 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002240:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2204      	movs	r2, #4
 800225a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d026      	beq.n	80022ce <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d021      	beq.n	80022ce <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002298:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2220      	movs	r2, #32
 80022a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	f043 0202 	orr.w	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2204      	movs	r2, #4
 80022b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d026      	beq.n	8002326 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d021      	beq.n	8002326 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2208      	movs	r2, #8
 80022f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	f043 0204 	orr.w	r2, r3, #4
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2204      	movs	r2, #4
 800230a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00e      	beq.n	8002358 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002348:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2204      	movs	r2, #4
 8002350:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f853 	bl	80023fe <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d024      	beq.n	80023ac <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01f      	beq.n	80023ac <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2202      	movs	r2, #2
 8002382:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01f      	beq.n	80023f6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01a      	beq.n	80023f6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ce:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2210      	movs	r2, #16
 80023d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f80e 	bl	8002412 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_DMA2D_ConfigLayer+0x20>
 8002444:	2302      	movs	r3, #2
 8002446:	e079      	b.n	800253c <HAL_DMA2D_ConfigLayer+0x114>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	3318      	adds	r3, #24
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002472:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_DMA2D_ConfigLayer+0x120>)
 8002474:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b0a      	cmp	r3, #10
 800247c:	d003      	beq.n	8002486 <HAL_DMA2D_ConfigLayer+0x5e>
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b09      	cmp	r3, #9
 8002484:	d107      	bne.n	8002496 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e005      	b.n	80024a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d120      	bne.n	80024ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	ea02 0103 	and.w	r1, r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	430a      	orrs	r2, r1
 80024be:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b0a      	cmp	r3, #10
 80024d0:	d003      	beq.n	80024da <HAL_DMA2D_ConfigLayer+0xb2>
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	d127      	bne.n	800252a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
 80024e8:	e01f      	b.n	800252a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	ea02 0103 	and.w	r1, r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	430a      	orrs	r2, r1
 8002500:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b0a      	cmp	r3, #10
 8002512:	d003      	beq.n	800251c <HAL_DMA2D_ConfigLayer+0xf4>
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b09      	cmp	r3, #9
 800251a:	d106      	bne.n	800252a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002528:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	ff03000f 	.word	0xff03000f

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e177      	b.n	8002858 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	f040 8166 	bne.w	8002852 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d00b      	beq.n	80025a6 <HAL_GPIO_Init+0x5a>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800259a:	2b11      	cmp	r3, #17
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0xfc>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b12      	cmp	r3, #18
 8002646:	d123      	bne.n	8002690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80c0 	beq.w	8002852 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b65      	ldr	r3, [pc, #404]	; (800286c <HAL_GPIO_Init+0x320>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a64      	ldr	r2, [pc, #400]	; (800286c <HAL_GPIO_Init+0x320>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b62      	ldr	r3, [pc, #392]	; (800286c <HAL_GPIO_Init+0x320>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ee:	4a60      	ldr	r2, [pc, #384]	; (8002870 <HAL_GPIO_Init+0x324>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a57      	ldr	r2, [pc, #348]	; (8002874 <HAL_GPIO_Init+0x328>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d037      	beq.n	800278a <HAL_GPIO_Init+0x23e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_GPIO_Init+0x32c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d031      	beq.n	8002786 <HAL_GPIO_Init+0x23a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a55      	ldr	r2, [pc, #340]	; (800287c <HAL_GPIO_Init+0x330>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d02b      	beq.n	8002782 <HAL_GPIO_Init+0x236>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a54      	ldr	r2, [pc, #336]	; (8002880 <HAL_GPIO_Init+0x334>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x232>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a53      	ldr	r2, [pc, #332]	; (8002884 <HAL_GPIO_Init+0x338>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x22e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_GPIO_Init+0x33c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x22a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <HAL_GPIO_Init+0x340>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x226>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a50      	ldr	r2, [pc, #320]	; (8002890 <HAL_GPIO_Init+0x344>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x222>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x348>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x21e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_GPIO_Init+0x34c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x21a>
 8002762:	2309      	movs	r3, #9
 8002764:	e012      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002766:	230a      	movs	r3, #10
 8002768:	e010      	b.n	800278c <HAL_GPIO_Init+0x240>
 800276a:	2308      	movs	r3, #8
 800276c:	e00e      	b.n	800278c <HAL_GPIO_Init+0x240>
 800276e:	2307      	movs	r3, #7
 8002770:	e00c      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002772:	2306      	movs	r3, #6
 8002774:	e00a      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002776:	2305      	movs	r3, #5
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x240>
 800277a:	2304      	movs	r3, #4
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x240>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x240>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x240>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279c:	4934      	ldr	r1, [pc, #208]	; (8002870 <HAL_GPIO_Init+0x324>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <HAL_GPIO_Init+0x350>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ce:	4a33      	ldr	r2, [pc, #204]	; (800289c <HAL_GPIO_Init+0x350>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_GPIO_Init+0x350>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_GPIO_Init+0x350>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_GPIO_Init+0x350>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <HAL_GPIO_Init+0x350>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002828:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_GPIO_Init+0x350>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800284c:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_GPIO_Init+0x350>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f ae84 	bls.w	8002568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	3724      	adds	r7, #36	; 0x24
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40023800 	.word	0x40023800
 8002870:	40013800 	.word	0x40013800
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400
 800287c:	40020800 	.word	0x40020800
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021000 	.word	0x40021000
 8002888:	40021400 	.word	0x40021400
 800288c:	40021800 	.word	0x40021800
 8002890:	40021c00 	.word	0x40021c00
 8002894:	40022000 	.word	0x40022000
 8002898:	40022400 	.word	0x40022400
 800289c:	40013c00 	.word	0x40013c00

080028a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ec:	e003      	b.n	80028f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	401a      	ands	r2, r3
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	429a      	cmp	r2, r3
 800291a:	d104      	bne.n	8002926 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	041a      	lsls	r2, r3, #16
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002924:	e002      	b.n	800292c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f806 	bl	8002968 <HAL_GPIO_EXTI_Callback>
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40013c00 	.word	0x40013c00

08002968 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800297e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002980:	b08f      	sub	sp, #60	; 0x3c
 8002982:	af0a      	add	r7, sp, #40	; 0x28
 8002984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e054      	b.n	8002a3a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f9d6 	bl	8001d5c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2203      	movs	r2, #3
 80029b4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 fae1 	bl	8006f96 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	687e      	ldr	r6, [r7, #4]
 80029dc:	466d      	mov	r5, sp
 80029de:	f106 0410 	add.w	r4, r6, #16
 80029e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f2:	1d33      	adds	r3, r6, #4
 80029f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f6:	6838      	ldr	r0, [r7, #0]
 80029f8:	f004 fa6c 	bl	8006ed4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 fad8 	bl	8006fb8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	687e      	ldr	r6, [r7, #4]
 8002a10:	466d      	mov	r5, sp
 8002a12:	f106 0410 	add.w	r4, r6, #16
 8002a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a22:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a26:	1d33      	adds	r3, r6, #4
 8002a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a2a:	6838      	ldr	r0, [r7, #0]
 8002a2c:	f004 fbb4 	bl	8007198 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a42 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fb5b 	bl	8007114 <USB_GetMode>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 80ef 	bne.w	8002c44 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 fb3f 	bl	80070ee <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80e5 	beq.w	8002c42 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 fb36 	bl	80070ee <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a8c:	d104      	bne.n	8002a98 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a96:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f004 fb26 	bl	80070ee <USB_ReadInterrupts>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aac:	d104      	bne.n	8002ab8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ab6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 fb16 	bl	80070ee <USB_ReadInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002acc:	d104      	bne.n	8002ad8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ad6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 fb06 	bl	80070ee <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d103      	bne.n	8002af4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2202      	movs	r2, #2
 8002af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 faf8 	bl	80070ee <USB_ReadInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b08:	d115      	bne.n	8002b36 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b12:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d108      	bne.n	8002b36 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8a4 	bl	8002c72 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f004 fbed 	bl	8007310 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fad7 	bl	80070ee <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b4a:	d102      	bne.n	8002b52 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f001 f913 	bl	8003d78 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 fac9 	bl	80070ee <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d106      	bne.n	8002b74 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f86f 	bl	8002c4a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fab8 	bl	80070ee <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b88:	d138      	bne.n	8002bfc <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fc31 	bl	80073f6 <USB_HC_ReadInterrupt>
 8002b94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e025      	b.n	8002be8 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d018      	beq.n	8002be2 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc6:	d106      	bne.n	8002bd6 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f87b 	bl	8002cca <HCD_HC_IN_IRQHandler>
 8002bd4:	e005      	b.n	8002be2 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fca9 	bl	8003534 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3301      	adds	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3d4      	bcc.n	8002b9c <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 fa74 	bl	80070ee <USB_ReadInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d101      	bne.n	8002c14 <HAL_HCD_IRQHandler+0x1d2>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_HCD_IRQHandler+0x1d4>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d014      	beq.n	8002c44 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0210 	bic.w	r2, r2, #16
 8002c28:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fff8 	bl	8003c20 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0210 	orr.w	r2, r2, #16
 8002c3e:	619a      	str	r2, [r3, #24]
 8002c40:	e000      	b.n	8002c44 <HAL_HCD_IRQHandler+0x202>
      return;
 8002c42:	bf00      	nop
    }
  }
}
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	70fb      	strb	r3, [r7, #3]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d119      	bne.n	8002d2e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	461a      	mov	r2, r3
 8002d08:	2304      	movs	r3, #4
 8002d0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	60d3      	str	r3, [r2, #12]
 8002d2c:	e0ce      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d44:	d12c      	bne.n	8002da0 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	335d      	adds	r3, #93	; 0x5d
 8002d6a:	2207      	movs	r2, #7
 8002d6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	0151      	lsls	r1, r2, #5
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	440a      	add	r2, r1
 8002d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fb3d 	bl	8007418 <USB_HC_Halt>
 8002d9e:	e095      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d109      	bne.n	8002dca <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	6093      	str	r3, [r2, #8]
 8002dc8:	e080      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d134      	bne.n	8002e4a <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	0151      	lsls	r1, r2, #5
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	440a      	add	r2, r1
 8002df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfa:	f043 0302 	orr.w	r3, r3, #2
 8002dfe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	335d      	adds	r3, #93	; 0x5d
 8002e10:	2205      	movs	r2, #5
 8002e12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2310      	movs	r3, #16
 8002e24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	2308      	movs	r3, #8
 8002e36:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fae8 	bl	8007418 <USB_HC_Halt>
 8002e48:	e040      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e60:	d134      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	0151      	lsls	r1, r2, #5
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	440a      	add	r2, r1
 8002e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 fac3 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	335d      	adds	r3, #93	; 0x5d
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eca:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee2:	d122      	bne.n	8002f2a <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	0151      	lsls	r1, r2, #5
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	440a      	add	r2, r1
 8002efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fa82 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f26:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f28:	e300      	b.n	800352c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	f040 80fd 	bne.w	800313c <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01b      	beq.n	8002f82 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	3348      	adds	r3, #72	; 0x48
 8002f5a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	0159      	lsls	r1, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	440b      	add	r3, r1
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f6e:	1ad1      	subs	r1, r2, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4403      	add	r3, r0
 8002f7e:	334c      	adds	r3, #76	; 0x4c
 8002f80:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	440b      	add	r3, r1
 8002f90:	335d      	adds	r3, #93	; 0x5d
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3358      	adds	r3, #88	; 0x58
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2301      	movs	r3, #1
 8002fba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	333f      	adds	r3, #63	; 0x3f
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	333f      	adds	r3, #63	; 0x3f
 8002fe2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d121      	bne.n	800302c <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	0151      	lsls	r1, r2, #5
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	440a      	add	r2, r1
 8002ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003002:	f043 0302 	orr.w	r3, r3, #2
 8003006:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f004 fa00 	bl	8007418 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	461a      	mov	r2, r3
 8003026:	2310      	movs	r3, #16
 8003028:	6093      	str	r3, [r2, #8]
 800302a:	e070      	b.n	800310e <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	333f      	adds	r3, #63	; 0x3f
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d12a      	bne.n	8003098 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	0151      	lsls	r1, r2, #5
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	440a      	add	r2, r1
 8003058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800305c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003060:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	335c      	adds	r3, #92	; 0x5c
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	b2d8      	uxtb	r0, r3
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	335c      	adds	r3, #92	; 0x5c
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4601      	mov	r1, r0
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff fe0c 	bl	8002cae <HAL_HCD_HC_NotifyURBChange_Callback>
 8003096:	e03a      	b.n	800310e <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	440b      	add	r3, r1
 80030a6:	333f      	adds	r3, #63	; 0x3f
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d12f      	bne.n	800310e <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	440b      	add	r3, r1
 80030bc:	335c      	adds	r3, #92	; 0x5c
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	3350      	adds	r3, #80	; 0x50
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	f083 0301 	eor.w	r3, r3, #1
 80030d8:	b2d8      	uxtb	r0, r3
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	3350      	adds	r3, #80	; 0x50
 80030ea:	4602      	mov	r2, r0
 80030ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	b2d8      	uxtb	r0, r3
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	335c      	adds	r3, #92	; 0x5c
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4601      	mov	r1, r0
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fdd0 	bl	8002cae <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	3350      	adds	r3, #80	; 0x50
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	f083 0301 	eor.w	r3, r3, #1
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	440b      	add	r3, r1
 8003134:	3350      	adds	r3, #80	; 0x50
 8003136:	4602      	mov	r2, r0
 8003138:	701a      	strb	r2, [r3, #0]
}
 800313a:	e1f7      	b.n	800352c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	f040 811a 	bne.w	8003388 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	440a      	add	r2, r1
 800316a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800316e:	f023 0302 	bic.w	r3, r3, #2
 8003172:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	335d      	adds	r3, #93	; 0x5d
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10a      	bne.n	80031a0 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	335c      	adds	r3, #92	; 0x5c
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e0d9      	b.n	8003354 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	335d      	adds	r3, #93	; 0x5d
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d10a      	bne.n	80031cc <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	335c      	adds	r3, #92	; 0x5c
 80031c6:	2205      	movs	r2, #5
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e0c3      	b.n	8003354 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	335d      	adds	r3, #93	; 0x5d
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d00a      	beq.n	80031f8 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	335d      	adds	r3, #93	; 0x5d
 80031f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d156      	bne.n	80032a6 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	3358      	adds	r3, #88	; 0x58
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4403      	add	r3, r0
 800321a:	3358      	adds	r3, #88	; 0x58
 800321c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	3358      	adds	r3, #88	; 0x58
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d914      	bls.n	800325e <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	3358      	adds	r3, #88	; 0x58
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	335c      	adds	r3, #92	; 0x5c
 8003258:	2204      	movs	r2, #4
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e009      	b.n	8003272 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	335c      	adds	r3, #92	; 0x5c
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003288:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003290:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	e056      	b.n	8003354 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	335d      	adds	r3, #93	; 0x5d
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d123      	bne.n	8003304 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	461a      	mov	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e027      	b.n	8003354 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	335d      	adds	r3, #93	; 0x5d
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b07      	cmp	r3, #7
 8003318:	d11c      	bne.n	8003354 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	3358      	adds	r3, #88	; 0x58
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1c59      	adds	r1, r3, #1
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4403      	add	r3, r0
 800333c:	3358      	adds	r3, #88	; 0x58
 800333e:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	335c      	adds	r3, #92	; 0x5c
 8003350:	2204      	movs	r2, #4
 8003352:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	461a      	mov	r2, r3
 8003362:	2302      	movs	r3, #2
 8003364:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	b2d8      	uxtb	r0, r3
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	335c      	adds	r3, #92	; 0x5c
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4601      	mov	r1, r0
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fc94 	bl	8002cae <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003386:	e0d1      	b.n	800352c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d13e      	bne.n	800341c <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	0151      	lsls	r1, r2, #5
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	440a      	add	r2, r1
 80033b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	3358      	adds	r3, #88	; 0x58
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1c59      	adds	r1, r3, #1
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4403      	add	r3, r0
 80033e0:	3358      	adds	r3, #88	; 0x58
 80033e2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	335d      	adds	r3, #93	; 0x5d
 80033f4:	2206      	movs	r2, #6
 80033f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f004 f808 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	6093      	str	r3, [r2, #8]
}
 800341a:	e087      	b.n	800352c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d17c      	bne.n	800352c <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	333f      	adds	r3, #63	; 0x3f
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d122      	bne.n	800348e <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	3358      	adds	r3, #88	; 0x58
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	0151      	lsls	r1, r2, #5
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	440a      	add	r2, r1
 8003472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003476:	f043 0302 	orr.w	r3, r3, #2
 800347a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f003 ffc6 	bl	8007418 <USB_HC_Halt>
 800348c:	e045      	b.n	800351a <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	333f      	adds	r3, #63	; 0x3f
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	333f      	adds	r3, #63	; 0x3f
 80034b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d12f      	bne.n	800351a <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	3358      	adds	r3, #88	; 0x58
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d121      	bne.n	800351a <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	440b      	add	r3, r1
 80034e4:	335d      	adds	r3, #93	; 0x5d
 80034e6:	2203      	movs	r2, #3
 80034e8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f003 ff7f 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003526:	461a      	mov	r2, r3
 8003528:	2310      	movs	r3, #16
 800352a:	6093      	str	r3, [r2, #8]
}
 800352c:	bf00      	nop
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d119      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	461a      	mov	r2, r3
 8003572:	2304      	movs	r3, #4
 8003574:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	440a      	add	r2, r1
 800358c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003596:	e33e      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d141      	bne.n	8003632 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	461a      	mov	r2, r3
 80035bc:	2320      	movs	r3, #32
 80035be:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	333d      	adds	r3, #61	; 0x3d
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	f040 831f 	bne.w	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	333d      	adds	r3, #61	; 0x3d
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	335c      	adds	r3, #92	; 0x5c
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	440a      	add	r2, r1
 8003616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f003 fef4 	bl	8007418 <USB_HC_Halt>
}
 8003630:	e2f1      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d13f      	bne.n	80036c8 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	440b      	add	r3, r1
 8003656:	335d      	adds	r3, #93	; 0x5d
 8003658:	2204      	movs	r2, #4
 800365a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	333d      	adds	r3, #61	; 0x3d
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	3358      	adds	r3, #88	; 0x58
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	0151      	lsls	r1, r2, #5
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	440a      	add	r2, r1
 800369a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 feb2 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c0:	461a      	mov	r2, r3
 80036c2:	2340      	movs	r3, #64	; 0x40
 80036c4:	6093      	str	r3, [r2, #8]
}
 80036c6:	e2a6      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036de:	d122      	bne.n	8003726 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f003 fe84 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003722:	6093      	str	r3, [r2, #8]
}
 8003724:	e277      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d135      	bne.n	80037a8 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	3358      	adds	r3, #88	; 0x58
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	0151      	lsls	r1, r2, #5
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	440a      	add	r2, r1
 8003766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800376a:	f043 0302 	orr.w	r3, r3, #2
 800376e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f003 fe4c 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	2301      	movs	r3, #1
 8003790:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	440b      	add	r3, r1
 80037a0:	335d      	adds	r3, #93	; 0x5d
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
}
 80037a6:	e236      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d12b      	bne.n	8003816 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ca:	461a      	mov	r2, r3
 80037cc:	2308      	movs	r3, #8
 80037ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	0151      	lsls	r1, r2, #5
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	440a      	add	r2, r1
 80037e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 fe0c 	bl	8007418 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	440b      	add	r3, r1
 800380e:	335d      	adds	r3, #93	; 0x5d
 8003810:	2205      	movs	r2, #5
 8003812:	701a      	strb	r2, [r3, #0]
}
 8003814:	e1ff      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d155      	bne.n	80038d8 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	440b      	add	r3, r1
 800383a:	3358      	adds	r3, #88	; 0x58
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	440b      	add	r3, r1
 800384e:	335d      	adds	r3, #93	; 0x5d
 8003850:	2203      	movs	r2, #3
 8003852:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	333d      	adds	r3, #61	; 0x3d
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d114      	bne.n	8003894 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	333c      	adds	r3, #60	; 0x3c
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	440b      	add	r3, r1
 800388e:	333d      	adds	r3, #61	; 0x3d
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 fdaa 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	2310      	movs	r3, #16
 80038d4:	6093      	str	r3, [r2, #8]
}
 80038d6:	e19e      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d12b      	bne.n	8003946 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	0151      	lsls	r1, r2, #5
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	440a      	add	r2, r1
 8003904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f003 fd7d 	bl	8007418 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	335d      	adds	r3, #93	; 0x5d
 800392e:	2206      	movs	r2, #6
 8003930:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393e:	461a      	mov	r2, r3
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	6093      	str	r3, [r2, #8]
}
 8003944:	e167      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d135      	bne.n	80039ca <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4413      	add	r3, r2
 8003966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	0151      	lsls	r1, r2, #5
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	440a      	add	r2, r1
 8003974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003978:	f043 0302 	orr.w	r3, r3, #2
 800397c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f003 fd45 	bl	8007418 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399a:	461a      	mov	r2, r3
 800399c:	2310      	movs	r3, #16
 800399e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ac:	461a      	mov	r2, r3
 80039ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	335d      	adds	r3, #93	; 0x5d
 80039c4:	2208      	movs	r2, #8
 80039c6:	701a      	strb	r2, [r3, #0]
}
 80039c8:	e125      	b.n	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	f040 811a 	bne.w	8003c16 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	0151      	lsls	r1, r2, #5
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	440a      	add	r2, r1
 80039f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	440b      	add	r3, r1
 8003a10:	335d      	adds	r3, #93	; 0x5d
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d137      	bne.n	8003a88 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	440b      	add	r3, r1
 8003a26:	335c      	adds	r3, #92	; 0x5c
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	440b      	add	r3, r1
 8003a3a:	333f      	adds	r3, #63	; 0x3f
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d00b      	beq.n	8003a5a <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	440b      	add	r3, r1
 8003a50:	333f      	adds	r3, #63	; 0x3f
 8003a52:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	f040 80c5 	bne.w	8003be4 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	440b      	add	r3, r1
 8003a68:	3351      	adds	r3, #81	; 0x51
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	f083 0301 	eor.w	r3, r3, #1
 8003a70:	b2d8      	uxtb	r0, r3
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	3351      	adds	r3, #81	; 0x51
 8003a82:	4602      	mov	r2, r0
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e0ad      	b.n	8003be4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	440b      	add	r3, r1
 8003a96:	335d      	adds	r3, #93	; 0x5d
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d10a      	bne.n	8003ab4 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	335c      	adds	r3, #92	; 0x5c
 8003aae:	2202      	movs	r2, #2
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e097      	b.n	8003be4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	335d      	adds	r3, #93	; 0x5d
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d10a      	bne.n	8003ae0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	440b      	add	r3, r1
 8003ad8:	335c      	adds	r3, #92	; 0x5c
 8003ada:	2202      	movs	r2, #2
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e081      	b.n	8003be4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	440b      	add	r3, r1
 8003aee:	335d      	adds	r3, #93	; 0x5d
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d10a      	bne.n	8003b0c <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	335c      	adds	r3, #92	; 0x5c
 8003b06:	2205      	movs	r2, #5
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e06b      	b.n	8003be4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	335d      	adds	r3, #93	; 0x5d
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d00a      	beq.n	8003b38 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	335d      	adds	r3, #93	; 0x5d
 8003b32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d155      	bne.n	8003be4 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	3358      	adds	r3, #88	; 0x58
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4403      	add	r3, r0
 8003b5a:	3358      	adds	r3, #88	; 0x58
 8003b5c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3358      	adds	r3, #88	; 0x58
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d914      	bls.n	8003b9e <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	440b      	add	r3, r1
 8003b82:	3358      	adds	r3, #88	; 0x58
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	440b      	add	r3, r1
 8003b96:	335c      	adds	r3, #92	; 0x5c
 8003b98:	2204      	movs	r2, #4
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	e009      	b.n	8003bb2 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	440b      	add	r3, r1
 8003bac:	335c      	adds	r3, #92	; 0x5c
 8003bae:	2202      	movs	r2, #2
 8003bb0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bc8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bd0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	461a      	mov	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	b2d8      	uxtb	r0, r3
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	335c      	adds	r3, #92	; 0x5c
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4601      	mov	r1, r0
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff f84c 	bl	8002cae <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c16:	bf00      	nop
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	0c5b      	lsrs	r3, r3, #17
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c54:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d003      	beq.n	8003c64 <HCD_RXQLVL_IRQHandler+0x44>
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	f000 8082 	beq.w	8003d66 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c62:	e083      	b.n	8003d6c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d07f      	beq.n	8003d6a <HCD_RXQLVL_IRQHandler+0x14a>
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	440b      	add	r3, r1
 8003c78:	3344      	adds	r3, #68	; 0x44
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d074      	beq.n	8003d6a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	440b      	add	r3, r1
 8003c92:	3344      	adds	r3, #68	; 0x44
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f003 f9fe 	bl	800709c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	3344      	adds	r3, #68	; 0x44
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	18d1      	adds	r1, r2, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4403      	add	r3, r0
 8003cc4:	3344      	adds	r3, #68	; 0x44
 8003cc6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	334c      	adds	r3, #76	; 0x4c
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	18d1      	adds	r1, r2, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4403      	add	r3, r0
 8003cec:	334c      	adds	r3, #76	; 0x4c
 8003cee:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HCD_RXQLVL_IRQHandler+0x154>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d031      	beq.n	8003d6a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d1c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d24:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	3350      	adds	r3, #80	; 0x50
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	f083 0301 	eor.w	r3, r3, #1
 8003d4e:	b2d8      	uxtb	r0, r3
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3350      	adds	r3, #80	; 0x50
 8003d60:	4602      	mov	r2, r0
 8003d62:	701a      	strb	r2, [r3, #0]
      break;
 8003d64:	e001      	b.n	8003d6a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003d6a:	bf00      	nop
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3728      	adds	r7, #40	; 0x28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	1ff80000 	.word	0x1ff80000

08003d78 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003da4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d10b      	bne.n	8003dc8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fe ff4f 	bl	8002c5e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f043 0302 	orr.w	r3, r3, #2
 8003dc6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d132      	bne.n	8003e38 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f043 0308 	orr.w	r3, r3, #8
 8003dd8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d126      	bne.n	8003e32 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d113      	bne.n	8003e14 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003df2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df6:	d106      	bne.n	8003e06 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f003 fa86 	bl	8007310 <USB_InitFSLSPClkSel>
 8003e04:	e011      	b.n	8003e2a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f003 fa7f 	bl	8007310 <USB_InitFSLSPClkSel>
 8003e12:	e00a      	b.n	8003e2a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d106      	bne.n	8003e2a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e22:	461a      	mov	r2, r3
 8003e24:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e28:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fe ff2b 	bl	8002c86 <HAL_HCD_PortEnabled_Callback>
 8003e30:	e002      	b.n	8003e38 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe ff31 	bl	8002c9a <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d103      	bne.n	8003e4a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f043 0320 	orr.w	r3, r3, #32
 8003e48:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6013      	str	r3, [r2, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e11f      	b.n	80040b2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd f81a 	bl	8000ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	; 0x24
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f001 f922 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4a7b      	ldr	r2, [pc, #492]	; (80040bc <HAL_I2C_Init+0x25c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d807      	bhi.n	8003ee4 <HAL_I2C_Init+0x84>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a7a      	ldr	r2, [pc, #488]	; (80040c0 <HAL_I2C_Init+0x260>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e006      	b.n	8003ef2 <HAL_I2C_Init+0x92>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a77      	ldr	r2, [pc, #476]	; (80040c4 <HAL_I2C_Init+0x264>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	bf94      	ite	ls
 8003eec:	2301      	movls	r3, #1
 8003eee:	2300      	movhi	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0db      	b.n	80040b2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a72      	ldr	r2, [pc, #456]	; (80040c8 <HAL_I2C_Init+0x268>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	0c9b      	lsrs	r3, r3, #18
 8003f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a64      	ldr	r2, [pc, #400]	; (80040bc <HAL_I2C_Init+0x25c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d802      	bhi.n	8003f34 <HAL_I2C_Init+0xd4>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3301      	adds	r3, #1
 8003f32:	e009      	b.n	8003f48 <HAL_I2C_Init+0xe8>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	4a63      	ldr	r2, [pc, #396]	; (80040cc <HAL_I2C_Init+0x26c>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	3301      	adds	r3, #1
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4956      	ldr	r1, [pc, #344]	; (80040bc <HAL_I2C_Init+0x25c>)
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d80d      	bhi.n	8003f84 <HAL_I2C_Init+0x124>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1e59      	subs	r1, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	bf38      	it	cc
 8003f80:	2304      	movcc	r3, #4
 8003f82:	e04f      	b.n	8004024 <HAL_I2C_Init+0x1c4>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <HAL_I2C_Init+0x150>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1e58      	subs	r0, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	440b      	add	r3, r1
 8003f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e012      	b.n	8003fd6 <HAL_I2C_Init+0x176>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	0099      	lsls	r1, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Init+0x17e>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e022      	b.n	8004024 <HAL_I2C_Init+0x1c4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10e      	bne.n	8004004 <HAL_I2C_Init+0x1a4>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1e58      	subs	r0, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	440b      	add	r3, r1
 8003ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004002:	e00f      	b.n	8004024 <HAL_I2C_Init+0x1c4>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e58      	subs	r0, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	0099      	lsls	r1, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	fbb0 f3f3 	udiv	r3, r0, r3
 800401a:	3301      	adds	r3, #1
 800401c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	6809      	ldr	r1, [r1, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6911      	ldr	r1, [r2, #16]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	000186a0 	.word	0x000186a0
 80040c0:	001e847f 	.word	0x001e847f
 80040c4:	003d08ff 	.word	0x003d08ff
 80040c8:	431bde83 	.word	0x431bde83
 80040cc:	10624dd3 	.word	0x10624dd3

080040d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d129      	bne.n	800413a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2224      	movs	r2, #36	; 0x24
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0210 	bic.w	r2, r2, #16
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b20      	cmp	r3, #32
 8004160:	d12a      	bne.n	80041b8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2224      	movs	r2, #36	; 0x24
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004182:	89fb      	ldrh	r3, [r7, #14]
 8004184:	f023 030f 	bic.w	r3, r3, #15
 8004188:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	b29a      	uxth	r2, r3
 800418e:	89fb      	ldrh	r3, [r7, #14]
 8004190:	4313      	orrs	r3, r2
 8004192:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	89fa      	ldrh	r2, [r7, #14]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e0bf      	b.n	800435a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc ff50 	bl	8001094 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800420a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6999      	ldr	r1, [r3, #24]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004220:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b4a      	ldr	r3, [pc, #296]	; (8004364 <HAL_LTDC_Init+0x19c>)
 800423c:	400b      	ands	r3, r1
 800423e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6899      	ldr	r1, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68d9      	ldr	r1, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <HAL_LTDC_Init+0x19c>)
 800426a:	400b      	ands	r3, r1
 800426c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68d9      	ldr	r1, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1a      	ldr	r2, [r3, #32]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6919      	ldr	r1, [r3, #16]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b33      	ldr	r3, [pc, #204]	; (8004364 <HAL_LTDC_Init+0x19c>)
 8004298:	400b      	ands	r3, r1
 800429a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6919      	ldr	r1, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6959      	ldr	r1, [r3, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_LTDC_Init+0x19c>)
 80042c6:	400b      	ands	r3, r1
 80042c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6959      	ldr	r1, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0206 	orr.w	r2, r2, #6
 8004336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	f000f800 	.word	0xf000f800

08004368 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d023      	beq.n	80043d2 <HAL_LTDC_IRQHandler+0x6a>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01e      	beq.n	80043d2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2204      	movs	r2, #4
 80043aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2204      	movs	r2, #4
 80043c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f86f 	bl	80044b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d023      	beq.n	8004424 <HAL_LTDC_IRQHandler+0xbc>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01e      	beq.n	8004424 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0202 	bic.w	r2, r2, #2
 80043f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2202      	movs	r2, #2
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004404:	f043 0202 	orr.w	r2, r3, #2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2204      	movs	r2, #4
 8004412:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f846 	bl	80044b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01b      	beq.n	8004466 <HAL_LTDC_IRQHandler+0xfe>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d016      	beq.n	8004466 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2201      	movs	r2, #1
 800444e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f82f 	bl	80044c4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01b      	beq.n	80044a8 <HAL_LTDC_IRQHandler+0x140>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0208 	bic.w	r2, r2, #8
 8004488:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2208      	movs	r2, #8
 8004490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f818 	bl	80044d8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044ec:	b5b0      	push	{r4, r5, r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_LTDC_ConfigLayer+0x1a>
 8004502:	2302      	movs	r3, #2
 8004504:	e02c      	b.n	8004560 <HAL_LTDC_ConfigLayer+0x74>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2134      	movs	r1, #52	; 0x34
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4614      	mov	r4, r2
 800452a:	461d      	mov	r5, r3
 800452c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f811 	bl	8004568 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2201      	movs	r2, #1
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bdb0      	pop	{r4, r5, r7, pc}

08004568 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004584:	4413      	add	r3, r2
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	01db      	lsls	r3, r3, #7
 8004594:	4413      	add	r3, r2
 8004596:	3384      	adds	r3, #132	; 0x84
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	4611      	mov	r1, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	01d2      	lsls	r2, r2, #7
 80045a4:	440a      	add	r2, r1
 80045a6:	3284      	adds	r2, #132	; 0x84
 80045a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80045ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045be:	4413      	add	r3, r2
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	01db      	lsls	r3, r3, #7
 80045cc:	440b      	add	r3, r1
 80045ce:	3384      	adds	r3, #132	; 0x84
 80045d0:	4619      	mov	r1, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045e6:	4413      	add	r3, r2
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	01db      	lsls	r3, r3, #7
 80045f6:	4413      	add	r3, r2
 80045f8:	3384      	adds	r3, #132	; 0x84
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4611      	mov	r1, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	01d2      	lsls	r2, r2, #7
 8004606:	440a      	add	r2, r1
 8004608:	3284      	adds	r2, #132	; 0x84
 800460a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800460e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461e:	4413      	add	r3, r2
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4619      	mov	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	440b      	add	r3, r1
 800462e:	3384      	adds	r3, #132	; 0x84
 8004630:	4619      	mov	r1, r3
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	01db      	lsls	r3, r3, #7
 8004642:	4413      	add	r3, r2
 8004644:	3384      	adds	r3, #132	; 0x84
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	4611      	mov	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	01d2      	lsls	r2, r2, #7
 8004652:	440a      	add	r2, r1
 8004654:	3284      	adds	r2, #132	; 0x84
 8004656:	f023 0307 	bic.w	r3, r3, #7
 800465a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	01db      	lsls	r3, r3, #7
 8004666:	4413      	add	r3, r2
 8004668:	3384      	adds	r3, #132	; 0x84
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	01db      	lsls	r3, r3, #7
 8004698:	4413      	add	r3, r2
 800469a:	3384      	adds	r3, #132	; 0x84
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	01db      	lsls	r3, r3, #7
 80046a8:	4413      	add	r3, r2
 80046aa:	3384      	adds	r3, #132	; 0x84
 80046ac:	461a      	mov	r2, r3
 80046ae:	2300      	movs	r3, #0
 80046b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046b8:	461a      	mov	r2, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	431a      	orrs	r2, r3
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4619      	mov	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	440b      	add	r3, r1
 80046ce:	3384      	adds	r3, #132	; 0x84
 80046d0:	4619      	mov	r1, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	01db      	lsls	r3, r3, #7
 80046e2:	4413      	add	r3, r2
 80046e4:	3384      	adds	r3, #132	; 0x84
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	4611      	mov	r1, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	01d2      	lsls	r2, r2, #7
 80046f2:	440a      	add	r2, r1
 80046f4:	3284      	adds	r2, #132	; 0x84
 80046f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	4413      	add	r3, r2
 8004708:	3384      	adds	r3, #132	; 0x84
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	01db      	lsls	r3, r3, #7
 800471c:	4413      	add	r3, r2
 800471e:	3384      	adds	r3, #132	; 0x84
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	4611      	mov	r1, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	01d2      	lsls	r2, r2, #7
 800472c:	440a      	add	r2, r1
 800472e:	3284      	adds	r2, #132	; 0x84
 8004730:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004734:	f023 0307 	bic.w	r3, r3, #7
 8004738:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	6809      	ldr	r1, [r1, #0]
 8004746:	4608      	mov	r0, r1
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	01c9      	lsls	r1, r1, #7
 800474c:	4401      	add	r1, r0
 800474e:	3184      	adds	r1, #132	; 0x84
 8004750:	4313      	orrs	r3, r2
 8004752:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	4413      	add	r3, r2
 8004760:	3384      	adds	r3, #132	; 0x84
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	01db      	lsls	r3, r3, #7
 800476e:	4413      	add	r3, r2
 8004770:	3384      	adds	r3, #132	; 0x84
 8004772:	461a      	mov	r2, r3
 8004774:	2300      	movs	r3, #0
 8004776:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	01db      	lsls	r3, r3, #7
 8004782:	4413      	add	r3, r2
 8004784:	3384      	adds	r3, #132	; 0x84
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004796:	2304      	movs	r3, #4
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e01b      	b.n	80047d4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d102      	bne.n	80047aa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80047a4:	2303      	movs	r3, #3
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	e014      	b.n	80047d4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00b      	beq.n	80047ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d007      	beq.n	80047ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d003      	beq.n	80047ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047c6:	2b07      	cmp	r3, #7
 80047c8:	d102      	bne.n	80047d0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80047ca:	2302      	movs	r3, #2
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e001      	b.n	80047d4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80047d0:	2301      	movs	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	01db      	lsls	r3, r3, #7
 80047de:	4413      	add	r3, r2
 80047e0:	3384      	adds	r3, #132	; 0x84
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	4611      	mov	r1, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	01d2      	lsls	r2, r2, #7
 80047ee:	440a      	add	r2, r1
 80047f0:	3284      	adds	r2, #132	; 0x84
 80047f2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80047f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	041a      	lsls	r2, r3, #16
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	6859      	ldr	r1, [r3, #4]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	1acb      	subs	r3, r1, r3
 800480e:	69f9      	ldr	r1, [r7, #28]
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	3303      	adds	r3, #3
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	6809      	ldr	r1, [r1, #0]
 800481a:	4608      	mov	r0, r1
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	01c9      	lsls	r1, r1, #7
 8004820:	4401      	add	r1, r0
 8004822:	3184      	adds	r1, #132	; 0x84
 8004824:	4313      	orrs	r3, r2
 8004826:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	01db      	lsls	r3, r3, #7
 8004832:	4413      	add	r3, r2
 8004834:	3384      	adds	r3, #132	; 0x84
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	4611      	mov	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	01d2      	lsls	r2, r2, #7
 8004842:	440a      	add	r2, r1
 8004844:	3284      	adds	r2, #132	; 0x84
 8004846:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	01db      	lsls	r3, r3, #7
 800485a:	4413      	add	r3, r2
 800485c:	3384      	adds	r3, #132	; 0x84
 800485e:	461a      	mov	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	01db      	lsls	r3, r3, #7
 8004870:	4413      	add	r3, r2
 8004872:	3384      	adds	r3, #132	; 0x84
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	4611      	mov	r1, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	01d2      	lsls	r2, r2, #7
 8004880:	440a      	add	r2, r1
 8004882:	3284      	adds	r2, #132	; 0x84
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6013      	str	r3, [r2, #0]
}
 800488a:	bf00      	nop
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e25b      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d075      	beq.n	80049a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b6:	4ba3      	ldr	r3, [pc, #652]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d00c      	beq.n	80048dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4ba0      	ldr	r3, [pc, #640]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d112      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ce:	4b9d      	ldr	r3, [pc, #628]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048da:	d10b      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	4b99      	ldr	r3, [pc, #612]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d05b      	beq.n	80049a0 <HAL_RCC_OscConfig+0x108>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d157      	bne.n	80049a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e236      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d106      	bne.n	800490c <HAL_RCC_OscConfig+0x74>
 80048fe:	4b91      	ldr	r3, [pc, #580]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a90      	ldr	r2, [pc, #576]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e01d      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x98>
 8004916:	4b8b      	ldr	r3, [pc, #556]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a8a      	ldr	r2, [pc, #552]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a87      	ldr	r2, [pc, #540]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 8004930:	4b84      	ldr	r3, [pc, #528]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a83      	ldr	r2, [pc, #524]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a80      	ldr	r2, [pc, #512]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd fac2 	bl	8001ed8 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004958:	f7fd fabe 	bl	8001ed8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e1fb      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0xc0>
 8004976:	e014      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fd faae 	bl	8001ed8 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004980:	f7fd faaa 	bl	8001ed8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1e7      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	4b6c      	ldr	r3, [pc, #432]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0xe8>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d063      	beq.n	8004a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ae:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d11c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c6:	4b5f      	ldr	r3, [pc, #380]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d116      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	4b5c      	ldr	r3, [pc, #368]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e1bb      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b56      	ldr	r3, [pc, #344]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4952      	ldr	r1, [pc, #328]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	e03a      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d020      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a08:	4b4f      	ldr	r3, [pc, #316]	; (8004b48 <HAL_RCC_OscConfig+0x2b0>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fd fa63 	bl	8001ed8 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a16:	f7fd fa5f 	bl	8001ed8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e19c      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a34:	4b43      	ldr	r3, [pc, #268]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4940      	ldr	r1, [pc, #256]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]
 8004a48:	e015      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <HAL_RCC_OscConfig+0x2b0>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fa42 	bl	8001ed8 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fd fa3e 	bl	8001ed8 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e17b      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d030      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8a:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x2b4>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fd fa22 	bl	8001ed8 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a98:	f7fd fa1e 	bl	8001ed8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e15b      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x200>
 8004ab6:	e015      	b.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab8:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_RCC_OscConfig+0x2b4>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abe:	f7fd fa0b 	bl	8001ed8 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fd fa07 	bl	8001ed8 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e144      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80a0 	beq.w	8004c32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d121      	bne.n	8004b72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3a:	f7fd f9cd 	bl	8001ed8 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	e011      	b.n	8004b66 <HAL_RCC_OscConfig+0x2ce>
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	42470000 	.word	0x42470000
 8004b4c:	42470e80 	.word	0x42470e80
 8004b50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b54:	f7fd f9c0 	bl	8001ed8 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0fd      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b66:	4b81      	ldr	r3, [pc, #516]	; (8004d6c <HAL_RCC_OscConfig+0x4d4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
 8004b7a:	4b7d      	ldr	r3, [pc, #500]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a7c      	ldr	r2, [pc, #496]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
 8004b86:	e01c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x32a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_OscConfig+0x312>
 8004b90:	4b77      	ldr	r3, [pc, #476]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a76      	ldr	r2, [pc, #472]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004b96:	f043 0304 	orr.w	r3, r3, #4
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	4b74      	ldr	r3, [pc, #464]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a73      	ldr	r2, [pc, #460]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x32a>
 8004baa:	4b71      	ldr	r3, [pc, #452]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4a70      	ldr	r2, [pc, #448]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb6:	4b6e      	ldr	r3, [pc, #440]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a6d      	ldr	r2, [pc, #436]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d015      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fd f985 	bl	8001ed8 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fd f981 	bl	8001ed8 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0bc      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	4b61      	ldr	r3, [pc, #388]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ee      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x33a>
 8004bf4:	e014      	b.n	8004c20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf6:	f7fd f96f 	bl	8001ed8 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fd f96b 	bl	8001ed8 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0a6      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	4b56      	ldr	r3, [pc, #344]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ee      	bne.n	8004bfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d105      	bne.n	8004c32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c26:	4b52      	ldr	r3, [pc, #328]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a51      	ldr	r2, [pc, #324]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8092 	beq.w	8004d60 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3c:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d05c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d141      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c50:	4b48      	ldr	r3, [pc, #288]	; (8004d74 <HAL_RCC_OscConfig+0x4dc>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c56:	f7fd f93f 	bl	8001ed8 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fd f93b 	bl	8001ed8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e078      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c70:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	3b01      	subs	r3, #1
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	061b      	lsls	r3, r3, #24
 8004ca0:	4933      	ldr	r1, [pc, #204]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca6:	4b33      	ldr	r3, [pc, #204]	; (8004d74 <HAL_RCC_OscConfig+0x4dc>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7fd f914 	bl	8001ed8 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd f910 	bl	8001ed8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e04d      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x41c>
 8004cd2:	e045      	b.n	8004d60 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd4:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <HAL_RCC_OscConfig+0x4dc>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fd f8fd 	bl	8001ed8 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fd f8f9 	bl	8001ed8 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e036      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x44a>
 8004d00:	e02e      	b.n	8004d60 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e029      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <HAL_RCC_OscConfig+0x4d8>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d11c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d115      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d36:	4013      	ands	r3, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10d      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d106      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40007000 	.word	0x40007000
 8004d70:	40023800 	.word	0x40023800
 8004d74:	42470060 	.word	0x42470060

08004d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0cc      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b68      	ldr	r3, [pc, #416]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d90c      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b65      	ldr	r3, [pc, #404]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b8      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dcc:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a58      	ldr	r2, [pc, #352]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de4:	4b53      	ldr	r3, [pc, #332]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a52      	ldr	r2, [pc, #328]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	494d      	ldr	r1, [pc, #308]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d044      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d119      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e07f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e36:	4b3f      	ldr	r3, [pc, #252]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e06f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e46:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e067      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e56:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f023 0203 	bic.w	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4934      	ldr	r1, [pc, #208]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e68:	f7fd f836 	bl	8001ed8 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e70:	f7fd f832 	bl	8001ed8 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e04f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 020c 	and.w	r2, r3, #12
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1eb      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e98:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d20c      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e032      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4916      	ldr	r1, [pc, #88]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	490e      	ldr	r1, [pc, #56]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004efe:	f000 f821 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8004f02:	4601      	mov	r1, r0
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <HAL_RCC_ClockConfig+0x1c0>)
 8004f10:	5cd3      	ldrb	r3, [r2, r3]
 8004f12:	fa21 f303 	lsr.w	r3, r1, r3
 8004f16:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fc fc12 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023c00 	.word	0x40023c00
 8004f34:	40023800 	.word	0x40023800
 8004f38:	0800a914 	.word	0x0800a914
 8004f3c:	20000020 	.word	0x20000020
 8004f40:	20000024 	.word	0x20000024

08004f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	2300      	movs	r3, #0
 8004f54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d007      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x32>
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d008      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x38>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 80b4 	bne.w	80050d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b5e      	ldr	r3, [pc, #376]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f72:	60bb      	str	r3, [r7, #8]
       break;
 8004f74:	e0b3      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f76:	4b5e      	ldr	r3, [pc, #376]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f78:	60bb      	str	r3, [r7, #8]
      break;
 8004f7a:	e0b0      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f7c:	4b5a      	ldr	r3, [pc, #360]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f86:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d04a      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f92:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	ea03 0501 	and.w	r5, r3, r1
 8004fa8:	ea04 0602 	and.w	r6, r4, r2
 8004fac:	4629      	mov	r1, r5
 8004fae:	4632      	mov	r2, r6
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	0154      	lsls	r4, r2, #5
 8004fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fbe:	014b      	lsls	r3, r1, #5
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	1b49      	subs	r1, r1, r5
 8004fc6:	eb62 0206 	sbc.w	r2, r2, r6
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	f04f 0400 	mov.w	r4, #0
 8004fd2:	0194      	lsls	r4, r2, #6
 8004fd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fd8:	018b      	lsls	r3, r1, #6
 8004fda:	1a5b      	subs	r3, r3, r1
 8004fdc:	eb64 0402 	sbc.w	r4, r4, r2
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	00e2      	lsls	r2, r4, #3
 8004fea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fee:	00d9      	lsls	r1, r3, #3
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	195b      	adds	r3, r3, r5
 8004ff6:	eb44 0406 	adc.w	r4, r4, r6
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	0262      	lsls	r2, r4, #9
 8005004:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005008:	0259      	lsls	r1, r3, #9
 800500a:	460b      	mov	r3, r1
 800500c:	4614      	mov	r4, r2
 800500e:	4618      	mov	r0, r3
 8005010:	4621      	mov	r1, r4
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f04f 0400 	mov.w	r4, #0
 8005018:	461a      	mov	r2, r3
 800501a:	4623      	mov	r3, r4
 800501c:	f7fb f938 	bl	8000290 <__aeabi_uldivmod>
 8005020:	4603      	mov	r3, r0
 8005022:	460c      	mov	r4, r1
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e049      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005028:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	099b      	lsrs	r3, r3, #6
 800502e:	f04f 0400 	mov.w	r4, #0
 8005032:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	ea03 0501 	and.w	r5, r3, r1
 800503e:	ea04 0602 	and.w	r6, r4, r2
 8005042:	4629      	mov	r1, r5
 8005044:	4632      	mov	r2, r6
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	f04f 0400 	mov.w	r4, #0
 800504e:	0154      	lsls	r4, r2, #5
 8005050:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005054:	014b      	lsls	r3, r1, #5
 8005056:	4619      	mov	r1, r3
 8005058:	4622      	mov	r2, r4
 800505a:	1b49      	subs	r1, r1, r5
 800505c:	eb62 0206 	sbc.w	r2, r2, r6
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	f04f 0400 	mov.w	r4, #0
 8005068:	0194      	lsls	r4, r2, #6
 800506a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800506e:	018b      	lsls	r3, r1, #6
 8005070:	1a5b      	subs	r3, r3, r1
 8005072:	eb64 0402 	sbc.w	r4, r4, r2
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	00e2      	lsls	r2, r4, #3
 8005080:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005084:	00d9      	lsls	r1, r3, #3
 8005086:	460b      	mov	r3, r1
 8005088:	4614      	mov	r4, r2
 800508a:	195b      	adds	r3, r3, r5
 800508c:	eb44 0406 	adc.w	r4, r4, r6
 8005090:	f04f 0100 	mov.w	r1, #0
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	02a2      	lsls	r2, r4, #10
 800509a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800509e:	0299      	lsls	r1, r3, #10
 80050a0:	460b      	mov	r3, r1
 80050a2:	4614      	mov	r4, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	4621      	mov	r1, r4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f04f 0400 	mov.w	r4, #0
 80050ae:	461a      	mov	r2, r3
 80050b0:	4623      	mov	r3, r4
 80050b2:	f7fb f8ed 	bl	8000290 <__aeabi_uldivmod>
 80050b6:	4603      	mov	r3, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	3301      	adds	r3, #1
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	60bb      	str	r3, [r7, #8]
      break;
 80050d6:	e002      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050da:	60bb      	str	r3, [r7, #8]
      break;
 80050dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050de:	68bb      	ldr	r3, [r7, #8]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	007a1200 	.word	0x007a1200

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCC_GetHCLKFreq+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000020 	.word	0x20000020

0800510c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005110:	f7ff fff0 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005114:	4601      	mov	r1, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0a9b      	lsrs	r3, r3, #10
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4a03      	ldr	r2, [pc, #12]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005122:	5cd3      	ldrb	r3, [r2, r3]
 8005124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40023800 	.word	0x40023800
 8005130:	0800a924 	.word	0x0800a924

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005138:	f7ff ffdc 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 800513c:	4601      	mov	r1, r0
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	0b5b      	lsrs	r3, r3, #13
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4a03      	ldr	r2, [pc, #12]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40023800 	.word	0x40023800
 8005158:	0800a924 	.word	0x0800a924

0800515c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	220f      	movs	r2, #15
 800516a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800516c:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_RCC_GetClockConfig+0x5c>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0203 	and.w	r2, r3, #3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <HAL_RCC_GetClockConfig+0x5c>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	08db      	lsrs	r3, r3, #3
 8005196:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <HAL_RCC_GetClockConfig+0x60>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 020f 	and.w	r2, r3, #15
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40023c00 	.word	0x40023c00

080051c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d075      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051f4:	4bad      	ldr	r3, [pc, #692]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051fa:	f7fc fe6d 	bl	8001ed8 <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005202:	f7fc fe69 	bl	8001ed8 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e18b      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005214:	4ba6      	ldr	r3, [pc, #664]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f0      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	019a      	lsls	r2, r3, #6
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	071b      	lsls	r3, r3, #28
 8005238:	499d      	ldr	r1, [pc, #628]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01f      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800524c:	4b98      	ldr	r3, [pc, #608]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800524e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005252:	0f1b      	lsrs	r3, r3, #28
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	019a      	lsls	r2, r3, #6
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	431a      	orrs	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	071b      	lsls	r3, r3, #28
 800526c:	4990      	ldr	r1, [pc, #576]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005274:	4b8e      	ldr	r3, [pc, #568]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800527a:	f023 021f 	bic.w	r2, r3, #31
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	3b01      	subs	r3, #1
 8005284:	498a      	ldr	r1, [pc, #552]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	019a      	lsls	r2, r3, #6
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	061b      	lsls	r3, r3, #24
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	071b      	lsls	r3, r3, #28
 80052ac:	4980      	ldr	r1, [pc, #512]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052b4:	4b7d      	ldr	r3, [pc, #500]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ba:	f7fc fe0d 	bl	8001ed8 <HAL_GetTick>
 80052be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052c2:	f7fc fe09 	bl	8001ed8 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e12b      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052d4:	4b76      	ldr	r3, [pc, #472]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d079      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052f8:	4b6e      	ldr	r3, [pc, #440]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fc fdeb 	bl	8001ed8 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005304:	e008      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005306:	f7fc fde7 	bl	8001ed8 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e109      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005318:	4b65      	ldr	r3, [pc, #404]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005324:	d0ef      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d020      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005332:	4b5f      	ldr	r3, [pc, #380]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	0f1b      	lsrs	r3, r3, #28
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	019a      	lsls	r2, r3, #6
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	061b      	lsls	r3, r3, #24
 800534c:	431a      	orrs	r2, r3
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	071b      	lsls	r3, r3, #28
 8005352:	4957      	ldr	r1, [pc, #348]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800535a:	4b55      	ldr	r3, [pc, #340]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800535c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005360:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	3b01      	subs	r3, #1
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	4950      	ldr	r1, [pc, #320]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01e      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005380:	4b4b      	ldr	r3, [pc, #300]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	0e1b      	lsrs	r3, r3, #24
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	019a      	lsls	r2, r3, #6
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	061b      	lsls	r3, r3, #24
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	071b      	lsls	r3, r3, #28
 80053a0:	4943      	ldr	r1, [pc, #268]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053a8:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	493e      	ldr	r1, [pc, #248]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053be:	4b3d      	ldr	r3, [pc, #244]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053c4:	f7fc fd88 	bl	8001ed8 <HAL_GetTick>
 80053c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053cc:	f7fc fd84 	bl	8001ed8 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e0a6      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053de:	4b34      	ldr	r3, [pc, #208]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ea:	d1ef      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 808d 	beq.w	8005514 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	4b2c      	ldr	r3, [pc, #176]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	4a2b      	ldr	r2, [pc, #172]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005408:	6413      	str	r3, [r2, #64]	; 0x40
 800540a:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005416:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a27      	ldr	r2, [pc, #156]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800541c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005420:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005422:	f7fc fd59 	bl	8001ed8 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005428:	e008      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800542a:	f7fc fd55 	bl	8001ed8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e077      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800543c:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005450:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d039      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	429a      	cmp	r2, r3
 8005464:	d032      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005470:	4b12      	ldr	r3, [pc, #72]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800547c:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d11e      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800548e:	f7fc fd23 	bl	8001ed8 <HAL_GetTick>
 8005492:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005494:	e014      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f7fc fd1f 	bl	8001ed8 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d90b      	bls.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e03f      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80054ac:	42470068 	.word	0x42470068
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470070 	.word	0x42470070
 80054b8:	40007000 	.word	0x40007000
 80054bc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c0:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0e4      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d8:	d10d      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80054da:	4b16      	ldr	r3, [pc, #88]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ee:	4911      	ldr	r1, [pc, #68]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	608b      	str	r3, [r1, #8]
 80054f4:	e005      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	4a0e      	ldr	r2, [pc, #56]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005500:	6093      	str	r3, [r2, #8]
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550e:	4909      	ldr	r1, [pc, #36]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005510:	4313      	orrs	r3, r2
 8005512:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005528:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40023800 	.word	0x40023800
 8005538:	424711e0 	.word	0x424711e0

0800553c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e025      	b.n	800559c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fb fafd 	bl	8000b64 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f001 fbb7 	bl	8006cf0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	461a      	mov	r2, r3
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	f001 fc22 	bl	8006dd6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e056      	b.n	8005664 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7fc f845 	bl	8001660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	ea42 0103 	orr.w	r1, r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	f003 0104 	and.w	r1, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005652:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e01d      	b.n	80056ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fc fa80 	bl	8001b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f000 fa14 	bl	8005ad8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	d007      	beq.n	80056fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b02      	cmp	r3, #2
 800571e:	d122      	bne.n	8005766 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d11b      	bne.n	8005766 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f06f 0202 	mvn.w	r2, #2
 8005736:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f9a5 	bl	8005a9c <HAL_TIM_IC_CaptureCallback>
 8005752:	e005      	b.n	8005760 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f997 	bl	8005a88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f9a8 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b04      	cmp	r3, #4
 8005772:	d122      	bne.n	80057ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b04      	cmp	r3, #4
 8005780:	d11b      	bne.n	80057ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0204 	mvn.w	r2, #4
 800578a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f97b 	bl	8005a9c <HAL_TIM_IC_CaptureCallback>
 80057a6:	e005      	b.n	80057b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f96d 	bl	8005a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f97e 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d122      	bne.n	800580e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d11b      	bne.n	800580e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f06f 0208 	mvn.w	r2, #8
 80057de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2204      	movs	r2, #4
 80057e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f951 	bl	8005a9c <HAL_TIM_IC_CaptureCallback>
 80057fa:	e005      	b.n	8005808 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f943 	bl	8005a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f954 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b10      	cmp	r3, #16
 800581a:	d122      	bne.n	8005862 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b10      	cmp	r3, #16
 8005828:	d11b      	bne.n	8005862 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f06f 0210 	mvn.w	r2, #16
 8005832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2208      	movs	r2, #8
 8005838:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f927 	bl	8005a9c <HAL_TIM_IC_CaptureCallback>
 800584e:	e005      	b.n	800585c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f919 	bl	8005a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f92a 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d10e      	bne.n	800588e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	d107      	bne.n	800588e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f06f 0201 	mvn.w	r2, #1
 8005886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fb fe99 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005898:	2b80      	cmp	r3, #128	; 0x80
 800589a:	d10e      	bne.n	80058ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d107      	bne.n	80058ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 facf 	bl	8005e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d10e      	bne.n	80058e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d107      	bne.n	80058e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8ef 	bl	8005ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d10e      	bne.n	8005912 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d107      	bne.n	8005912 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f06f 0220 	mvn.w	r2, #32
 800590a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fa99 	bl	8005e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_TIM_ConfigClockSource+0x18>
 800592e:	2302      	movs	r3, #2
 8005930:	e0a6      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x166>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005950:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005958:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d067      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x120>
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d80b      	bhi.n	8005986 <HAL_TIM_ConfigClockSource+0x6c>
 800596e:	2b10      	cmp	r3, #16
 8005970:	d073      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x140>
 8005972:	2b10      	cmp	r3, #16
 8005974:	d802      	bhi.n	800597c <HAL_TIM_ConfigClockSource+0x62>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d06f      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800597a:	e078      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800597c:	2b20      	cmp	r3, #32
 800597e:	d06c      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x140>
 8005980:	2b30      	cmp	r3, #48	; 0x30
 8005982:	d06a      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005984:	e073      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005986:	2b70      	cmp	r3, #112	; 0x70
 8005988:	d00d      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x8c>
 800598a:	2b70      	cmp	r3, #112	; 0x70
 800598c:	d804      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x7e>
 800598e:	2b50      	cmp	r3, #80	; 0x50
 8005990:	d033      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0xe0>
 8005992:	2b60      	cmp	r3, #96	; 0x60
 8005994:	d041      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005996:	e06a      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599c:	d066      	beq.n	8005a6c <HAL_TIM_ConfigClockSource+0x152>
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a2:	d017      	beq.n	80059d4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80059a4:	e063      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6899      	ldr	r1, [r3, #8]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f000 f9a9 	bl	8005d0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	609a      	str	r2, [r3, #8]
      break;
 80059d2:	e04c      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6899      	ldr	r1, [r3, #8]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f000 f992 	bl	8005d0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f6:	609a      	str	r2, [r3, #8]
      break;
 80059f8:	e039      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f000 f906 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2150      	movs	r1, #80	; 0x50
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f95f 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 8005a18:	e029      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 f925 	bl	8005c76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2160      	movs	r1, #96	; 0x60
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f94f 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 8005a38:	e019      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 f8e6 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2140      	movs	r1, #64	; 0x40
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f93f 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 8005a58:	e009      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f000 f936 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 8005a6a:	e000      	b.n	8005a6e <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005a6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a40      	ldr	r2, [pc, #256]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d00f      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a3d      	ldr	r2, [pc, #244]	; (8005bf0 <TIM_Base_SetConfig+0x118>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a3c      	ldr	r2, [pc, #240]	; (8005bf4 <TIM_Base_SetConfig+0x11c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3b      	ldr	r2, [pc, #236]	; (8005bf8 <TIM_Base_SetConfig+0x120>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3a      	ldr	r2, [pc, #232]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d02b      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d027      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <TIM_Base_SetConfig+0x118>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d023      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2b      	ldr	r2, [pc, #172]	; (8005bf4 <TIM_Base_SetConfig+0x11c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <TIM_Base_SetConfig+0x120>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d01b      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d017      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <TIM_Base_SetConfig+0x128>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <TIM_Base_SetConfig+0x12c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00f      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <TIM_Base_SetConfig+0x130>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00b      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a25      	ldr	r2, [pc, #148]	; (8005c0c <TIM_Base_SetConfig+0x134>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d007      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a24      	ldr	r2, [pc, #144]	; (8005c10 <TIM_Base_SetConfig+0x138>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <TIM_Base_SetConfig+0x13c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d108      	bne.n	8005b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a0c      	ldr	r2, [pc, #48]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d103      	bne.n	8005bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	615a      	str	r2, [r3, #20]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40010000 	.word	0x40010000
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800
 8005bf8:	40000c00 	.word	0x40000c00
 8005bfc:	40010400 	.word	0x40010400
 8005c00:	40014000 	.word	0x40014000
 8005c04:	40014400 	.word	0x40014400
 8005c08:	40014800 	.word	0x40014800
 8005c0c:	40001800 	.word	0x40001800
 8005c10:	40001c00 	.word	0x40001c00
 8005c14:	40002000 	.word	0x40002000

08005c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 030a 	bic.w	r3, r3, #10
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b087      	sub	sp, #28
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0210 	bic.w	r2, r3, #16
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	031b      	lsls	r3, r3, #12
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f043 0307 	orr.w	r3, r3, #7
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	021a      	lsls	r2, r3, #8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	609a      	str	r2, [r3, #8]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e05a      	b.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a21      	ldr	r2, [pc, #132]	; (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d022      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d01d      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1d      	ldr	r2, [pc, #116]	; (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d018      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1a      	ldr	r2, [pc, #104]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00e      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a15      	ldr	r2, [pc, #84]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d10c      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40010000 	.word	0x40010000
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	40010400 	.word	0x40010400
 8005e3c:	40014000 	.word	0x40014000
 8005e40:	40001800 	.word	0x40001800

08005e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e03f      	b.n	8005efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fb fee6 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2224      	movs	r2, #36	; 0x24
 8005e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fba1 	bl	80065f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b088      	sub	sp, #32
 8005f0a:	af02      	add	r7, sp, #8
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	f040 8083 	bne.w	800602e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_UART_Transmit+0x2e>
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e07b      	b.n	8006030 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit+0x40>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e074      	b.n	8006030 <HAL_UART_Transmit+0x12a>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2221      	movs	r2, #33	; 0x21
 8005f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f5c:	f7fb ffbc 	bl	8001ed8 <HAL_GetTick>
 8005f60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005f76:	e042      	b.n	8005ffe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8e:	d122      	bne.n	8005fd6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2200      	movs	r2, #0
 8005f98:	2180      	movs	r1, #128	; 0x80
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f9c0 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e042      	b.n	8006030 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3302      	adds	r3, #2
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	e017      	b.n	8005ffe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60bb      	str	r3, [r7, #8]
 8005fd4:	e013      	b.n	8005ffe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f99d 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e01f      	b.n	8006030 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	60ba      	str	r2, [r7, #8]
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1b7      	bne.n	8005f78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2200      	movs	r2, #0
 8006010:	2140      	movs	r1, #64	; 0x40
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f984 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e006      	b.n	8006030 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b20      	cmp	r3, #32
 8006050:	d140      	bne.n	80060d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_UART_Receive_IT+0x26>
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e039      	b.n	80060d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_UART_Receive_IT+0x38>
 800606c:	2302      	movs	r3, #2
 800606e:	e032      	b.n	80060d6 <HAL_UART_Receive_IT+0x9e>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2222      	movs	r2, #34	; 0x22
 8006094:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0220 	orr.w	r2, r2, #32
 80060ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e000      	b.n	80060d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80060d4:	2302      	movs	r3, #2
  }
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006104:	2300      	movs	r3, #0
 8006106:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10d      	bne.n	8006136 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_UART_IRQHandler+0x52>
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9e0 	bl	80064f4 <UART_Receive_IT>
      return;
 8006134:	e0d1      	b.n	80062da <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80b0 	beq.w	800629e <HAL_UART_IRQHandler+0x1ba>
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d105      	bne.n	8006154 <HAL_UART_IRQHandler+0x70>
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80a5 	beq.w	800629e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_UART_IRQHandler+0x90>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616c:	f043 0201 	orr.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_UART_IRQHandler+0xb0>
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	f043 0202 	orr.w	r2, r3, #2
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_UART_IRQHandler+0xd0>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ac:	f043 0204 	orr.w	r2, r3, #4
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00f      	beq.n	80061de <HAL_UART_IRQHandler+0xfa>
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <HAL_UART_IRQHandler+0xee>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	f043 0208 	orr.w	r2, r3, #8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d078      	beq.n	80062d8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <HAL_UART_IRQHandler+0x11c>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f97a 	bl	80064f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	bf0c      	ite	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	2300      	movne	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <HAL_UART_IRQHandler+0x144>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d031      	beq.n	800628c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f8c3 	bl	80063b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d123      	bne.n	8006284 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	2b00      	cmp	r3, #0
 8006252:	d013      	beq.n	800627c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <HAL_UART_IRQHandler+0x1fc>)
 800625a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006260:	4618      	mov	r0, r3
 8006262:	f7fb ff65 	bl	8002130 <HAL_DMA_Abort_IT>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d016      	beq.n	800629a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006276:	4610      	mov	r0, r2
 8006278:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	e00e      	b.n	800629a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f845 	bl	800630c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006282:	e00a      	b.n	800629a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f841 	bl	800630c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	e006      	b.n	800629a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f83d 	bl	800630c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006298:	e01e      	b.n	80062d8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629a:	bf00      	nop
    return;
 800629c:	e01c      	b.n	80062d8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_UART_IRQHandler+0x1d6>
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8b0 	bl	8006418 <UART_Transmit_IT>
    return;
 80062b8:	e00f      	b.n	80062da <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <HAL_UART_IRQHandler+0x1f6>
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f8f8 	bl	80064c4 <UART_EndTransmit_IT>
    return;
 80062d4:	bf00      	nop
 80062d6:	e000      	b.n	80062da <HAL_UART_IRQHandler+0x1f6>
    return;
 80062d8:	bf00      	nop
  }
}
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	080063f1 	.word	0x080063f1

080062e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006330:	e02c      	b.n	800638c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d028      	beq.n	800638c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <UART_WaitOnFlagUntilTimeout+0x30>
 8006340:	f7fb fdca 	bl	8001ed8 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	429a      	cmp	r2, r3
 800634e:	d21d      	bcs.n	800638c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800635e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695a      	ldr	r2, [r3, #20]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e00f      	b.n	80063ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4013      	ands	r3, r2
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	429a      	cmp	r2, r3
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d0c3      	beq.n	8006332 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0201 	bic.w	r2, r2, #1
 80063da:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7ff ff7e 	bl	800630c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b21      	cmp	r3, #33	; 0x21
 800642a:	d144      	bne.n	80064b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006434:	d11a      	bne.n	800646c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	1c9a      	adds	r2, r3, #2
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	621a      	str	r2, [r3, #32]
 800645e:	e00e      	b.n	800647e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	621a      	str	r2, [r3, #32]
 800646a:	e008      	b.n	800647e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	1c59      	adds	r1, r3, #1
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6211      	str	r1, [r2, #32]
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4619      	mov	r1, r3
 800648c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff fefd 	bl	80062e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b22      	cmp	r3, #34	; 0x22
 8006506:	d171      	bne.n	80065ec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006510:	d123      	bne.n	800655a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10e      	bne.n	800653e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	1c9a      	adds	r2, r3, #2
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	629a      	str	r2, [r3, #40]	; 0x28
 800653c:	e029      	b.n	8006592 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	b29b      	uxth	r3, r3
 8006546:	b2db      	uxtb	r3, r3
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
 8006558:	e01b      	b.n	8006592 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6858      	ldr	r0, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6291      	str	r1, [r2, #40]	; 0x28
 8006572:	b2c2      	uxtb	r2, r0
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	e00c      	b.n	8006592 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	1c58      	adds	r0, r3, #1
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	6288      	str	r0, [r1, #40]	; 0x28
 800658a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29b      	uxth	r3, r3
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	4619      	mov	r1, r3
 80065a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d120      	bne.n	80065e8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0220 	bic.w	r2, r2, #32
 80065b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fe8a 	bl	80062f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e002      	b.n	80065ee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e000      	b.n	80065ee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800663a:	f023 030c 	bic.w	r3, r3, #12
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	430b      	orrs	r3, r1
 8006646:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006666:	f040 818b 	bne.w	8006980 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4ac1      	ldr	r2, [pc, #772]	; (8006974 <UART_SetConfig+0x37c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d005      	beq.n	8006680 <UART_SetConfig+0x88>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4abf      	ldr	r2, [pc, #764]	; (8006978 <UART_SetConfig+0x380>)
 800667a:	4293      	cmp	r3, r2
 800667c:	f040 80bd 	bne.w	80067fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006680:	f7fe fd58 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8006684:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	461d      	mov	r5, r3
 800668a:	f04f 0600 	mov.w	r6, #0
 800668e:	46a8      	mov	r8, r5
 8006690:	46b1      	mov	r9, r6
 8006692:	eb18 0308 	adds.w	r3, r8, r8
 8006696:	eb49 0409 	adc.w	r4, r9, r9
 800669a:	4698      	mov	r8, r3
 800669c:	46a1      	mov	r9, r4
 800669e:	eb18 0805 	adds.w	r8, r8, r5
 80066a2:	eb49 0906 	adc.w	r9, r9, r6
 80066a6:	f04f 0100 	mov.w	r1, #0
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066ba:	4688      	mov	r8, r1
 80066bc:	4691      	mov	r9, r2
 80066be:	eb18 0005 	adds.w	r0, r8, r5
 80066c2:	eb49 0106 	adc.w	r1, r9, r6
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	461d      	mov	r5, r3
 80066cc:	f04f 0600 	mov.w	r6, #0
 80066d0:	196b      	adds	r3, r5, r5
 80066d2:	eb46 0406 	adc.w	r4, r6, r6
 80066d6:	461a      	mov	r2, r3
 80066d8:	4623      	mov	r3, r4
 80066da:	f7f9 fdd9 	bl	8000290 <__aeabi_uldivmod>
 80066de:	4603      	mov	r3, r0
 80066e0:	460c      	mov	r4, r1
 80066e2:	461a      	mov	r2, r3
 80066e4:	4ba5      	ldr	r3, [pc, #660]	; (800697c <UART_SetConfig+0x384>)
 80066e6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	461d      	mov	r5, r3
 80066f4:	f04f 0600 	mov.w	r6, #0
 80066f8:	46a9      	mov	r9, r5
 80066fa:	46b2      	mov	sl, r6
 80066fc:	eb19 0309 	adds.w	r3, r9, r9
 8006700:	eb4a 040a 	adc.w	r4, sl, sl
 8006704:	4699      	mov	r9, r3
 8006706:	46a2      	mov	sl, r4
 8006708:	eb19 0905 	adds.w	r9, r9, r5
 800670c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006710:	f04f 0100 	mov.w	r1, #0
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800671c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006720:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006724:	4689      	mov	r9, r1
 8006726:	4692      	mov	sl, r2
 8006728:	eb19 0005 	adds.w	r0, r9, r5
 800672c:	eb4a 0106 	adc.w	r1, sl, r6
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	461d      	mov	r5, r3
 8006736:	f04f 0600 	mov.w	r6, #0
 800673a:	196b      	adds	r3, r5, r5
 800673c:	eb46 0406 	adc.w	r4, r6, r6
 8006740:	461a      	mov	r2, r3
 8006742:	4623      	mov	r3, r4
 8006744:	f7f9 fda4 	bl	8000290 <__aeabi_uldivmod>
 8006748:	4603      	mov	r3, r0
 800674a:	460c      	mov	r4, r1
 800674c:	461a      	mov	r2, r3
 800674e:	4b8b      	ldr	r3, [pc, #556]	; (800697c <UART_SetConfig+0x384>)
 8006750:	fba3 1302 	umull	r1, r3, r3, r2
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	2164      	movs	r1, #100	; 0x64
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	3332      	adds	r3, #50	; 0x32
 8006762:	4a86      	ldr	r2, [pc, #536]	; (800697c <UART_SetConfig+0x384>)
 8006764:	fba2 2303 	umull	r2, r3, r2, r3
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006770:	4498      	add	r8, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	461d      	mov	r5, r3
 8006776:	f04f 0600 	mov.w	r6, #0
 800677a:	46a9      	mov	r9, r5
 800677c:	46b2      	mov	sl, r6
 800677e:	eb19 0309 	adds.w	r3, r9, r9
 8006782:	eb4a 040a 	adc.w	r4, sl, sl
 8006786:	4699      	mov	r9, r3
 8006788:	46a2      	mov	sl, r4
 800678a:	eb19 0905 	adds.w	r9, r9, r5
 800678e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a6:	4689      	mov	r9, r1
 80067a8:	4692      	mov	sl, r2
 80067aa:	eb19 0005 	adds.w	r0, r9, r5
 80067ae:	eb4a 0106 	adc.w	r1, sl, r6
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	461d      	mov	r5, r3
 80067b8:	f04f 0600 	mov.w	r6, #0
 80067bc:	196b      	adds	r3, r5, r5
 80067be:	eb46 0406 	adc.w	r4, r6, r6
 80067c2:	461a      	mov	r2, r3
 80067c4:	4623      	mov	r3, r4
 80067c6:	f7f9 fd63 	bl	8000290 <__aeabi_uldivmod>
 80067ca:	4603      	mov	r3, r0
 80067cc:	460c      	mov	r4, r1
 80067ce:	461a      	mov	r2, r3
 80067d0:	4b6a      	ldr	r3, [pc, #424]	; (800697c <UART_SetConfig+0x384>)
 80067d2:	fba3 1302 	umull	r1, r3, r3, r2
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	2164      	movs	r1, #100	; 0x64
 80067da:	fb01 f303 	mul.w	r3, r1, r3
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	3332      	adds	r3, #50	; 0x32
 80067e4:	4a65      	ldr	r2, [pc, #404]	; (800697c <UART_SetConfig+0x384>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	f003 0207 	and.w	r2, r3, #7
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4442      	add	r2, r8
 80067f6:	609a      	str	r2, [r3, #8]
 80067f8:	e26f      	b.n	8006cda <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067fa:	f7fe fc87 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 80067fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	461d      	mov	r5, r3
 8006804:	f04f 0600 	mov.w	r6, #0
 8006808:	46a8      	mov	r8, r5
 800680a:	46b1      	mov	r9, r6
 800680c:	eb18 0308 	adds.w	r3, r8, r8
 8006810:	eb49 0409 	adc.w	r4, r9, r9
 8006814:	4698      	mov	r8, r3
 8006816:	46a1      	mov	r9, r4
 8006818:	eb18 0805 	adds.w	r8, r8, r5
 800681c:	eb49 0906 	adc.w	r9, r9, r6
 8006820:	f04f 0100 	mov.w	r1, #0
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800682c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006830:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006834:	4688      	mov	r8, r1
 8006836:	4691      	mov	r9, r2
 8006838:	eb18 0005 	adds.w	r0, r8, r5
 800683c:	eb49 0106 	adc.w	r1, r9, r6
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	461d      	mov	r5, r3
 8006846:	f04f 0600 	mov.w	r6, #0
 800684a:	196b      	adds	r3, r5, r5
 800684c:	eb46 0406 	adc.w	r4, r6, r6
 8006850:	461a      	mov	r2, r3
 8006852:	4623      	mov	r3, r4
 8006854:	f7f9 fd1c 	bl	8000290 <__aeabi_uldivmod>
 8006858:	4603      	mov	r3, r0
 800685a:	460c      	mov	r4, r1
 800685c:	461a      	mov	r2, r3
 800685e:	4b47      	ldr	r3, [pc, #284]	; (800697c <UART_SetConfig+0x384>)
 8006860:	fba3 2302 	umull	r2, r3, r3, r2
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	461d      	mov	r5, r3
 800686e:	f04f 0600 	mov.w	r6, #0
 8006872:	46a9      	mov	r9, r5
 8006874:	46b2      	mov	sl, r6
 8006876:	eb19 0309 	adds.w	r3, r9, r9
 800687a:	eb4a 040a 	adc.w	r4, sl, sl
 800687e:	4699      	mov	r9, r3
 8006880:	46a2      	mov	sl, r4
 8006882:	eb19 0905 	adds.w	r9, r9, r5
 8006886:	eb4a 0a06 	adc.w	sl, sl, r6
 800688a:	f04f 0100 	mov.w	r1, #0
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006896:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800689a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800689e:	4689      	mov	r9, r1
 80068a0:	4692      	mov	sl, r2
 80068a2:	eb19 0005 	adds.w	r0, r9, r5
 80068a6:	eb4a 0106 	adc.w	r1, sl, r6
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	461d      	mov	r5, r3
 80068b0:	f04f 0600 	mov.w	r6, #0
 80068b4:	196b      	adds	r3, r5, r5
 80068b6:	eb46 0406 	adc.w	r4, r6, r6
 80068ba:	461a      	mov	r2, r3
 80068bc:	4623      	mov	r3, r4
 80068be:	f7f9 fce7 	bl	8000290 <__aeabi_uldivmod>
 80068c2:	4603      	mov	r3, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	461a      	mov	r2, r3
 80068c8:	4b2c      	ldr	r3, [pc, #176]	; (800697c <UART_SetConfig+0x384>)
 80068ca:	fba3 1302 	umull	r1, r3, r3, r2
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	2164      	movs	r1, #100	; 0x64
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	3332      	adds	r3, #50	; 0x32
 80068dc:	4a27      	ldr	r2, [pc, #156]	; (800697c <UART_SetConfig+0x384>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ea:	4498      	add	r8, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	461d      	mov	r5, r3
 80068f0:	f04f 0600 	mov.w	r6, #0
 80068f4:	46a9      	mov	r9, r5
 80068f6:	46b2      	mov	sl, r6
 80068f8:	eb19 0309 	adds.w	r3, r9, r9
 80068fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006900:	4699      	mov	r9, r3
 8006902:	46a2      	mov	sl, r4
 8006904:	eb19 0905 	adds.w	r9, r9, r5
 8006908:	eb4a 0a06 	adc.w	sl, sl, r6
 800690c:	f04f 0100 	mov.w	r1, #0
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800691c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006920:	4689      	mov	r9, r1
 8006922:	4692      	mov	sl, r2
 8006924:	eb19 0005 	adds.w	r0, r9, r5
 8006928:	eb4a 0106 	adc.w	r1, sl, r6
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	461d      	mov	r5, r3
 8006932:	f04f 0600 	mov.w	r6, #0
 8006936:	196b      	adds	r3, r5, r5
 8006938:	eb46 0406 	adc.w	r4, r6, r6
 800693c:	461a      	mov	r2, r3
 800693e:	4623      	mov	r3, r4
 8006940:	f7f9 fca6 	bl	8000290 <__aeabi_uldivmod>
 8006944:	4603      	mov	r3, r0
 8006946:	460c      	mov	r4, r1
 8006948:	461a      	mov	r2, r3
 800694a:	4b0c      	ldr	r3, [pc, #48]	; (800697c <UART_SetConfig+0x384>)
 800694c:	fba3 1302 	umull	r1, r3, r3, r2
 8006950:	095b      	lsrs	r3, r3, #5
 8006952:	2164      	movs	r1, #100	; 0x64
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	3332      	adds	r3, #50	; 0x32
 800695e:	4a07      	ldr	r2, [pc, #28]	; (800697c <UART_SetConfig+0x384>)
 8006960:	fba2 2303 	umull	r2, r3, r2, r3
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	f003 0207 	and.w	r2, r3, #7
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4442      	add	r2, r8
 8006970:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006972:	e1b2      	b.n	8006cda <UART_SetConfig+0x6e2>
 8006974:	40011000 	.word	0x40011000
 8006978:	40011400 	.word	0x40011400
 800697c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4ad7      	ldr	r2, [pc, #860]	; (8006ce4 <UART_SetConfig+0x6ec>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d005      	beq.n	8006996 <UART_SetConfig+0x39e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4ad6      	ldr	r2, [pc, #856]	; (8006ce8 <UART_SetConfig+0x6f0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	f040 80d1 	bne.w	8006b38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006996:	f7fe fbcd 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 800699a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	469a      	mov	sl, r3
 80069a0:	f04f 0b00 	mov.w	fp, #0
 80069a4:	46d0      	mov	r8, sl
 80069a6:	46d9      	mov	r9, fp
 80069a8:	eb18 0308 	adds.w	r3, r8, r8
 80069ac:	eb49 0409 	adc.w	r4, r9, r9
 80069b0:	4698      	mov	r8, r3
 80069b2:	46a1      	mov	r9, r4
 80069b4:	eb18 080a 	adds.w	r8, r8, sl
 80069b8:	eb49 090b 	adc.w	r9, r9, fp
 80069bc:	f04f 0100 	mov.w	r1, #0
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069d0:	4688      	mov	r8, r1
 80069d2:	4691      	mov	r9, r2
 80069d4:	eb1a 0508 	adds.w	r5, sl, r8
 80069d8:	eb4b 0609 	adc.w	r6, fp, r9
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4619      	mov	r1, r3
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	f04f 0400 	mov.w	r4, #0
 80069ee:	0094      	lsls	r4, r2, #2
 80069f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069f4:	008b      	lsls	r3, r1, #2
 80069f6:	461a      	mov	r2, r3
 80069f8:	4623      	mov	r3, r4
 80069fa:	4628      	mov	r0, r5
 80069fc:	4631      	mov	r1, r6
 80069fe:	f7f9 fc47 	bl	8000290 <__aeabi_uldivmod>
 8006a02:	4603      	mov	r3, r0
 8006a04:	460c      	mov	r4, r1
 8006a06:	461a      	mov	r2, r3
 8006a08:	4bb8      	ldr	r3, [pc, #736]	; (8006cec <UART_SetConfig+0x6f4>)
 8006a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	469b      	mov	fp, r3
 8006a18:	f04f 0c00 	mov.w	ip, #0
 8006a1c:	46d9      	mov	r9, fp
 8006a1e:	46e2      	mov	sl, ip
 8006a20:	eb19 0309 	adds.w	r3, r9, r9
 8006a24:	eb4a 040a 	adc.w	r4, sl, sl
 8006a28:	4699      	mov	r9, r3
 8006a2a:	46a2      	mov	sl, r4
 8006a2c:	eb19 090b 	adds.w	r9, r9, fp
 8006a30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a34:	f04f 0100 	mov.w	r1, #0
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a48:	4689      	mov	r9, r1
 8006a4a:	4692      	mov	sl, r2
 8006a4c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a50:	eb4c 060a 	adc.w	r6, ip, sl
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	f04f 0400 	mov.w	r4, #0
 8006a66:	0094      	lsls	r4, r2, #2
 8006a68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a6c:	008b      	lsls	r3, r1, #2
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4623      	mov	r3, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	4631      	mov	r1, r6
 8006a76:	f7f9 fc0b 	bl	8000290 <__aeabi_uldivmod>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4b9a      	ldr	r3, [pc, #616]	; (8006cec <UART_SetConfig+0x6f4>)
 8006a82:	fba3 1302 	umull	r1, r3, r3, r2
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	2164      	movs	r1, #100	; 0x64
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	3332      	adds	r3, #50	; 0x32
 8006a94:	4a95      	ldr	r2, [pc, #596]	; (8006cec <UART_SetConfig+0x6f4>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aa0:	4498      	add	r8, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	469b      	mov	fp, r3
 8006aa6:	f04f 0c00 	mov.w	ip, #0
 8006aaa:	46d9      	mov	r9, fp
 8006aac:	46e2      	mov	sl, ip
 8006aae:	eb19 0309 	adds.w	r3, r9, r9
 8006ab2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ab6:	4699      	mov	r9, r3
 8006ab8:	46a2      	mov	sl, r4
 8006aba:	eb19 090b 	adds.w	r9, r9, fp
 8006abe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ac2:	f04f 0100 	mov.w	r1, #0
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ace:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ad2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ad6:	4689      	mov	r9, r1
 8006ad8:	4692      	mov	sl, r2
 8006ada:	eb1b 0509 	adds.w	r5, fp, r9
 8006ade:	eb4c 060a 	adc.w	r6, ip, sl
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	f04f 0400 	mov.w	r4, #0
 8006af4:	0094      	lsls	r4, r2, #2
 8006af6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006afa:	008b      	lsls	r3, r1, #2
 8006afc:	461a      	mov	r2, r3
 8006afe:	4623      	mov	r3, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	4631      	mov	r1, r6
 8006b04:	f7f9 fbc4 	bl	8000290 <__aeabi_uldivmod>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4b77      	ldr	r3, [pc, #476]	; (8006cec <UART_SetConfig+0x6f4>)
 8006b10:	fba3 1302 	umull	r1, r3, r3, r2
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	2164      	movs	r1, #100	; 0x64
 8006b18:	fb01 f303 	mul.w	r3, r1, r3
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	3332      	adds	r3, #50	; 0x32
 8006b22:	4a72      	ldr	r2, [pc, #456]	; (8006cec <UART_SetConfig+0x6f4>)
 8006b24:	fba2 2303 	umull	r2, r3, r2, r3
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	f003 020f 	and.w	r2, r3, #15
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4442      	add	r2, r8
 8006b34:	609a      	str	r2, [r3, #8]
 8006b36:	e0d0      	b.n	8006cda <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b38:	f7fe fae8 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8006b3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	469a      	mov	sl, r3
 8006b42:	f04f 0b00 	mov.w	fp, #0
 8006b46:	46d0      	mov	r8, sl
 8006b48:	46d9      	mov	r9, fp
 8006b4a:	eb18 0308 	adds.w	r3, r8, r8
 8006b4e:	eb49 0409 	adc.w	r4, r9, r9
 8006b52:	4698      	mov	r8, r3
 8006b54:	46a1      	mov	r9, r4
 8006b56:	eb18 080a 	adds.w	r8, r8, sl
 8006b5a:	eb49 090b 	adc.w	r9, r9, fp
 8006b5e:	f04f 0100 	mov.w	r1, #0
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b72:	4688      	mov	r8, r1
 8006b74:	4691      	mov	r9, r2
 8006b76:	eb1a 0508 	adds.w	r5, sl, r8
 8006b7a:	eb4b 0609 	adc.w	r6, fp, r9
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	4619      	mov	r1, r3
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	f04f 0400 	mov.w	r4, #0
 8006b90:	0094      	lsls	r4, r2, #2
 8006b92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b96:	008b      	lsls	r3, r1, #2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	f7f9 fb76 	bl	8000290 <__aeabi_uldivmod>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4b50      	ldr	r3, [pc, #320]	; (8006cec <UART_SetConfig+0x6f4>)
 8006bac:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	469b      	mov	fp, r3
 8006bba:	f04f 0c00 	mov.w	ip, #0
 8006bbe:	46d9      	mov	r9, fp
 8006bc0:	46e2      	mov	sl, ip
 8006bc2:	eb19 0309 	adds.w	r3, r9, r9
 8006bc6:	eb4a 040a 	adc.w	r4, sl, sl
 8006bca:	4699      	mov	r9, r3
 8006bcc:	46a2      	mov	sl, r4
 8006bce:	eb19 090b 	adds.w	r9, r9, fp
 8006bd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bd6:	f04f 0100 	mov.w	r1, #0
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006be2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006be6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bea:	4689      	mov	r9, r1
 8006bec:	4692      	mov	sl, r2
 8006bee:	eb1b 0509 	adds.w	r5, fp, r9
 8006bf2:	eb4c 060a 	adc.w	r6, ip, sl
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	f04f 0400 	mov.w	r4, #0
 8006c08:	0094      	lsls	r4, r2, #2
 8006c0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c0e:	008b      	lsls	r3, r1, #2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	4631      	mov	r1, r6
 8006c18:	f7f9 fb3a 	bl	8000290 <__aeabi_uldivmod>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b32      	ldr	r3, [pc, #200]	; (8006cec <UART_SetConfig+0x6f4>)
 8006c24:	fba3 1302 	umull	r1, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	2164      	movs	r1, #100	; 0x64
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	3332      	adds	r3, #50	; 0x32
 8006c36:	4a2d      	ldr	r2, [pc, #180]	; (8006cec <UART_SetConfig+0x6f4>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c42:	4498      	add	r8, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	469b      	mov	fp, r3
 8006c48:	f04f 0c00 	mov.w	ip, #0
 8006c4c:	46d9      	mov	r9, fp
 8006c4e:	46e2      	mov	sl, ip
 8006c50:	eb19 0309 	adds.w	r3, r9, r9
 8006c54:	eb4a 040a 	adc.w	r4, sl, sl
 8006c58:	4699      	mov	r9, r3
 8006c5a:	46a2      	mov	sl, r4
 8006c5c:	eb19 090b 	adds.w	r9, r9, fp
 8006c60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c64:	f04f 0100 	mov.w	r1, #0
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c78:	4689      	mov	r9, r1
 8006c7a:	4692      	mov	sl, r2
 8006c7c:	eb1b 0509 	adds.w	r5, fp, r9
 8006c80:	eb4c 060a 	adc.w	r6, ip, sl
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	f04f 0400 	mov.w	r4, #0
 8006c96:	0094      	lsls	r4, r2, #2
 8006c98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c9c:	008b      	lsls	r3, r1, #2
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4623      	mov	r3, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	f7f9 faf3 	bl	8000290 <__aeabi_uldivmod>
 8006caa:	4603      	mov	r3, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <UART_SetConfig+0x6f4>)
 8006cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	2164      	movs	r1, #100	; 0x64
 8006cba:	fb01 f303 	mul.w	r3, r1, r3
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	3332      	adds	r3, #50	; 0x32
 8006cc4:	4a09      	ldr	r2, [pc, #36]	; (8006cec <UART_SetConfig+0x6f4>)
 8006cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	f003 020f 	and.w	r2, r3, #15
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4442      	add	r2, r8
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	e7ff      	b.n	8006cda <UART_SetConfig+0x6e2>
 8006cda:	bf00      	nop
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	40011000 	.word	0x40011000
 8006ce8:	40011400 	.word	0x40011400
 8006cec:	51eb851f 	.word	0x51eb851f

08006cf0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d029      	beq.n	8006d5e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d1a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d24:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006d2a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006d30:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006d36:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006d3c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006d42:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006d48:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006d4e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e034      	b.n	8006dc8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d6a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d74:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006d7a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d92:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d9c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006da2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006da8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006dae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006db4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b087      	sub	sp, #28
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d02e      	beq.n	8006e4e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dfc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006e0c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006e16:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006e20:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e2a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006e34:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	609a      	str	r2, [r3, #8]
 8006e4c:	e03b      	b.n	8006ec6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e5e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e70:	4313      	orrs	r3, r2
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e84:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006e94:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006e9e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006ea8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	f107 001c 	add.w	r0, r7, #28
 8006ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d122      	bne.n	8006f32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d105      	bne.n	8006f26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f902 	bl	8007130 <USB_CoreReset>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
 8006f30:	e01a      	b.n	8006f68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f8f6 	bl	8007130 <USB_CoreReset>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
 8006f5a:	e005      	b.n	8006f68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d10b      	bne.n	8006f86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f043 0206 	orr.w	r2, r3, #6
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f92:	b004      	add	sp, #16
 8006f94:	4770      	bx	lr

08006f96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f023 0201 	bic.w	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d106      	bne.n	8006fe4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	e00b      	b.n	8006ffc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60da      	str	r2, [r3, #12]
 8006ff6:	e001      	b.n	8006ffc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e003      	b.n	8007004 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ffc:	2032      	movs	r0, #50	; 0x32
 8006ffe:	f7fa ff77 	bl	8001ef0 <HAL_Delay>

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	019b      	lsls	r3, r3, #6
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4a09      	ldr	r2, [pc, #36]	; (8007054 <USB_FlushTxFifo+0x48>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d901      	bls.n	8007038 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e006      	b.n	8007046 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b20      	cmp	r3, #32
 8007042:	d0f0      	beq.n	8007026 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	00030d40 	.word	0x00030d40

08007058 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2210      	movs	r2, #16
 8007068:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4a09      	ldr	r2, [pc, #36]	; (8007098 <USB_FlushRxFifo+0x40>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d901      	bls.n	800707c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e006      	b.n	800708a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b10      	cmp	r3, #16
 8007086:	d0f0      	beq.n	800706a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	00030d40 	.word	0x00030d40

0800709c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800709c:	b480      	push	{r7}
 800709e:	b089      	sub	sp, #36	; 0x24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	3303      	adds	r3, #3
 80070b6:	089b      	lsrs	r3, r3, #2
 80070b8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80070ba:	2300      	movs	r3, #0
 80070bc:	61bb      	str	r3, [r7, #24]
 80070be:	e00b      	b.n	80070d8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	3304      	adds	r3, #4
 80070d0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	3301      	adds	r3, #1
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d3ef      	bcc.n	80070c0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80070e0:	69fb      	ldr	r3, [r7, #28]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3724      	adds	r7, #36	; 0x24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4013      	ands	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007106:	68fb      	ldr	r3, [r7, #12]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0301 	and.w	r3, r3, #1
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4a13      	ldr	r2, [pc, #76]	; (8007194 <USB_CoreReset+0x64>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e01b      	b.n	8007186 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	daf2      	bge.n	800713c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f043 0201 	orr.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3301      	adds	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <USB_CoreReset+0x64>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e006      	b.n	8007186 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d0f0      	beq.n	8007166 <USB_CoreReset+0x36>

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	00030d40 	.word	0x00030d40

08007198 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007198:	b084      	sub	sp, #16
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	f107 001c 	add.w	r0, r7, #28
 80071a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071b4:	461a      	mov	r2, r3
 80071b6:	2300      	movs	r3, #0
 80071b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d018      	beq.n	800721c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10a      	bne.n	8007206 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071fe:	f043 0304 	orr.w	r3, r3, #4
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	e014      	b.n	8007230 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007214:	f023 0304 	bic.w	r3, r3, #4
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	e009      	b.n	8007230 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800722a:	f023 0304 	bic.w	r3, r3, #4
 800722e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007230:	2110      	movs	r1, #16
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff feea 	bl	800700c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff ff0d 	bl	8007058 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e015      	b.n	8007270 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	461a      	mov	r2, r3
 8007252:	f04f 33ff 	mov.w	r3, #4294967295
 8007256:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4413      	add	r3, r2
 8007260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007264:	461a      	mov	r2, r3
 8007266:	2300      	movs	r3, #0
 8007268:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	429a      	cmp	r2, r3
 8007276:	d3e5      	bcc.n	8007244 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007278:	2101      	movs	r1, #1
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f882 	bl	8007384 <USB_DriveVbus>

  HAL_Delay(200U);
 8007280:	20c8      	movs	r0, #200	; 0xc8
 8007282:	f7fa fe35 	bl	8001ef0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f04f 32ff 	mov.w	r2, #4294967295
 8007292:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a14      	ldr	r2, [pc, #80]	; (80072fc <USB_HostInit+0x164>)
 80072ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a13      	ldr	r2, [pc, #76]	; (8007300 <USB_HostInit+0x168>)
 80072b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80072b6:	e009      	b.n	80072cc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2280      	movs	r2, #128	; 0x80
 80072bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a10      	ldr	r2, [pc, #64]	; (8007304 <USB_HostInit+0x16c>)
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a10      	ldr	r2, [pc, #64]	; (8007308 <USB_HostInit+0x170>)
 80072c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f043 0210 	orr.w	r2, r3, #16
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	4b0a      	ldr	r3, [pc, #40]	; (800730c <USB_HostInit+0x174>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072f6:	b004      	add	sp, #16
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	01000200 	.word	0x01000200
 8007300:	00e00300 	.word	0x00e00300
 8007304:	00600080 	.word	0x00600080
 8007308:	004000e0 	.word	0x004000e0
 800730c:	a3200008 	.word	0xa3200008

08007310 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	68f9      	ldr	r1, [r7, #12]
 8007344:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007348:	4313      	orrs	r3, r2
 800734a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d107      	bne.n	8007362 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007358:	461a      	mov	r2, r3
 800735a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800735e:	6053      	str	r3, [r2, #4]
 8007360:	e009      	b.n	8007376 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d106      	bne.n	8007376 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800736e:	461a      	mov	r2, r3
 8007370:	f241 7370 	movw	r3, #6000	; 0x1770
 8007374:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <USB_DriveVbus+0x44>
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d106      	bne.n	80073c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d2:	d109      	bne.n	80073e8 <USB_DriveVbus+0x64>
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	b29b      	uxth	r3, r3
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	0c9b      	lsrs	r3, r3, #18
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <USB_HC_Halt+0x3a>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d16c      	bne.n	800752c <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	4413      	add	r3, r2
 800745a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	440a      	add	r2, r1
 8007468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800746c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007470:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d143      	bne.n	8007506 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	4413      	add	r3, r2
 8007486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	440a      	add	r2, r1
 8007494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800749c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074dc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	3301      	adds	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ea:	d81d      	bhi.n	8007528 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007502:	d0ec      	beq.n	80074de <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007504:	e080      	b.n	8007608 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	440a      	add	r2, r1
 800751c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007524:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007526:	e06f      	b.n	8007608 <USB_HC_Halt+0x1f0>
          break;
 8007528:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800752a:	e06d      	b.n	8007608 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	4413      	add	r3, r2
 8007534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	440a      	add	r2, r1
 8007542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800754a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d143      	bne.n	80075e4 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	4413      	add	r3, r2
 8007564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	0151      	lsls	r1, r2, #5
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	440a      	add	r2, r1
 8007572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800757a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	0151      	lsls	r1, r2, #5
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	440a      	add	r2, r1
 8007592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800759a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	0151      	lsls	r1, r2, #5
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	440a      	add	r2, r1
 80075b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	3301      	adds	r3, #1
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075c8:	d81d      	bhi.n	8007606 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075e0:	d0ec      	beq.n	80075bc <USB_HC_Halt+0x1a4>
 80075e2:	e011      	b.n	8007608 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	0151      	lsls	r1, r2, #5
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	440a      	add	r2, r1
 80075fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e000      	b.n	8007608 <USB_HC_Halt+0x1f0>
          break;
 8007606:	bf00      	nop
    }
  }

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	4603      	mov	r3, r0
 800761e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007628:	2b84      	cmp	r3, #132	; 0x84
 800762a:	d005      	beq.n	8007638 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800762c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	3303      	adds	r3, #3
 8007636:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007638:	68fb      	ldr	r3, [r7, #12]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800764a:	f000 fdb3 	bl	80081b4 <vTaskStartScheduler>
  
  return osOK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	bd80      	pop	{r7, pc}

08007654 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007656:	b089      	sub	sp, #36	; 0x24
 8007658:	af04      	add	r7, sp, #16
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d020      	beq.n	80076a8 <osThreadCreate+0x54>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01c      	beq.n	80076a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685c      	ldr	r4, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681d      	ldr	r5, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691e      	ldr	r6, [r3, #16]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff ffc8 	bl	8007616 <makeFreeRtosPriority>
 8007686:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007690:	9202      	str	r2, [sp, #8]
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	9100      	str	r1, [sp, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	4632      	mov	r2, r6
 800769a:	4629      	mov	r1, r5
 800769c:	4620      	mov	r0, r4
 800769e:	f000 fbc5 	bl	8007e2c <xTaskCreateStatic>
 80076a2:	4603      	mov	r3, r0
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	e01c      	b.n	80076e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685c      	ldr	r4, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076b4:	b29e      	uxth	r6, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff ffaa 	bl	8007616 <makeFreeRtosPriority>
 80076c2:	4602      	mov	r2, r0
 80076c4:	f107 030c 	add.w	r3, r7, #12
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	9200      	str	r2, [sp, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	4632      	mov	r2, r6
 80076d0:	4629      	mov	r1, r5
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 fc04 	bl	8007ee0 <xTaskCreate>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d001      	beq.n	80076e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	e000      	b.n	80076e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076e2:	68fb      	ldr	r3, [r7, #12]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <osDelay+0x16>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	e000      	b.n	8007704 <osDelay+0x18>
 8007702:	2301      	movs	r3, #1
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fd21 	bl	800814c <vTaskDelay>
  
  return osOK;
 800770a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f103 0208 	add.w	r2, r3, #8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f04f 32ff 	mov.w	r2, #4294967295
 800772c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f103 0208 	add.w	r2, r3, #8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 0208 	add.w	r2, r3, #8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d103      	bne.n	80077d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e00c      	b.n	80077f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3308      	adds	r3, #8
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e002      	b.n	80077e4 <vListInsert+0x2e>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d2f6      	bcs.n	80077de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	601a      	str	r2, [r3, #0]
}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6892      	ldr	r2, [r2, #8]
 800783e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6852      	ldr	r2, [r2, #4]
 8007848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	429a      	cmp	r2, r3
 8007852:	d103      	bne.n	800785c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	1e5a      	subs	r2, r3, #1
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	e7fe      	b.n	80078a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80078a4:	f001 fb52 	bl	8008f4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b0:	68f9      	ldr	r1, [r7, #12]
 80078b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078b4:	fb01 f303 	mul.w	r3, r1, r3
 80078b8:	441a      	add	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d4:	3b01      	subs	r3, #1
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078da:	fb01 f303 	mul.w	r3, r1, r3
 80078de:	441a      	add	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	22ff      	movs	r2, #255	; 0xff
 80078e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	22ff      	movs	r2, #255	; 0xff
 80078f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d114      	bne.n	8007924 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01a      	beq.n	8007938 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3310      	adds	r3, #16
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fe92 	bl	8008630 <xTaskRemoveFromEventList>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d012      	beq.n	8007938 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <xQueueGenericReset+0xcc>)
 8007914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	e009      	b.n	8007938 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3310      	adds	r3, #16
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff fef3 	bl	8007714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3324      	adds	r3, #36	; 0x24
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff feee 	bl	8007714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007938:	f001 fb36 	bl	8008fa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800793c:	2301      	movs	r3, #1
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08a      	sub	sp, #40	; 0x28
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d109      	bne.n	8007974 <xQueueGenericCreate+0x28>
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	e7fe      	b.n	8007972 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d102      	bne.n	8007980 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	e004      	b.n	800798a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	fb02 f303 	mul.w	r3, r2, r3
 8007988:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	3348      	adds	r3, #72	; 0x48
 800798e:	4618      	mov	r0, r3
 8007990:	f001 fbf6 	bl	8009180 <pvPortMalloc>
 8007994:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d011      	beq.n	80079c0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	3348      	adds	r3, #72	; 0x48
 80079a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079ae:	79fa      	ldrb	r2, [r7, #7]
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f805 	bl	80079ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079c0:	69bb      	ldr	r3, [r7, #24]
	}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3720      	adds	r7, #32
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	e002      	b.n	80079ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079f8:	2101      	movs	r1, #1
 80079fa:	69b8      	ldr	r0, [r7, #24]
 80079fc:	f7ff ff3e 	bl	800787c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a00:	bf00      	nop
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	; 0x38
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <xQueueGiveFromISR+0x28>
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	e7fe      	b.n	8007a2e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d009      	beq.n	8007a4c <xQueueGiveFromISR+0x44>
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	61fb      	str	r3, [r7, #28]
 8007a4a:	e7fe      	b.n	8007a4a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <xQueueGiveFromISR+0x54>
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <xQueueGiveFromISR+0x58>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <xQueueGiveFromISR+0x5a>
 8007a60:	2300      	movs	r3, #0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <xQueueGiveFromISR+0x72>
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	e7fe      	b.n	8007a78 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a7a:	f001 fb43 	bl	8009104 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	617a      	str	r2, [r7, #20]
 8007a94:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d22b      	bcs.n	8007b02 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007abc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d112      	bne.n	8007aec <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	3324      	adds	r3, #36	; 0x24
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fdac 	bl	8008630 <xTaskRemoveFromEventList>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00e      	beq.n	8007afc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e007      	b.n	8007afc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af0:	3301      	adds	r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	b25a      	sxtb	r2, r3
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007afc:	2301      	movs	r3, #1
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
 8007b00:	e001      	b.n	8007b06 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3738      	adds	r7, #56	; 0x38
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	; 0x38
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d109      	bne.n	8007b4c <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	623b      	str	r3, [r7, #32]
 8007b4a:	e7fe      	b.n	8007b4a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <xQueueSemaphoreTake+0x4c>
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	61fb      	str	r3, [r7, #28]
 8007b66:	e7fe      	b.n	8007b66 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b68:	f000 ff18 	bl	800899c <xTaskGetSchedulerState>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <xQueueSemaphoreTake+0x5c>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <xQueueSemaphoreTake+0x60>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <xQueueSemaphoreTake+0x62>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <xQueueSemaphoreTake+0x7a>
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	e7fe      	b.n	8007b94 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b96:	f001 f9d9 	bl	8008f4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d024      	beq.n	8007bf0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	1e5a      	subs	r2, r3, #1
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007bb6:	f001 f827 	bl	8008c08 <pvTaskIncrementMutexHeldCount>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00f      	beq.n	8007be8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	3310      	adds	r3, #16
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fd2f 	bl	8008630 <xTaskRemoveFromEventList>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d007      	beq.n	8007be8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bd8:	4b53      	ldr	r3, [pc, #332]	; (8007d28 <xQueueSemaphoreTake+0x20c>)
 8007bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007be8:	f001 f9de 	bl	8008fa8 <vPortExitCritical>
				return pdPASS;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e096      	b.n	8007d1e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d110      	bne.n	8007c18 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <xQueueSemaphoreTake+0xf4>
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	e7fe      	b.n	8007c0e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c10:	f001 f9ca 	bl	8008fa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e082      	b.n	8007d1e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c1e:	f107 030c 	add.w	r3, r7, #12
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fd66 	bl	80086f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c2c:	f001 f9bc 	bl	8008fa8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c30:	f000 fb1e 	bl	8008270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c34:	f001 f98a 	bl	8008f4c <vPortEnterCritical>
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d103      	bne.n	8007c4e <xQueueSemaphoreTake+0x132>
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c54:	b25b      	sxtb	r3, r3
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d103      	bne.n	8007c64 <xQueueSemaphoreTake+0x148>
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c64:	f001 f9a0 	bl	8008fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c68:	463a      	mov	r2, r7
 8007c6a:	f107 030c 	add.w	r3, r7, #12
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fd55 	bl	8008720 <xTaskCheckForTimeOut>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d132      	bne.n	8007ce2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c7e:	f000 f8bf 	bl	8007e00 <prvIsQueueEmpty>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d026      	beq.n	8007cd6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007c90:	f001 f95c 	bl	8008f4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fe9d 	bl	80089d8 <xTaskPriorityInherit>
 8007c9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ca0:	f001 f982 	bl	8008fa8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fc9b 	bl	80085e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cb4:	f000 f852 	bl	8007d5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cb8:	f000 fae8 	bl	800828c <xTaskResumeAll>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f47f af69 	bne.w	8007b96 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007cc4:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <xQueueSemaphoreTake+0x20c>)
 8007cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	e75f      	b.n	8007b96 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cd8:	f000 f840 	bl	8007d5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cdc:	f000 fad6 	bl	800828c <xTaskResumeAll>
 8007ce0:	e759      	b.n	8007b96 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ce4:	f000 f83a 	bl	8007d5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ce8:	f000 fad0 	bl	800828c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cee:	f000 f887 	bl	8007e00 <prvIsQueueEmpty>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f43f af4e 	beq.w	8007b96 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00d      	beq.n	8007d1c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007d00:	f001 f924 	bl	8008f4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d06:	f000 f811 	bl	8007d2c <prvGetDisinheritPriorityAfterTimeout>
 8007d0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fee0 	bl	8008ad8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d18:	f001 f946 	bl	8008fa8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3738      	adds	r7, #56	; 0x38
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d006      	beq.n	8007d4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1c3 0307 	rsb	r3, r3, #7
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e001      	b.n	8007d4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d64:	f001 f8f2 	bl	8008f4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d70:	e011      	b.n	8007d96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d012      	beq.n	8007da0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3324      	adds	r3, #36	; 0x24
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fc56 	bl	8008630 <xTaskRemoveFromEventList>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d8a:	f000 fd29 	bl	80087e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	dce9      	bgt.n	8007d72 <prvUnlockQueue+0x16>
 8007d9e:	e000      	b.n	8007da2 <prvUnlockQueue+0x46>
					break;
 8007da0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	22ff      	movs	r2, #255	; 0xff
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007daa:	f001 f8fd 	bl	8008fa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007dae:	f001 f8cd 	bl	8008f4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007db8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dba:	e011      	b.n	8007de0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d012      	beq.n	8007dea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3310      	adds	r3, #16
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fc31 	bl	8008630 <xTaskRemoveFromEventList>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dd4:	f000 fd04 	bl	80087e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dce9      	bgt.n	8007dbc <prvUnlockQueue+0x60>
 8007de8:	e000      	b.n	8007dec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	22ff      	movs	r2, #255	; 0xff
 8007df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007df4:	f001 f8d8 	bl	8008fa8 <vPortExitCritical>
}
 8007df8:	bf00      	nop
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e08:	f001 f8a0 	bl	8008f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e14:	2301      	movs	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e001      	b.n	8007e1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e1e:	f001 f8c3 	bl	8008fa8 <vPortExitCritical>

	return xReturn;
 8007e22:	68fb      	ldr	r3, [r7, #12]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08e      	sub	sp, #56	; 0x38
 8007e30:	af04      	add	r7, sp, #16
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <xTaskCreateStatic+0x28>
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	623b      	str	r3, [r7, #32]
 8007e52:	e7fe      	b.n	8007e52 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d109      	bne.n	8007e6e <xTaskCreateStatic+0x42>
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	61fb      	str	r3, [r7, #28]
 8007e6c:	e7fe      	b.n	8007e6c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e6e:	2354      	movs	r3, #84	; 0x54
 8007e70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b54      	cmp	r3, #84	; 0x54
 8007e76:	d009      	beq.n	8007e8c <xTaskCreateStatic+0x60>
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	61bb      	str	r3, [r7, #24]
 8007e8a:	e7fe      	b.n	8007e8a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01e      	beq.n	8007ed2 <xTaskCreateStatic+0xa6>
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01b      	beq.n	8007ed2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007eac:	2300      	movs	r3, #0
 8007eae:	9303      	str	r3, [sp, #12]
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	9302      	str	r3, [sp, #8]
 8007eb4:	f107 0314 	add.w	r3, r7, #20
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f850 	bl	8007f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ecc:	f000 f8d4 	bl	8008078 <prvAddNewTaskToReadyList>
 8007ed0:	e001      	b.n	8007ed6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ed6:	697b      	ldr	r3, [r7, #20]
	}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3728      	adds	r7, #40	; 0x28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08c      	sub	sp, #48	; 0x30
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	4613      	mov	r3, r2
 8007eee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ef0:	88fb      	ldrh	r3, [r7, #6]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 f943 	bl	8009180 <pvPortMalloc>
 8007efa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00e      	beq.n	8007f20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f02:	2054      	movs	r0, #84	; 0x54
 8007f04:	f001 f93c 	bl	8009180 <pvPortMalloc>
 8007f08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
 8007f16:	e005      	b.n	8007f24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f18:	6978      	ldr	r0, [r7, #20]
 8007f1a:	f001 f9f3 	bl	8009304 <vPortFree>
 8007f1e:	e001      	b.n	8007f24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d017      	beq.n	8007f5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f32:	88fa      	ldrh	r2, [r7, #6]
 8007f34:	2300      	movs	r3, #0
 8007f36:	9303      	str	r3, [sp, #12]
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	9302      	str	r3, [sp, #8]
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f80e 	bl	8007f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f4e:	69f8      	ldr	r0, [r7, #28]
 8007f50:	f000 f892 	bl	8008078 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f54:	2301      	movs	r3, #1
 8007f56:	61bb      	str	r3, [r7, #24]
 8007f58:	e002      	b.n	8007f60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f60:	69bb      	ldr	r3, [r7, #24]
	}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3720      	adds	r7, #32
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b088      	sub	sp, #32
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	607a      	str	r2, [r7, #4]
 8007f76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f82:	3b01      	subs	r3, #1
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f023 0307 	bic.w	r3, r3, #7
 8007f90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <prvInitialiseNewTask+0x46>
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	e7fe      	b.n	8007fae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01f      	beq.n	8007ff6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	e012      	b.n	8007fe2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	7819      	ldrb	r1, [r3, #0]
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	4413      	add	r3, r2
 8007fca:	3334      	adds	r3, #52	; 0x34
 8007fcc:	460a      	mov	r2, r1
 8007fce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b0f      	cmp	r3, #15
 8007fe6:	d9e9      	bls.n	8007fbc <prvInitialiseNewTask+0x52>
 8007fe8:	e000      	b.n	8007fec <prvInitialiseNewTask+0x82>
			{
				break;
 8007fea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ff4:	e003      	b.n	8007ffe <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	2b06      	cmp	r3, #6
 8008002:	d901      	bls.n	8008008 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008004:	2306      	movs	r3, #6
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800800c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008012:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	2200      	movs	r2, #0
 8008018:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	3304      	adds	r3, #4
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fb98 	bl	8007754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	3318      	adds	r3, #24
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fb93 	bl	8007754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008032:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	f1c3 0207 	rsb	r2, r3, #7
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008042:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	2200      	movs	r2, #0
 8008048:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	68f9      	ldr	r1, [r7, #12]
 8008056:	69b8      	ldr	r0, [r7, #24]
 8008058:	f000 fe50 	bl	8008cfc <pxPortInitialiseStack>
 800805c:	4602      	mov	r2, r0
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800806e:	bf00      	nop
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008080:	f000 ff64 	bl	8008f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008084:	4b2a      	ldr	r3, [pc, #168]	; (8008130 <prvAddNewTaskToReadyList+0xb8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3301      	adds	r3, #1
 800808a:	4a29      	ldr	r2, [pc, #164]	; (8008130 <prvAddNewTaskToReadyList+0xb8>)
 800808c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800808e:	4b29      	ldr	r3, [pc, #164]	; (8008134 <prvAddNewTaskToReadyList+0xbc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d109      	bne.n	80080aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008096:	4a27      	ldr	r2, [pc, #156]	; (8008134 <prvAddNewTaskToReadyList+0xbc>)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800809c:	4b24      	ldr	r3, [pc, #144]	; (8008130 <prvAddNewTaskToReadyList+0xb8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d110      	bne.n	80080c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080a4:	f000 fbc0 	bl	8008828 <prvInitialiseTaskLists>
 80080a8:	e00d      	b.n	80080c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080aa:	4b23      	ldr	r3, [pc, #140]	; (8008138 <prvAddNewTaskToReadyList+0xc0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080b2:	4b20      	ldr	r3, [pc, #128]	; (8008134 <prvAddNewTaskToReadyList+0xbc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	429a      	cmp	r2, r3
 80080be:	d802      	bhi.n	80080c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080c0:	4a1c      	ldr	r2, [pc, #112]	; (8008134 <prvAddNewTaskToReadyList+0xbc>)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080c6:	4b1d      	ldr	r3, [pc, #116]	; (800813c <prvAddNewTaskToReadyList+0xc4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3301      	adds	r3, #1
 80080cc:	4a1b      	ldr	r2, [pc, #108]	; (800813c <prvAddNewTaskToReadyList+0xc4>)
 80080ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	2201      	movs	r2, #1
 80080d6:	409a      	lsls	r2, r3
 80080d8:	4b19      	ldr	r3, [pc, #100]	; (8008140 <prvAddNewTaskToReadyList+0xc8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4313      	orrs	r3, r2
 80080de:	4a18      	ldr	r2, [pc, #96]	; (8008140 <prvAddNewTaskToReadyList+0xc8>)
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4a15      	ldr	r2, [pc, #84]	; (8008144 <prvAddNewTaskToReadyList+0xcc>)
 80080f0:	441a      	add	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f7ff fb38 	bl	800776e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080fe:	f000 ff53 	bl	8008fa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008102:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <prvAddNewTaskToReadyList+0xc0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00e      	beq.n	8008128 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800810a:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <prvAddNewTaskToReadyList+0xbc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	429a      	cmp	r2, r3
 8008116:	d207      	bcs.n	8008128 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008118:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <prvAddNewTaskToReadyList+0xd0>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000410 	.word	0x20000410
 8008134:	20000310 	.word	0x20000310
 8008138:	2000041c 	.word	0x2000041c
 800813c:	2000042c 	.word	0x2000042c
 8008140:	20000418 	.word	0x20000418
 8008144:	20000314 	.word	0x20000314
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d016      	beq.n	800818c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800815e:	4b13      	ldr	r3, [pc, #76]	; (80081ac <vTaskDelay+0x60>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <vTaskDelay+0x2e>
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60bb      	str	r3, [r7, #8]
 8008178:	e7fe      	b.n	8008178 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800817a:	f000 f879 	bl	8008270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800817e:	2100      	movs	r1, #0
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fd55 	bl	8008c30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008186:	f000 f881 	bl	800828c <xTaskResumeAll>
 800818a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d107      	bne.n	80081a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008192:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <vTaskDelay+0x64>)
 8008194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081a2:	bf00      	nop
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000438 	.word	0x20000438
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08a      	sub	sp, #40	; 0x28
 80081b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081c2:	463a      	mov	r2, r7
 80081c4:	1d39      	adds	r1, r7, #4
 80081c6:	f107 0308 	add.w	r3, r7, #8
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7f8 fcd4 	bl	8000b78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	9202      	str	r2, [sp, #8]
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	2300      	movs	r3, #0
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	2300      	movs	r3, #0
 80081e0:	460a      	mov	r2, r1
 80081e2:	491d      	ldr	r1, [pc, #116]	; (8008258 <vTaskStartScheduler+0xa4>)
 80081e4:	481d      	ldr	r0, [pc, #116]	; (800825c <vTaskStartScheduler+0xa8>)
 80081e6:	f7ff fe21 	bl	8007e2c <xTaskCreateStatic>
 80081ea:	4602      	mov	r2, r0
 80081ec:	4b1c      	ldr	r3, [pc, #112]	; (8008260 <vTaskStartScheduler+0xac>)
 80081ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081f0:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <vTaskStartScheduler+0xac>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e001      	b.n	8008202 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d115      	bne.n	8008234 <vTaskStartScheduler+0x80>
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800821a:	4b12      	ldr	r3, [pc, #72]	; (8008264 <vTaskStartScheduler+0xb0>)
 800821c:	f04f 32ff 	mov.w	r2, #4294967295
 8008220:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <vTaskStartScheduler+0xb4>)
 8008224:	2201      	movs	r2, #1
 8008226:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008228:	4b10      	ldr	r3, [pc, #64]	; (800826c <vTaskStartScheduler+0xb8>)
 800822a:	2200      	movs	r2, #0
 800822c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800822e:	f000 fdef 	bl	8008e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008232:	e00d      	b.n	8008250 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d109      	bne.n	8008250 <vTaskStartScheduler+0x9c>
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	e7fe      	b.n	800824e <vTaskStartScheduler+0x9a>
}
 8008250:	bf00      	nop
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	0800a90c 	.word	0x0800a90c
 800825c:	080087f9 	.word	0x080087f9
 8008260:	20000434 	.word	0x20000434
 8008264:	20000430 	.word	0x20000430
 8008268:	2000041c 	.word	0x2000041c
 800826c:	20000414 	.word	0x20000414

08008270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008274:	4b04      	ldr	r3, [pc, #16]	; (8008288 <vTaskSuspendAll+0x18>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	4a03      	ldr	r2, [pc, #12]	; (8008288 <vTaskSuspendAll+0x18>)
 800827c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800827e:	bf00      	nop
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	20000438 	.word	0x20000438

0800828c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008296:	2300      	movs	r3, #0
 8008298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800829a:	4b41      	ldr	r3, [pc, #260]	; (80083a0 <xTaskResumeAll+0x114>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <xTaskResumeAll+0x2a>
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	e7fe      	b.n	80082b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082b6:	f000 fe49 	bl	8008f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082ba:	4b39      	ldr	r3, [pc, #228]	; (80083a0 <xTaskResumeAll+0x114>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3b01      	subs	r3, #1
 80082c0:	4a37      	ldr	r2, [pc, #220]	; (80083a0 <xTaskResumeAll+0x114>)
 80082c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c4:	4b36      	ldr	r3, [pc, #216]	; (80083a0 <xTaskResumeAll+0x114>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d161      	bne.n	8008390 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082cc:	4b35      	ldr	r3, [pc, #212]	; (80083a4 <xTaskResumeAll+0x118>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d05d      	beq.n	8008390 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082d4:	e02e      	b.n	8008334 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d6:	4b34      	ldr	r3, [pc, #208]	; (80083a8 <xTaskResumeAll+0x11c>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3318      	adds	r3, #24
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff faa0 	bl	8007828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff fa9b 	bl	8007828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	2201      	movs	r2, #1
 80082f8:	409a      	lsls	r2, r3
 80082fa:	4b2c      	ldr	r3, [pc, #176]	; (80083ac <xTaskResumeAll+0x120>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4313      	orrs	r3, r2
 8008300:	4a2a      	ldr	r2, [pc, #168]	; (80083ac <xTaskResumeAll+0x120>)
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4a27      	ldr	r2, [pc, #156]	; (80083b0 <xTaskResumeAll+0x124>)
 8008312:	441a      	add	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3304      	adds	r3, #4
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f7ff fa27 	bl	800776e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008324:	4b23      	ldr	r3, [pc, #140]	; (80083b4 <xTaskResumeAll+0x128>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832a:	429a      	cmp	r2, r3
 800832c:	d302      	bcc.n	8008334 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800832e:	4b22      	ldr	r3, [pc, #136]	; (80083b8 <xTaskResumeAll+0x12c>)
 8008330:	2201      	movs	r2, #1
 8008332:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008334:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <xTaskResumeAll+0x11c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1cc      	bne.n	80082d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008342:	f000 fb0b 	bl	800895c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008346:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <xTaskResumeAll+0x130>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d010      	beq.n	8008374 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008352:	f000 f837 	bl	80083c4 <xTaskIncrementTick>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800835c:	4b16      	ldr	r3, [pc, #88]	; (80083b8 <xTaskResumeAll+0x12c>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3b01      	subs	r3, #1
 8008366:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1f1      	bne.n	8008352 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <xTaskResumeAll+0x130>)
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008374:	4b10      	ldr	r3, [pc, #64]	; (80083b8 <xTaskResumeAll+0x12c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d009      	beq.n	8008390 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800837c:	2301      	movs	r3, #1
 800837e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008380:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <xTaskResumeAll+0x134>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008390:	f000 fe0a 	bl	8008fa8 <vPortExitCritical>

	return xAlreadyYielded;
 8008394:	68bb      	ldr	r3, [r7, #8]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000438 	.word	0x20000438
 80083a4:	20000410 	.word	0x20000410
 80083a8:	200003d0 	.word	0x200003d0
 80083ac:	20000418 	.word	0x20000418
 80083b0:	20000314 	.word	0x20000314
 80083b4:	20000310 	.word	0x20000310
 80083b8:	20000424 	.word	0x20000424
 80083bc:	20000420 	.word	0x20000420
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ce:	4b4e      	ldr	r3, [pc, #312]	; (8008508 <xTaskIncrementTick+0x144>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f040 8087 	bne.w	80084e6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083d8:	4b4c      	ldr	r3, [pc, #304]	; (800850c <xTaskIncrementTick+0x148>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083e0:	4a4a      	ldr	r2, [pc, #296]	; (800850c <xTaskIncrementTick+0x148>)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d11f      	bne.n	800842c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80083ec:	4b48      	ldr	r3, [pc, #288]	; (8008510 <xTaskIncrementTick+0x14c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <xTaskIncrementTick+0x46>
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	e7fe      	b.n	8008408 <xTaskIncrementTick+0x44>
 800840a:	4b41      	ldr	r3, [pc, #260]	; (8008510 <xTaskIncrementTick+0x14c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	4b40      	ldr	r3, [pc, #256]	; (8008514 <xTaskIncrementTick+0x150>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a3e      	ldr	r2, [pc, #248]	; (8008510 <xTaskIncrementTick+0x14c>)
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	4a3e      	ldr	r2, [pc, #248]	; (8008514 <xTaskIncrementTick+0x150>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	4b3e      	ldr	r3, [pc, #248]	; (8008518 <xTaskIncrementTick+0x154>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3301      	adds	r3, #1
 8008424:	4a3c      	ldr	r2, [pc, #240]	; (8008518 <xTaskIncrementTick+0x154>)
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	f000 fa98 	bl	800895c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800842c:	4b3b      	ldr	r3, [pc, #236]	; (800851c <xTaskIncrementTick+0x158>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	429a      	cmp	r2, r3
 8008434:	d348      	bcc.n	80084c8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008436:	4b36      	ldr	r3, [pc, #216]	; (8008510 <xTaskIncrementTick+0x14c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008440:	4b36      	ldr	r3, [pc, #216]	; (800851c <xTaskIncrementTick+0x158>)
 8008442:	f04f 32ff 	mov.w	r2, #4294967295
 8008446:	601a      	str	r2, [r3, #0]
					break;
 8008448:	e03e      	b.n	80084c8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800844a:	4b31      	ldr	r3, [pc, #196]	; (8008510 <xTaskIncrementTick+0x14c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	429a      	cmp	r2, r3
 8008460:	d203      	bcs.n	800846a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008462:	4a2e      	ldr	r2, [pc, #184]	; (800851c <xTaskIncrementTick+0x158>)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008468:	e02e      	b.n	80084c8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	3304      	adds	r3, #4
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff f9da 	bl	8007828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	3318      	adds	r3, #24
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff f9d1 	bl	8007828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	2201      	movs	r2, #1
 800848c:	409a      	lsls	r2, r3
 800848e:	4b24      	ldr	r3, [pc, #144]	; (8008520 <xTaskIncrementTick+0x15c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4313      	orrs	r3, r2
 8008494:	4a22      	ldr	r2, [pc, #136]	; (8008520 <xTaskIncrementTick+0x15c>)
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849c:	4613      	mov	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4a1f      	ldr	r2, [pc, #124]	; (8008524 <xTaskIncrementTick+0x160>)
 80084a6:	441a      	add	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	3304      	adds	r3, #4
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f7ff f95d 	bl	800776e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	4b1b      	ldr	r3, [pc, #108]	; (8008528 <xTaskIncrementTick+0x164>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084be:	429a      	cmp	r2, r3
 80084c0:	d3b9      	bcc.n	8008436 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80084c2:	2301      	movs	r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084c6:	e7b6      	b.n	8008436 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084c8:	4b17      	ldr	r3, [pc, #92]	; (8008528 <xTaskIncrementTick+0x164>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ce:	4915      	ldr	r1, [pc, #84]	; (8008524 <xTaskIncrementTick+0x160>)
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	440b      	add	r3, r1
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d907      	bls.n	80084f0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e004      	b.n	80084f0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <xTaskIncrementTick+0x168>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3301      	adds	r3, #1
 80084ec:	4a0f      	ldr	r2, [pc, #60]	; (800852c <xTaskIncrementTick+0x168>)
 80084ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084f0:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <xTaskIncrementTick+0x16c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084fc:	697b      	ldr	r3, [r7, #20]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000438 	.word	0x20000438
 800850c:	20000414 	.word	0x20000414
 8008510:	200003c8 	.word	0x200003c8
 8008514:	200003cc 	.word	0x200003cc
 8008518:	20000428 	.word	0x20000428
 800851c:	20000430 	.word	0x20000430
 8008520:	20000418 	.word	0x20000418
 8008524:	20000314 	.word	0x20000314
 8008528:	20000310 	.word	0x20000310
 800852c:	20000420 	.word	0x20000420
 8008530:	20000424 	.word	0x20000424

08008534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800853a:	4b26      	ldr	r3, [pc, #152]	; (80085d4 <vTaskSwitchContext+0xa0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008542:	4b25      	ldr	r3, [pc, #148]	; (80085d8 <vTaskSwitchContext+0xa4>)
 8008544:	2201      	movs	r2, #1
 8008546:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008548:	e03e      	b.n	80085c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800854a:	4b23      	ldr	r3, [pc, #140]	; (80085d8 <vTaskSwitchContext+0xa4>)
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008550:	4b22      	ldr	r3, [pc, #136]	; (80085dc <vTaskSwitchContext+0xa8>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	fab3 f383 	clz	r3, r3
 800855c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	f1c3 031f 	rsb	r3, r3, #31
 8008564:	617b      	str	r3, [r7, #20]
 8008566:	491e      	ldr	r1, [pc, #120]	; (80085e0 <vTaskSwitchContext+0xac>)
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <vTaskSwitchContext+0x5a>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	e7fe      	b.n	800858c <vTaskSwitchContext+0x58>
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4a11      	ldr	r2, [pc, #68]	; (80085e0 <vTaskSwitchContext+0xac>)
 800859a:	4413      	add	r3, r2
 800859c:	613b      	str	r3, [r7, #16]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	605a      	str	r2, [r3, #4]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	3308      	adds	r3, #8
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d104      	bne.n	80085be <vTaskSwitchContext+0x8a>
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	4a07      	ldr	r2, [pc, #28]	; (80085e4 <vTaskSwitchContext+0xb0>)
 80085c6:	6013      	str	r3, [r2, #0]
}
 80085c8:	bf00      	nop
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	20000438 	.word	0x20000438
 80085d8:	20000424 	.word	0x20000424
 80085dc:	20000418 	.word	0x20000418
 80085e0:	20000314 	.word	0x20000314
 80085e4:	20000310 	.word	0x20000310

080085e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d109      	bne.n	800860c <vTaskPlaceOnEventList+0x24>
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	e7fe      	b.n	800860a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800860c:	4b07      	ldr	r3, [pc, #28]	; (800862c <vTaskPlaceOnEventList+0x44>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3318      	adds	r3, #24
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff f8ce 	bl	80077b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800861a:	2101      	movs	r1, #1
 800861c:	6838      	ldr	r0, [r7, #0]
 800861e:	f000 fb07 	bl	8008c30 <prvAddCurrentTaskToDelayedList>
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000310 	.word	0x20000310

08008630 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d109      	bne.n	800865a <xTaskRemoveFromEventList+0x2a>
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e7fe      	b.n	8008658 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3318      	adds	r3, #24
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff f8e2 	bl	8007828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008664:	4b1d      	ldr	r3, [pc, #116]	; (80086dc <xTaskRemoveFromEventList+0xac>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d11c      	bne.n	80086a6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	3304      	adds	r3, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff f8d9 	bl	8007828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	2201      	movs	r2, #1
 800867c:	409a      	lsls	r2, r3
 800867e:	4b18      	ldr	r3, [pc, #96]	; (80086e0 <xTaskRemoveFromEventList+0xb0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4313      	orrs	r3, r2
 8008684:	4a16      	ldr	r2, [pc, #88]	; (80086e0 <xTaskRemoveFromEventList+0xb0>)
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4a13      	ldr	r2, [pc, #76]	; (80086e4 <xTaskRemoveFromEventList+0xb4>)
 8008696:	441a      	add	r2, r3
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f7ff f865 	bl	800776e <vListInsertEnd>
 80086a4:	e005      	b.n	80086b2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	3318      	adds	r3, #24
 80086aa:	4619      	mov	r1, r3
 80086ac:	480e      	ldr	r0, [pc, #56]	; (80086e8 <xTaskRemoveFromEventList+0xb8>)
 80086ae:	f7ff f85e 	bl	800776e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b6:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <xTaskRemoveFromEventList+0xbc>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	429a      	cmp	r2, r3
 80086be:	d905      	bls.n	80086cc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086c4:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <xTaskRemoveFromEventList+0xc0>)
 80086c6:	2201      	movs	r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	e001      	b.n	80086d0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086d0:	697b      	ldr	r3, [r7, #20]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000438 	.word	0x20000438
 80086e0:	20000418 	.word	0x20000418
 80086e4:	20000314 	.word	0x20000314
 80086e8:	200003d0 	.word	0x200003d0
 80086ec:	20000310 	.word	0x20000310
 80086f0:	20000424 	.word	0x20000424

080086f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086fc:	4b06      	ldr	r3, [pc, #24]	; (8008718 <vTaskInternalSetTimeOutState+0x24>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <vTaskInternalSetTimeOutState+0x28>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	20000428 	.word	0x20000428
 800871c:	20000414 	.word	0x20000414

08008720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d109      	bne.n	8008744 <xTaskCheckForTimeOut+0x24>
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	613b      	str	r3, [r7, #16]
 8008742:	e7fe      	b.n	8008742 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d109      	bne.n	800875e <xTaskCheckForTimeOut+0x3e>
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	e7fe      	b.n	800875c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800875e:	f000 fbf5 	bl	8008f4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008762:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <xTaskCheckForTimeOut+0xb8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d102      	bne.n	8008782 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800877c:	2300      	movs	r3, #0
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	e023      	b.n	80087ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b15      	ldr	r3, [pc, #84]	; (80087dc <xTaskCheckForTimeOut+0xbc>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d007      	beq.n	800879e <xTaskCheckForTimeOut+0x7e>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	429a      	cmp	r2, r3
 8008796:	d302      	bcc.n	800879e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008798:	2301      	movs	r3, #1
 800879a:	61fb      	str	r3, [r7, #28]
 800879c:	e015      	b.n	80087ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d20b      	bcs.n	80087c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	1ad2      	subs	r2, r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff ff9d 	bl	80086f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61fb      	str	r3, [r7, #28]
 80087be:	e004      	b.n	80087ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087c6:	2301      	movs	r3, #1
 80087c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087ca:	f000 fbed 	bl	8008fa8 <vPortExitCritical>

	return xReturn;
 80087ce:	69fb      	ldr	r3, [r7, #28]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3720      	adds	r7, #32
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000414 	.word	0x20000414
 80087dc:	20000428 	.word	0x20000428

080087e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087e4:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <vTaskMissedYield+0x14>)
 80087e6:	2201      	movs	r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
}
 80087ea:	bf00      	nop
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	20000424 	.word	0x20000424

080087f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008800:	f000 f852 	bl	80088a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008804:	4b06      	ldr	r3, [pc, #24]	; (8008820 <prvIdleTask+0x28>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d9f9      	bls.n	8008800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800880c:	4b05      	ldr	r3, [pc, #20]	; (8008824 <prvIdleTask+0x2c>)
 800880e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800881c:	e7f0      	b.n	8008800 <prvIdleTask+0x8>
 800881e:	bf00      	nop
 8008820:	20000314 	.word	0x20000314
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800882e:	2300      	movs	r3, #0
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	e00c      	b.n	800884e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4a12      	ldr	r2, [pc, #72]	; (8008888 <prvInitialiseTaskLists+0x60>)
 8008840:	4413      	add	r3, r2
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe ff66 	bl	8007714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3301      	adds	r3, #1
 800884c:	607b      	str	r3, [r7, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b06      	cmp	r3, #6
 8008852:	d9ef      	bls.n	8008834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008854:	480d      	ldr	r0, [pc, #52]	; (800888c <prvInitialiseTaskLists+0x64>)
 8008856:	f7fe ff5d 	bl	8007714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800885a:	480d      	ldr	r0, [pc, #52]	; (8008890 <prvInitialiseTaskLists+0x68>)
 800885c:	f7fe ff5a 	bl	8007714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008860:	480c      	ldr	r0, [pc, #48]	; (8008894 <prvInitialiseTaskLists+0x6c>)
 8008862:	f7fe ff57 	bl	8007714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008866:	480c      	ldr	r0, [pc, #48]	; (8008898 <prvInitialiseTaskLists+0x70>)
 8008868:	f7fe ff54 	bl	8007714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800886c:	480b      	ldr	r0, [pc, #44]	; (800889c <prvInitialiseTaskLists+0x74>)
 800886e:	f7fe ff51 	bl	8007714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008872:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <prvInitialiseTaskLists+0x78>)
 8008874:	4a05      	ldr	r2, [pc, #20]	; (800888c <prvInitialiseTaskLists+0x64>)
 8008876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008878:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <prvInitialiseTaskLists+0x7c>)
 800887a:	4a05      	ldr	r2, [pc, #20]	; (8008890 <prvInitialiseTaskLists+0x68>)
 800887c:	601a      	str	r2, [r3, #0]
}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000314 	.word	0x20000314
 800888c:	200003a0 	.word	0x200003a0
 8008890:	200003b4 	.word	0x200003b4
 8008894:	200003d0 	.word	0x200003d0
 8008898:	200003e4 	.word	0x200003e4
 800889c:	200003fc 	.word	0x200003fc
 80088a0:	200003c8 	.word	0x200003c8
 80088a4:	200003cc 	.word	0x200003cc

080088a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088ae:	e019      	b.n	80088e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088b0:	f000 fb4c 	bl	8008f4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b4:	4b0f      	ldr	r3, [pc, #60]	; (80088f4 <prvCheckTasksWaitingTermination+0x4c>)
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3304      	adds	r3, #4
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe ffb1 	bl	8007828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088c6:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <prvCheckTasksWaitingTermination+0x50>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	4a0a      	ldr	r2, [pc, #40]	; (80088f8 <prvCheckTasksWaitingTermination+0x50>)
 80088ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <prvCheckTasksWaitingTermination+0x54>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	4a09      	ldr	r2, [pc, #36]	; (80088fc <prvCheckTasksWaitingTermination+0x54>)
 80088d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088da:	f000 fb65 	bl	8008fa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f80e 	bl	8008900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <prvCheckTasksWaitingTermination+0x54>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e1      	bne.n	80088b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	200003e4 	.word	0x200003e4
 80088f8:	20000410 	.word	0x20000410
 80088fc:	200003f8 	.word	0x200003f8

08008900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fcf4 	bl	8009304 <vPortFree>
				vPortFree( pxTCB );
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fcf1 	bl	8009304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008922:	e017      	b.n	8008954 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800892a:	2b01      	cmp	r3, #1
 800892c:	d103      	bne.n	8008936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fce8 	bl	8009304 <vPortFree>
	}
 8008934:	e00e      	b.n	8008954 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800893c:	2b02      	cmp	r3, #2
 800893e:	d009      	beq.n	8008954 <prvDeleteTCB+0x54>
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	e7fe      	b.n	8008952 <prvDeleteTCB+0x52>
	}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008962:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <prvResetNextTaskUnblockTime+0x38>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <prvResetNextTaskUnblockTime+0x3c>)
 800896e:	f04f 32ff 	mov.w	r2, #4294967295
 8008972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008974:	e008      	b.n	8008988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008976:	4b07      	ldr	r3, [pc, #28]	; (8008994 <prvResetNextTaskUnblockTime+0x38>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4a04      	ldr	r2, [pc, #16]	; (8008998 <prvResetNextTaskUnblockTime+0x3c>)
 8008986:	6013      	str	r3, [r2, #0]
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	200003c8 	.word	0x200003c8
 8008998:	20000430 	.word	0x20000430

0800899c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <xTaskGetSchedulerState+0x34>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089aa:	2301      	movs	r3, #1
 80089ac:	607b      	str	r3, [r7, #4]
 80089ae:	e008      	b.n	80089c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b0:	4b08      	ldr	r3, [pc, #32]	; (80089d4 <xTaskGetSchedulerState+0x38>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d102      	bne.n	80089be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089b8:	2302      	movs	r3, #2
 80089ba:	607b      	str	r3, [r7, #4]
 80089bc:	e001      	b.n	80089c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089c2:	687b      	ldr	r3, [r7, #4]
	}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	2000041c 	.word	0x2000041c
 80089d4:	20000438 	.word	0x20000438

080089d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d069      	beq.n	8008ac2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f2:	4b36      	ldr	r3, [pc, #216]	; (8008acc <xTaskPriorityInherit+0xf4>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d259      	bcs.n	8008ab0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	db06      	blt.n	8008a12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a04:	4b31      	ldr	r3, [pc, #196]	; (8008acc <xTaskPriorityInherit+0xf4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	f1c3 0207 	rsb	r2, r3, #7
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6959      	ldr	r1, [r3, #20]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4a2b      	ldr	r2, [pc, #172]	; (8008ad0 <xTaskPriorityInherit+0xf8>)
 8008a24:	4413      	add	r3, r2
 8008a26:	4299      	cmp	r1, r3
 8008a28:	d13a      	bne.n	8008aa0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fefa 	bl	8007828 <uxListRemove>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d115      	bne.n	8008a66 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3e:	4924      	ldr	r1, [pc, #144]	; (8008ad0 <xTaskPriorityInherit+0xf8>)
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10a      	bne.n	8008a66 <xTaskPriorityInherit+0x8e>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	2201      	movs	r2, #1
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	43da      	mvns	r2, r3
 8008a5c:	4b1d      	ldr	r3, [pc, #116]	; (8008ad4 <xTaskPriorityInherit+0xfc>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4013      	ands	r3, r2
 8008a62:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <xTaskPriorityInherit+0xfc>)
 8008a64:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a66:	4b19      	ldr	r3, [pc, #100]	; (8008acc <xTaskPriorityInherit+0xf4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	2201      	movs	r2, #1
 8008a76:	409a      	lsls	r2, r3
 8008a78:	4b16      	ldr	r3, [pc, #88]	; (8008ad4 <xTaskPriorityInherit+0xfc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	4a15      	ldr	r2, [pc, #84]	; (8008ad4 <xTaskPriorityInherit+0xfc>)
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4a10      	ldr	r2, [pc, #64]	; (8008ad0 <xTaskPriorityInherit+0xf8>)
 8008a90:	441a      	add	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	3304      	adds	r3, #4
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f7fe fe68 	bl	800776e <vListInsertEnd>
 8008a9e:	e004      	b.n	8008aaa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <xTaskPriorityInherit+0xf4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	e008      	b.n	8008ac2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <xTaskPriorityInherit+0xf4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d201      	bcs.n	8008ac2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
	}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000310 	.word	0x20000310
 8008ad0:	20000314 	.word	0x20000314
 8008ad4:	20000418 	.word	0x20000418

08008ad8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8081 	beq.w	8008bf4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	e7fe      	b.n	8008b0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d902      	bls.n	8008b1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	61fb      	str	r3, [r7, #28]
 8008b1c:	e002      	b.n	8008b24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d062      	beq.n	8008bf4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d15d      	bne.n	8008bf4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b38:	4b30      	ldr	r3, [pc, #192]	; (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d109      	bne.n	8008b56 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
 8008b54:	e7fe      	b.n	8008b54 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	db04      	blt.n	8008b74 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f1c3 0207 	rsb	r2, r3, #7
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	6959      	ldr	r1, [r3, #20]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008b84:	4413      	add	r3, r2
 8008b86:	4299      	cmp	r1, r3
 8008b88:	d134      	bne.n	8008bf4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fe4a 	bl	8007828 <uxListRemove>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d115      	bne.n	8008bc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9e:	4918      	ldr	r1, [pc, #96]	; (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	440b      	add	r3, r1
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10a      	bne.n	8008bc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bba:	43da      	mvns	r2, r3
 8008bbc:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	4a10      	ldr	r2, [pc, #64]	; (8008c04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008bc4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	2201      	movs	r2, #1
 8008bcc:	409a      	lsls	r2, r3
 8008bce:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	4a0b      	ldr	r2, [pc, #44]	; (8008c04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4a06      	ldr	r2, [pc, #24]	; (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008be6:	441a      	add	r2, r3
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f7fe fdbd 	bl	800776e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bf4:	bf00      	nop
 8008bf6:	3720      	adds	r7, #32
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20000310 	.word	0x20000310
 8008c00:	20000314 	.word	0x20000314
 8008c04:	20000418 	.word	0x20000418

08008c08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008c1e:	4b03      	ldr	r3, [pc, #12]	; (8008c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8008c20:	681b      	ldr	r3, [r3, #0]
	}
 8008c22:	4618      	mov	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	20000310 	.word	0x20000310

08008c30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c3a:	4b29      	ldr	r3, [pc, #164]	; (8008ce0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c40:	4b28      	ldr	r3, [pc, #160]	; (8008ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fdee 	bl	8007828 <uxListRemove>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10b      	bne.n	8008c6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c52:	4b24      	ldr	r3, [pc, #144]	; (8008ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	2201      	movs	r2, #1
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43da      	mvns	r2, r3
 8008c60:	4b21      	ldr	r3, [pc, #132]	; (8008ce8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4013      	ands	r3, r2
 8008c66:	4a20      	ldr	r2, [pc, #128]	; (8008ce8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c70:	d10a      	bne.n	8008c88 <prvAddCurrentTaskToDelayedList+0x58>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d007      	beq.n	8008c88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c78:	4b1a      	ldr	r3, [pc, #104]	; (8008ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4619      	mov	r1, r3
 8008c80:	481a      	ldr	r0, [pc, #104]	; (8008cec <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c82:	f7fe fd74 	bl	800776e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c86:	e026      	b.n	8008cd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c90:	4b14      	ldr	r3, [pc, #80]	; (8008ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d209      	bcs.n	8008cb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ca0:	4b13      	ldr	r3, [pc, #76]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	4619      	mov	r1, r3
 8008cac:	4610      	mov	r0, r2
 8008cae:	f7fe fd82 	bl	80077b6 <vListInsert>
}
 8008cb2:	e010      	b.n	8008cd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cb4:	4b0f      	ldr	r3, [pc, #60]	; (8008cf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7fe fd78 	bl	80077b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cc6:	4b0c      	ldr	r3, [pc, #48]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d202      	bcs.n	8008cd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008cd0:	4a09      	ldr	r2, [pc, #36]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	6013      	str	r3, [r2, #0]
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20000414 	.word	0x20000414
 8008ce4:	20000310 	.word	0x20000310
 8008ce8:	20000418 	.word	0x20000418
 8008cec:	200003fc 	.word	0x200003fc
 8008cf0:	200003cc 	.word	0x200003cc
 8008cf4:	200003c8 	.word	0x200003c8
 8008cf8:	20000430 	.word	0x20000430

08008cfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3b04      	subs	r3, #4
 8008d0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3b04      	subs	r3, #4
 8008d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f023 0201 	bic.w	r2, r3, #1
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3b04      	subs	r3, #4
 8008d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d2c:	4a0c      	ldr	r2, [pc, #48]	; (8008d60 <pxPortInitialiseStack+0x64>)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3b14      	subs	r3, #20
 8008d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3b04      	subs	r3, #4
 8008d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f06f 0202 	mvn.w	r2, #2
 8008d4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3b20      	subs	r3, #32
 8008d50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d52:	68fb      	ldr	r3, [r7, #12]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	08008d65 	.word	0x08008d65

08008d64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d6e:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <prvTaskExitError+0x50>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d76:	d009      	beq.n	8008d8c <prvTaskExitError+0x28>
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	e7fe      	b.n	8008d8a <prvTaskExitError+0x26>
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d9e:	bf00      	nop
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0fc      	beq.n	8008da0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008da6:	bf00      	nop
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	2000002c 	.word	0x2000002c
	...

08008dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008dc0:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <pxCurrentTCBConst2>)
 8008dc2:	6819      	ldr	r1, [r3, #0]
 8008dc4:	6808      	ldr	r0, [r1, #0]
 8008dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	f380 8809 	msr	PSP, r0
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f04f 0000 	mov.w	r0, #0
 8008dd6:	f380 8811 	msr	BASEPRI, r0
 8008dda:	4770      	bx	lr
 8008ddc:	f3af 8000 	nop.w

08008de0 <pxCurrentTCBConst2>:
 8008de0:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop

08008de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008de8:	4808      	ldr	r0, [pc, #32]	; (8008e0c <prvPortStartFirstTask+0x24>)
 8008dea:	6800      	ldr	r0, [r0, #0]
 8008dec:	6800      	ldr	r0, [r0, #0]
 8008dee:	f380 8808 	msr	MSP, r0
 8008df2:	f04f 0000 	mov.w	r0, #0
 8008df6:	f380 8814 	msr	CONTROL, r0
 8008dfa:	b662      	cpsie	i
 8008dfc:	b661      	cpsie	f
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	df00      	svc	0
 8008e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e0a:	bf00      	nop
 8008e0c:	e000ed08 	.word	0xe000ed08

08008e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e16:	4b44      	ldr	r3, [pc, #272]	; (8008f28 <xPortStartScheduler+0x118>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a44      	ldr	r2, [pc, #272]	; (8008f2c <xPortStartScheduler+0x11c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d109      	bne.n	8008e34 <xPortStartScheduler+0x24>
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	613b      	str	r3, [r7, #16]
 8008e32:	e7fe      	b.n	8008e32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e34:	4b3c      	ldr	r3, [pc, #240]	; (8008f28 <xPortStartScheduler+0x118>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a3d      	ldr	r2, [pc, #244]	; (8008f30 <xPortStartScheduler+0x120>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d109      	bne.n	8008e52 <xPortStartScheduler+0x42>
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	e7fe      	b.n	8008e50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e52:	4b38      	ldr	r3, [pc, #224]	; (8008f34 <xPortStartScheduler+0x124>)
 8008e54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	22ff      	movs	r2, #255	; 0xff
 8008e62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e6c:	78fb      	ldrb	r3, [r7, #3]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	4b30      	ldr	r3, [pc, #192]	; (8008f38 <xPortStartScheduler+0x128>)
 8008e78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e7a:	4b30      	ldr	r3, [pc, #192]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008e7c:	2207      	movs	r2, #7
 8008e7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e80:	e009      	b.n	8008e96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008e82:	4b2e      	ldr	r3, [pc, #184]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	4a2c      	ldr	r2, [pc, #176]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008e8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9e:	2b80      	cmp	r3, #128	; 0x80
 8008ea0:	d0ef      	beq.n	8008e82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ea2:	4b26      	ldr	r3, [pc, #152]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f1c3 0307 	rsb	r3, r3, #7
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d009      	beq.n	8008ec2 <xPortStartScheduler+0xb2>
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	60bb      	str	r3, [r7, #8]
 8008ec0:	e7fe      	b.n	8008ec0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ec2:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	4a1c      	ldr	r2, [pc, #112]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008eca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ed4:	4a19      	ldr	r2, [pc, #100]	; (8008f3c <xPortStartScheduler+0x12c>)
 8008ed6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ee0:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <xPortStartScheduler+0x130>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a16      	ldr	r2, [pc, #88]	; (8008f40 <xPortStartScheduler+0x130>)
 8008ee6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008eea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008eec:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <xPortStartScheduler+0x130>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a13      	ldr	r2, [pc, #76]	; (8008f40 <xPortStartScheduler+0x130>)
 8008ef2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ef6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ef8:	f000 f8d6 	bl	80090a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008efc:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <xPortStartScheduler+0x134>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f02:	f000 f8f5 	bl	80090f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f06:	4b10      	ldr	r3, [pc, #64]	; (8008f48 <xPortStartScheduler+0x138>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a0f      	ldr	r2, [pc, #60]	; (8008f48 <xPortStartScheduler+0x138>)
 8008f0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f12:	f7ff ff69 	bl	8008de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f16:	f7ff fb0d 	bl	8008534 <vTaskSwitchContext>
	prvTaskExitError();
 8008f1a:	f7ff ff23 	bl	8008d64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3718      	adds	r7, #24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	e000ed00 	.word	0xe000ed00
 8008f2c:	410fc271 	.word	0x410fc271
 8008f30:	410fc270 	.word	0x410fc270
 8008f34:	e000e400 	.word	0xe000e400
 8008f38:	2000043c 	.word	0x2000043c
 8008f3c:	20000440 	.word	0x20000440
 8008f40:	e000ed20 	.word	0xe000ed20
 8008f44:	2000002c 	.word	0x2000002c
 8008f48:	e000ef34 	.word	0xe000ef34

08008f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f64:	4b0e      	ldr	r3, [pc, #56]	; (8008fa0 <vPortEnterCritical+0x54>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	4a0d      	ldr	r2, [pc, #52]	; (8008fa0 <vPortEnterCritical+0x54>)
 8008f6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <vPortEnterCritical+0x54>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d10e      	bne.n	8008f94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f76:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <vPortEnterCritical+0x58>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d009      	beq.n	8008f94 <vPortEnterCritical+0x48>
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	e7fe      	b.n	8008f92 <vPortEnterCritical+0x46>
	}
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	2000002c 	.word	0x2000002c
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fae:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <vPortExitCritical+0x4c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d109      	bne.n	8008fca <vPortExitCritical+0x22>
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	607b      	str	r3, [r7, #4]
 8008fc8:	e7fe      	b.n	8008fc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008fca:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <vPortExitCritical+0x4c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	4a08      	ldr	r2, [pc, #32]	; (8008ff4 <vPortExitCritical+0x4c>)
 8008fd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fd4:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <vPortExitCritical+0x4c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <vPortExitCritical+0x3e>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	2000002c 	.word	0x2000002c
	...

08009000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009000:	f3ef 8009 	mrs	r0, PSP
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	4b15      	ldr	r3, [pc, #84]	; (8009060 <pxCurrentTCBConst>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	f01e 0f10 	tst.w	lr, #16
 8009010:	bf08      	it	eq
 8009012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901a:	6010      	str	r0, [r2, #0]
 800901c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009024:	f380 8811 	msr	BASEPRI, r0
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f7ff fa80 	bl	8008534 <vTaskSwitchContext>
 8009034:	f04f 0000 	mov.w	r0, #0
 8009038:	f380 8811 	msr	BASEPRI, r0
 800903c:	bc09      	pop	{r0, r3}
 800903e:	6819      	ldr	r1, [r3, #0]
 8009040:	6808      	ldr	r0, [r1, #0]
 8009042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009046:	f01e 0f10 	tst.w	lr, #16
 800904a:	bf08      	it	eq
 800904c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009050:	f380 8809 	msr	PSP, r0
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	f3af 8000 	nop.w

08009060 <pxCurrentTCBConst>:
 8009060:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop

08009068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009080:	f7ff f9a0 	bl	80083c4 <xTaskIncrementTick>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800908a:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <SysTick_Handler+0x3c>)
 800908c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009090:	601a      	str	r2, [r3, #0]
 8009092:	2300      	movs	r3, #0
 8009094:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090ac:	4b0b      	ldr	r3, [pc, #44]	; (80090dc <vPortSetupTimerInterrupt+0x34>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090b2:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <vPortSetupTimerInterrupt+0x38>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <vPortSetupTimerInterrupt+0x3c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a0a      	ldr	r2, [pc, #40]	; (80090e8 <vPortSetupTimerInterrupt+0x40>)
 80090be:	fba2 2303 	umull	r2, r3, r2, r3
 80090c2:	099b      	lsrs	r3, r3, #6
 80090c4:	4a09      	ldr	r2, [pc, #36]	; (80090ec <vPortSetupTimerInterrupt+0x44>)
 80090c6:	3b01      	subs	r3, #1
 80090c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ca:	4b04      	ldr	r3, [pc, #16]	; (80090dc <vPortSetupTimerInterrupt+0x34>)
 80090cc:	2207      	movs	r2, #7
 80090ce:	601a      	str	r2, [r3, #0]
}
 80090d0:	bf00      	nop
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	e000e010 	.word	0xe000e010
 80090e0:	e000e018 	.word	0xe000e018
 80090e4:	20000020 	.word	0x20000020
 80090e8:	10624dd3 	.word	0x10624dd3
 80090ec:	e000e014 	.word	0xe000e014

080090f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009100 <vPortEnableVFP+0x10>
 80090f4:	6801      	ldr	r1, [r0, #0]
 80090f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090fa:	6001      	str	r1, [r0, #0]
 80090fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090fe:	bf00      	nop
 8009100:	e000ed88 	.word	0xe000ed88

08009104 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800910a:	f3ef 8305 	mrs	r3, IPSR
 800910e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b0f      	cmp	r3, #15
 8009114:	d913      	bls.n	800913e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009116:	4a16      	ldr	r2, [pc, #88]	; (8009170 <vPortValidateInterruptPriority+0x6c>)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009120:	4b14      	ldr	r3, [pc, #80]	; (8009174 <vPortValidateInterruptPriority+0x70>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	7afa      	ldrb	r2, [r7, #11]
 8009126:	429a      	cmp	r2, r3
 8009128:	d209      	bcs.n	800913e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	e7fe      	b.n	800913c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800913e:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <vPortValidateInterruptPriority+0x74>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009146:	4b0d      	ldr	r3, [pc, #52]	; (800917c <vPortValidateInterruptPriority+0x78>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	429a      	cmp	r2, r3
 800914c:	d909      	bls.n	8009162 <vPortValidateInterruptPriority+0x5e>
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	603b      	str	r3, [r7, #0]
 8009160:	e7fe      	b.n	8009160 <vPortValidateInterruptPriority+0x5c>
	}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	e000e3f0 	.word	0xe000e3f0
 8009174:	2000043c 	.word	0x2000043c
 8009178:	e000ed0c 	.word	0xe000ed0c
 800917c:	20000440 	.word	0x20000440

08009180 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800918c:	f7ff f870 	bl	8008270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009190:	4b57      	ldr	r3, [pc, #348]	; (80092f0 <pvPortMalloc+0x170>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009198:	f000 f90c 	bl	80093b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800919c:	4b55      	ldr	r3, [pc, #340]	; (80092f4 <pvPortMalloc+0x174>)
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4013      	ands	r3, r2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f040 808c 	bne.w	80092c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01c      	beq.n	80091ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80091b0:	2208      	movs	r2, #8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4413      	add	r3, r2
 80091b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d013      	beq.n	80091ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f023 0307 	bic.w	r3, r3, #7
 80091c8:	3308      	adds	r3, #8
 80091ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <pvPortMalloc+0x6a>
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	e7fe      	b.n	80091e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d068      	beq.n	80092c2 <pvPortMalloc+0x142>
 80091f0:	4b41      	ldr	r3, [pc, #260]	; (80092f8 <pvPortMalloc+0x178>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d863      	bhi.n	80092c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091fa:	4b40      	ldr	r3, [pc, #256]	; (80092fc <pvPortMalloc+0x17c>)
 80091fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091fe:	4b3f      	ldr	r3, [pc, #252]	; (80092fc <pvPortMalloc+0x17c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009204:	e004      	b.n	8009210 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	429a      	cmp	r2, r3
 8009218:	d903      	bls.n	8009222 <pvPortMalloc+0xa2>
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f1      	bne.n	8009206 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009222:	4b33      	ldr	r3, [pc, #204]	; (80092f0 <pvPortMalloc+0x170>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009228:	429a      	cmp	r2, r3
 800922a:	d04a      	beq.n	80092c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2208      	movs	r2, #8
 8009232:	4413      	add	r3, r2
 8009234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	1ad2      	subs	r2, r2, r3
 8009246:	2308      	movs	r3, #8
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	429a      	cmp	r2, r3
 800924c:	d91e      	bls.n	800928c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800924e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4413      	add	r3, r2
 8009254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <pvPortMalloc+0xf4>
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	e7fe      	b.n	8009272 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	1ad2      	subs	r2, r2, r3
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009286:	69b8      	ldr	r0, [r7, #24]
 8009288:	f000 f8f6 	bl	8009478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800928c:	4b1a      	ldr	r3, [pc, #104]	; (80092f8 <pvPortMalloc+0x178>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	4a18      	ldr	r2, [pc, #96]	; (80092f8 <pvPortMalloc+0x178>)
 8009298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800929a:	4b17      	ldr	r3, [pc, #92]	; (80092f8 <pvPortMalloc+0x178>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b18      	ldr	r3, [pc, #96]	; (8009300 <pvPortMalloc+0x180>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d203      	bcs.n	80092ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <pvPortMalloc+0x178>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a15      	ldr	r2, [pc, #84]	; (8009300 <pvPortMalloc+0x180>)
 80092ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <pvPortMalloc+0x174>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	431a      	orrs	r2, r3
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092c2:	f7fe ffe3 	bl	800828c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <pvPortMalloc+0x164>
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e7fe      	b.n	80092e2 <pvPortMalloc+0x162>
	return pvReturn;
 80092e4:	69fb      	ldr	r3, [r7, #28]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3728      	adds	r7, #40	; 0x28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	2000404c 	.word	0x2000404c
 80092f4:	20004058 	.word	0x20004058
 80092f8:	20004050 	.word	0x20004050
 80092fc:	20004044 	.word	0x20004044
 8009300:	20004054 	.word	0x20004054

08009304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d046      	beq.n	80093a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009316:	2308      	movs	r3, #8
 8009318:	425b      	negs	r3, r3
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	4413      	add	r3, r2
 800931e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	4b20      	ldr	r3, [pc, #128]	; (80093ac <vPortFree+0xa8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4013      	ands	r3, r2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d109      	bne.n	8009346 <vPortFree+0x42>
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	e7fe      	b.n	8009344 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <vPortFree+0x5e>
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	60bb      	str	r3, [r7, #8]
 8009360:	e7fe      	b.n	8009360 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	4b11      	ldr	r3, [pc, #68]	; (80093ac <vPortFree+0xa8>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4013      	ands	r3, r2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d019      	beq.n	80093a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d115      	bne.n	80093a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	4b0b      	ldr	r3, [pc, #44]	; (80093ac <vPortFree+0xa8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	43db      	mvns	r3, r3
 8009382:	401a      	ands	r2, r3
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009388:	f7fe ff72 	bl	8008270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <vPortFree+0xac>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4413      	add	r3, r2
 8009396:	4a06      	ldr	r2, [pc, #24]	; (80093b0 <vPortFree+0xac>)
 8009398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800939a:	6938      	ldr	r0, [r7, #16]
 800939c:	f000 f86c 	bl	8009478 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80093a0:	f7fe ff74 	bl	800828c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093a4:	bf00      	nop
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20004058 	.word	0x20004058
 80093b0:	20004050 	.word	0x20004050

080093b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093c0:	4b27      	ldr	r3, [pc, #156]	; (8009460 <prvHeapInit+0xac>)
 80093c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00c      	beq.n	80093e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3307      	adds	r3, #7
 80093d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0307 	bic.w	r3, r3, #7
 80093da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	4a1f      	ldr	r2, [pc, #124]	; (8009460 <prvHeapInit+0xac>)
 80093e4:	4413      	add	r3, r2
 80093e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093ec:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <prvHeapInit+0xb0>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093f2:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <prvHeapInit+0xb0>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	4413      	add	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009400:	2208      	movs	r2, #8
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0307 	bic.w	r3, r3, #7
 800940e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a15      	ldr	r2, [pc, #84]	; (8009468 <prvHeapInit+0xb4>)
 8009414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009416:	4b14      	ldr	r3, [pc, #80]	; (8009468 <prvHeapInit+0xb4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2200      	movs	r2, #0
 800941c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800941e:	4b12      	ldr	r3, [pc, #72]	; (8009468 <prvHeapInit+0xb4>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	1ad2      	subs	r2, r2, r3
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009434:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <prvHeapInit+0xb4>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	4a0a      	ldr	r2, [pc, #40]	; (800946c <prvHeapInit+0xb8>)
 8009442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	4a09      	ldr	r2, [pc, #36]	; (8009470 <prvHeapInit+0xbc>)
 800944a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800944c:	4b09      	ldr	r3, [pc, #36]	; (8009474 <prvHeapInit+0xc0>)
 800944e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009452:	601a      	str	r2, [r3, #0]
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20000444 	.word	0x20000444
 8009464:	20004044 	.word	0x20004044
 8009468:	2000404c 	.word	0x2000404c
 800946c:	20004054 	.word	0x20004054
 8009470:	20004050 	.word	0x20004050
 8009474:	20004058 	.word	0x20004058

08009478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009480:	4b28      	ldr	r3, [pc, #160]	; (8009524 <prvInsertBlockIntoFreeList+0xac>)
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e002      	b.n	800948c <prvInsertBlockIntoFreeList+0x14>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d8f7      	bhi.n	8009486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	4413      	add	r3, r2
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d108      	bne.n	80094ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	441a      	add	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	441a      	add	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d118      	bne.n	8009500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	4b15      	ldr	r3, [pc, #84]	; (8009528 <prvInsertBlockIntoFreeList+0xb0>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d00d      	beq.n	80094f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	441a      	add	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e008      	b.n	8009508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094f6:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <prvInsertBlockIntoFreeList+0xb0>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	e003      	b.n	8009508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d002      	beq.n	8009516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20004044 	.word	0x20004044
 8009528:	2000404c 	.word	0x2000404c

0800952c <__errno>:
 800952c:	4b01      	ldr	r3, [pc, #4]	; (8009534 <__errno+0x8>)
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20000030 	.word	0x20000030

08009538 <__libc_init_array>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	4e0d      	ldr	r6, [pc, #52]	; (8009570 <__libc_init_array+0x38>)
 800953c:	4c0d      	ldr	r4, [pc, #52]	; (8009574 <__libc_init_array+0x3c>)
 800953e:	1ba4      	subs	r4, r4, r6
 8009540:	10a4      	asrs	r4, r4, #2
 8009542:	2500      	movs	r5, #0
 8009544:	42a5      	cmp	r5, r4
 8009546:	d109      	bne.n	800955c <__libc_init_array+0x24>
 8009548:	4e0b      	ldr	r6, [pc, #44]	; (8009578 <__libc_init_array+0x40>)
 800954a:	4c0c      	ldr	r4, [pc, #48]	; (800957c <__libc_init_array+0x44>)
 800954c:	f000 ff68 	bl	800a420 <_init>
 8009550:	1ba4      	subs	r4, r4, r6
 8009552:	10a4      	asrs	r4, r4, #2
 8009554:	2500      	movs	r5, #0
 8009556:	42a5      	cmp	r5, r4
 8009558:	d105      	bne.n	8009566 <__libc_init_array+0x2e>
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009560:	4798      	blx	r3
 8009562:	3501      	adds	r5, #1
 8009564:	e7ee      	b.n	8009544 <__libc_init_array+0xc>
 8009566:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800956a:	4798      	blx	r3
 800956c:	3501      	adds	r5, #1
 800956e:	e7f2      	b.n	8009556 <__libc_init_array+0x1e>
 8009570:	0800a9cc 	.word	0x0800a9cc
 8009574:	0800a9cc 	.word	0x0800a9cc
 8009578:	0800a9cc 	.word	0x0800a9cc
 800957c:	0800a9d0 	.word	0x0800a9d0

08009580 <memset>:
 8009580:	4402      	add	r2, r0
 8009582:	4603      	mov	r3, r0
 8009584:	4293      	cmp	r3, r2
 8009586:	d100      	bne.n	800958a <memset+0xa>
 8009588:	4770      	bx	lr
 800958a:	f803 1b01 	strb.w	r1, [r3], #1
 800958e:	e7f9      	b.n	8009584 <memset+0x4>

08009590 <iprintf>:
 8009590:	b40f      	push	{r0, r1, r2, r3}
 8009592:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <iprintf+0x2c>)
 8009594:	b513      	push	{r0, r1, r4, lr}
 8009596:	681c      	ldr	r4, [r3, #0]
 8009598:	b124      	cbz	r4, 80095a4 <iprintf+0x14>
 800959a:	69a3      	ldr	r3, [r4, #24]
 800959c:	b913      	cbnz	r3, 80095a4 <iprintf+0x14>
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fa22 	bl	80099e8 <__sinit>
 80095a4:	ab05      	add	r3, sp, #20
 80095a6:	9a04      	ldr	r2, [sp, #16]
 80095a8:	68a1      	ldr	r1, [r4, #8]
 80095aa:	9301      	str	r3, [sp, #4]
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 fbdb 	bl	8009d68 <_vfiprintf_r>
 80095b2:	b002      	add	sp, #8
 80095b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b8:	b004      	add	sp, #16
 80095ba:	4770      	bx	lr
 80095bc:	20000030 	.word	0x20000030

080095c0 <_puts_r>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	460e      	mov	r6, r1
 80095c4:	4605      	mov	r5, r0
 80095c6:	b118      	cbz	r0, 80095d0 <_puts_r+0x10>
 80095c8:	6983      	ldr	r3, [r0, #24]
 80095ca:	b90b      	cbnz	r3, 80095d0 <_puts_r+0x10>
 80095cc:	f000 fa0c 	bl	80099e8 <__sinit>
 80095d0:	69ab      	ldr	r3, [r5, #24]
 80095d2:	68ac      	ldr	r4, [r5, #8]
 80095d4:	b913      	cbnz	r3, 80095dc <_puts_r+0x1c>
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 fa06 	bl	80099e8 <__sinit>
 80095dc:	4b23      	ldr	r3, [pc, #140]	; (800966c <_puts_r+0xac>)
 80095de:	429c      	cmp	r4, r3
 80095e0:	d117      	bne.n	8009612 <_puts_r+0x52>
 80095e2:	686c      	ldr	r4, [r5, #4]
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	071b      	lsls	r3, r3, #28
 80095e8:	d51d      	bpl.n	8009626 <_puts_r+0x66>
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	b1db      	cbz	r3, 8009626 <_puts_r+0x66>
 80095ee:	3e01      	subs	r6, #1
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095f6:	3b01      	subs	r3, #1
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	b9e9      	cbnz	r1, 8009638 <_puts_r+0x78>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da2e      	bge.n	800965e <_puts_r+0x9e>
 8009600:	4622      	mov	r2, r4
 8009602:	210a      	movs	r1, #10
 8009604:	4628      	mov	r0, r5
 8009606:	f000 f83f 	bl	8009688 <__swbuf_r>
 800960a:	3001      	adds	r0, #1
 800960c:	d011      	beq.n	8009632 <_puts_r+0x72>
 800960e:	200a      	movs	r0, #10
 8009610:	e011      	b.n	8009636 <_puts_r+0x76>
 8009612:	4b17      	ldr	r3, [pc, #92]	; (8009670 <_puts_r+0xb0>)
 8009614:	429c      	cmp	r4, r3
 8009616:	d101      	bne.n	800961c <_puts_r+0x5c>
 8009618:	68ac      	ldr	r4, [r5, #8]
 800961a:	e7e3      	b.n	80095e4 <_puts_r+0x24>
 800961c:	4b15      	ldr	r3, [pc, #84]	; (8009674 <_puts_r+0xb4>)
 800961e:	429c      	cmp	r4, r3
 8009620:	bf08      	it	eq
 8009622:	68ec      	ldreq	r4, [r5, #12]
 8009624:	e7de      	b.n	80095e4 <_puts_r+0x24>
 8009626:	4621      	mov	r1, r4
 8009628:	4628      	mov	r0, r5
 800962a:	f000 f87f 	bl	800972c <__swsetup_r>
 800962e:	2800      	cmp	r0, #0
 8009630:	d0dd      	beq.n	80095ee <_puts_r+0x2e>
 8009632:	f04f 30ff 	mov.w	r0, #4294967295
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	2b00      	cmp	r3, #0
 800963a:	da04      	bge.n	8009646 <_puts_r+0x86>
 800963c:	69a2      	ldr	r2, [r4, #24]
 800963e:	429a      	cmp	r2, r3
 8009640:	dc06      	bgt.n	8009650 <_puts_r+0x90>
 8009642:	290a      	cmp	r1, #10
 8009644:	d004      	beq.n	8009650 <_puts_r+0x90>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	6022      	str	r2, [r4, #0]
 800964c:	7019      	strb	r1, [r3, #0]
 800964e:	e7cf      	b.n	80095f0 <_puts_r+0x30>
 8009650:	4622      	mov	r2, r4
 8009652:	4628      	mov	r0, r5
 8009654:	f000 f818 	bl	8009688 <__swbuf_r>
 8009658:	3001      	adds	r0, #1
 800965a:	d1c9      	bne.n	80095f0 <_puts_r+0x30>
 800965c:	e7e9      	b.n	8009632 <_puts_r+0x72>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	200a      	movs	r0, #10
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	6022      	str	r2, [r4, #0]
 8009666:	7018      	strb	r0, [r3, #0]
 8009668:	e7e5      	b.n	8009636 <_puts_r+0x76>
 800966a:	bf00      	nop
 800966c:	0800a950 	.word	0x0800a950
 8009670:	0800a970 	.word	0x0800a970
 8009674:	0800a930 	.word	0x0800a930

08009678 <puts>:
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <puts+0xc>)
 800967a:	4601      	mov	r1, r0
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	f7ff bf9f 	b.w	80095c0 <_puts_r>
 8009682:	bf00      	nop
 8009684:	20000030 	.word	0x20000030

08009688 <__swbuf_r>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	460e      	mov	r6, r1
 800968c:	4614      	mov	r4, r2
 800968e:	4605      	mov	r5, r0
 8009690:	b118      	cbz	r0, 800969a <__swbuf_r+0x12>
 8009692:	6983      	ldr	r3, [r0, #24]
 8009694:	b90b      	cbnz	r3, 800969a <__swbuf_r+0x12>
 8009696:	f000 f9a7 	bl	80099e8 <__sinit>
 800969a:	4b21      	ldr	r3, [pc, #132]	; (8009720 <__swbuf_r+0x98>)
 800969c:	429c      	cmp	r4, r3
 800969e:	d12a      	bne.n	80096f6 <__swbuf_r+0x6e>
 80096a0:	686c      	ldr	r4, [r5, #4]
 80096a2:	69a3      	ldr	r3, [r4, #24]
 80096a4:	60a3      	str	r3, [r4, #8]
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	071a      	lsls	r2, r3, #28
 80096aa:	d52e      	bpl.n	800970a <__swbuf_r+0x82>
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	b363      	cbz	r3, 800970a <__swbuf_r+0x82>
 80096b0:	6923      	ldr	r3, [r4, #16]
 80096b2:	6820      	ldr	r0, [r4, #0]
 80096b4:	1ac0      	subs	r0, r0, r3
 80096b6:	6963      	ldr	r3, [r4, #20]
 80096b8:	b2f6      	uxtb	r6, r6
 80096ba:	4283      	cmp	r3, r0
 80096bc:	4637      	mov	r7, r6
 80096be:	dc04      	bgt.n	80096ca <__swbuf_r+0x42>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4628      	mov	r0, r5
 80096c4:	f000 f926 	bl	8009914 <_fflush_r>
 80096c8:	bb28      	cbnz	r0, 8009716 <__swbuf_r+0x8e>
 80096ca:	68a3      	ldr	r3, [r4, #8]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	60a3      	str	r3, [r4, #8]
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	6022      	str	r2, [r4, #0]
 80096d6:	701e      	strb	r6, [r3, #0]
 80096d8:	6963      	ldr	r3, [r4, #20]
 80096da:	3001      	adds	r0, #1
 80096dc:	4283      	cmp	r3, r0
 80096de:	d004      	beq.n	80096ea <__swbuf_r+0x62>
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	07db      	lsls	r3, r3, #31
 80096e4:	d519      	bpl.n	800971a <__swbuf_r+0x92>
 80096e6:	2e0a      	cmp	r6, #10
 80096e8:	d117      	bne.n	800971a <__swbuf_r+0x92>
 80096ea:	4621      	mov	r1, r4
 80096ec:	4628      	mov	r0, r5
 80096ee:	f000 f911 	bl	8009914 <_fflush_r>
 80096f2:	b190      	cbz	r0, 800971a <__swbuf_r+0x92>
 80096f4:	e00f      	b.n	8009716 <__swbuf_r+0x8e>
 80096f6:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <__swbuf_r+0x9c>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	d101      	bne.n	8009700 <__swbuf_r+0x78>
 80096fc:	68ac      	ldr	r4, [r5, #8]
 80096fe:	e7d0      	b.n	80096a2 <__swbuf_r+0x1a>
 8009700:	4b09      	ldr	r3, [pc, #36]	; (8009728 <__swbuf_r+0xa0>)
 8009702:	429c      	cmp	r4, r3
 8009704:	bf08      	it	eq
 8009706:	68ec      	ldreq	r4, [r5, #12]
 8009708:	e7cb      	b.n	80096a2 <__swbuf_r+0x1a>
 800970a:	4621      	mov	r1, r4
 800970c:	4628      	mov	r0, r5
 800970e:	f000 f80d 	bl	800972c <__swsetup_r>
 8009712:	2800      	cmp	r0, #0
 8009714:	d0cc      	beq.n	80096b0 <__swbuf_r+0x28>
 8009716:	f04f 37ff 	mov.w	r7, #4294967295
 800971a:	4638      	mov	r0, r7
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971e:	bf00      	nop
 8009720:	0800a950 	.word	0x0800a950
 8009724:	0800a970 	.word	0x0800a970
 8009728:	0800a930 	.word	0x0800a930

0800972c <__swsetup_r>:
 800972c:	4b32      	ldr	r3, [pc, #200]	; (80097f8 <__swsetup_r+0xcc>)
 800972e:	b570      	push	{r4, r5, r6, lr}
 8009730:	681d      	ldr	r5, [r3, #0]
 8009732:	4606      	mov	r6, r0
 8009734:	460c      	mov	r4, r1
 8009736:	b125      	cbz	r5, 8009742 <__swsetup_r+0x16>
 8009738:	69ab      	ldr	r3, [r5, #24]
 800973a:	b913      	cbnz	r3, 8009742 <__swsetup_r+0x16>
 800973c:	4628      	mov	r0, r5
 800973e:	f000 f953 	bl	80099e8 <__sinit>
 8009742:	4b2e      	ldr	r3, [pc, #184]	; (80097fc <__swsetup_r+0xd0>)
 8009744:	429c      	cmp	r4, r3
 8009746:	d10f      	bne.n	8009768 <__swsetup_r+0x3c>
 8009748:	686c      	ldr	r4, [r5, #4]
 800974a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800974e:	b29a      	uxth	r2, r3
 8009750:	0715      	lsls	r5, r2, #28
 8009752:	d42c      	bmi.n	80097ae <__swsetup_r+0x82>
 8009754:	06d0      	lsls	r0, r2, #27
 8009756:	d411      	bmi.n	800977c <__swsetup_r+0x50>
 8009758:	2209      	movs	r2, #9
 800975a:	6032      	str	r2, [r6, #0]
 800975c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009760:	81a3      	strh	r3, [r4, #12]
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	e03e      	b.n	80097e6 <__swsetup_r+0xba>
 8009768:	4b25      	ldr	r3, [pc, #148]	; (8009800 <__swsetup_r+0xd4>)
 800976a:	429c      	cmp	r4, r3
 800976c:	d101      	bne.n	8009772 <__swsetup_r+0x46>
 800976e:	68ac      	ldr	r4, [r5, #8]
 8009770:	e7eb      	b.n	800974a <__swsetup_r+0x1e>
 8009772:	4b24      	ldr	r3, [pc, #144]	; (8009804 <__swsetup_r+0xd8>)
 8009774:	429c      	cmp	r4, r3
 8009776:	bf08      	it	eq
 8009778:	68ec      	ldreq	r4, [r5, #12]
 800977a:	e7e6      	b.n	800974a <__swsetup_r+0x1e>
 800977c:	0751      	lsls	r1, r2, #29
 800977e:	d512      	bpl.n	80097a6 <__swsetup_r+0x7a>
 8009780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009782:	b141      	cbz	r1, 8009796 <__swsetup_r+0x6a>
 8009784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009788:	4299      	cmp	r1, r3
 800978a:	d002      	beq.n	8009792 <__swsetup_r+0x66>
 800978c:	4630      	mov	r0, r6
 800978e:	f000 fa19 	bl	8009bc4 <_free_r>
 8009792:	2300      	movs	r3, #0
 8009794:	6363      	str	r3, [r4, #52]	; 0x34
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800979c:	81a3      	strh	r3, [r4, #12]
 800979e:	2300      	movs	r3, #0
 80097a0:	6063      	str	r3, [r4, #4]
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	f043 0308 	orr.w	r3, r3, #8
 80097ac:	81a3      	strh	r3, [r4, #12]
 80097ae:	6923      	ldr	r3, [r4, #16]
 80097b0:	b94b      	cbnz	r3, 80097c6 <__swsetup_r+0x9a>
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097bc:	d003      	beq.n	80097c6 <__swsetup_r+0x9a>
 80097be:	4621      	mov	r1, r4
 80097c0:	4630      	mov	r0, r6
 80097c2:	f000 f9bf 	bl	8009b44 <__smakebuf_r>
 80097c6:	89a2      	ldrh	r2, [r4, #12]
 80097c8:	f012 0301 	ands.w	r3, r2, #1
 80097cc:	d00c      	beq.n	80097e8 <__swsetup_r+0xbc>
 80097ce:	2300      	movs	r3, #0
 80097d0:	60a3      	str	r3, [r4, #8]
 80097d2:	6963      	ldr	r3, [r4, #20]
 80097d4:	425b      	negs	r3, r3
 80097d6:	61a3      	str	r3, [r4, #24]
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	b953      	cbnz	r3, 80097f2 <__swsetup_r+0xc6>
 80097dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80097e4:	d1ba      	bne.n	800975c <__swsetup_r+0x30>
 80097e6:	bd70      	pop	{r4, r5, r6, pc}
 80097e8:	0792      	lsls	r2, r2, #30
 80097ea:	bf58      	it	pl
 80097ec:	6963      	ldrpl	r3, [r4, #20]
 80097ee:	60a3      	str	r3, [r4, #8]
 80097f0:	e7f2      	b.n	80097d8 <__swsetup_r+0xac>
 80097f2:	2000      	movs	r0, #0
 80097f4:	e7f7      	b.n	80097e6 <__swsetup_r+0xba>
 80097f6:	bf00      	nop
 80097f8:	20000030 	.word	0x20000030
 80097fc:	0800a950 	.word	0x0800a950
 8009800:	0800a970 	.word	0x0800a970
 8009804:	0800a930 	.word	0x0800a930

08009808 <__sflush_r>:
 8009808:	898a      	ldrh	r2, [r1, #12]
 800980a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980e:	4605      	mov	r5, r0
 8009810:	0710      	lsls	r0, r2, #28
 8009812:	460c      	mov	r4, r1
 8009814:	d458      	bmi.n	80098c8 <__sflush_r+0xc0>
 8009816:	684b      	ldr	r3, [r1, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	dc05      	bgt.n	8009828 <__sflush_r+0x20>
 800981c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800981e:	2b00      	cmp	r3, #0
 8009820:	dc02      	bgt.n	8009828 <__sflush_r+0x20>
 8009822:	2000      	movs	r0, #0
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800982a:	2e00      	cmp	r6, #0
 800982c:	d0f9      	beq.n	8009822 <__sflush_r+0x1a>
 800982e:	2300      	movs	r3, #0
 8009830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009834:	682f      	ldr	r7, [r5, #0]
 8009836:	6a21      	ldr	r1, [r4, #32]
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	d032      	beq.n	80098a2 <__sflush_r+0x9a>
 800983c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	075a      	lsls	r2, r3, #29
 8009842:	d505      	bpl.n	8009850 <__sflush_r+0x48>
 8009844:	6863      	ldr	r3, [r4, #4]
 8009846:	1ac0      	subs	r0, r0, r3
 8009848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800984a:	b10b      	cbz	r3, 8009850 <__sflush_r+0x48>
 800984c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800984e:	1ac0      	subs	r0, r0, r3
 8009850:	2300      	movs	r3, #0
 8009852:	4602      	mov	r2, r0
 8009854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009856:	6a21      	ldr	r1, [r4, #32]
 8009858:	4628      	mov	r0, r5
 800985a:	47b0      	blx	r6
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	d106      	bne.n	8009870 <__sflush_r+0x68>
 8009862:	6829      	ldr	r1, [r5, #0]
 8009864:	291d      	cmp	r1, #29
 8009866:	d848      	bhi.n	80098fa <__sflush_r+0xf2>
 8009868:	4a29      	ldr	r2, [pc, #164]	; (8009910 <__sflush_r+0x108>)
 800986a:	40ca      	lsrs	r2, r1
 800986c:	07d6      	lsls	r6, r2, #31
 800986e:	d544      	bpl.n	80098fa <__sflush_r+0xf2>
 8009870:	2200      	movs	r2, #0
 8009872:	6062      	str	r2, [r4, #4]
 8009874:	04d9      	lsls	r1, r3, #19
 8009876:	6922      	ldr	r2, [r4, #16]
 8009878:	6022      	str	r2, [r4, #0]
 800987a:	d504      	bpl.n	8009886 <__sflush_r+0x7e>
 800987c:	1c42      	adds	r2, r0, #1
 800987e:	d101      	bne.n	8009884 <__sflush_r+0x7c>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	b903      	cbnz	r3, 8009886 <__sflush_r+0x7e>
 8009884:	6560      	str	r0, [r4, #84]	; 0x54
 8009886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009888:	602f      	str	r7, [r5, #0]
 800988a:	2900      	cmp	r1, #0
 800988c:	d0c9      	beq.n	8009822 <__sflush_r+0x1a>
 800988e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009892:	4299      	cmp	r1, r3
 8009894:	d002      	beq.n	800989c <__sflush_r+0x94>
 8009896:	4628      	mov	r0, r5
 8009898:	f000 f994 	bl	8009bc4 <_free_r>
 800989c:	2000      	movs	r0, #0
 800989e:	6360      	str	r0, [r4, #52]	; 0x34
 80098a0:	e7c0      	b.n	8009824 <__sflush_r+0x1c>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4628      	mov	r0, r5
 80098a6:	47b0      	blx	r6
 80098a8:	1c41      	adds	r1, r0, #1
 80098aa:	d1c8      	bne.n	800983e <__sflush_r+0x36>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0c5      	beq.n	800983e <__sflush_r+0x36>
 80098b2:	2b1d      	cmp	r3, #29
 80098b4:	d001      	beq.n	80098ba <__sflush_r+0xb2>
 80098b6:	2b16      	cmp	r3, #22
 80098b8:	d101      	bne.n	80098be <__sflush_r+0xb6>
 80098ba:	602f      	str	r7, [r5, #0]
 80098bc:	e7b1      	b.n	8009822 <__sflush_r+0x1a>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	e7ad      	b.n	8009824 <__sflush_r+0x1c>
 80098c8:	690f      	ldr	r7, [r1, #16]
 80098ca:	2f00      	cmp	r7, #0
 80098cc:	d0a9      	beq.n	8009822 <__sflush_r+0x1a>
 80098ce:	0793      	lsls	r3, r2, #30
 80098d0:	680e      	ldr	r6, [r1, #0]
 80098d2:	bf08      	it	eq
 80098d4:	694b      	ldreq	r3, [r1, #20]
 80098d6:	600f      	str	r7, [r1, #0]
 80098d8:	bf18      	it	ne
 80098da:	2300      	movne	r3, #0
 80098dc:	eba6 0807 	sub.w	r8, r6, r7
 80098e0:	608b      	str	r3, [r1, #8]
 80098e2:	f1b8 0f00 	cmp.w	r8, #0
 80098e6:	dd9c      	ble.n	8009822 <__sflush_r+0x1a>
 80098e8:	4643      	mov	r3, r8
 80098ea:	463a      	mov	r2, r7
 80098ec:	6a21      	ldr	r1, [r4, #32]
 80098ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b0      	blx	r6
 80098f4:	2800      	cmp	r0, #0
 80098f6:	dc06      	bgt.n	8009906 <__sflush_r+0xfe>
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	e78e      	b.n	8009824 <__sflush_r+0x1c>
 8009906:	4407      	add	r7, r0
 8009908:	eba8 0800 	sub.w	r8, r8, r0
 800990c:	e7e9      	b.n	80098e2 <__sflush_r+0xda>
 800990e:	bf00      	nop
 8009910:	20400001 	.word	0x20400001

08009914 <_fflush_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	690b      	ldr	r3, [r1, #16]
 8009918:	4605      	mov	r5, r0
 800991a:	460c      	mov	r4, r1
 800991c:	b1db      	cbz	r3, 8009956 <_fflush_r+0x42>
 800991e:	b118      	cbz	r0, 8009928 <_fflush_r+0x14>
 8009920:	6983      	ldr	r3, [r0, #24]
 8009922:	b90b      	cbnz	r3, 8009928 <_fflush_r+0x14>
 8009924:	f000 f860 	bl	80099e8 <__sinit>
 8009928:	4b0c      	ldr	r3, [pc, #48]	; (800995c <_fflush_r+0x48>)
 800992a:	429c      	cmp	r4, r3
 800992c:	d109      	bne.n	8009942 <_fflush_r+0x2e>
 800992e:	686c      	ldr	r4, [r5, #4]
 8009930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009934:	b17b      	cbz	r3, 8009956 <_fflush_r+0x42>
 8009936:	4621      	mov	r1, r4
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800993e:	f7ff bf63 	b.w	8009808 <__sflush_r>
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <_fflush_r+0x4c>)
 8009944:	429c      	cmp	r4, r3
 8009946:	d101      	bne.n	800994c <_fflush_r+0x38>
 8009948:	68ac      	ldr	r4, [r5, #8]
 800994a:	e7f1      	b.n	8009930 <_fflush_r+0x1c>
 800994c:	4b05      	ldr	r3, [pc, #20]	; (8009964 <_fflush_r+0x50>)
 800994e:	429c      	cmp	r4, r3
 8009950:	bf08      	it	eq
 8009952:	68ec      	ldreq	r4, [r5, #12]
 8009954:	e7ec      	b.n	8009930 <_fflush_r+0x1c>
 8009956:	2000      	movs	r0, #0
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	0800a950 	.word	0x0800a950
 8009960:	0800a970 	.word	0x0800a970
 8009964:	0800a930 	.word	0x0800a930

08009968 <std>:
 8009968:	2300      	movs	r3, #0
 800996a:	b510      	push	{r4, lr}
 800996c:	4604      	mov	r4, r0
 800996e:	e9c0 3300 	strd	r3, r3, [r0]
 8009972:	6083      	str	r3, [r0, #8]
 8009974:	8181      	strh	r1, [r0, #12]
 8009976:	6643      	str	r3, [r0, #100]	; 0x64
 8009978:	81c2      	strh	r2, [r0, #14]
 800997a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997e:	6183      	str	r3, [r0, #24]
 8009980:	4619      	mov	r1, r3
 8009982:	2208      	movs	r2, #8
 8009984:	305c      	adds	r0, #92	; 0x5c
 8009986:	f7ff fdfb 	bl	8009580 <memset>
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <std+0x38>)
 800998c:	6263      	str	r3, [r4, #36]	; 0x24
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <std+0x3c>)
 8009990:	62a3      	str	r3, [r4, #40]	; 0x28
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <std+0x40>)
 8009994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <std+0x44>)
 8009998:	6224      	str	r4, [r4, #32]
 800999a:	6323      	str	r3, [r4, #48]	; 0x30
 800999c:	bd10      	pop	{r4, pc}
 800999e:	bf00      	nop
 80099a0:	0800a2c5 	.word	0x0800a2c5
 80099a4:	0800a2e7 	.word	0x0800a2e7
 80099a8:	0800a31f 	.word	0x0800a31f
 80099ac:	0800a343 	.word	0x0800a343

080099b0 <_cleanup_r>:
 80099b0:	4901      	ldr	r1, [pc, #4]	; (80099b8 <_cleanup_r+0x8>)
 80099b2:	f000 b885 	b.w	8009ac0 <_fwalk_reent>
 80099b6:	bf00      	nop
 80099b8:	08009915 	.word	0x08009915

080099bc <__sfmoreglue>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	1e4a      	subs	r2, r1, #1
 80099c0:	2568      	movs	r5, #104	; 0x68
 80099c2:	4355      	muls	r5, r2
 80099c4:	460e      	mov	r6, r1
 80099c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099ca:	f000 f949 	bl	8009c60 <_malloc_r>
 80099ce:	4604      	mov	r4, r0
 80099d0:	b140      	cbz	r0, 80099e4 <__sfmoreglue+0x28>
 80099d2:	2100      	movs	r1, #0
 80099d4:	e9c0 1600 	strd	r1, r6, [r0]
 80099d8:	300c      	adds	r0, #12
 80099da:	60a0      	str	r0, [r4, #8]
 80099dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099e0:	f7ff fdce 	bl	8009580 <memset>
 80099e4:	4620      	mov	r0, r4
 80099e6:	bd70      	pop	{r4, r5, r6, pc}

080099e8 <__sinit>:
 80099e8:	6983      	ldr	r3, [r0, #24]
 80099ea:	b510      	push	{r4, lr}
 80099ec:	4604      	mov	r4, r0
 80099ee:	bb33      	cbnz	r3, 8009a3e <__sinit+0x56>
 80099f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80099f4:	6503      	str	r3, [r0, #80]	; 0x50
 80099f6:	4b12      	ldr	r3, [pc, #72]	; (8009a40 <__sinit+0x58>)
 80099f8:	4a12      	ldr	r2, [pc, #72]	; (8009a44 <__sinit+0x5c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6282      	str	r2, [r0, #40]	; 0x28
 80099fe:	4298      	cmp	r0, r3
 8009a00:	bf04      	itt	eq
 8009a02:	2301      	moveq	r3, #1
 8009a04:	6183      	streq	r3, [r0, #24]
 8009a06:	f000 f81f 	bl	8009a48 <__sfp>
 8009a0a:	6060      	str	r0, [r4, #4]
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 f81b 	bl	8009a48 <__sfp>
 8009a12:	60a0      	str	r0, [r4, #8]
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 f817 	bl	8009a48 <__sfp>
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	60e0      	str	r0, [r4, #12]
 8009a1e:	2104      	movs	r1, #4
 8009a20:	6860      	ldr	r0, [r4, #4]
 8009a22:	f7ff ffa1 	bl	8009968 <std>
 8009a26:	2201      	movs	r2, #1
 8009a28:	2109      	movs	r1, #9
 8009a2a:	68a0      	ldr	r0, [r4, #8]
 8009a2c:	f7ff ff9c 	bl	8009968 <std>
 8009a30:	2202      	movs	r2, #2
 8009a32:	2112      	movs	r1, #18
 8009a34:	68e0      	ldr	r0, [r4, #12]
 8009a36:	f7ff ff97 	bl	8009968 <std>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	61a3      	str	r3, [r4, #24]
 8009a3e:	bd10      	pop	{r4, pc}
 8009a40:	0800a92c 	.word	0x0800a92c
 8009a44:	080099b1 	.word	0x080099b1

08009a48 <__sfp>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <__sfp+0x70>)
 8009a4c:	681e      	ldr	r6, [r3, #0]
 8009a4e:	69b3      	ldr	r3, [r6, #24]
 8009a50:	4607      	mov	r7, r0
 8009a52:	b913      	cbnz	r3, 8009a5a <__sfp+0x12>
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7ff ffc7 	bl	80099e8 <__sinit>
 8009a5a:	3648      	adds	r6, #72	; 0x48
 8009a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	d503      	bpl.n	8009a6c <__sfp+0x24>
 8009a64:	6833      	ldr	r3, [r6, #0]
 8009a66:	b133      	cbz	r3, 8009a76 <__sfp+0x2e>
 8009a68:	6836      	ldr	r6, [r6, #0]
 8009a6a:	e7f7      	b.n	8009a5c <__sfp+0x14>
 8009a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a70:	b16d      	cbz	r5, 8009a8e <__sfp+0x46>
 8009a72:	3468      	adds	r4, #104	; 0x68
 8009a74:	e7f4      	b.n	8009a60 <__sfp+0x18>
 8009a76:	2104      	movs	r1, #4
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f7ff ff9f 	bl	80099bc <__sfmoreglue>
 8009a7e:	6030      	str	r0, [r6, #0]
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d1f1      	bne.n	8009a68 <__sfp+0x20>
 8009a84:	230c      	movs	r3, #12
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	4604      	mov	r4, r0
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8e:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <__sfp+0x74>)
 8009a90:	6665      	str	r5, [r4, #100]	; 0x64
 8009a92:	e9c4 5500 	strd	r5, r5, [r4]
 8009a96:	60a5      	str	r5, [r4, #8]
 8009a98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009aa8:	f7ff fd6a 	bl	8009580 <memset>
 8009aac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ab4:	e7e9      	b.n	8009a8a <__sfp+0x42>
 8009ab6:	bf00      	nop
 8009ab8:	0800a92c 	.word	0x0800a92c
 8009abc:	ffff0001 	.word	0xffff0001

08009ac0 <_fwalk_reent>:
 8009ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4689      	mov	r9, r1
 8009ac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009acc:	2600      	movs	r6, #0
 8009ace:	b914      	cbnz	r4, 8009ad6 <_fwalk_reent+0x16>
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009ada:	3f01      	subs	r7, #1
 8009adc:	d501      	bpl.n	8009ae2 <_fwalk_reent+0x22>
 8009ade:	6824      	ldr	r4, [r4, #0]
 8009ae0:	e7f5      	b.n	8009ace <_fwalk_reent+0xe>
 8009ae2:	89ab      	ldrh	r3, [r5, #12]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d907      	bls.n	8009af8 <_fwalk_reent+0x38>
 8009ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009aec:	3301      	adds	r3, #1
 8009aee:	d003      	beq.n	8009af8 <_fwalk_reent+0x38>
 8009af0:	4629      	mov	r1, r5
 8009af2:	4640      	mov	r0, r8
 8009af4:	47c8      	blx	r9
 8009af6:	4306      	orrs	r6, r0
 8009af8:	3568      	adds	r5, #104	; 0x68
 8009afa:	e7ee      	b.n	8009ada <_fwalk_reent+0x1a>

08009afc <__swhatbuf_r>:
 8009afc:	b570      	push	{r4, r5, r6, lr}
 8009afe:	460e      	mov	r6, r1
 8009b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b04:	2900      	cmp	r1, #0
 8009b06:	b096      	sub	sp, #88	; 0x58
 8009b08:	4614      	mov	r4, r2
 8009b0a:	461d      	mov	r5, r3
 8009b0c:	da07      	bge.n	8009b1e <__swhatbuf_r+0x22>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	89b3      	ldrh	r3, [r6, #12]
 8009b14:	061a      	lsls	r2, r3, #24
 8009b16:	d410      	bmi.n	8009b3a <__swhatbuf_r+0x3e>
 8009b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b1c:	e00e      	b.n	8009b3c <__swhatbuf_r+0x40>
 8009b1e:	466a      	mov	r2, sp
 8009b20:	f000 fc36 	bl	800a390 <_fstat_r>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	dbf2      	blt.n	8009b0e <__swhatbuf_r+0x12>
 8009b28:	9a01      	ldr	r2, [sp, #4]
 8009b2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b32:	425a      	negs	r2, r3
 8009b34:	415a      	adcs	r2, r3
 8009b36:	602a      	str	r2, [r5, #0]
 8009b38:	e7ee      	b.n	8009b18 <__swhatbuf_r+0x1c>
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	b016      	add	sp, #88	; 0x58
 8009b42:	bd70      	pop	{r4, r5, r6, pc}

08009b44 <__smakebuf_r>:
 8009b44:	898b      	ldrh	r3, [r1, #12]
 8009b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b48:	079d      	lsls	r5, r3, #30
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	d507      	bpl.n	8009b60 <__smakebuf_r+0x1c>
 8009b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	6123      	str	r3, [r4, #16]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	6163      	str	r3, [r4, #20]
 8009b5c:	b002      	add	sp, #8
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	ab01      	add	r3, sp, #4
 8009b62:	466a      	mov	r2, sp
 8009b64:	f7ff ffca 	bl	8009afc <__swhatbuf_r>
 8009b68:	9900      	ldr	r1, [sp, #0]
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f000 f877 	bl	8009c60 <_malloc_r>
 8009b72:	b948      	cbnz	r0, 8009b88 <__smakebuf_r+0x44>
 8009b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b78:	059a      	lsls	r2, r3, #22
 8009b7a:	d4ef      	bmi.n	8009b5c <__smakebuf_r+0x18>
 8009b7c:	f023 0303 	bic.w	r3, r3, #3
 8009b80:	f043 0302 	orr.w	r3, r3, #2
 8009b84:	81a3      	strh	r3, [r4, #12]
 8009b86:	e7e3      	b.n	8009b50 <__smakebuf_r+0xc>
 8009b88:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <__smakebuf_r+0x7c>)
 8009b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	6020      	str	r0, [r4, #0]
 8009b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	9b00      	ldr	r3, [sp, #0]
 8009b98:	6163      	str	r3, [r4, #20]
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	6120      	str	r0, [r4, #16]
 8009b9e:	b15b      	cbz	r3, 8009bb8 <__smakebuf_r+0x74>
 8009ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 fc05 	bl	800a3b4 <_isatty_r>
 8009baa:	b128      	cbz	r0, 8009bb8 <__smakebuf_r+0x74>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	431d      	orrs	r5, r3
 8009bbc:	81a5      	strh	r5, [r4, #12]
 8009bbe:	e7cd      	b.n	8009b5c <__smakebuf_r+0x18>
 8009bc0:	080099b1 	.word	0x080099b1

08009bc4 <_free_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	2900      	cmp	r1, #0
 8009bca:	d045      	beq.n	8009c58 <_free_r+0x94>
 8009bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bd0:	1f0c      	subs	r4, r1, #4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bfb8      	it	lt
 8009bd6:	18e4      	addlt	r4, r4, r3
 8009bd8:	f000 fc0e 	bl	800a3f8 <__malloc_lock>
 8009bdc:	4a1f      	ldr	r2, [pc, #124]	; (8009c5c <_free_r+0x98>)
 8009bde:	6813      	ldr	r3, [r2, #0]
 8009be0:	4610      	mov	r0, r2
 8009be2:	b933      	cbnz	r3, 8009bf2 <_free_r+0x2e>
 8009be4:	6063      	str	r3, [r4, #4]
 8009be6:	6014      	str	r4, [r2, #0]
 8009be8:	4628      	mov	r0, r5
 8009bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bee:	f000 bc04 	b.w	800a3fa <__malloc_unlock>
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	d90c      	bls.n	8009c10 <_free_r+0x4c>
 8009bf6:	6821      	ldr	r1, [r4, #0]
 8009bf8:	1862      	adds	r2, r4, r1
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	bf04      	itt	eq
 8009bfe:	681a      	ldreq	r2, [r3, #0]
 8009c00:	685b      	ldreq	r3, [r3, #4]
 8009c02:	6063      	str	r3, [r4, #4]
 8009c04:	bf04      	itt	eq
 8009c06:	1852      	addeq	r2, r2, r1
 8009c08:	6022      	streq	r2, [r4, #0]
 8009c0a:	6004      	str	r4, [r0, #0]
 8009c0c:	e7ec      	b.n	8009be8 <_free_r+0x24>
 8009c0e:	4613      	mov	r3, r2
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	b10a      	cbz	r2, 8009c18 <_free_r+0x54>
 8009c14:	42a2      	cmp	r2, r4
 8009c16:	d9fa      	bls.n	8009c0e <_free_r+0x4a>
 8009c18:	6819      	ldr	r1, [r3, #0]
 8009c1a:	1858      	adds	r0, r3, r1
 8009c1c:	42a0      	cmp	r0, r4
 8009c1e:	d10b      	bne.n	8009c38 <_free_r+0x74>
 8009c20:	6820      	ldr	r0, [r4, #0]
 8009c22:	4401      	add	r1, r0
 8009c24:	1858      	adds	r0, r3, r1
 8009c26:	4282      	cmp	r2, r0
 8009c28:	6019      	str	r1, [r3, #0]
 8009c2a:	d1dd      	bne.n	8009be8 <_free_r+0x24>
 8009c2c:	6810      	ldr	r0, [r2, #0]
 8009c2e:	6852      	ldr	r2, [r2, #4]
 8009c30:	605a      	str	r2, [r3, #4]
 8009c32:	4401      	add	r1, r0
 8009c34:	6019      	str	r1, [r3, #0]
 8009c36:	e7d7      	b.n	8009be8 <_free_r+0x24>
 8009c38:	d902      	bls.n	8009c40 <_free_r+0x7c>
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	602b      	str	r3, [r5, #0]
 8009c3e:	e7d3      	b.n	8009be8 <_free_r+0x24>
 8009c40:	6820      	ldr	r0, [r4, #0]
 8009c42:	1821      	adds	r1, r4, r0
 8009c44:	428a      	cmp	r2, r1
 8009c46:	bf04      	itt	eq
 8009c48:	6811      	ldreq	r1, [r2, #0]
 8009c4a:	6852      	ldreq	r2, [r2, #4]
 8009c4c:	6062      	str	r2, [r4, #4]
 8009c4e:	bf04      	itt	eq
 8009c50:	1809      	addeq	r1, r1, r0
 8009c52:	6021      	streq	r1, [r4, #0]
 8009c54:	605c      	str	r4, [r3, #4]
 8009c56:	e7c7      	b.n	8009be8 <_free_r+0x24>
 8009c58:	bd38      	pop	{r3, r4, r5, pc}
 8009c5a:	bf00      	nop
 8009c5c:	2000405c 	.word	0x2000405c

08009c60 <_malloc_r>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	1ccd      	adds	r5, r1, #3
 8009c64:	f025 0503 	bic.w	r5, r5, #3
 8009c68:	3508      	adds	r5, #8
 8009c6a:	2d0c      	cmp	r5, #12
 8009c6c:	bf38      	it	cc
 8009c6e:	250c      	movcc	r5, #12
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	4606      	mov	r6, r0
 8009c74:	db01      	blt.n	8009c7a <_malloc_r+0x1a>
 8009c76:	42a9      	cmp	r1, r5
 8009c78:	d903      	bls.n	8009c82 <_malloc_r+0x22>
 8009c7a:	230c      	movs	r3, #12
 8009c7c:	6033      	str	r3, [r6, #0]
 8009c7e:	2000      	movs	r0, #0
 8009c80:	bd70      	pop	{r4, r5, r6, pc}
 8009c82:	f000 fbb9 	bl	800a3f8 <__malloc_lock>
 8009c86:	4a21      	ldr	r2, [pc, #132]	; (8009d0c <_malloc_r+0xac>)
 8009c88:	6814      	ldr	r4, [r2, #0]
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	b991      	cbnz	r1, 8009cb4 <_malloc_r+0x54>
 8009c8e:	4c20      	ldr	r4, [pc, #128]	; (8009d10 <_malloc_r+0xb0>)
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	b91b      	cbnz	r3, 8009c9c <_malloc_r+0x3c>
 8009c94:	4630      	mov	r0, r6
 8009c96:	f000 fb05 	bl	800a2a4 <_sbrk_r>
 8009c9a:	6020      	str	r0, [r4, #0]
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f000 fb00 	bl	800a2a4 <_sbrk_r>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d124      	bne.n	8009cf2 <_malloc_r+0x92>
 8009ca8:	230c      	movs	r3, #12
 8009caa:	6033      	str	r3, [r6, #0]
 8009cac:	4630      	mov	r0, r6
 8009cae:	f000 fba4 	bl	800a3fa <__malloc_unlock>
 8009cb2:	e7e4      	b.n	8009c7e <_malloc_r+0x1e>
 8009cb4:	680b      	ldr	r3, [r1, #0]
 8009cb6:	1b5b      	subs	r3, r3, r5
 8009cb8:	d418      	bmi.n	8009cec <_malloc_r+0x8c>
 8009cba:	2b0b      	cmp	r3, #11
 8009cbc:	d90f      	bls.n	8009cde <_malloc_r+0x7e>
 8009cbe:	600b      	str	r3, [r1, #0]
 8009cc0:	50cd      	str	r5, [r1, r3]
 8009cc2:	18cc      	adds	r4, r1, r3
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f000 fb98 	bl	800a3fa <__malloc_unlock>
 8009cca:	f104 000b 	add.w	r0, r4, #11
 8009cce:	1d23      	adds	r3, r4, #4
 8009cd0:	f020 0007 	bic.w	r0, r0, #7
 8009cd4:	1ac3      	subs	r3, r0, r3
 8009cd6:	d0d3      	beq.n	8009c80 <_malloc_r+0x20>
 8009cd8:	425a      	negs	r2, r3
 8009cda:	50e2      	str	r2, [r4, r3]
 8009cdc:	e7d0      	b.n	8009c80 <_malloc_r+0x20>
 8009cde:	428c      	cmp	r4, r1
 8009ce0:	684b      	ldr	r3, [r1, #4]
 8009ce2:	bf16      	itet	ne
 8009ce4:	6063      	strne	r3, [r4, #4]
 8009ce6:	6013      	streq	r3, [r2, #0]
 8009ce8:	460c      	movne	r4, r1
 8009cea:	e7eb      	b.n	8009cc4 <_malloc_r+0x64>
 8009cec:	460c      	mov	r4, r1
 8009cee:	6849      	ldr	r1, [r1, #4]
 8009cf0:	e7cc      	b.n	8009c8c <_malloc_r+0x2c>
 8009cf2:	1cc4      	adds	r4, r0, #3
 8009cf4:	f024 0403 	bic.w	r4, r4, #3
 8009cf8:	42a0      	cmp	r0, r4
 8009cfa:	d005      	beq.n	8009d08 <_malloc_r+0xa8>
 8009cfc:	1a21      	subs	r1, r4, r0
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f000 fad0 	bl	800a2a4 <_sbrk_r>
 8009d04:	3001      	adds	r0, #1
 8009d06:	d0cf      	beq.n	8009ca8 <_malloc_r+0x48>
 8009d08:	6025      	str	r5, [r4, #0]
 8009d0a:	e7db      	b.n	8009cc4 <_malloc_r+0x64>
 8009d0c:	2000405c 	.word	0x2000405c
 8009d10:	20004060 	.word	0x20004060

08009d14 <__sfputc_r>:
 8009d14:	6893      	ldr	r3, [r2, #8]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	b410      	push	{r4}
 8009d1c:	6093      	str	r3, [r2, #8]
 8009d1e:	da08      	bge.n	8009d32 <__sfputc_r+0x1e>
 8009d20:	6994      	ldr	r4, [r2, #24]
 8009d22:	42a3      	cmp	r3, r4
 8009d24:	db01      	blt.n	8009d2a <__sfputc_r+0x16>
 8009d26:	290a      	cmp	r1, #10
 8009d28:	d103      	bne.n	8009d32 <__sfputc_r+0x1e>
 8009d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d2e:	f7ff bcab 	b.w	8009688 <__swbuf_r>
 8009d32:	6813      	ldr	r3, [r2, #0]
 8009d34:	1c58      	adds	r0, r3, #1
 8009d36:	6010      	str	r0, [r2, #0]
 8009d38:	7019      	strb	r1, [r3, #0]
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <__sfputs_r>:
 8009d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d44:	4606      	mov	r6, r0
 8009d46:	460f      	mov	r7, r1
 8009d48:	4614      	mov	r4, r2
 8009d4a:	18d5      	adds	r5, r2, r3
 8009d4c:	42ac      	cmp	r4, r5
 8009d4e:	d101      	bne.n	8009d54 <__sfputs_r+0x12>
 8009d50:	2000      	movs	r0, #0
 8009d52:	e007      	b.n	8009d64 <__sfputs_r+0x22>
 8009d54:	463a      	mov	r2, r7
 8009d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f7ff ffda 	bl	8009d14 <__sfputc_r>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d1f3      	bne.n	8009d4c <__sfputs_r+0xa>
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d68 <_vfiprintf_r>:
 8009d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	b09d      	sub	sp, #116	; 0x74
 8009d70:	4617      	mov	r7, r2
 8009d72:	461d      	mov	r5, r3
 8009d74:	4606      	mov	r6, r0
 8009d76:	b118      	cbz	r0, 8009d80 <_vfiprintf_r+0x18>
 8009d78:	6983      	ldr	r3, [r0, #24]
 8009d7a:	b90b      	cbnz	r3, 8009d80 <_vfiprintf_r+0x18>
 8009d7c:	f7ff fe34 	bl	80099e8 <__sinit>
 8009d80:	4b7c      	ldr	r3, [pc, #496]	; (8009f74 <_vfiprintf_r+0x20c>)
 8009d82:	429c      	cmp	r4, r3
 8009d84:	d158      	bne.n	8009e38 <_vfiprintf_r+0xd0>
 8009d86:	6874      	ldr	r4, [r6, #4]
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	0718      	lsls	r0, r3, #28
 8009d8c:	d55e      	bpl.n	8009e4c <_vfiprintf_r+0xe4>
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d05b      	beq.n	8009e4c <_vfiprintf_r+0xe4>
 8009d94:	2300      	movs	r3, #0
 8009d96:	9309      	str	r3, [sp, #36]	; 0x24
 8009d98:	2320      	movs	r3, #32
 8009d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d9e:	2330      	movs	r3, #48	; 0x30
 8009da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009da4:	9503      	str	r5, [sp, #12]
 8009da6:	f04f 0b01 	mov.w	fp, #1
 8009daa:	46b8      	mov	r8, r7
 8009dac:	4645      	mov	r5, r8
 8009dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009db2:	b10b      	cbz	r3, 8009db8 <_vfiprintf_r+0x50>
 8009db4:	2b25      	cmp	r3, #37	; 0x25
 8009db6:	d154      	bne.n	8009e62 <_vfiprintf_r+0xfa>
 8009db8:	ebb8 0a07 	subs.w	sl, r8, r7
 8009dbc:	d00b      	beq.n	8009dd6 <_vfiprintf_r+0x6e>
 8009dbe:	4653      	mov	r3, sl
 8009dc0:	463a      	mov	r2, r7
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7ff ffbc 	bl	8009d42 <__sfputs_r>
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f000 80c2 	beq.w	8009f54 <_vfiprintf_r+0x1ec>
 8009dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd2:	4453      	add	r3, sl
 8009dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd6:	f898 3000 	ldrb.w	r3, [r8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 80ba 	beq.w	8009f54 <_vfiprintf_r+0x1ec>
 8009de0:	2300      	movs	r3, #0
 8009de2:	f04f 32ff 	mov.w	r2, #4294967295
 8009de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	9307      	str	r3, [sp, #28]
 8009dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009df2:	931a      	str	r3, [sp, #104]	; 0x68
 8009df4:	46a8      	mov	r8, r5
 8009df6:	2205      	movs	r2, #5
 8009df8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009dfc:	485e      	ldr	r0, [pc, #376]	; (8009f78 <_vfiprintf_r+0x210>)
 8009dfe:	f7f6 f9f7 	bl	80001f0 <memchr>
 8009e02:	9b04      	ldr	r3, [sp, #16]
 8009e04:	bb78      	cbnz	r0, 8009e66 <_vfiprintf_r+0xfe>
 8009e06:	06d9      	lsls	r1, r3, #27
 8009e08:	bf44      	itt	mi
 8009e0a:	2220      	movmi	r2, #32
 8009e0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e10:	071a      	lsls	r2, r3, #28
 8009e12:	bf44      	itt	mi
 8009e14:	222b      	movmi	r2, #43	; 0x2b
 8009e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e1a:	782a      	ldrb	r2, [r5, #0]
 8009e1c:	2a2a      	cmp	r2, #42	; 0x2a
 8009e1e:	d02a      	beq.n	8009e76 <_vfiprintf_r+0x10e>
 8009e20:	9a07      	ldr	r2, [sp, #28]
 8009e22:	46a8      	mov	r8, r5
 8009e24:	2000      	movs	r0, #0
 8009e26:	250a      	movs	r5, #10
 8009e28:	4641      	mov	r1, r8
 8009e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e2e:	3b30      	subs	r3, #48	; 0x30
 8009e30:	2b09      	cmp	r3, #9
 8009e32:	d969      	bls.n	8009f08 <_vfiprintf_r+0x1a0>
 8009e34:	b360      	cbz	r0, 8009e90 <_vfiprintf_r+0x128>
 8009e36:	e024      	b.n	8009e82 <_vfiprintf_r+0x11a>
 8009e38:	4b50      	ldr	r3, [pc, #320]	; (8009f7c <_vfiprintf_r+0x214>)
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	d101      	bne.n	8009e42 <_vfiprintf_r+0xda>
 8009e3e:	68b4      	ldr	r4, [r6, #8]
 8009e40:	e7a2      	b.n	8009d88 <_vfiprintf_r+0x20>
 8009e42:	4b4f      	ldr	r3, [pc, #316]	; (8009f80 <_vfiprintf_r+0x218>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	bf08      	it	eq
 8009e48:	68f4      	ldreq	r4, [r6, #12]
 8009e4a:	e79d      	b.n	8009d88 <_vfiprintf_r+0x20>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff fc6c 	bl	800972c <__swsetup_r>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d09d      	beq.n	8009d94 <_vfiprintf_r+0x2c>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	b01d      	add	sp, #116	; 0x74
 8009e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e62:	46a8      	mov	r8, r5
 8009e64:	e7a2      	b.n	8009dac <_vfiprintf_r+0x44>
 8009e66:	4a44      	ldr	r2, [pc, #272]	; (8009f78 <_vfiprintf_r+0x210>)
 8009e68:	1a80      	subs	r0, r0, r2
 8009e6a:	fa0b f000 	lsl.w	r0, fp, r0
 8009e6e:	4318      	orrs	r0, r3
 8009e70:	9004      	str	r0, [sp, #16]
 8009e72:	4645      	mov	r5, r8
 8009e74:	e7be      	b.n	8009df4 <_vfiprintf_r+0x8c>
 8009e76:	9a03      	ldr	r2, [sp, #12]
 8009e78:	1d11      	adds	r1, r2, #4
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	9103      	str	r1, [sp, #12]
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	db01      	blt.n	8009e86 <_vfiprintf_r+0x11e>
 8009e82:	9207      	str	r2, [sp, #28]
 8009e84:	e004      	b.n	8009e90 <_vfiprintf_r+0x128>
 8009e86:	4252      	negs	r2, r2
 8009e88:	f043 0302 	orr.w	r3, r3, #2
 8009e8c:	9207      	str	r2, [sp, #28]
 8009e8e:	9304      	str	r3, [sp, #16]
 8009e90:	f898 3000 	ldrb.w	r3, [r8]
 8009e94:	2b2e      	cmp	r3, #46	; 0x2e
 8009e96:	d10e      	bne.n	8009eb6 <_vfiprintf_r+0x14e>
 8009e98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e9e:	d138      	bne.n	8009f12 <_vfiprintf_r+0x1aa>
 8009ea0:	9b03      	ldr	r3, [sp, #12]
 8009ea2:	1d1a      	adds	r2, r3, #4
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	9203      	str	r2, [sp, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bfb8      	it	lt
 8009eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eb0:	f108 0802 	add.w	r8, r8, #2
 8009eb4:	9305      	str	r3, [sp, #20]
 8009eb6:	4d33      	ldr	r5, [pc, #204]	; (8009f84 <_vfiprintf_r+0x21c>)
 8009eb8:	f898 1000 	ldrb.w	r1, [r8]
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f7f6 f996 	bl	80001f0 <memchr>
 8009ec4:	b140      	cbz	r0, 8009ed8 <_vfiprintf_r+0x170>
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	1b40      	subs	r0, r0, r5
 8009eca:	fa03 f000 	lsl.w	r0, r3, r0
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	4303      	orrs	r3, r0
 8009ed2:	f108 0801 	add.w	r8, r8, #1
 8009ed6:	9304      	str	r3, [sp, #16]
 8009ed8:	f898 1000 	ldrb.w	r1, [r8]
 8009edc:	482a      	ldr	r0, [pc, #168]	; (8009f88 <_vfiprintf_r+0x220>)
 8009ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ee2:	2206      	movs	r2, #6
 8009ee4:	f108 0701 	add.w	r7, r8, #1
 8009ee8:	f7f6 f982 	bl	80001f0 <memchr>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d037      	beq.n	8009f60 <_vfiprintf_r+0x1f8>
 8009ef0:	4b26      	ldr	r3, [pc, #152]	; (8009f8c <_vfiprintf_r+0x224>)
 8009ef2:	bb1b      	cbnz	r3, 8009f3c <_vfiprintf_r+0x1d4>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	3307      	adds	r3, #7
 8009ef8:	f023 0307 	bic.w	r3, r3, #7
 8009efc:	3308      	adds	r3, #8
 8009efe:	9303      	str	r3, [sp, #12]
 8009f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f02:	444b      	add	r3, r9
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	e750      	b.n	8009daa <_vfiprintf_r+0x42>
 8009f08:	fb05 3202 	mla	r2, r5, r2, r3
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	4688      	mov	r8, r1
 8009f10:	e78a      	b.n	8009e28 <_vfiprintf_r+0xc0>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f108 0801 	add.w	r8, r8, #1
 8009f18:	9305      	str	r3, [sp, #20]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	250a      	movs	r5, #10
 8009f1e:	4640      	mov	r0, r8
 8009f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f24:	3a30      	subs	r2, #48	; 0x30
 8009f26:	2a09      	cmp	r2, #9
 8009f28:	d903      	bls.n	8009f32 <_vfiprintf_r+0x1ca>
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0c3      	beq.n	8009eb6 <_vfiprintf_r+0x14e>
 8009f2e:	9105      	str	r1, [sp, #20]
 8009f30:	e7c1      	b.n	8009eb6 <_vfiprintf_r+0x14e>
 8009f32:	fb05 2101 	mla	r1, r5, r1, r2
 8009f36:	2301      	movs	r3, #1
 8009f38:	4680      	mov	r8, r0
 8009f3a:	e7f0      	b.n	8009f1e <_vfiprintf_r+0x1b6>
 8009f3c:	ab03      	add	r3, sp, #12
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4622      	mov	r2, r4
 8009f42:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <_vfiprintf_r+0x228>)
 8009f44:	a904      	add	r1, sp, #16
 8009f46:	4630      	mov	r0, r6
 8009f48:	f3af 8000 	nop.w
 8009f4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f50:	4681      	mov	r9, r0
 8009f52:	d1d5      	bne.n	8009f00 <_vfiprintf_r+0x198>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	065b      	lsls	r3, r3, #25
 8009f58:	f53f af7e 	bmi.w	8009e58 <_vfiprintf_r+0xf0>
 8009f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5e:	e77d      	b.n	8009e5c <_vfiprintf_r+0xf4>
 8009f60:	ab03      	add	r3, sp, #12
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	4622      	mov	r2, r4
 8009f66:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <_vfiprintf_r+0x228>)
 8009f68:	a904      	add	r1, sp, #16
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f000 f888 	bl	800a080 <_printf_i>
 8009f70:	e7ec      	b.n	8009f4c <_vfiprintf_r+0x1e4>
 8009f72:	bf00      	nop
 8009f74:	0800a950 	.word	0x0800a950
 8009f78:	0800a990 	.word	0x0800a990
 8009f7c:	0800a970 	.word	0x0800a970
 8009f80:	0800a930 	.word	0x0800a930
 8009f84:	0800a996 	.word	0x0800a996
 8009f88:	0800a99a 	.word	0x0800a99a
 8009f8c:	00000000 	.word	0x00000000
 8009f90:	08009d43 	.word	0x08009d43

08009f94 <_printf_common>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	4691      	mov	r9, r2
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	688a      	ldr	r2, [r1, #8]
 8009f9e:	690b      	ldr	r3, [r1, #16]
 8009fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	bfb8      	it	lt
 8009fa8:	4613      	movlt	r3, r2
 8009faa:	f8c9 3000 	str.w	r3, [r9]
 8009fae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	b112      	cbz	r2, 8009fbe <_printf_common+0x2a>
 8009fb8:	3301      	adds	r3, #1
 8009fba:	f8c9 3000 	str.w	r3, [r9]
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	0699      	lsls	r1, r3, #26
 8009fc2:	bf42      	ittt	mi
 8009fc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009fc8:	3302      	addmi	r3, #2
 8009fca:	f8c9 3000 	strmi.w	r3, [r9]
 8009fce:	6825      	ldr	r5, [r4, #0]
 8009fd0:	f015 0506 	ands.w	r5, r5, #6
 8009fd4:	d107      	bne.n	8009fe6 <_printf_common+0x52>
 8009fd6:	f104 0a19 	add.w	sl, r4, #25
 8009fda:	68e3      	ldr	r3, [r4, #12]
 8009fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	42ab      	cmp	r3, r5
 8009fe4:	dc28      	bgt.n	800a038 <_printf_common+0xa4>
 8009fe6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fea:	6822      	ldr	r2, [r4, #0]
 8009fec:	3300      	adds	r3, #0
 8009fee:	bf18      	it	ne
 8009ff0:	2301      	movne	r3, #1
 8009ff2:	0692      	lsls	r2, r2, #26
 8009ff4:	d42d      	bmi.n	800a052 <_printf_common+0xbe>
 8009ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	47c0      	blx	r8
 800a000:	3001      	adds	r0, #1
 800a002:	d020      	beq.n	800a046 <_printf_common+0xb2>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	68e5      	ldr	r5, [r4, #12]
 800a008:	f8d9 2000 	ldr.w	r2, [r9]
 800a00c:	f003 0306 	and.w	r3, r3, #6
 800a010:	2b04      	cmp	r3, #4
 800a012:	bf08      	it	eq
 800a014:	1aad      	subeq	r5, r5, r2
 800a016:	68a3      	ldr	r3, [r4, #8]
 800a018:	6922      	ldr	r2, [r4, #16]
 800a01a:	bf0c      	ite	eq
 800a01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a020:	2500      	movne	r5, #0
 800a022:	4293      	cmp	r3, r2
 800a024:	bfc4      	itt	gt
 800a026:	1a9b      	subgt	r3, r3, r2
 800a028:	18ed      	addgt	r5, r5, r3
 800a02a:	f04f 0900 	mov.w	r9, #0
 800a02e:	341a      	adds	r4, #26
 800a030:	454d      	cmp	r5, r9
 800a032:	d11a      	bne.n	800a06a <_printf_common+0xd6>
 800a034:	2000      	movs	r0, #0
 800a036:	e008      	b.n	800a04a <_printf_common+0xb6>
 800a038:	2301      	movs	r3, #1
 800a03a:	4652      	mov	r2, sl
 800a03c:	4639      	mov	r1, r7
 800a03e:	4630      	mov	r0, r6
 800a040:	47c0      	blx	r8
 800a042:	3001      	adds	r0, #1
 800a044:	d103      	bne.n	800a04e <_printf_common+0xba>
 800a046:	f04f 30ff 	mov.w	r0, #4294967295
 800a04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04e:	3501      	adds	r5, #1
 800a050:	e7c3      	b.n	8009fda <_printf_common+0x46>
 800a052:	18e1      	adds	r1, r4, r3
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	2030      	movs	r0, #48	; 0x30
 800a058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a05c:	4422      	add	r2, r4
 800a05e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a066:	3302      	adds	r3, #2
 800a068:	e7c5      	b.n	8009ff6 <_printf_common+0x62>
 800a06a:	2301      	movs	r3, #1
 800a06c:	4622      	mov	r2, r4
 800a06e:	4639      	mov	r1, r7
 800a070:	4630      	mov	r0, r6
 800a072:	47c0      	blx	r8
 800a074:	3001      	adds	r0, #1
 800a076:	d0e6      	beq.n	800a046 <_printf_common+0xb2>
 800a078:	f109 0901 	add.w	r9, r9, #1
 800a07c:	e7d8      	b.n	800a030 <_printf_common+0x9c>
	...

0800a080 <_printf_i>:
 800a080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a084:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a088:	460c      	mov	r4, r1
 800a08a:	7e09      	ldrb	r1, [r1, #24]
 800a08c:	b085      	sub	sp, #20
 800a08e:	296e      	cmp	r1, #110	; 0x6e
 800a090:	4617      	mov	r7, r2
 800a092:	4606      	mov	r6, r0
 800a094:	4698      	mov	r8, r3
 800a096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a098:	f000 80b3 	beq.w	800a202 <_printf_i+0x182>
 800a09c:	d822      	bhi.n	800a0e4 <_printf_i+0x64>
 800a09e:	2963      	cmp	r1, #99	; 0x63
 800a0a0:	d036      	beq.n	800a110 <_printf_i+0x90>
 800a0a2:	d80a      	bhi.n	800a0ba <_printf_i+0x3a>
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	f000 80b9 	beq.w	800a21c <_printf_i+0x19c>
 800a0aa:	2958      	cmp	r1, #88	; 0x58
 800a0ac:	f000 8083 	beq.w	800a1b6 <_printf_i+0x136>
 800a0b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a0b8:	e032      	b.n	800a120 <_printf_i+0xa0>
 800a0ba:	2964      	cmp	r1, #100	; 0x64
 800a0bc:	d001      	beq.n	800a0c2 <_printf_i+0x42>
 800a0be:	2969      	cmp	r1, #105	; 0x69
 800a0c0:	d1f6      	bne.n	800a0b0 <_printf_i+0x30>
 800a0c2:	6820      	ldr	r0, [r4, #0]
 800a0c4:	6813      	ldr	r3, [r2, #0]
 800a0c6:	0605      	lsls	r5, r0, #24
 800a0c8:	f103 0104 	add.w	r1, r3, #4
 800a0cc:	d52a      	bpl.n	800a124 <_printf_i+0xa4>
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	da03      	bge.n	800a0de <_printf_i+0x5e>
 800a0d6:	222d      	movs	r2, #45	; 0x2d
 800a0d8:	425b      	negs	r3, r3
 800a0da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a0de:	486f      	ldr	r0, [pc, #444]	; (800a29c <_printf_i+0x21c>)
 800a0e0:	220a      	movs	r2, #10
 800a0e2:	e039      	b.n	800a158 <_printf_i+0xd8>
 800a0e4:	2973      	cmp	r1, #115	; 0x73
 800a0e6:	f000 809d 	beq.w	800a224 <_printf_i+0x1a4>
 800a0ea:	d808      	bhi.n	800a0fe <_printf_i+0x7e>
 800a0ec:	296f      	cmp	r1, #111	; 0x6f
 800a0ee:	d020      	beq.n	800a132 <_printf_i+0xb2>
 800a0f0:	2970      	cmp	r1, #112	; 0x70
 800a0f2:	d1dd      	bne.n	800a0b0 <_printf_i+0x30>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	f043 0320 	orr.w	r3, r3, #32
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	e003      	b.n	800a106 <_printf_i+0x86>
 800a0fe:	2975      	cmp	r1, #117	; 0x75
 800a100:	d017      	beq.n	800a132 <_printf_i+0xb2>
 800a102:	2978      	cmp	r1, #120	; 0x78
 800a104:	d1d4      	bne.n	800a0b0 <_printf_i+0x30>
 800a106:	2378      	movs	r3, #120	; 0x78
 800a108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a10c:	4864      	ldr	r0, [pc, #400]	; (800a2a0 <_printf_i+0x220>)
 800a10e:	e055      	b.n	800a1bc <_printf_i+0x13c>
 800a110:	6813      	ldr	r3, [r2, #0]
 800a112:	1d19      	adds	r1, r3, #4
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6011      	str	r1, [r2, #0]
 800a118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a11c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a120:	2301      	movs	r3, #1
 800a122:	e08c      	b.n	800a23e <_printf_i+0x1be>
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6011      	str	r1, [r2, #0]
 800a128:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a12c:	bf18      	it	ne
 800a12e:	b21b      	sxthne	r3, r3
 800a130:	e7cf      	b.n	800a0d2 <_printf_i+0x52>
 800a132:	6813      	ldr	r3, [r2, #0]
 800a134:	6825      	ldr	r5, [r4, #0]
 800a136:	1d18      	adds	r0, r3, #4
 800a138:	6010      	str	r0, [r2, #0]
 800a13a:	0628      	lsls	r0, r5, #24
 800a13c:	d501      	bpl.n	800a142 <_printf_i+0xc2>
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	e002      	b.n	800a148 <_printf_i+0xc8>
 800a142:	0668      	lsls	r0, r5, #25
 800a144:	d5fb      	bpl.n	800a13e <_printf_i+0xbe>
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	4854      	ldr	r0, [pc, #336]	; (800a29c <_printf_i+0x21c>)
 800a14a:	296f      	cmp	r1, #111	; 0x6f
 800a14c:	bf14      	ite	ne
 800a14e:	220a      	movne	r2, #10
 800a150:	2208      	moveq	r2, #8
 800a152:	2100      	movs	r1, #0
 800a154:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a158:	6865      	ldr	r5, [r4, #4]
 800a15a:	60a5      	str	r5, [r4, #8]
 800a15c:	2d00      	cmp	r5, #0
 800a15e:	f2c0 8095 	blt.w	800a28c <_printf_i+0x20c>
 800a162:	6821      	ldr	r1, [r4, #0]
 800a164:	f021 0104 	bic.w	r1, r1, #4
 800a168:	6021      	str	r1, [r4, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d13d      	bne.n	800a1ea <_printf_i+0x16a>
 800a16e:	2d00      	cmp	r5, #0
 800a170:	f040 808e 	bne.w	800a290 <_printf_i+0x210>
 800a174:	4665      	mov	r5, ip
 800a176:	2a08      	cmp	r2, #8
 800a178:	d10b      	bne.n	800a192 <_printf_i+0x112>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	07db      	lsls	r3, r3, #31
 800a17e:	d508      	bpl.n	800a192 <_printf_i+0x112>
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	6862      	ldr	r2, [r4, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	bfde      	ittt	le
 800a188:	2330      	movle	r3, #48	; 0x30
 800a18a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a18e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a192:	ebac 0305 	sub.w	r3, ip, r5
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	f8cd 8000 	str.w	r8, [sp]
 800a19c:	463b      	mov	r3, r7
 800a19e:	aa03      	add	r2, sp, #12
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f7ff fef6 	bl	8009f94 <_printf_common>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d14d      	bne.n	800a248 <_printf_i+0x1c8>
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	b005      	add	sp, #20
 800a1b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1b6:	4839      	ldr	r0, [pc, #228]	; (800a29c <_printf_i+0x21c>)
 800a1b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a1bc:	6813      	ldr	r3, [r2, #0]
 800a1be:	6821      	ldr	r1, [r4, #0]
 800a1c0:	1d1d      	adds	r5, r3, #4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6015      	str	r5, [r2, #0]
 800a1c6:	060a      	lsls	r2, r1, #24
 800a1c8:	d50b      	bpl.n	800a1e2 <_printf_i+0x162>
 800a1ca:	07ca      	lsls	r2, r1, #31
 800a1cc:	bf44      	itt	mi
 800a1ce:	f041 0120 	orrmi.w	r1, r1, #32
 800a1d2:	6021      	strmi	r1, [r4, #0]
 800a1d4:	b91b      	cbnz	r3, 800a1de <_printf_i+0x15e>
 800a1d6:	6822      	ldr	r2, [r4, #0]
 800a1d8:	f022 0220 	bic.w	r2, r2, #32
 800a1dc:	6022      	str	r2, [r4, #0]
 800a1de:	2210      	movs	r2, #16
 800a1e0:	e7b7      	b.n	800a152 <_printf_i+0xd2>
 800a1e2:	064d      	lsls	r5, r1, #25
 800a1e4:	bf48      	it	mi
 800a1e6:	b29b      	uxthmi	r3, r3
 800a1e8:	e7ef      	b.n	800a1ca <_printf_i+0x14a>
 800a1ea:	4665      	mov	r5, ip
 800a1ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1f0:	fb02 3311 	mls	r3, r2, r1, r3
 800a1f4:	5cc3      	ldrb	r3, [r0, r3]
 800a1f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d1f5      	bne.n	800a1ec <_printf_i+0x16c>
 800a200:	e7b9      	b.n	800a176 <_printf_i+0xf6>
 800a202:	6813      	ldr	r3, [r2, #0]
 800a204:	6825      	ldr	r5, [r4, #0]
 800a206:	6961      	ldr	r1, [r4, #20]
 800a208:	1d18      	adds	r0, r3, #4
 800a20a:	6010      	str	r0, [r2, #0]
 800a20c:	0628      	lsls	r0, r5, #24
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	d501      	bpl.n	800a216 <_printf_i+0x196>
 800a212:	6019      	str	r1, [r3, #0]
 800a214:	e002      	b.n	800a21c <_printf_i+0x19c>
 800a216:	066a      	lsls	r2, r5, #25
 800a218:	d5fb      	bpl.n	800a212 <_printf_i+0x192>
 800a21a:	8019      	strh	r1, [r3, #0]
 800a21c:	2300      	movs	r3, #0
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	4665      	mov	r5, ip
 800a222:	e7b9      	b.n	800a198 <_printf_i+0x118>
 800a224:	6813      	ldr	r3, [r2, #0]
 800a226:	1d19      	adds	r1, r3, #4
 800a228:	6011      	str	r1, [r2, #0]
 800a22a:	681d      	ldr	r5, [r3, #0]
 800a22c:	6862      	ldr	r2, [r4, #4]
 800a22e:	2100      	movs	r1, #0
 800a230:	4628      	mov	r0, r5
 800a232:	f7f5 ffdd 	bl	80001f0 <memchr>
 800a236:	b108      	cbz	r0, 800a23c <_printf_i+0x1bc>
 800a238:	1b40      	subs	r0, r0, r5
 800a23a:	6060      	str	r0, [r4, #4]
 800a23c:	6863      	ldr	r3, [r4, #4]
 800a23e:	6123      	str	r3, [r4, #16]
 800a240:	2300      	movs	r3, #0
 800a242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a246:	e7a7      	b.n	800a198 <_printf_i+0x118>
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	462a      	mov	r2, r5
 800a24c:	4639      	mov	r1, r7
 800a24e:	4630      	mov	r0, r6
 800a250:	47c0      	blx	r8
 800a252:	3001      	adds	r0, #1
 800a254:	d0aa      	beq.n	800a1ac <_printf_i+0x12c>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	079b      	lsls	r3, r3, #30
 800a25a:	d413      	bmi.n	800a284 <_printf_i+0x204>
 800a25c:	68e0      	ldr	r0, [r4, #12]
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	4298      	cmp	r0, r3
 800a262:	bfb8      	it	lt
 800a264:	4618      	movlt	r0, r3
 800a266:	e7a3      	b.n	800a1b0 <_printf_i+0x130>
 800a268:	2301      	movs	r3, #1
 800a26a:	464a      	mov	r2, r9
 800a26c:	4639      	mov	r1, r7
 800a26e:	4630      	mov	r0, r6
 800a270:	47c0      	blx	r8
 800a272:	3001      	adds	r0, #1
 800a274:	d09a      	beq.n	800a1ac <_printf_i+0x12c>
 800a276:	3501      	adds	r5, #1
 800a278:	68e3      	ldr	r3, [r4, #12]
 800a27a:	9a03      	ldr	r2, [sp, #12]
 800a27c:	1a9b      	subs	r3, r3, r2
 800a27e:	42ab      	cmp	r3, r5
 800a280:	dcf2      	bgt.n	800a268 <_printf_i+0x1e8>
 800a282:	e7eb      	b.n	800a25c <_printf_i+0x1dc>
 800a284:	2500      	movs	r5, #0
 800a286:	f104 0919 	add.w	r9, r4, #25
 800a28a:	e7f5      	b.n	800a278 <_printf_i+0x1f8>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1ac      	bne.n	800a1ea <_printf_i+0x16a>
 800a290:	7803      	ldrb	r3, [r0, #0]
 800a292:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a296:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a29a:	e76c      	b.n	800a176 <_printf_i+0xf6>
 800a29c:	0800a9a1 	.word	0x0800a9a1
 800a2a0:	0800a9b2 	.word	0x0800a9b2

0800a2a4 <_sbrk_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4c06      	ldr	r4, [pc, #24]	; (800a2c0 <_sbrk_r+0x1c>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	6023      	str	r3, [r4, #0]
 800a2b0:	f7f7 fb92 	bl	80019d8 <_sbrk>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_sbrk_r+0x1a>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_sbrk_r+0x1a>
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20004948 	.word	0x20004948

0800a2c4 <__sread>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2cc:	f000 f896 	bl	800a3fc <_read_r>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	bfab      	itete	ge
 800a2d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a2d8:	181b      	addge	r3, r3, r0
 800a2da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2de:	bfac      	ite	ge
 800a2e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2e2:	81a3      	strhlt	r3, [r4, #12]
 800a2e4:	bd10      	pop	{r4, pc}

0800a2e6 <__swrite>:
 800a2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ea:	461f      	mov	r7, r3
 800a2ec:	898b      	ldrh	r3, [r1, #12]
 800a2ee:	05db      	lsls	r3, r3, #23
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	4616      	mov	r6, r2
 800a2f6:	d505      	bpl.n	800a304 <__swrite+0x1e>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a300:	f000 f868 	bl	800a3d4 <_lseek_r>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a30a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	4628      	mov	r0, r5
 800a316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	f000 b817 	b.w	800a34c <_write_r>

0800a31e <__sseek>:
 800a31e:	b510      	push	{r4, lr}
 800a320:	460c      	mov	r4, r1
 800a322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a326:	f000 f855 	bl	800a3d4 <_lseek_r>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	bf15      	itete	ne
 800a330:	6560      	strne	r0, [r4, #84]	; 0x54
 800a332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a33a:	81a3      	strheq	r3, [r4, #12]
 800a33c:	bf18      	it	ne
 800a33e:	81a3      	strhne	r3, [r4, #12]
 800a340:	bd10      	pop	{r4, pc}

0800a342 <__sclose>:
 800a342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a346:	f000 b813 	b.w	800a370 <_close_r>
	...

0800a34c <_write_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4c07      	ldr	r4, [pc, #28]	; (800a36c <_write_r+0x20>)
 800a350:	4605      	mov	r5, r0
 800a352:	4608      	mov	r0, r1
 800a354:	4611      	mov	r1, r2
 800a356:	2200      	movs	r2, #0
 800a358:	6022      	str	r2, [r4, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	f7f7 faeb 	bl	8001936 <_write>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d102      	bne.n	800a36a <_write_r+0x1e>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	b103      	cbz	r3, 800a36a <_write_r+0x1e>
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	20004948 	.word	0x20004948

0800a370 <_close_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4c06      	ldr	r4, [pc, #24]	; (800a38c <_close_r+0x1c>)
 800a374:	2300      	movs	r3, #0
 800a376:	4605      	mov	r5, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	f7f7 faf7 	bl	800196e <_close>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_close_r+0x1a>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	b103      	cbz	r3, 800a38a <_close_r+0x1a>
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20004948 	.word	0x20004948

0800a390 <_fstat_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4c07      	ldr	r4, [pc, #28]	; (800a3b0 <_fstat_r+0x20>)
 800a394:	2300      	movs	r3, #0
 800a396:	4605      	mov	r5, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	4611      	mov	r1, r2
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	f7f7 faf2 	bl	8001986 <_fstat>
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	d102      	bne.n	800a3ac <_fstat_r+0x1c>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	b103      	cbz	r3, 800a3ac <_fstat_r+0x1c>
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	bd38      	pop	{r3, r4, r5, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20004948 	.word	0x20004948

0800a3b4 <_isatty_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4c06      	ldr	r4, [pc, #24]	; (800a3d0 <_isatty_r+0x1c>)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	6023      	str	r3, [r4, #0]
 800a3c0:	f7f7 faf1 	bl	80019a6 <_isatty>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d102      	bne.n	800a3ce <_isatty_r+0x1a>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	b103      	cbz	r3, 800a3ce <_isatty_r+0x1a>
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	20004948 	.word	0x20004948

0800a3d4 <_lseek_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	4c07      	ldr	r4, [pc, #28]	; (800a3f4 <_lseek_r+0x20>)
 800a3d8:	4605      	mov	r5, r0
 800a3da:	4608      	mov	r0, r1
 800a3dc:	4611      	mov	r1, r2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	6022      	str	r2, [r4, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f7f7 faea 	bl	80019bc <_lseek>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_lseek_r+0x1e>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_lseek_r+0x1e>
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	20004948 	.word	0x20004948

0800a3f8 <__malloc_lock>:
 800a3f8:	4770      	bx	lr

0800a3fa <__malloc_unlock>:
 800a3fa:	4770      	bx	lr

0800a3fc <_read_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4c07      	ldr	r4, [pc, #28]	; (800a41c <_read_r+0x20>)
 800a400:	4605      	mov	r5, r0
 800a402:	4608      	mov	r0, r1
 800a404:	4611      	mov	r1, r2
 800a406:	2200      	movs	r2, #0
 800a408:	6022      	str	r2, [r4, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	f7f7 fa76 	bl	80018fc <_read>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_read_r+0x1e>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	b103      	cbz	r3, 800a41a <_read_r+0x1e>
 800a418:	602b      	str	r3, [r5, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20004948 	.word	0x20004948

0800a420 <_init>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr

0800a42c <_fini>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr
