
testFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a29c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800a44c  0800a44c  0001a44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f8  0800a6f8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a700  0800a700  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048b8  20000094  0800a79c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000494c  0800a79c  0002494c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295dd  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000057f8  00000000  00000000  000496a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002078  00000000  00000000  0004eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dd0  00000000  00000000  00050f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ba13  00000000  00000000  00052ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e864  00000000  00000000  0007e6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0989  00000000  00000000  0009cf5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d8e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e14  00000000  00000000  0018d964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a434 	.word	0x0800a434

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800a434 	.word	0x0800a434

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <uart_write>:
/******************************************
 * UART WRITE
 *
 ******************************************/

int uart_write(char * s, uint16_t size) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 800059c:	887a      	ldrh	r2, [r7, #2]
 800059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <uart_write+0x24>)
 80005a6:	f005 fcaa 	bl	8005efe <HAL_UART_Transmit>
	return size;
 80005aa:	887b      	ldrh	r3, [r7, #2]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20004640 	.word	0x20004640

080005b8 <sh_help>:
/******************************************
 * SHELL HELP
 *
 ******************************************/

int sh_help(int argc, char ** argv) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
    int i;
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	e019      	b.n	80005fc <sh_help+0x44>
        printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80005c8:	4911      	ldr	r1, [pc, #68]	; (8000610 <sh_help+0x58>)
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	4613      	mov	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <sh_help+0x58>)
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4613      	mov	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4413      	add	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	440b      	add	r3, r1
 80005e8:	3308      	adds	r3, #8
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4601      	mov	r1, r0
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <sh_help+0x5c>)
 80005f2:	f009 f9f9 	bl	80099e8 <iprintf>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <sh_help+0x60>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbe0      	blt.n	80005c8 <sh_help+0x10>
    }

    return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20004064 	.word	0x20004064
 8000614:	0800a488 	.word	0x0800a488
 8000618:	200000b0 	.word	0x200000b0

0800061c <shell_init>:
/******************************************
 * SHELL INIT
 *
 ******************************************/

void shell_init() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <shell_init+0x38>)
 8000624:	f009 fa54 	bl	8009ad0 <puts>

	shell_add('h', sh_help, help);
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <shell_init+0x3c>)
 800062a:	490c      	ldr	r1, [pc, #48]	; (800065c <shell_init+0x40>)
 800062c:	2068      	movs	r0, #104	; 0x68
 800062e:	f000 f817 	bl	8000660 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	e005      	b.n	8000644 <shell_init+0x28>

		HAL_Delay(200);
 8000638:	20c8      	movs	r0, #200	; 0xc8
 800063a:	f001 fc6d 	bl	8001f18 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3301      	adds	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b02      	cmp	r3, #2
 8000648:	ddf6      	ble.n	8000638 <shell_init+0x1c>
	}
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	0800a490 	.word	0x0800a490
 8000658:	20000000 	.word	0x20000000
 800065c:	080005b9 	.word	0x080005b9

08000660 <shell_add>:
/******************************************
 * SHELL ADD
 *
 ******************************************/

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	73fb      	strb	r3, [r7, #15]
    if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <shell_add+0x74>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b3f      	cmp	r3, #63	; 0x3f
 8000674:	dc26      	bgt.n	80006c4 <shell_add+0x64>
        shell_func_list[shell_func_list_size].c = c;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <shell_add+0x74>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4917      	ldr	r1, [pc, #92]	; (80006d8 <shell_add+0x78>)
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	440b      	add	r3, r1
 8000686:	7bfa      	ldrb	r2, [r7, #15]
 8000688:	701a      	strb	r2, [r3, #0]
        shell_func_list[shell_func_list_size].func = pfunc;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <shell_add+0x74>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4912      	ldr	r1, [pc, #72]	; (80006d8 <shell_add+0x78>)
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	3304      	adds	r3, #4
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	601a      	str	r2, [r3, #0]
        shell_func_list[shell_func_list_size].description = description;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <shell_add+0x74>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <shell_add+0x78>)
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	440b      	add	r3, r1
 80006b0:	3308      	adds	r3, #8
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	601a      	str	r2, [r3, #0]
        shell_func_list_size++;
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <shell_add+0x74>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <shell_add+0x74>)
 80006be:	6013      	str	r3, [r2, #0]
        return 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	e001      	b.n	80006c8 <shell_add+0x68>
    }

    return -1;
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	200000b0 	.word	0x200000b0
 80006d8:	20004064 	.word	0x20004064

080006dc <shell_exec>:
 * SHELL EXE
 *
 ******************************************/

int shell_exec(char c, char * buf)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08e      	sub	sp, #56	; 0x38
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]

    int argc;
    char * argv[ARGC_MAX];
    char *p;

    for(i = 0 ; i < shell_func_list_size ; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
 80006ec:	e040      	b.n	8000770 <shell_exec+0x94>
        if (shell_func_list[i].c == c) {
 80006ee:	4928      	ldr	r1, [pc, #160]	; (8000790 <shell_exec+0xb4>)
 80006f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006f2:	4613      	mov	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	79fa      	ldrb	r2, [r7, #7]
 8000700:	429a      	cmp	r2, r3
 8000702:	d132      	bne.n	800076a <shell_exec+0x8e>
            argc = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
            argv[0] = buf;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	60fb      	str	r3, [r7, #12]

            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000710:	e014      	b.n	800073c <shell_exec+0x60>
                if(*p == ' ') {
 8000712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b20      	cmp	r3, #32
 8000718:	d10d      	bne.n	8000736 <shell_exec+0x5a>
                    *p = '\0';
 800071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
                    argv[argc++] = p+1;
 8000720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	633a      	str	r2, [r7, #48]	; 0x30
 8000726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000728:	3201      	adds	r2, #1
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000730:	440b      	add	r3, r1
 8000732:	f843 2c2c 	str.w	r2, [r3, #-44]
            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000738:	3301      	adds	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <shell_exec+0x6e>
 8000744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000746:	2b07      	cmp	r3, #7
 8000748:	dde3      	ble.n	8000712 <shell_exec+0x36>
                }
            }

            return shell_func_list[i].func(argc, argv);
 800074a:	4911      	ldr	r1, [pc, #68]	; (8000790 <shell_exec+0xb4>)
 800074c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	440b      	add	r3, r1
 8000758:	3304      	adds	r3, #4
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f107 020c 	add.w	r2, r7, #12
 8000760:	4611      	mov	r1, r2
 8000762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000764:	4798      	blx	r3
 8000766:	4603      	mov	r3, r0
 8000768:	e00e      	b.n	8000788 <shell_exec+0xac>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 800076a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076c:	3301      	adds	r3, #1
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <shell_exec+0xb8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000776:	429a      	cmp	r2, r3
 8000778:	dbb9      	blt.n	80006ee <shell_exec+0x12>
        }
    }
    printf("%c: no such command\r\n", c);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <shell_exec+0xbc>)
 8000780:	f009 f932 	bl	80099e8 <iprintf>
    return -1;
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000788:	4618      	mov	r0, r3
 800078a:	3738      	adds	r7, #56	; 0x38
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20004064 	.word	0x20004064
 8000794:	200000b0 	.word	0x200000b0
 8000798:	0800a4b8 	.word	0x0800a4b8

0800079c <shell_run>:

/******************************************
 * SHELL RUN
 *
 ******************************************/
int shell_run(){
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
	int reading = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
	char c = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	71fb      	strb	r3, [r7, #7]

	printf("Debut Shell_Run\r\n");
 80007ae:	4828      	ldr	r0, [pc, #160]	; (8000850 <shell_run+0xb4>)
 80007b0:	f009 f98e 	bl	8009ad0 <puts>

	while (1)
	{
		  uart_write(prompt, 2);
 80007b4:	2102      	movs	r1, #2
 80007b6:	4827      	ldr	r0, [pc, #156]	; (8000854 <shell_run+0xb8>)
 80007b8:	f7ff feea 	bl	8000590 <uart_write>
		  reading = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]

		  while(reading){
 80007c0:	e03c      	b.n	800083c <shell_run+0xa0>
			  HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)&c, 1);	//Amorcage de la lecture UART
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	4823      	ldr	r0, [pc, #140]	; (8000858 <shell_run+0xbc>)
 80007ca:	f005 fc31 	bl	8006030 <HAL_UART_Receive_IT>
			  xSemaphoreTake(MonSemUART, portMAX_DELAY);			//Attente du sémaphore ...
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <shell_run+0xc0>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f04f 31ff 	mov.w	r1, #4294967295
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 f99c 	bl	8007b14 <xQueueSemaphoreTake>

			  switch (c) {
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b08      	cmp	r3, #8
 80007e0:	d013      	beq.n	800080a <shell_run+0x6e>
 80007e2:	2b0d      	cmp	r3, #13
 80007e4:	d11c      	bne.n	8000820 <shell_run+0x84>
				  //process RETURN key
				  case '\r':
					  //case '\n':
					  printf("\r\n");    //finish line
 80007e6:	481e      	ldr	r0, [pc, #120]	; (8000860 <shell_run+0xc4>)
 80007e8:	f009 f972 	bl	8009ad0 <puts>
					  buf[pos++] = 0;     //to use cprintf...
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <shell_run+0xc8>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	54d1      	strb	r1, [r2, r3]
					  printf(":%s\r\n", buf);
 80007f8:	491a      	ldr	r1, [pc, #104]	; (8000864 <shell_run+0xc8>)
 80007fa:	481b      	ldr	r0, [pc, #108]	; (8000868 <shell_run+0xcc>)
 80007fc:	f009 f8f4 	bl	80099e8 <iprintf>
					  reading = 0;        //exit read loop
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
					  pos = 0;            //reset buffer
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
					  break;
 8000808:	e018      	b.n	800083c <shell_run+0xa0>
					  //backspace
				  case '\b':
					  if (pos > 0) {      //is there a char to delete?
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dd15      	ble.n	800083c <shell_run+0xa0>
						  pos--;          //remove it in buffer
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3b01      	subs	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]

						  uart_write(backspace, 3);
 8000816:	2103      	movs	r1, #3
 8000818:	4814      	ldr	r0, [pc, #80]	; (800086c <shell_run+0xd0>)
 800081a:	f7ff feb9 	bl	8000590 <uart_write>
					  }
					  break;
 800081e:	e00d      	b.n	800083c <shell_run+0xa0>
					  //other characters
				  default:
					  //only store characters if buffer has space
					  if (pos < sizeof(buf)) {
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	2b27      	cmp	r3, #39	; 0x27
 8000824:	d80a      	bhi.n	800083c <shell_run+0xa0>
						  uart_write(&c, 1);
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	2101      	movs	r1, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff feb0 	bl	8000590 <uart_write>
						  buf[pos++] = c; //store
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	79f9      	ldrb	r1, [r7, #7]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <shell_run+0xc8>)
 800083a:	54d1      	strb	r1, [r2, r3]
		  while(reading){
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1bf      	bne.n	80007c2 <shell_run+0x26>
					  }
			  }
		  }
		  shell_exec(buf[0], buf);
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <shell_run+0xc8>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4907      	ldr	r1, [pc, #28]	; (8000864 <shell_run+0xc8>)
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff47 	bl	80006dc <shell_exec>
		  uart_write(prompt, 2);
 800084e:	e7b1      	b.n	80007b4 <shell_run+0x18>
 8000850:	0800a4d0 	.word	0x0800a4d0
 8000854:	2000001c 	.word	0x2000001c
 8000858:	20004640 	.word	0x20004640
 800085c:	20004508 	.word	0x20004508
 8000860:	0800a4e4 	.word	0x0800a4e4
 8000864:	20004364 	.word	0x20004364
 8000868:	0800a4e8 	.word	0x0800a4e8
 800086c:	20000018 	.word	0x20000018

08000870 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_CRC_Init+0x20>)
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <MX_CRC_Init+0x24>)
 8000878:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_CRC_Init+0x20>)
 800087c:	f001 fc50 	bl	8002120 <HAL_CRC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000886:	f000 fec7 	bl	8001618 <Error_Handler>
  }

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000438c 	.word	0x2000438c
 8000894:	40023000 	.word	0x40023000

08000898 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <HAL_CRC_MspInit+0x3c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10d      	bne.n	80008c6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_CRC_MspInit+0x40>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_CRC_MspInit+0x40>)
 80008b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_CRC_MspInit+0x40>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023000 	.word	0x40023000
 80008d8:	40023800 	.word	0x40023800

080008dc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <MX_DMA2D_Init+0x60>)
 80008e4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_DMA2D_Init+0x5c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_DMA2D_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_DMA2D_Init+0x5c>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_DMA2D_Init+0x5c>)
 800090c:	2200      	movs	r2, #0
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_DMA2D_Init+0x5c>)
 8000912:	f001 fc43 	bl	800219c <HAL_DMA2D_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800091c:	f000 fe7c 	bl	8001618 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000920:	2101      	movs	r1, #1
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_DMA2D_Init+0x5c>)
 8000924:	f001 fd94 	bl	8002450 <HAL_DMA2D_ConfigLayer>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800092e:	f000 fe73 	bl	8001618 <Error_Handler>
  }

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20004394 	.word	0x20004394
 800093c:	4002b000 	.word	0x4002b000

08000940 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_DMA2D_MspInit+0x48>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d115      	bne.n	800097e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_DMA2D_MspInit+0x4c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <HAL_DMA2D_MspInit+0x4c>)
 800095c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_DMA2D_MspInit+0x4c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2105      	movs	r1, #5
 8000972:	205a      	movs	r0, #90	; 0x5a
 8000974:	f001 fbaa 	bl	80020cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000978:	205a      	movs	r0, #90	; 0x5a
 800097a:	f001 fbc3 	bl	8002104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	4002b000 	.word	0x4002b000
 800098c:	40023800 	.word	0x40023800

08000990 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
 80009a6:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_FMC_Init+0x98>)
 80009aa:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <MX_FMC_Init+0x9c>)
 80009ac:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_FMC_Init+0x98>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_FMC_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_FMC_Init+0x98>)
 80009bc:	2204      	movs	r2, #4
 80009be:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_FMC_Init+0x98>)
 80009c2:	2210      	movs	r2, #16
 80009c4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_FMC_Init+0x98>)
 80009c8:	2240      	movs	r2, #64	; 0x40
 80009ca:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_FMC_Init+0x98>)
 80009ce:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009d2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_FMC_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_FMC_Init+0x98>)
 80009dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_FMC_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_FMC_Init+0x98>)
 80009ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009f4:	2307      	movs	r3, #7
 80009f6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009fc:	2307      	movs	r3, #7
 80009fe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a00:	2303      	movs	r3, #3
 8000a02:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_FMC_Init+0x98>)
 8000a12:	f004 fd8f 	bl	8005534 <HAL_SDRAM_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a1c:	f000 fdfc 	bl	8001618 <Error_Handler>
  }

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200043d4 	.word	0x200043d4
 8000a2c:	a0000140 	.word	0xa0000140

08000a30 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a44:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <HAL_FMC_MspInit+0x104>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d16f      	bne.n	8000b2c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000a4c:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <HAL_FMC_MspInit+0x104>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <HAL_FMC_MspInit+0x108>)
 8000a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a5a:	4a37      	ldr	r2, [pc, #220]	; (8000b38 <HAL_FMC_MspInit+0x108>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6393      	str	r3, [r2, #56]	; 0x38
 8000a62:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <HAL_FMC_MspInit+0x108>)
 8000a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8000a6e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a72:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a80:	230c      	movs	r3, #12
 8000a82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	482c      	ldr	r0, [pc, #176]	; (8000b3c <HAL_FMC_MspInit+0x10c>)
 8000a8a:	f001 fd73 	bl	8002574 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4826      	ldr	r0, [pc, #152]	; (8000b40 <HAL_FMC_MspInit+0x110>)
 8000aa8:	f001 fd64 	bl	8002574 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000aac:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ab0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481f      	ldr	r0, [pc, #124]	; (8000b44 <HAL_FMC_MspInit+0x114>)
 8000ac8:	f001 fd54 	bl	8002574 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000acc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ad0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4818      	ldr	r0, [pc, #96]	; (8000b48 <HAL_FMC_MspInit+0x118>)
 8000ae8:	f001 fd44 	bl	8002574 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8000aec:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000af0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afe:	230c      	movs	r3, #12
 8000b00:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <HAL_FMC_MspInit+0x11c>)
 8000b08:	f001 fd34 	bl	8002574 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b0c:	2360      	movs	r3, #96	; 0x60
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	480a      	ldr	r0, [pc, #40]	; (8000b50 <HAL_FMC_MspInit+0x120>)
 8000b26:	f001 fd25 	bl	8002574 <HAL_GPIO_Init>
 8000b2a:	e000      	b.n	8000b2e <HAL_FMC_MspInit+0xfe>
    return;
 8000b2c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000b4 	.word	0x200000b4
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40021400 	.word	0x40021400
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40021800 	.word	0x40021800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b5c:	f7ff ff68 	bl	8000a30 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <vApplicationGetIdleTaskMemory+0x30>)
 8000b7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200000b8 	.word	0x200000b8
 8000b98:	2000010c 	.word	0x2000010c

08000b9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_FREERTOS_Init+0x30>)
 8000ba4:	1d3c      	adds	r4, r7, #4
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 fd47 	bl	800764c <osThreadCreate>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <MX_FREERTOS_Init+0x34>)
 8000bc2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}
 8000bcc:	0800a4fc 	.word	0x0800a4fc
 8000bd0:	20004408 	.word	0x20004408

08000bd4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f006 fd81 	bl	80076e4 <osDelay>
 8000be2:	e7fb      	b.n	8000bdc <StartDefaultTask+0x8>

08000be4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	4b84      	ldr	r3, [pc, #528]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a83      	ldr	r2, [pc, #524]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b81      	ldr	r3, [pc, #516]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	4b7d      	ldr	r3, [pc, #500]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a7c      	ldr	r2, [pc, #496]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c20:	f043 0320 	orr.w	r3, r3, #32
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b7a      	ldr	r3, [pc, #488]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0320 	and.w	r3, r3, #32
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	4b76      	ldr	r3, [pc, #472]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a75      	ldr	r2, [pc, #468]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b73      	ldr	r3, [pc, #460]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4b6f      	ldr	r3, [pc, #444]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a6e      	ldr	r2, [pc, #440]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b6c      	ldr	r3, [pc, #432]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b68      	ldr	r3, [pc, #416]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a67      	ldr	r2, [pc, #412]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b65      	ldr	r3, [pc, #404]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b61      	ldr	r3, [pc, #388]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a60      	ldr	r2, [pc, #384]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b5a      	ldr	r3, [pc, #360]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a59      	ldr	r2, [pc, #356]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b57      	ldr	r3, [pc, #348]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a52      	ldr	r2, [pc, #328]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b50      	ldr	r3, [pc, #320]	; (8000e10 <MX_GPIO_Init+0x22c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2116      	movs	r1, #22
 8000cde:	484d      	ldr	r0, [pc, #308]	; (8000e14 <MX_GPIO_Init+0x230>)
 8000ce0:	f001 fdf2 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	484b      	ldr	r0, [pc, #300]	; (8000e18 <MX_GPIO_Init+0x234>)
 8000cea:	f001 fded 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cf4:	4849      	ldr	r0, [pc, #292]	; (8000e1c <MX_GPIO_Init+0x238>)
 8000cf6:	f001 fde7 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d00:	4847      	ldr	r0, [pc, #284]	; (8000e20 <MX_GPIO_Init+0x23c>)
 8000d02:	f001 fde1 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d06:	2316      	movs	r3, #22
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	483d      	ldr	r0, [pc, #244]	; (8000e14 <MX_GPIO_Init+0x230>)
 8000d1e:	f001 fc29 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d22:	2301      	movs	r3, #1
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d26:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <MX_GPIO_Init+0x240>)
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4838      	ldr	r0, [pc, #224]	; (8000e18 <MX_GPIO_Init+0x234>)
 8000d36:	f001 fc1d 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d3a:	f248 0306 	movw	r3, #32774	; 0x8006
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d40:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <MX_GPIO_Init+0x244>)
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4832      	ldr	r0, [pc, #200]	; (8000e18 <MX_GPIO_Init+0x234>)
 8000d50:	f001 fc10 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482b      	ldr	r0, [pc, #172]	; (8000e18 <MX_GPIO_Init+0x234>)
 8000d6c:	f001 fc02 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d70:	2320      	movs	r3, #32
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <MX_GPIO_Init+0x244>)
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <MX_GPIO_Init+0x230>)
 8000d84:	f001 fbf6 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4824      	ldr	r0, [pc, #144]	; (8000e2c <MX_GPIO_Init+0x248>)
 8000d9c:	f001 fbea 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4819      	ldr	r0, [pc, #100]	; (8000e1c <MX_GPIO_Init+0x238>)
 8000db6:	f001 fbdd 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000dba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <MX_GPIO_Init+0x238>)
 8000dd4:	f001 fbce 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000dd8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <MX_GPIO_Init+0x23c>)
 8000df2:	f001 fbbf 	bl	8002574 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	2006      	movs	r0, #6
 8000dfc:	f001 f966 	bl	80020cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e00:	2006      	movs	r0, #6
 8000e02:	f001 f97f 	bl	8002104 <HAL_NVIC_EnableIRQ>

}
 8000e06:	bf00      	nop
 8000e08:	3738      	adds	r7, #56	; 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	40021800 	.word	0x40021800
 8000e24:	10110000 	.word	0x10110000
 8000e28:	10120000 	.word	0x10120000
 8000e2c:	40020400 	.word	0x40020400

08000e30 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <MX_I2C3_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <MX_I2C3_Init+0x7c>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e52:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e6e:	f002 fff3 	bl	8003e58 <HAL_I2C_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e78:	f000 fbce 	bl	8001618 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e80:	f003 f922 	bl	80040c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000e8a:	f000 fbc5 	bl	8001618 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_I2C3_Init+0x74>)
 8000e92:	f003 f955 	bl	8004140 <HAL_I2CEx_ConfigDigitalFilter>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000e9c:	f000 fbbc 	bl	8001618 <Error_Handler>
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000440c 	.word	0x2000440c
 8000ea8:	40005c00 	.word	0x40005c00
 8000eac:	000186a0 	.word	0x000186a0

08000eb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a29      	ldr	r2, [pc, #164]	; (8000f74 <HAL_I2C_MspInit+0xc4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d14b      	bne.n	8000f6a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f10:	2312      	movs	r3, #18
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4815      	ldr	r0, [pc, #84]	; (8000f7c <HAL_I2C_MspInit+0xcc>)
 8000f28:	f001 fb24 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f32:	2312      	movs	r3, #18
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <HAL_I2C_MspInit+0xd0>)
 8000f4a:	f001 fb13 	bl	8002574 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000f58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_I2C_MspInit+0xc8>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40005c00 	.word	0x40005c00
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020000 	.word	0x40020000

08000f84 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2234      	movs	r2, #52	; 0x34
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f008 fc79 	bl	8009888 <memset>

  hltdc.Instance = LTDC;
 8000f96:	4b39      	ldr	r3, [pc, #228]	; (800107c <MX_LTDC_Init+0xf8>)
 8000f98:	4a39      	ldr	r2, [pc, #228]	; (8001080 <MX_LTDC_Init+0xfc>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_LTDC_Init+0xf8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fa8:	4b34      	ldr	r3, [pc, #208]	; (800107c <MX_LTDC_Init+0xf8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fb6:	2209      	movs	r2, #9
 8000fb8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fc2:	221d      	movs	r2, #29
 8000fc4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fc8:	2203      	movs	r2, #3
 8000fca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fce:	f240 120d 	movw	r2, #269	; 0x10d
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fd6:	f240 1243 	movw	r2, #323	; 0x143
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fde:	f240 1217 	movw	r2, #279	; 0x117
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fe6:	f240 1247 	movw	r2, #327	; 0x147
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_LTDC_Init+0xf8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_LTDC_Init+0xf8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_LTDC_Init+0xf8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001004:	481d      	ldr	r0, [pc, #116]	; (800107c <MX_LTDC_Init+0xf8>)
 8001006:	f003 f8db 	bl	80041c0 <HAL_LTDC_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001010:	f000 fb02 	bl	8001618 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001018:	23f0      	movs	r3, #240	; 0xf0
 800101a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001020:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001024:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001026:	2302      	movs	r3, #2
 8001028:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800102a:	23ff      	movs	r3, #255	; 0xff
 800102c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001032:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001036:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001038:	2307      	movs	r3, #7
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800103c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001042:	23f0      	movs	r3, #240	; 0xf0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001046:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_LTDC_Init+0xf8>)
 8001066:	f003 fa3d 	bl	80044e4 <HAL_LTDC_ConfigLayer>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001070:	f000 fad2 	bl	8001618 <Error_Handler>
  }

}
 8001074:	bf00      	nop
 8001076:	3738      	adds	r7, #56	; 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20004460 	.word	0x20004460
 8001080:	40016800 	.word	0x40016800

08001084 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a7b      	ldr	r2, [pc, #492]	; (8001290 <HAL_LTDC_MspInit+0x20c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	f040 80f0 	bne.w	8001288 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
 80010ac:	4b79      	ldr	r3, [pc, #484]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	4a78      	ldr	r2, [pc, #480]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010b6:	6453      	str	r3, [r2, #68]	; 0x44
 80010b8:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	4b72      	ldr	r3, [pc, #456]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a71      	ldr	r2, [pc, #452]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0320 	and.w	r3, r3, #32
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a6a      	ldr	r2, [pc, #424]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b68      	ldr	r3, [pc, #416]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	4b64      	ldr	r3, [pc, #400]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a63      	ldr	r2, [pc, #396]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b61      	ldr	r3, [pc, #388]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a5c      	ldr	r2, [pc, #368]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 8001122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b5a      	ldr	r3, [pc, #360]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a55      	ldr	r2, [pc, #340]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <HAL_LTDC_MspInit+0x210>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800116c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800117e:	230e      	movs	r3, #14
 8001180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	4619      	mov	r1, r3
 8001188:	4843      	ldr	r0, [pc, #268]	; (8001298 <HAL_LTDC_MspInit+0x214>)
 800118a:	f001 f9f3 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800118e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a0:	230e      	movs	r3, #14
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	483c      	ldr	r0, [pc, #240]	; (800129c <HAL_LTDC_MspInit+0x218>)
 80011ac:	f001 f9e2 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011b0:	2303      	movs	r3, #3
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011c0:	2309      	movs	r3, #9
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4835      	ldr	r0, [pc, #212]	; (80012a0 <HAL_LTDC_MspInit+0x21c>)
 80011cc:	f001 f9d2 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e2:	230e      	movs	r3, #14
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <HAL_LTDC_MspInit+0x21c>)
 80011ee:	f001 f9c1 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011f2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001204:	230e      	movs	r3, #14
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4825      	ldr	r0, [pc, #148]	; (80012a4 <HAL_LTDC_MspInit+0x220>)
 8001210:	f001 f9b0 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001214:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001226:	230e      	movs	r3, #14
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	481d      	ldr	r0, [pc, #116]	; (80012a8 <HAL_LTDC_MspInit+0x224>)
 8001232:	f001 f99f 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001236:	2348      	movs	r3, #72	; 0x48
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001246:	230e      	movs	r3, #14
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <HAL_LTDC_MspInit+0x228>)
 8001252:	f001 f98f 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001268:	2309      	movs	r3, #9
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	480c      	ldr	r0, [pc, #48]	; (80012a4 <HAL_LTDC_MspInit+0x220>)
 8001274:	f001 f97e 	bl	8002574 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2105      	movs	r1, #5
 800127c:	2058      	movs	r0, #88	; 0x58
 800127e:	f000 ff25 	bl	80020cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001282:	2058      	movs	r0, #88	; 0x58
 8001284:	f000 ff3e 	bl	8002104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3738      	adds	r7, #56	; 0x38
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40016800 	.word	0x40016800
 8001294:	40023800 	.word	0x40023800
 8001298:	40021400 	.word	0x40021400
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40021800 	.word	0x40021800
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <__io_putchar>:



//Redéfinition de la fonction printf ... qui utilise io_putchar()
int __io_putchar(int ch)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80012b8:	1d39      	adds	r1, r7, #4
 80012ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012be:	2201      	movs	r2, #1
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <__io_putchar+0x20>)
 80012c2:	f004 fe1c 	bl	8005efe <HAL_UART_Transmit>
	return ch;
 80012c6:	687b      	ldr	r3, [r7, #4]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20004640 	.word	0x20004640

080012d4 <displaySpiningWheel>:
// @PARAM: none
//
// @RETURN: none
//
/////////////////////////////////////////////////////////////////////////////////////////
void displaySpiningWheel(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	printf("T1: BONJOUR\r\n");
 80012da:	482e      	ldr	r0, [pc, #184]	; (8001394 <displaySpiningWheel+0xc0>)
 80012dc:	f008 fbf8 	bl	8009ad0 <puts>
	char i = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		switch (i)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d843      	bhi.n	8001374 <displaySpiningWheel+0xa0>
 80012ec:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <displaySpiningWheel+0x20>)
 80012ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f2:	bf00      	nop
 80012f4:	08001305 	.word	0x08001305
 80012f8:	08001321 	.word	0x08001321
 80012fc:	0800133d 	.word	0x0800133d
 8001300:	08001359 	.word	0x08001359
			{
			case 1:
				//printf("|\033[1D>");
				sprintf(prompt,"\r|>");
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <displaySpiningWheel+0xc4>)
 8001306:	4a25      	ldr	r2, [pc, #148]	; (800139c <displaySpiningWheel+0xc8>)
 8001308:	601a      	str	r2, [r3, #0]
				printf("%s",prompt);
 800130a:	4923      	ldr	r1, [pc, #140]	; (8001398 <displaySpiningWheel+0xc4>)
 800130c:	4824      	ldr	r0, [pc, #144]	; (80013a0 <displaySpiningWheel+0xcc>)
 800130e:	f008 fb6b 	bl	80099e8 <iprintf>
//				printf("\r|>");
				fflush(stdout);
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <displaySpiningWheel+0xd0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4618      	mov	r0, r3
 800131a:	f008 f9b5 	bl	8009688 <fflush>
				break;
 800131e:	e02b      	b.n	8001378 <displaySpiningWheel+0xa4>
			case 2:
				//printf("/\033[1D>");
				sprintf(prompt,"\r/>");
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <displaySpiningWheel+0xc4>)
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <displaySpiningWheel+0xd4>)
 8001324:	601a      	str	r2, [r3, #0]
				printf("%s",prompt);
 8001326:	491c      	ldr	r1, [pc, #112]	; (8001398 <displaySpiningWheel+0xc4>)
 8001328:	481d      	ldr	r0, [pc, #116]	; (80013a0 <displaySpiningWheel+0xcc>)
 800132a:	f008 fb5d 	bl	80099e8 <iprintf>
				fflush(stdout);
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <displaySpiningWheel+0xd0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4618      	mov	r0, r3
 8001336:	f008 f9a7 	bl	8009688 <fflush>
				break;
 800133a:	e01d      	b.n	8001378 <displaySpiningWheel+0xa4>
			case 3:
				//printf("-\033[1D>");
				sprintf(prompt,"\r->");
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <displaySpiningWheel+0xc4>)
 800133e:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <displaySpiningWheel+0xd8>)
 8001340:	601a      	str	r2, [r3, #0]
				printf("%s",prompt);
 8001342:	4915      	ldr	r1, [pc, #84]	; (8001398 <displaySpiningWheel+0xc4>)
 8001344:	4816      	ldr	r0, [pc, #88]	; (80013a0 <displaySpiningWheel+0xcc>)
 8001346:	f008 fb4f 	bl	80099e8 <iprintf>
				fflush(stdout);
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <displaySpiningWheel+0xd0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4618      	mov	r0, r3
 8001352:	f008 f999 	bl	8009688 <fflush>
				break;
 8001356:	e00f      	b.n	8001378 <displaySpiningWheel+0xa4>
			case 4:
				//printf("\\\033[1D>");
				sprintf(prompt,"\r\\>");
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <displaySpiningWheel+0xc4>)
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <displaySpiningWheel+0xdc>)
 800135c:	601a      	str	r2, [r3, #0]
				printf("%s",prompt);
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <displaySpiningWheel+0xc4>)
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <displaySpiningWheel+0xcc>)
 8001362:	f008 fb41 	bl	80099e8 <iprintf>
				fflush(stdout);
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <displaySpiningWheel+0xd0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4618      	mov	r0, r3
 800136e:	f008 f98b 	bl	8009688 <fflush>
				break;
 8001372:	e001      	b.n	8001378 <displaySpiningWheel+0xa4>
			default:
				i = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	71fb      	strb	r3, [r7, #7]
			}
	i = ++i > 4  ? 1 : i ;
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	3301      	adds	r3, #1
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d801      	bhi.n	8001388 <displaySpiningWheel+0xb4>
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	e000      	b.n	800138a <displaySpiningWheel+0xb6>
 8001388:	2301      	movs	r3, #1
 800138a:	71fb      	strb	r3, [r7, #7]
	vTaskDelay(100);
 800138c:	2064      	movs	r0, #100	; 0x64
 800138e:	f006 fed9 	bl	8008144 <vTaskDelay>
		switch (i)
 8001392:	e7a7      	b.n	80012e4 <displaySpiningWheel+0x10>
 8001394:	0800a518 	.word	0x0800a518
 8001398:	2000001c 	.word	0x2000001c
 800139c:	003e7c0d 	.word	0x003e7c0d
 80013a0:	0800a528 	.word	0x0800a528
 80013a4:	20000030 	.word	0x20000030
 80013a8:	003e2f0d 	.word	0x003e2f0d
 80013ac:	003e2d0d 	.word	0x003e2d0d
 80013b0:	003e5c0d 	.word	0x003e5c0d

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
uint8_t bidon = 0x58;
 80013ba:	2358      	movs	r3, #88	; 0x58
 80013bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
uint8_t message[] = {"On va commencer\r\n"};
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <main+0x100>)
 80013c2:	1d3c      	adds	r4, r7, #4
 80013c4:	461d      	mov	r5, r3
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ce:	f000 fd61 	bl	8001e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d2:	f000 f88d 	bl	80014f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d6:	f7ff fc05 	bl	8000be4 <MX_GPIO_Init>
  MX_CRC_Init();
 80013da:	f7ff fa49 	bl	8000870 <MX_CRC_Init>
  MX_DMA2D_Init();
 80013de:	f7ff fa7d 	bl	80008dc <MX_DMA2D_Init>
  MX_FMC_Init();
 80013e2:	f7ff fad5 	bl	8000990 <MX_FMC_Init>
  MX_I2C3_Init();
 80013e6:	f7ff fd23 	bl	8000e30 <MX_I2C3_Init>
  MX_LTDC_Init();
 80013ea:	f7ff fdcb 	bl	8000f84 <MX_LTDC_Init>
  MX_SPI5_Init();
 80013ee:	f000 f91b 	bl	8001628 <MX_SPI5_Init>
  MX_TIM1_Init();
 80013f2:	f000 fb47 	bl	8001a84 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013f6:	f000 fc1f 	bl	8001c38 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80013fa:	f000 fc97 	bl	8001d2c <MX_USB_OTG_HS_HCD_Init>
  MX_TIM2_Init();
 80013fe:	f000 fb91 	bl	8001b24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Transmit(&huart1, message, sizeof(message), 0xff);
  printf("T0: Tache INIT commence\r\n");
 8001402:	482d      	ldr	r0, [pc, #180]	; (80014b8 <main+0x104>)
 8001404:	f008 fb64 	bl	8009ad0 <puts>


  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  int p1=1;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  int p2=2;
 8001410:	2302      	movs	r3, #2
 8001412:	61fb      	str	r3, [r7, #28]

  //Création d'un Meesage/Qeue
  //BaL1 = xQueueCreate( 5, sizeof( QMessage ) );

  //Création du Semaphore
  printf("T0: Creation du semaphore (vide)\r\n");
 8001414:	4829      	ldr	r0, [pc, #164]	; (80014bc <main+0x108>)
 8001416:	f008 fb5b 	bl	8009ad0 <puts>
  //MonSem=semBCreate(SEM_Q_FIFO,SEM_EMPTY);		//Façon VxWorks
  MonSem = xSemaphoreCreateBinary();				//Façon FreeRTOS
 800141a:	2203      	movs	r2, #3
 800141c:	2100      	movs	r1, #0
 800141e:	2001      	movs	r0, #1
 8001420:	f006 fa90 	bl	8007944 <xQueueGenericCreate>
 8001424:	4602      	mov	r2, r0
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <main+0x10c>)
 8001428:	601a      	str	r2, [r3, #0]
  MonSemUART = xSemaphoreCreateBinary();				//Façon FreeRTOS
 800142a:	2203      	movs	r2, #3
 800142c:	2100      	movs	r1, #0
 800142e:	2001      	movs	r0, #1
 8001430:	f006 fa88 	bl	8007944 <xQueueGenericCreate>
 8001434:	4602      	mov	r2, r0
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <main+0x110>)
 8001438:	601a      	str	r2, [r3, #0]
  shell_init();
 800143a:	f7ff f8ef 	bl	800061c <shell_init>


  /* Create the task, storing the handle. */

   printf("T0: Creation tache 1\r\n");
 800143e:	4822      	ldr	r0, [pc, #136]	; (80014c8 <main+0x114>)
 8001440:	f008 fb46 	bl	8009ad0 <puts>
  xReturned = xTaskCreate(
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	463a      	mov	r2, r7
 8001448:	9201      	str	r2, [sp, #4]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001452:	491e      	ldr	r1, [pc, #120]	; (80014cc <main+0x118>)
 8001454:	481e      	ldr	r0, [pc, #120]	; (80014d0 <main+0x11c>)
 8001456:	f006 fd3f 	bl	8007ed8 <xTaskCreate>
 800145a:	61b8      	str	r0, [r7, #24]
				  "SpiningWheel",
				  1000,      		/* Stack size in words, not bytes. */
				  NULL,    			/* Parameter passed into the task. */
				  p1,				/* Priority at which the task is created. */
				  &xHandle );      /* Used to pass out the created task's handle. */
  if( xReturned == pdPASS )
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d103      	bne.n	800146a <main+0xb6>
  printf("T0: Tache ''Bidon'' cree avec priorite %d\r\n", p1);
 8001462:	6a39      	ldr	r1, [r7, #32]
 8001464:	481b      	ldr	r0, [pc, #108]	; (80014d4 <main+0x120>)
 8001466:	f008 fabf 	bl	80099e8 <iprintf>


  printf("T0: Creation tache 2\r\n");
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <main+0x124>)
 800146c:	f008 fb30 	bl	8009ad0 <puts>
  xReturned = xTaskCreate(
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	463a      	mov	r2, r7
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800147e:	4917      	ldr	r1, [pc, #92]	; (80014dc <main+0x128>)
 8001480:	4817      	ldr	r0, [pc, #92]	; (80014e0 <main+0x12c>)
 8001482:	f006 fd29 	bl	8007ed8 <xTaskCreate>
 8001486:	61b8      	str	r0, [r7, #24]
				  "Shell_RUN",
		  	  	  1000,      		/* Stack size in words, not bytes. */
				  NULL,    			/* Parameter passed into the task. */
				  p2,				/* Priority at which the task is created. */
				  &xHandle );      /* Used to pass out the created task's handle. */
  if( xReturned == pdPASS )
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d103      	bne.n	8001496 <main+0xe2>
	  printf("T0: Tache ''Shell RUN'' cree avec priorite %d\r\n", p2);
 800148e:	69f9      	ldr	r1, [r7, #28]
 8001490:	4814      	ldr	r0, [pc, #80]	; (80014e4 <main+0x130>)
 8001492:	f008 faa9 	bl	80099e8 <iprintf>

  printf("T0: Fin fct main x_x\r\n\n");
 8001496:	4814      	ldr	r0, [pc, #80]	; (80014e8 <main+0x134>)
 8001498:	f008 fb1a 	bl	8009ad0 <puts>

  //Initier le timer TIM2
  HAL_TIM_Base_Start_IT (&htim2);
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <main+0x138>)
 800149e:	f004 f90c 	bl	80056ba <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80014a2:	f7ff fb7b 	bl	8000b9c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80014a6:	f006 f8ca 	bl	800763e <osKernelStart>
 80014aa:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  //..
  /* USER CODE END 3 */
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bdb0      	pop	{r4, r5, r7, pc}
 80014b4:	0800a62c 	.word	0x0800a62c
 80014b8:	0800a52c 	.word	0x0800a52c
 80014bc:	0800a548 	.word	0x0800a548
 80014c0:	2000450c 	.word	0x2000450c
 80014c4:	20004508 	.word	0x20004508
 80014c8:	0800a56c 	.word	0x0800a56c
 80014cc:	0800a584 	.word	0x0800a584
 80014d0:	080012d5 	.word	0x080012d5
 80014d4:	0800a594 	.word	0x0800a594
 80014d8:	0800a5c0 	.word	0x0800a5c0
 80014dc:	0800a5d8 	.word	0x0800a5d8
 80014e0:	0800079d 	.word	0x0800079d
 80014e4:	0800a5e4 	.word	0x0800a5e4
 80014e8:	0800a614 	.word	0x0800a614
 80014ec:	20004600 	.word	0x20004600

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0a0      	sub	sp, #128	; 0x80
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f008 f9c2 	bl	8009888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2230      	movs	r2, #48	; 0x30
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f008 f9b3 	bl	8009888 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <SystemClock_Config+0xfc>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a30      	ldr	r2, [pc, #192]	; (80015ec <SystemClock_Config+0xfc>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <SystemClock_Config+0xfc>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <SystemClock_Config+0x100>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <SystemClock_Config+0x100>)
 8001548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <SystemClock_Config+0x100>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155a:	2301      	movs	r3, #1
 800155c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001562:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800156e:	2304      	movs	r3, #4
 8001570:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001572:	23a8      	movs	r3, #168	; 0xa8
 8001574:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001576:	2302      	movs	r3, #2
 8001578:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800157a:	2307      	movs	r3, #7
 800157c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001582:	4618      	mov	r0, r3
 8001584:	f003 f984 	bl	8004890 <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800158e:	f000 f843 	bl	8001618 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001592:	230f      	movs	r3, #15
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001596:	2302      	movs	r3, #2
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800159e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ae:	2105      	movs	r1, #5
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fbdd 	bl	8004d70 <HAL_RCC_ClockConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80015bc:	f000 f82c 	bl	8001618 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015c0:	2308      	movs	r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80015c4:	2332      	movs	r3, #50	; 0x32
 80015c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fdef 	bl	80051b8 <HAL_RCCEx_PeriphCLKConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80015e0:	f000 f81a 	bl	8001618 <Error_Handler>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3780      	adds	r7, #128	; 0x80
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000

080015f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001606:	f000 fc67 	bl	8001ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40001000 	.word	0x40001000

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <MX_SPI5_Init+0x64>)
 800162e:	4a18      	ldr	r2, [pc, #96]	; (8001690 <MX_SPI5_Init+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_SPI5_Init+0x64>)
 8001634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001638:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_SPI5_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <MX_SPI5_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_SPI5_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_SPI5_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_SPI5_Init+0x64>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_SPI5_Init+0x64>)
 800165c:	2218      	movs	r2, #24
 800165e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <MX_SPI5_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_SPI5_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <MX_SPI5_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_SPI5_Init+0x64>)
 8001674:	220a      	movs	r2, #10
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_SPI5_Init+0x64>)
 800167a:	f003 ff8f 	bl	800559c <HAL_SPI_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001684:	f7ff ffc8 	bl	8001618 <Error_Handler>
  }

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20004528 	.word	0x20004528
 8001690:	40015000 	.word	0x40015000

08001694 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_SPI_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12c      	bne.n	8001710 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_SPI_MspInit+0x88>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_SPI_MspInit+0x88>)
 80016c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_SPI_MspInit+0x88>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_SPI_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_SPI_MspInit+0x88>)
 80016dc:	f043 0320 	orr.w	r3, r3, #32
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_SPI_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80016ee:	f44f 7360 	mov.w	r3, #896	; 0x380
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001700:	2305      	movs	r3, #5
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_SPI_MspInit+0x8c>)
 800170c:	f000 ff32 	bl	8002574 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40015000 	.word	0x40015000
 800171c:	40023800 	.word	0x40023800
 8001720:	40021400 	.word	0x40021400

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_MspInit+0x54>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_MspInit+0x54>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_MspInit+0x54>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_MspInit+0x54>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_MspInit+0x54>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_MspInit+0x54>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	210f      	movs	r1, #15
 8001766:	f06f 0001 	mvn.w	r0, #1
 800176a:	f000 fcaf 	bl	80020cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	2036      	movs	r0, #54	; 0x36
 8001792:	f000 fc9b 	bl	80020cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001796:	2036      	movs	r0, #54	; 0x36
 8001798:	f000 fcb4 	bl	8002104 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_InitTick+0xa4>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_InitTick+0xa4>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6413      	str	r3, [r2, #64]	; 0x40
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_InitTick+0xa4>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b8:	f107 0210 	add.w	r2, r7, #16
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fcc6 	bl	8005154 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017c8:	f003 fc9c 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 80017cc:	4603      	mov	r3, r0
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_InitTick+0xa8>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0c9b      	lsrs	r3, r3, #18
 80017dc:	3b01      	subs	r3, #1
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_InitTick+0xac>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_InitTick+0xb0>)
 80017e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_InitTick+0xac>)
 80017e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_InitTick+0xac>)
 80017f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_InitTick+0xac>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_InitTick+0xac>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_InitTick+0xac>)
 8001802:	f003 ff2f 	bl	8005664 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d104      	bne.n	8001816 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <HAL_InitTick+0xac>)
 800180e:	f003 ff54 	bl	80056ba <HAL_TIM_Base_Start_IT>
 8001812:	4603      	mov	r3, r0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3730      	adds	r7, #48	; 0x30
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	431bde83 	.word	0x431bde83
 8001828:	20004580 	.word	0x20004580
 800182c:	40001000 	.word	0x40001000

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8001868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <EXTI0_IRQHandler+0x18>)
 800186e:	f001 f844 	bl	80028fa <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001872:	2001      	movs	r0, #1
 8001874:	f001 f85c 	bl	8002930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021800 	.word	0x40021800

08001880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//printf("IT: TIMER #2 a claqué\r\n");		//A ne pas faire dans la vrai vie, c'est juste pour l'exo
	HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8001884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <TIM2_IRQHandler+0x24>)
 800188a:	f001 f836 	bl	80028fa <HAL_GPIO_TogglePin>
	xSemaphoreGiveFromISR(MonSem,pdFALSE);
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <TIM2_IRQHandler+0x28>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f006 f8b3 	bl	8007a00 <xQueueGiveFromISR>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800189a:	4804      	ldr	r0, [pc, #16]	; (80018ac <TIM2_IRQHandler+0x2c>)
 800189c:	f003 ff31 	bl	8005702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021800 	.word	0x40021800
 80018a8:	2000450c 	.word	0x2000450c
 80018ac:	20004600 	.word	0x20004600

080018b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	xSemaphoreGiveFromISR(MonSemUART,pdFALSE);
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <USART1_IRQHandler+0x1c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 f8a0 	bl	8007a00 <xQueueGiveFromISR>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <USART1_IRQHandler+0x20>)
 80018c2:	f004 fc0b 	bl	80060dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20004508 	.word	0x20004508
 80018d0:	20004640 	.word	0x20004640

080018d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <TIM6_DAC_IRQHandler+0x10>)
 80018da:	f003 ff12 	bl	8005702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20004580 	.word	0x20004580

080018e8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <OTG_HS_IRQHandler+0x10>)
 80018ee:	f001 f8a4 	bl	8002a3a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20004680 	.word	0x20004680

080018fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <LTDC_IRQHandler+0x10>)
 8001902:	f002 fd2d 	bl	8004360 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20004460 	.word	0x20004460

08001910 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA2D_IRQHandler+0x10>)
 8001916:	f000 fc8a 	bl	800222e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20004394 	.word	0x20004394

08001924 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
	}

return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e009      	b.n	8001984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fc99 	bl	80012b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf1      	blt.n	8001970 <_write+0x12>
	}
	return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:

int _close(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019be:	605a      	str	r2, [r3, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x50>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x16>
		heap_end = &end;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <_sbrk+0x50>)
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <_sbrk+0x54>)
 8001a14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <_sbrk+0x50>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <_sbrk+0x50>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	466a      	mov	r2, sp
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d907      	bls.n	8001a3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a2a:	f007 fd77 	bl	800951c <__errno>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	230c      	movs	r3, #12
 8001a32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	e006      	b.n	8001a48 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <_sbrk+0x50>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <_sbrk+0x50>)
 8001a44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000030c 	.word	0x2000030c
 8001a54:	20004950 	.word	0x20004950

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <SystemInit+0x28>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <SystemInit+0x28>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SystemInit+0x28>)
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	609a      	str	r2, [r3, #8]
#endif
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <MX_TIM1_Init+0x9c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aca:	4814      	ldr	r0, [pc, #80]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001acc:	f003 fdca 	bl	8005664 <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001ad6:	f7ff fd9f 	bl	8001618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001ae8:	f003 ff13 	bl	8005912 <HAL_TIM_ConfigClockSource>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001af2:	f7ff fd91 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001afe:	463b      	mov	r3, r7
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_TIM1_Init+0x98>)
 8001b04:	f004 f91e 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001b0e:	f7ff fd83 	bl	8001618 <Error_Handler>
  }

}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200045c0 	.word	0x200045c0
 8001b20:	40010000 	.word	0x40010000

08001b24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399999;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001b56:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <MX_TIM2_Init+0x98>)
 8001b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001b68:	f003 fd7c 	bl	8005664 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001b72:	f7ff fd51 	bl	8001618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001b84:	f003 fec5 	bl	8005912 <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001b8e:	f7ff fd43 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM2_Init+0x94>)
 8001ba0:	f004 f8d0 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001baa:	f7ff fd35 	bl	8001618 <Error_Handler>
  }

}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20004600 	.word	0x20004600
 8001bbc:	00802c7f 	.word	0x00802c7f

08001bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <HAL_TIM_Base_MspInit+0x70>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_TIM_Base_MspInit+0x74>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <HAL_TIM_Base_MspInit+0x74>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_TIM_Base_MspInit+0x74>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bee:	e01a      	b.n	8001c26 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf8:	d115      	bne.n	8001c26 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_TIM_Base_MspInit+0x74>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <HAL_TIM_Base_MspInit+0x74>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_TIM_Base_MspInit+0x74>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2105      	movs	r1, #5
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f000 fa56 	bl	80020cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c20:	201c      	movs	r0, #28
 8001c22:	f000 fa6f 	bl	8002104 <HAL_NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40023800 	.word	0x40023800

08001c38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <MX_USART1_UART_Init+0x50>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_USART1_UART_Init+0x4c>)
 8001c70:	f004 f8f8 	bl	8005e64 <HAL_UART_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c7a:	f7ff fccd 	bl	8001618 <Error_Handler>
  }

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20004640 	.word	0x20004640
 8001c88:	40011000 	.word	0x40011000

08001c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_UART_MspInit+0x94>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d134      	bne.n	8001d18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <HAL_UART_MspInit+0x9c>)
 8001d04:	f000 fc36 	bl	8002574 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	2025      	movs	r0, #37	; 0x25
 8001d0e:	f000 f9dd 	bl	80020cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d12:	2025      	movs	r0, #37	; 0x25
 8001d14:	f000 f9f6 	bl	8002104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000

08001d2c <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001d34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d38:	220c      	movs	r2, #12
 8001d3a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001d68:	f000 fe05 	bl	8002976 <HAL_HCD_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001d72:	f7ff fc51 	bl	8001618 <Error_Handler>
  }

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20004680 	.word	0x20004680
 8001d80:	40040000 	.word	0x40040000

08001d84 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <HAL_HCD_MspInit+0xb0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d141      	bne.n	8001e2a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_HCD_MspInit+0xb4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_HCD_MspInit+0xb4>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_HCD_MspInit+0xb4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001dc2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001dd4:	230c      	movs	r3, #12
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4817      	ldr	r0, [pc, #92]	; (8001e3c <HAL_HCD_MspInit+0xb8>)
 8001de0:	f000 fbc8 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	4810      	ldr	r0, [pc, #64]	; (8001e3c <HAL_HCD_MspInit+0xb8>)
 8001dfa:	f000 fbbb 	bl	8002574 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_HCD_MspInit+0xb4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a0c      	ldr	r2, [pc, #48]	; (8001e38 <HAL_HCD_MspInit+0xb4>)
 8001e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_HCD_MspInit+0xb4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	204d      	movs	r0, #77	; 0x4d
 8001e20:	f000 f954 	bl	80020cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001e24:	204d      	movs	r0, #77	; 0x4d
 8001e26:	f000 f96d 	bl	8002104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3728      	adds	r7, #40	; 0x28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40040000 	.word	0x40040000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020400 	.word	0x40020400

08001e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e78 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e46:	e003      	b.n	8001e50 <LoopCopyDataInit>

08001e48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e4e:	3104      	adds	r1, #4

08001e50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e50:	480b      	ldr	r0, [pc, #44]	; (8001e80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e58:	d3f6      	bcc.n	8001e48 <CopyDataInit>
  ldr  r2, =_sbss
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e5c:	e002      	b.n	8001e64 <LoopFillZerobss>

08001e5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e60:	f842 3b04 	str.w	r3, [r2], #4

08001e64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e68:	d3f9      	bcc.n	8001e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e6a:	f7ff fdf5 	bl	8001a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f007 fce7 	bl	8009840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e72:	f7ff fa9f 	bl	80013b4 <main>
  bx  lr    
 8001e76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e78:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e7c:	0800a708 	.word	0x0800a708
  ldr  r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e84:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001e88:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001e8c:	2000494c 	.word	0x2000494c

08001e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_Init+0x40>)
 8001e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_Init+0x40>)
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_Init+0x40>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 f8fa 	bl	80020b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fc5a 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec8:	f7ff fc2c 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00

08001ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000028 	.word	0x20000028
 8001efc:	20004944 	.word	0x20004944

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20004944 	.word	0x20004944

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff ffee 	bl	8001f00 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_Delay+0x40>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffde 	bl	8001f00 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000028 	.word	0x20000028

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <__NVIC_EnableIRQ+0x38>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ff4c 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020de:	f7ff ff61 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 80020e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	6978      	ldr	r0, [r7, #20]
 80020ea:	f7ff ffb1 	bl	8002050 <NVIC_EncodePriority>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff80 	bl	8001ffc <__NVIC_SetPriority>
}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff54 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	795b      	ldrb	r3, [r3, #5]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fba8 	bl	8000898 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d004      	beq.n	8002176 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00c      	b.n	8002190 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2205      	movs	r2, #5
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e03b      	b.n	8002226 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fbbc 	bl	8000940 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ec:	f023 0107 	bic.w	r1, r3, #7
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002206:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68d1      	ldr	r1, [r2, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	430b      	orrs	r3, r1
 8002214:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d026      	beq.n	800229e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d021      	beq.n	800229e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002268:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2204      	movs	r2, #4
 8002282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d026      	beq.n	80022f6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d021      	beq.n	80022f6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2220      	movs	r2, #32
 80022c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2204      	movs	r2, #4
 80022da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d026      	beq.n	800234e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002306:	2b00      	cmp	r3, #0
 8002308:	d021      	beq.n	800234e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002318:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2208      	movs	r2, #8
 8002320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	f043 0204 	orr.w	r2, r3, #4
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2204      	movs	r2, #4
 8002332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00e      	beq.n	8002380 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002370:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2204      	movs	r2, #4
 8002378:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f853 	bl	8002426 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d024      	beq.n	80023d4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002390:	2b00      	cmp	r3, #0
 8002392:	d01f      	beq.n	80023d4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023a2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2202      	movs	r2, #2
 80023aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01f      	beq.n	800241e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01a      	beq.n	800241e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023f6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2210      	movs	r2, #16
 80023fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f80e 	bl	800243a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_DMA2D_ConfigLayer+0x20>
 800246c:	2302      	movs	r3, #2
 800246e:	e079      	b.n	8002564 <HAL_DMA2D_ConfigLayer+0x114>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	3318      	adds	r3, #24
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800249a:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_DMA2D_ConfigLayer+0x120>)
 800249c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b0a      	cmp	r3, #10
 80024a4:	d003      	beq.n	80024ae <HAL_DMA2D_ConfigLayer+0x5e>
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b09      	cmp	r3, #9
 80024ac:	d107      	bne.n	80024be <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e005      	b.n	80024ca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	061b      	lsls	r3, r3, #24
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d120      	bne.n	8002512 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	ea02 0103 	and.w	r1, r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d003      	beq.n	8002502 <HAL_DMA2D_ConfigLayer+0xb2>
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b09      	cmp	r3, #9
 8002500:	d127      	bne.n	8002552 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
 8002510:	e01f      	b.n	8002552 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43db      	mvns	r3, r3
 800251c:	ea02 0103 	and.w	r1, r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	430a      	orrs	r2, r1
 8002528:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b0a      	cmp	r3, #10
 800253a:	d003      	beq.n	8002544 <HAL_DMA2D_ConfigLayer+0xf4>
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b09      	cmp	r3, #9
 8002542:	d106      	bne.n	8002552 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002550:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	ff03000f 	.word	0xff03000f

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e177      	b.n	8002880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 8166 	bne.w	800287a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d00b      	beq.n	80025ce <HAL_GPIO_Init+0x5a>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025c2:	2b11      	cmp	r3, #17
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b12      	cmp	r3, #18
 80025cc:	d130      	bne.n	8002630 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 0201 	and.w	r2, r3, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0xfc>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b12      	cmp	r3, #18
 800266e:	d123      	bne.n	80026b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80c0 	beq.w	800287a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_GPIO_Init+0x320>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a64      	ldr	r2, [pc, #400]	; (8002894 <HAL_GPIO_Init+0x320>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <HAL_GPIO_Init+0x320>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002716:	4a60      	ldr	r2, [pc, #384]	; (8002898 <HAL_GPIO_Init+0x324>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_GPIO_Init+0x328>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d037      	beq.n	80027b2 <HAL_GPIO_Init+0x23e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a56      	ldr	r2, [pc, #344]	; (80028a0 <HAL_GPIO_Init+0x32c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_GPIO_Init+0x23a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a55      	ldr	r2, [pc, #340]	; (80028a4 <HAL_GPIO_Init+0x330>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <HAL_GPIO_Init+0x236>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a54      	ldr	r2, [pc, #336]	; (80028a8 <HAL_GPIO_Init+0x334>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d025      	beq.n	80027a6 <HAL_GPIO_Init+0x232>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a53      	ldr	r2, [pc, #332]	; (80028ac <HAL_GPIO_Init+0x338>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <HAL_GPIO_Init+0x22e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a52      	ldr	r2, [pc, #328]	; (80028b0 <HAL_GPIO_Init+0x33c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0x22a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a51      	ldr	r2, [pc, #324]	; (80028b4 <HAL_GPIO_Init+0x340>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0x226>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a50      	ldr	r2, [pc, #320]	; (80028b8 <HAL_GPIO_Init+0x344>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_GPIO_Init+0x222>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4f      	ldr	r2, [pc, #316]	; (80028bc <HAL_GPIO_Init+0x348>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x21e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4e      	ldr	r2, [pc, #312]	; (80028c0 <HAL_GPIO_Init+0x34c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_GPIO_Init+0x21a>
 800278a:	2309      	movs	r3, #9
 800278c:	e012      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800278e:	230a      	movs	r3, #10
 8002790:	e010      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 8002792:	2308      	movs	r3, #8
 8002794:	e00e      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 8002796:	2307      	movs	r3, #7
 8002798:	e00c      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800279a:	2306      	movs	r3, #6
 800279c:	e00a      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 800279e:	2305      	movs	r3, #5
 80027a0:	e008      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027a2:	2304      	movs	r3, #4
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x240>
 80027b2:	2300      	movs	r3, #0
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4093      	lsls	r3, r2
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c4:	4934      	ldr	r1, [pc, #208]	; (8002898 <HAL_GPIO_Init+0x324>)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d2:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <HAL_GPIO_Init+0x350>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f6:	4a33      	ldr	r2, [pc, #204]	; (80028c4 <HAL_GPIO_Init+0x350>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027fc:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_GPIO_Init+0x350>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002820:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_GPIO_Init+0x350>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_GPIO_Init+0x350>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_GPIO_Init+0x350>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_GPIO_Init+0x350>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002874:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <HAL_GPIO_Init+0x350>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	f67f ae84 	bls.w	8002590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002888:	bf00      	nop
 800288a:	3724      	adds	r7, #36	; 0x24
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40023800 	.word	0x40023800
 8002898:	40013800 	.word	0x40013800
 800289c:	40020000 	.word	0x40020000
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40020800 	.word	0x40020800
 80028a8:	40020c00 	.word	0x40020c00
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40021400 	.word	0x40021400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40021c00 	.word	0x40021c00
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40022400 	.word	0x40022400
 80028c4:	40013c00 	.word	0x40013c00

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	401a      	ands	r2, r3
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	429a      	cmp	r2, r3
 8002912:	d104      	bne.n	800291e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	041a      	lsls	r2, r3, #16
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800291c:	e002      	b.n	8002924 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f806 	bl	8002960 <HAL_GPIO_EXTI_Callback>
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40013c00 	.word	0x40013c00

08002960 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002978:	b08f      	sub	sp, #60	; 0x3c
 800297a:	af0a      	add	r7, sp, #40	; 0x28
 800297c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e054      	b.n	8002a32 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff f9ee 	bl	8001d84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 fae1 	bl	8006f8e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	687e      	ldr	r6, [r7, #4]
 80029d4:	466d      	mov	r5, sp
 80029d6:	f106 0410 	add.w	r4, r6, #16
 80029da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ea:	1d33      	adds	r3, r6, #4
 80029ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f004 fa6c 	bl	8006ecc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fad8 	bl	8006fb0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	687e      	ldr	r6, [r7, #4]
 8002a08:	466d      	mov	r5, sp
 8002a0a:	f106 0410 	add.w	r4, r6, #16
 8002a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a1e:	1d33      	adds	r3, r6, #4
 8002a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a22:	6838      	ldr	r0, [r7, #0]
 8002a24:	f004 fbb4 	bl	8007190 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a3a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fb5b 	bl	800710c <USB_GetMode>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	f040 80ef 	bne.w	8002c3c <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 fb3f 	bl	80070e6 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80e5 	beq.w	8002c3a <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fb36 	bl	80070e6 <USB_ReadInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a84:	d104      	bne.n	8002a90 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a8e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 fb26 	bl	80070e6 <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa4:	d104      	bne.n	8002ab0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002aae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f004 fb16 	bl	80070e6 <USB_ReadInterrupts>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac4:	d104      	bne.n	8002ad0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ace:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f004 fb06 	bl	80070e6 <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d103      	bne.n	8002aec <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 faf8 	bl	80070e6 <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b00:	d115      	bne.n	8002b2e <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b0a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d108      	bne.n	8002b2e <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f8a4 	bl	8002c6a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2101      	movs	r1, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f004 fbed 	bl	8007308 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fad7 	bl	80070e6 <USB_ReadInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b42:	d102      	bne.n	8002b4a <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f001 f913 	bl	8003d70 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fac9 	bl	80070e6 <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d106      	bne.n	8002b6c <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f86f 	bl	8002c42 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 fab8 	bl	80070e6 <USB_ReadInterrupts>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b80:	d138      	bne.n	8002bf4 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 fc31 	bl	80073ee <USB_HC_ReadInterrupt>
 8002b8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e025      	b.n	8002be0 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d018      	beq.n	8002bda <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbe:	d106      	bne.n	8002bce <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f87b 	bl	8002cc2 <HCD_HC_IN_IRQHandler>
 8002bcc:	e005      	b.n	8002bda <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fca9 	bl	800352c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3d4      	bcc.n	8002b94 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 fa74 	bl	80070e6 <USB_ReadInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d101      	bne.n	8002c0c <HAL_HCD_IRQHandler+0x1d2>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_HCD_IRQHandler+0x1d4>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d014      	beq.n	8002c3c <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0210 	bic.w	r2, r2, #16
 8002c20:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fff8 	bl	8003c18 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0210 	orr.w	r2, r2, #16
 8002c36:	619a      	str	r2, [r3, #24]
 8002c38:	e000      	b.n	8002c3c <HAL_HCD_IRQHandler+0x202>
      return;
 8002c3a:	bf00      	nop
    }
  }
}
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	70fb      	strb	r3, [r7, #3]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d119      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2304      	movs	r3, #4
 8002d02:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	0151      	lsls	r1, r2, #5
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	440a      	add	r2, r1
 8002d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	60d3      	str	r3, [r2, #12]
 8002d24:	e0ce      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3c:	d12c      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	335d      	adds	r3, #93	; 0x5d
 8002d62:	2207      	movs	r2, #7
 8002d64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	0151      	lsls	r1, r2, #5
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f004 fb3d 	bl	8007410 <USB_HC_Halt>
 8002d96:	e095      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d109      	bne.n	8002dc2 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	6093      	str	r3, [r2, #8]
 8002dc0:	e080      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d134      	bne.n	8002e42 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	0151      	lsls	r1, r2, #5
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	440a      	add	r2, r1
 8002dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df2:	f043 0302 	orr.w	r3, r3, #2
 8002df6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	335d      	adds	r3, #93	; 0x5d
 8002e08:	2205      	movs	r2, #5
 8002e0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fae8 	bl	8007410 <USB_HC_Halt>
 8002e40:	e040      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e58:	d134      	bne.n	8002ec4 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	0151      	lsls	r1, r2, #5
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	440a      	add	r2, r1
 8002e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 fac3 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	461a      	mov	r2, r3
 8002e98:	2310      	movs	r3, #16
 8002e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	335d      	adds	r3, #93	; 0x5d
 8002eac:	2208      	movs	r2, #8
 8002eae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eda:	d122      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	0151      	lsls	r1, r2, #5
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	440a      	add	r2, r1
 8002ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f004 fa82 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f1e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f20:	e300      	b.n	8003524 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 80fd 	bne.w	8003134 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01b      	beq.n	8002f7a <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	3348      	adds	r3, #72	; 0x48
 8002f52:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	0159      	lsls	r1, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f66:	1ad1      	subs	r1, r2, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4403      	add	r3, r0
 8002f76:	334c      	adds	r3, #76	; 0x4c
 8002f78:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	335d      	adds	r3, #93	; 0x5d
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3358      	adds	r3, #88	; 0x58
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	333f      	adds	r3, #63	; 0x3f
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	333f      	adds	r3, #63	; 0x3f
 8002fda:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d121      	bne.n	8003024 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	0151      	lsls	r1, r2, #5
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	440a      	add	r2, r1
 8002ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f004 fa00 	bl	8007410 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301c:	461a      	mov	r2, r3
 800301e:	2310      	movs	r3, #16
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	e070      	b.n	8003106 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	333f      	adds	r3, #63	; 0x3f
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d12a      	bne.n	8003090 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	0151      	lsls	r1, r2, #5
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	440a      	add	r2, r1
 8003050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003058:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	335c      	adds	r3, #92	; 0x5c
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	b2d8      	uxtb	r0, r3
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	440b      	add	r3, r1
 8003080:	335c      	adds	r3, #92	; 0x5c
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	4601      	mov	r1, r0
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fe0c 	bl	8002ca6 <HAL_HCD_HC_NotifyURBChange_Callback>
 800308e:	e03a      	b.n	8003106 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	333f      	adds	r3, #63	; 0x3f
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d12f      	bne.n	8003106 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	335c      	adds	r3, #92	; 0x5c
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	3350      	adds	r3, #80	; 0x50
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	f083 0301 	eor.w	r3, r3, #1
 80030d0:	b2d8      	uxtb	r0, r3
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	3350      	adds	r3, #80	; 0x50
 80030e2:	4602      	mov	r2, r0
 80030e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	b2d8      	uxtb	r0, r3
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	335c      	adds	r3, #92	; 0x5c
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4601      	mov	r1, r0
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fdd0 	bl	8002ca6 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	440b      	add	r3, r1
 8003114:	3350      	adds	r3, #80	; 0x50
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	f083 0301 	eor.w	r3, r3, #1
 800311c:	b2d8      	uxtb	r0, r3
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	3350      	adds	r3, #80	; 0x50
 800312e:	4602      	mov	r2, r0
 8003130:	701a      	strb	r2, [r3, #0]
}
 8003132:	e1f7      	b.n	8003524 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	f040 811a 	bne.w	8003380 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	0151      	lsls	r1, r2, #5
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	440a      	add	r2, r1
 8003162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003166:	f023 0302 	bic.w	r3, r3, #2
 800316a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	335d      	adds	r3, #93	; 0x5d
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d10a      	bne.n	8003198 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	440b      	add	r3, r1
 8003190:	335c      	adds	r3, #92	; 0x5c
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e0d9      	b.n	800334c <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	335d      	adds	r3, #93	; 0x5d
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d10a      	bne.n	80031c4 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	335c      	adds	r3, #92	; 0x5c
 80031be:	2205      	movs	r2, #5
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e0c3      	b.n	800334c <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	335d      	adds	r3, #93	; 0x5d
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d00a      	beq.n	80031f0 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	335d      	adds	r3, #93	; 0x5d
 80031ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d156      	bne.n	800329e <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	3358      	adds	r3, #88	; 0x58
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	1c59      	adds	r1, r3, #1
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4403      	add	r3, r0
 8003212:	3358      	adds	r3, #88	; 0x58
 8003214:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	440b      	add	r3, r1
 8003224:	3358      	adds	r3, #88	; 0x58
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d914      	bls.n	8003256 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	3358      	adds	r3, #88	; 0x58
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	335c      	adds	r3, #92	; 0x5c
 8003250:	2204      	movs	r2, #4
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e009      	b.n	800326a <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	335c      	adds	r3, #92	; 0x5c
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003280:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003288:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e056      	b.n	800334c <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	335d      	adds	r3, #93	; 0x5d
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d123      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e027      	b.n	800334c <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	335d      	adds	r3, #93	; 0x5d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b07      	cmp	r3, #7
 8003310:	d11c      	bne.n	800334c <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	3358      	adds	r3, #88	; 0x58
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1c59      	adds	r1, r3, #1
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4403      	add	r3, r0
 8003334:	3358      	adds	r3, #88	; 0x58
 8003336:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	440b      	add	r3, r1
 8003346:	335c      	adds	r3, #92	; 0x5c
 8003348:	2204      	movs	r2, #4
 800334a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	461a      	mov	r2, r3
 800335a:	2302      	movs	r3, #2
 800335c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	b2d8      	uxtb	r0, r3
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	335c      	adds	r3, #92	; 0x5c
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4601      	mov	r1, r0
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fc94 	bl	8002ca6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800337e:	e0d1      	b.n	8003524 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b80      	cmp	r3, #128	; 0x80
 8003394:	d13e      	bne.n	8003414 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	0151      	lsls	r1, r2, #5
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	440a      	add	r2, r1
 80033ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	3358      	adds	r3, #88	; 0x58
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	1c59      	adds	r1, r3, #1
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4403      	add	r3, r0
 80033d8:	3358      	adds	r3, #88	; 0x58
 80033da:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	335d      	adds	r3, #93	; 0x5d
 80033ec:	2206      	movs	r2, #6
 80033ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 f808 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	461a      	mov	r2, r3
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	6093      	str	r3, [r2, #8]
}
 8003412:	e087      	b.n	8003524 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b10      	cmp	r3, #16
 8003428:	d17c      	bne.n	8003524 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	333f      	adds	r3, #63	; 0x3f
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d122      	bne.n	8003486 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	3358      	adds	r3, #88	; 0x58
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	0151      	lsls	r1, r2, #5
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	440a      	add	r2, r1
 800346a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f003 ffc6 	bl	8007410 <USB_HC_Halt>
 8003484:	e045      	b.n	8003512 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	333f      	adds	r3, #63	; 0x3f
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	333f      	adds	r3, #63	; 0x3f
 80034ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d12f      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	440b      	add	r3, r1
 80034c0:	3358      	adds	r3, #88	; 0x58
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d121      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	335d      	adds	r3, #93	; 0x5d
 80034de:	2203      	movs	r2, #3
 80034e0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	0151      	lsls	r1, r2, #5
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	440a      	add	r2, r1
 80034f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f003 ff7f 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	2310      	movs	r3, #16
 8003522:	6093      	str	r3, [r2, #8]
}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d119      	bne.n	8003590 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	461a      	mov	r2, r3
 800356a:	2304      	movs	r3, #4
 800356c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	0151      	lsls	r1, r2, #5
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	440a      	add	r2, r1
 8003584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800358e:	e33e      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d141      	bne.n	800362a <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b2:	461a      	mov	r2, r3
 80035b4:	2320      	movs	r3, #32
 80035b6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	333d      	adds	r3, #61	; 0x3d
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f040 831f 	bne.w	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	333d      	adds	r3, #61	; 0x3d
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	440b      	add	r3, r1
 80035f2:	335c      	adds	r3, #92	; 0x5c
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	0151      	lsls	r1, r2, #5
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	440a      	add	r2, r1
 800360e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f003 fef4 	bl	8007410 <USB_HC_Halt>
}
 8003628:	e2f1      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d13f      	bne.n	80036c0 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	335d      	adds	r3, #93	; 0x5d
 8003650:	2204      	movs	r2, #4
 8003652:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	333d      	adds	r3, #61	; 0x3d
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	3358      	adds	r3, #88	; 0x58
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	440a      	add	r2, r1
 8003692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 feb2 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	461a      	mov	r2, r3
 80036ba:	2340      	movs	r3, #64	; 0x40
 80036bc:	6093      	str	r3, [r2, #8]
}
 80036be:	e2a6      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d6:	d122      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	0151      	lsls	r1, r2, #5
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	440a      	add	r2, r1
 80036ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f2:	f043 0302 	orr.w	r3, r3, #2
 80036f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f003 fe84 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	461a      	mov	r2, r3
 8003716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800371a:	6093      	str	r3, [r2, #8]
}
 800371c:	e277      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d135      	bne.n	80037a0 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	440b      	add	r3, r1
 8003742:	3358      	adds	r3, #88	; 0x58
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	0151      	lsls	r1, r2, #5
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	440a      	add	r2, r1
 800375e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fe4c 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	461a      	mov	r2, r3
 8003786:	2301      	movs	r3, #1
 8003788:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	440b      	add	r3, r1
 8003798:	335d      	adds	r3, #93	; 0x5d
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
}
 800379e:	e236      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d12b      	bne.n	800380e <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c2:	461a      	mov	r2, r3
 80037c4:	2308      	movs	r3, #8
 80037c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	0151      	lsls	r1, r2, #5
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	440a      	add	r2, r1
 80037de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 fe0c 	bl	8007410 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	335d      	adds	r3, #93	; 0x5d
 8003808:	2205      	movs	r2, #5
 800380a:	701a      	strb	r2, [r3, #0]
}
 800380c:	e1ff      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4413      	add	r3, r2
 8003816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b10      	cmp	r3, #16
 8003822:	d155      	bne.n	80038d0 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	440b      	add	r3, r1
 8003832:	3358      	adds	r3, #88	; 0x58
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	335d      	adds	r3, #93	; 0x5d
 8003848:	2203      	movs	r2, #3
 800384a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	333d      	adds	r3, #61	; 0x3d
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d114      	bne.n	800388c <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	440b      	add	r3, r1
 8003870:	333c      	adds	r3, #60	; 0x3c
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	333d      	adds	r3, #61	; 0x3d
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	0151      	lsls	r1, r2, #5
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	440a      	add	r2, r1
 80038a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038a6:	f043 0302 	orr.w	r3, r3, #2
 80038aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f003 fdaa 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	461a      	mov	r2, r3
 80038ca:	2310      	movs	r3, #16
 80038cc:	6093      	str	r3, [r2, #8]
}
 80038ce:	e19e      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d12b      	bne.n	800393e <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f003 fd7d 	bl	8007410 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	335d      	adds	r3, #93	; 0x5d
 8003926:	2206      	movs	r2, #6
 8003928:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	461a      	mov	r2, r3
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	6093      	str	r3, [r2, #8]
}
 800393c:	e167      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003954:	d135      	bne.n	80039c2 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	440a      	add	r2, r1
 800396c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003970:	f043 0302 	orr.w	r3, r3, #2
 8003974:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fd45 	bl	8007410 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4413      	add	r3, r2
 800398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003992:	461a      	mov	r2, r3
 8003994:	2310      	movs	r3, #16
 8003996:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	461a      	mov	r2, r3
 80039a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	440b      	add	r3, r1
 80039ba:	335d      	adds	r3, #93	; 0x5d
 80039bc:	2208      	movs	r2, #8
 80039be:	701a      	strb	r2, [r3, #0]
}
 80039c0:	e125      	b.n	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	f040 811a 	bne.w	8003c0e <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f4:	f023 0302 	bic.w	r3, r3, #2
 80039f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	440b      	add	r3, r1
 8003a08:	335d      	adds	r3, #93	; 0x5d
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d137      	bne.n	8003a80 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	335c      	adds	r3, #92	; 0x5c
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	333f      	adds	r3, #63	; 0x3f
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d00b      	beq.n	8003a52 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	333f      	adds	r3, #63	; 0x3f
 8003a4a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	f040 80c5 	bne.w	8003bdc <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	3351      	adds	r3, #81	; 0x51
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	f083 0301 	eor.w	r3, r3, #1
 8003a68:	b2d8      	uxtb	r0, r3
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	3351      	adds	r3, #81	; 0x51
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e0ad      	b.n	8003bdc <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	335d      	adds	r3, #93	; 0x5d
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d10a      	bne.n	8003aac <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	335c      	adds	r3, #92	; 0x5c
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e097      	b.n	8003bdc <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	335d      	adds	r3, #93	; 0x5d
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d10a      	bne.n	8003ad8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	335c      	adds	r3, #92	; 0x5c
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e081      	b.n	8003bdc <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	335d      	adds	r3, #93	; 0x5d
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d10a      	bne.n	8003b04 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	335c      	adds	r3, #92	; 0x5c
 8003afe:	2205      	movs	r2, #5
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e06b      	b.n	8003bdc <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	440b      	add	r3, r1
 8003b12:	335d      	adds	r3, #93	; 0x5d
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d00a      	beq.n	8003b30 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	335d      	adds	r3, #93	; 0x5d
 8003b2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d155      	bne.n	8003bdc <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3358      	adds	r3, #88	; 0x58
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	1c59      	adds	r1, r3, #1
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4403      	add	r3, r0
 8003b52:	3358      	adds	r3, #88	; 0x58
 8003b54:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	440b      	add	r3, r1
 8003b64:	3358      	adds	r3, #88	; 0x58
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d914      	bls.n	8003b96 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	3358      	adds	r3, #88	; 0x58
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	335c      	adds	r3, #92	; 0x5c
 8003b90:	2204      	movs	r2, #4
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e009      	b.n	8003baa <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	335c      	adds	r3, #92	; 0x5c
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bc0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bc8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be8:	461a      	mov	r2, r3
 8003bea:	2302      	movs	r3, #2
 8003bec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	b2d8      	uxtb	r0, r3
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	440b      	add	r3, r1
 8003c00:	335c      	adds	r3, #92	; 0x5c
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4601      	mov	r1, r0
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff f84c 	bl	8002ca6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	0c5b      	lsrs	r3, r3, #17
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c4c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d003      	beq.n	8003c5c <HCD_RXQLVL_IRQHandler+0x44>
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	f000 8082 	beq.w	8003d5e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c5a:	e083      	b.n	8003d64 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d07f      	beq.n	8003d62 <HCD_RXQLVL_IRQHandler+0x14a>
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	440b      	add	r3, r1
 8003c70:	3344      	adds	r3, #68	; 0x44
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d074      	beq.n	8003d62 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	3344      	adds	r3, #68	; 0x44
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	b292      	uxth	r2, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	f003 f9fe 	bl	8007094 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3344      	adds	r3, #68	; 0x44
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	18d1      	adds	r1, r2, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4403      	add	r3, r0
 8003cbc:	3344      	adds	r3, #68	; 0x44
 8003cbe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	440b      	add	r3, r1
 8003cce:	334c      	adds	r3, #76	; 0x4c
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	18d1      	adds	r1, r2, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4403      	add	r3, r0
 8003ce4:	334c      	adds	r3, #76	; 0x4c
 8003ce6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <HCD_RXQLVL_IRQHandler+0x154>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d031      	beq.n	8003d62 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d14:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d1c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3350      	adds	r3, #80	; 0x50
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	f083 0301 	eor.w	r3, r3, #1
 8003d46:	b2d8      	uxtb	r0, r3
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	3350      	adds	r3, #80	; 0x50
 8003d58:	4602      	mov	r2, r0
 8003d5a:	701a      	strb	r2, [r3, #0]
      break;
 8003d5c:	e001      	b.n	8003d62 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003d62:	bf00      	nop
  }
}
 8003d64:	bf00      	nop
 8003d66:	3728      	adds	r7, #40	; 0x28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	1ff80000 	.word	0x1ff80000

08003d70 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d9c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d10b      	bne.n	8003dc0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe ff4f 	bl	8002c56 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d132      	bne.n	8003e30 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f043 0308 	orr.w	r3, r3, #8
 8003dd0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d126      	bne.n	8003e2a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d113      	bne.n	8003e0c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003dea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dee:	d106      	bne.n	8003dfe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 fa86 	bl	8007308 <USB_InitFSLSPClkSel>
 8003dfc:	e011      	b.n	8003e22 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 fa7f 	bl	8007308 <USB_InitFSLSPClkSel>
 8003e0a:	e00a      	b.n	8003e22 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d106      	bne.n	8003e22 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e20:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe ff2b 	bl	8002c7e <HAL_HCD_PortEnabled_Callback>
 8003e28:	e002      	b.n	8003e30 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fe ff31 	bl	8002c92 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d103      	bne.n	8003e42 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f043 0320 	orr.w	r3, r3, #32
 8003e40:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6013      	str	r3, [r2, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e11f      	b.n	80040aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fd f816 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2224      	movs	r2, #36	; 0x24
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f001 f922 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4a7b      	ldr	r2, [pc, #492]	; (80040b4 <HAL_I2C_Init+0x25c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d807      	bhi.n	8003edc <HAL_I2C_Init+0x84>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a7a      	ldr	r2, [pc, #488]	; (80040b8 <HAL_I2C_Init+0x260>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bf94      	ite	ls
 8003ed4:	2301      	movls	r3, #1
 8003ed6:	2300      	movhi	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e006      	b.n	8003eea <HAL_I2C_Init+0x92>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a77      	ldr	r2, [pc, #476]	; (80040bc <HAL_I2C_Init+0x264>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	bf94      	ite	ls
 8003ee4:	2301      	movls	r3, #1
 8003ee6:	2300      	movhi	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0db      	b.n	80040aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a72      	ldr	r2, [pc, #456]	; (80040c0 <HAL_I2C_Init+0x268>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	0c9b      	lsrs	r3, r3, #18
 8003efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a64      	ldr	r2, [pc, #400]	; (80040b4 <HAL_I2C_Init+0x25c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d802      	bhi.n	8003f2c <HAL_I2C_Init+0xd4>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	e009      	b.n	8003f40 <HAL_I2C_Init+0xe8>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	4a63      	ldr	r2, [pc, #396]	; (80040c4 <HAL_I2C_Init+0x26c>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	3301      	adds	r3, #1
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4956      	ldr	r1, [pc, #344]	; (80040b4 <HAL_I2C_Init+0x25c>)
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	d80d      	bhi.n	8003f7c <HAL_I2C_Init+0x124>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1e59      	subs	r1, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	bf38      	it	cc
 8003f78:	2304      	movcc	r3, #4
 8003f7a:	e04f      	b.n	800401c <HAL_I2C_Init+0x1c4>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d111      	bne.n	8003fa8 <HAL_I2C_Init+0x150>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1e58      	subs	r0, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	440b      	add	r3, r1
 8003f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f96:	3301      	adds	r3, #1
 8003f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e012      	b.n	8003fce <HAL_I2C_Init+0x176>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1e58      	subs	r0, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6859      	ldr	r1, [r3, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	0099      	lsls	r1, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Init+0x17e>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e022      	b.n	800401c <HAL_I2C_Init+0x1c4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10e      	bne.n	8003ffc <HAL_I2C_Init+0x1a4>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1e58      	subs	r0, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	440b      	add	r3, r1
 8003fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffa:	e00f      	b.n	800401c <HAL_I2C_Init+0x1c4>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1e58      	subs	r0, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	0099      	lsls	r1, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004012:	3301      	adds	r3, #1
 8004014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	6809      	ldr	r1, [r1, #0]
 8004020:	4313      	orrs	r3, r2
 8004022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800404a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6911      	ldr	r1, [r2, #16]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68d2      	ldr	r2, [r2, #12]
 8004056:	4311      	orrs	r1, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	430b      	orrs	r3, r1
 800405e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	000186a0 	.word	0x000186a0
 80040b8:	001e847f 	.word	0x001e847f
 80040bc:	003d08ff 	.word	0x003d08ff
 80040c0:	431bde83 	.word	0x431bde83
 80040c4:	10624dd3 	.word	0x10624dd3

080040c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d129      	bne.n	8004132 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2224      	movs	r2, #36	; 0x24
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0210 	bic.w	r2, r2, #16
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b20      	cmp	r3, #32
 8004158:	d12a      	bne.n	80041b0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2224      	movs	r2, #36	; 0x24
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800417a:	89fb      	ldrh	r3, [r7, #14]
 800417c:	f023 030f 	bic.w	r3, r3, #15
 8004180:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	b29a      	uxth	r2, r3
 8004186:	89fb      	ldrh	r3, [r7, #14]
 8004188:	4313      	orrs	r3, r2
 800418a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	89fa      	ldrh	r2, [r7, #14]
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0bf      	b.n	8004352 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fc ff4c 	bl	8001084 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004202:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004218:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6899      	ldr	r1, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_LTDC_Init+0x19c>)
 8004234:	400b      	ands	r3, r1
 8004236:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68d9      	ldr	r1, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b3e      	ldr	r3, [pc, #248]	; (800435c <HAL_LTDC_Init+0x19c>)
 8004262:	400b      	ands	r3, r1
 8004264:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68d9      	ldr	r1, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6919      	ldr	r1, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b33      	ldr	r3, [pc, #204]	; (800435c <HAL_LTDC_Init+0x19c>)
 8004290:	400b      	ands	r3, r1
 8004292:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6919      	ldr	r1, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6959      	ldr	r1, [r3, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_LTDC_Init+0x19c>)
 80042be:	400b      	ands	r3, r1
 80042c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6959      	ldr	r1, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0206 	orr.w	r2, r2, #6
 800432e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	f000f800 	.word	0xf000f800

08004360 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d023      	beq.n	80043ca <HAL_LTDC_IRQHandler+0x6a>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01e      	beq.n	80043ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0204 	bic.w	r2, r2, #4
 800439a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2204      	movs	r2, #4
 80043a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043aa:	f043 0201 	orr.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2204      	movs	r2, #4
 80043b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f86f 	bl	80044a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d023      	beq.n	800441c <HAL_LTDC_IRQHandler+0xbc>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01e      	beq.n	800441c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0202 	bic.w	r2, r2, #2
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2202      	movs	r2, #2
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043fc:	f043 0202 	orr.w	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2204      	movs	r2, #4
 800440a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f846 	bl	80044a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01b      	beq.n	800445e <HAL_LTDC_IRQHandler+0xfe>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d016      	beq.n	800445e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2201      	movs	r2, #1
 8004446:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f82f 	bl	80044bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_LTDC_IRQHandler+0x140>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0208 	bic.w	r2, r2, #8
 8004480:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2208      	movs	r2, #8
 8004488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f818 	bl	80044d0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044e4:	b5b0      	push	{r4, r5, r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_LTDC_ConfigLayer+0x1a>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e02c      	b.n	8004558 <HAL_LTDC_ConfigLayer+0x74>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2134      	movs	r1, #52	; 0x34
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800452c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f811 	bl	8004560 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bdb0      	pop	{r4, r5, r7, pc}

08004560 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457c:	4413      	add	r3, r2
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	01db      	lsls	r3, r3, #7
 800458c:	4413      	add	r3, r2
 800458e:	3384      	adds	r3, #132	; 0x84
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	4611      	mov	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	01d2      	lsls	r2, r2, #7
 800459c:	440a      	add	r2, r1
 800459e:	3284      	adds	r2, #132	; 0x84
 80045a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80045a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b6:	4413      	add	r3, r2
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	440b      	add	r3, r1
 80045c6:	3384      	adds	r3, #132	; 0x84
 80045c8:	4619      	mov	r1, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045de:	4413      	add	r3, r2
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	01db      	lsls	r3, r3, #7
 80045ee:	4413      	add	r3, r2
 80045f0:	3384      	adds	r3, #132	; 0x84
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	4611      	mov	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	01d2      	lsls	r2, r2, #7
 80045fe:	440a      	add	r2, r1
 8004600:	3284      	adds	r2, #132	; 0x84
 8004602:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004606:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004616:	4413      	add	r3, r2
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4619      	mov	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	01db      	lsls	r3, r3, #7
 8004624:	440b      	add	r3, r1
 8004626:	3384      	adds	r3, #132	; 0x84
 8004628:	4619      	mov	r1, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	01db      	lsls	r3, r3, #7
 800463a:	4413      	add	r3, r2
 800463c:	3384      	adds	r3, #132	; 0x84
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	4611      	mov	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	01d2      	lsls	r2, r2, #7
 800464a:	440a      	add	r2, r1
 800464c:	3284      	adds	r2, #132	; 0x84
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	01db      	lsls	r3, r3, #7
 800465e:	4413      	add	r3, r2
 8004660:	3384      	adds	r3, #132	; 0x84
 8004662:	461a      	mov	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	061b      	lsls	r3, r3, #24
 8004684:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	01db      	lsls	r3, r3, #7
 8004690:	4413      	add	r3, r2
 8004692:	3384      	adds	r3, #132	; 0x84
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	01db      	lsls	r3, r3, #7
 80046a0:	4413      	add	r3, r2
 80046a2:	3384      	adds	r3, #132	; 0x84
 80046a4:	461a      	mov	r2, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046b0:	461a      	mov	r2, r3
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	01db      	lsls	r3, r3, #7
 80046c4:	440b      	add	r3, r1
 80046c6:	3384      	adds	r3, #132	; 0x84
 80046c8:	4619      	mov	r1, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	01db      	lsls	r3, r3, #7
 80046da:	4413      	add	r3, r2
 80046dc:	3384      	adds	r3, #132	; 0x84
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	4611      	mov	r1, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	01d2      	lsls	r2, r2, #7
 80046ea:	440a      	add	r2, r1
 80046ec:	3284      	adds	r2, #132	; 0x84
 80046ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	01db      	lsls	r3, r3, #7
 80046fe:	4413      	add	r3, r2
 8004700:	3384      	adds	r3, #132	; 0x84
 8004702:	461a      	mov	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	01db      	lsls	r3, r3, #7
 8004714:	4413      	add	r3, r2
 8004716:	3384      	adds	r3, #132	; 0x84
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	4611      	mov	r1, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	01d2      	lsls	r2, r2, #7
 8004724:	440a      	add	r2, r1
 8004726:	3284      	adds	r2, #132	; 0x84
 8004728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800472c:	f023 0307 	bic.w	r3, r3, #7
 8004730:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	4608      	mov	r0, r1
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	01c9      	lsls	r1, r1, #7
 8004744:	4401      	add	r1, r0
 8004746:	3184      	adds	r1, #132	; 0x84
 8004748:	4313      	orrs	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4413      	add	r3, r2
 8004758:	3384      	adds	r3, #132	; 0x84
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	01db      	lsls	r3, r3, #7
 8004766:	4413      	add	r3, r2
 8004768:	3384      	adds	r3, #132	; 0x84
 800476a:	461a      	mov	r2, r3
 800476c:	2300      	movs	r3, #0
 800476e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	01db      	lsls	r3, r3, #7
 800477a:	4413      	add	r3, r2
 800477c:	3384      	adds	r3, #132	; 0x84
 800477e:	461a      	mov	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800478e:	2304      	movs	r3, #4
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e01b      	b.n	80047cc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800479c:	2303      	movs	r3, #3
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	e014      	b.n	80047cc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d00b      	beq.n	80047c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d007      	beq.n	80047c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d003      	beq.n	80047c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047be:	2b07      	cmp	r3, #7
 80047c0:	d102      	bne.n	80047c8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80047c2:	2302      	movs	r3, #2
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	e001      	b.n	80047cc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80047c8:	2301      	movs	r3, #1
 80047ca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	01db      	lsls	r3, r3, #7
 80047d6:	4413      	add	r3, r2
 80047d8:	3384      	adds	r3, #132	; 0x84
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	4611      	mov	r1, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	01d2      	lsls	r2, r2, #7
 80047e6:	440a      	add	r2, r1
 80047e8:	3284      	adds	r2, #132	; 0x84
 80047ea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80047ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	041a      	lsls	r2, r3, #16
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1acb      	subs	r3, r1, r3
 8004806:	69f9      	ldr	r1, [r7, #28]
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	3303      	adds	r3, #3
 800480e:	68f9      	ldr	r1, [r7, #12]
 8004810:	6809      	ldr	r1, [r1, #0]
 8004812:	4608      	mov	r0, r1
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	01c9      	lsls	r1, r1, #7
 8004818:	4401      	add	r1, r0
 800481a:	3184      	adds	r1, #132	; 0x84
 800481c:	4313      	orrs	r3, r2
 800481e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	01db      	lsls	r3, r3, #7
 800482a:	4413      	add	r3, r2
 800482c:	3384      	adds	r3, #132	; 0x84
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	4611      	mov	r1, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	01d2      	lsls	r2, r2, #7
 800483a:	440a      	add	r2, r1
 800483c:	3284      	adds	r2, #132	; 0x84
 800483e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	01db      	lsls	r3, r3, #7
 8004852:	4413      	add	r3, r2
 8004854:	3384      	adds	r3, #132	; 0x84
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	01db      	lsls	r3, r3, #7
 8004868:	4413      	add	r3, r2
 800486a:	3384      	adds	r3, #132	; 0x84
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	4611      	mov	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	01d2      	lsls	r2, r2, #7
 8004878:	440a      	add	r2, r1
 800487a:	3284      	adds	r2, #132	; 0x84
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6013      	str	r3, [r2, #0]
}
 8004882:	bf00      	nop
 8004884:	3724      	adds	r7, #36	; 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e25b      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d075      	beq.n	800499a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ae:	4ba3      	ldr	r3, [pc, #652]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d00c      	beq.n	80048d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ba:	4ba0      	ldr	r3, [pc, #640]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d112      	bne.n	80048ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c6:	4b9d      	ldr	r3, [pc, #628]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d2:	d10b      	bne.n	80048ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d4:	4b99      	ldr	r3, [pc, #612]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d05b      	beq.n	8004998 <HAL_RCC_OscConfig+0x108>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d157      	bne.n	8004998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e236      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f4:	d106      	bne.n	8004904 <HAL_RCC_OscConfig+0x74>
 80048f6:	4b91      	ldr	r3, [pc, #580]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a90      	ldr	r2, [pc, #576]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e01d      	b.n	8004940 <HAL_RCC_OscConfig+0xb0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x98>
 800490e:	4b8b      	ldr	r3, [pc, #556]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a8a      	ldr	r2, [pc, #552]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b88      	ldr	r3, [pc, #544]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a87      	ldr	r2, [pc, #540]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0xb0>
 8004928:	4b84      	ldr	r3, [pc, #528]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a83      	ldr	r2, [pc, #524]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 800492e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4b81      	ldr	r3, [pc, #516]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a80      	ldr	r2, [pc, #512]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 800493a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d013      	beq.n	8004970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fd fada 	bl	8001f00 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004950:	f7fd fad6 	bl	8001f00 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e1fb      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0xc0>
 800496e:	e014      	b.n	800499a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004970:	f7fd fac6 	bl	8001f00 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004978:	f7fd fac2 	bl	8001f00 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e1e7      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498a:	4b6c      	ldr	r3, [pc, #432]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0xe8>
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d063      	beq.n	8004a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049a6:	4b65      	ldr	r3, [pc, #404]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049b2:	4b62      	ldr	r3, [pc, #392]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d11c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049be:	4b5f      	ldr	r3, [pc, #380]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d116      	bne.n	80049f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ca:	4b5c      	ldr	r3, [pc, #368]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_RCC_OscConfig+0x152>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d001      	beq.n	80049e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e1bb      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e2:	4b56      	ldr	r3, [pc, #344]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	4952      	ldr	r1, [pc, #328]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	e03a      	b.n	8004a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d020      	beq.n	8004a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a00:	4b4f      	ldr	r3, [pc, #316]	; (8004b40 <HAL_RCC_OscConfig+0x2b0>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fd fa7b 	bl	8001f00 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0e:	f7fd fa77 	bl	8001f00 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e19c      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a20:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2c:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4940      	ldr	r1, [pc, #256]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]
 8004a40:	e015      	b.n	8004a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a42:	4b3f      	ldr	r3, [pc, #252]	; (8004b40 <HAL_RCC_OscConfig+0x2b0>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fd fa5a 	bl	8001f00 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a50:	f7fd fa56 	bl	8001f00 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e17b      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a62:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d030      	beq.n	8004adc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d016      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a82:	4b30      	ldr	r3, [pc, #192]	; (8004b44 <HAL_RCC_OscConfig+0x2b4>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fd fa3a 	bl	8001f00 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a90:	f7fd fa36 	bl	8001f00 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e15b      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa2:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x200>
 8004aae:	e015      	b.n	8004adc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab0:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCC_OscConfig+0x2b4>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab6:	f7fd fa23 	bl	8001f00 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004abe:	f7fd fa1f 	bl	8001f00 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e144      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a0 	beq.w	8004c2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10f      	bne.n	8004b1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6413      	str	r3, [r2, #64]	; 0x40
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCC_OscConfig+0x2b8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d121      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_RCC_OscConfig+0x2b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a07      	ldr	r2, [pc, #28]	; (8004b48 <HAL_RCC_OscConfig+0x2b8>)
 8004b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b32:	f7fd f9e5 	bl	8001f00 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b38:	e011      	b.n	8004b5e <HAL_RCC_OscConfig+0x2ce>
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	42470000 	.word	0x42470000
 8004b44:	42470e80 	.word	0x42470e80
 8004b48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4c:	f7fd f9d8 	bl	8001f00 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e0fd      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5e:	4b81      	ldr	r3, [pc, #516]	; (8004d64 <HAL_RCC_OscConfig+0x4d4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d106      	bne.n	8004b80 <HAL_RCC_OscConfig+0x2f0>
 8004b72:	4b7d      	ldr	r3, [pc, #500]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a7c      	ldr	r2, [pc, #496]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7e:	e01c      	b.n	8004bba <HAL_RCC_OscConfig+0x32a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x312>
 8004b88:	4b77      	ldr	r3, [pc, #476]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a76      	ldr	r2, [pc, #472]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
 8004b94:	4b74      	ldr	r3, [pc, #464]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a73      	ldr	r2, [pc, #460]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba0:	e00b      	b.n	8004bba <HAL_RCC_OscConfig+0x32a>
 8004ba2:	4b71      	ldr	r3, [pc, #452]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a70      	ldr	r2, [pc, #448]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
 8004bae:	4b6e      	ldr	r3, [pc, #440]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a6d      	ldr	r2, [pc, #436]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fd f99d 	bl	8001f00 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fd f999 	bl	8001f00 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0bc      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ee      	beq.n	8004bca <HAL_RCC_OscConfig+0x33a>
 8004bec:	e014      	b.n	8004c18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fd f987 	bl	8001f00 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fd f983 	bl	8001f00 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0a6      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0c:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1e:	4b52      	ldr	r3, [pc, #328]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	4a51      	ldr	r2, [pc, #324]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8092 	beq.w	8004d58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c34:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d05c      	beq.n	8004cfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d141      	bne.n	8004ccc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b48      	ldr	r3, [pc, #288]	; (8004d6c <HAL_RCC_OscConfig+0x4dc>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fd f957 	bl	8001f00 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c56:	f7fd f953 	bl	8001f00 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e078      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c68:	4b3f      	ldr	r3, [pc, #252]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	019b      	lsls	r3, r3, #6
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	061b      	lsls	r3, r3, #24
 8004c98:	4933      	ldr	r1, [pc, #204]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c9e:	4b33      	ldr	r3, [pc, #204]	; (8004d6c <HAL_RCC_OscConfig+0x4dc>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fd f92c 	bl	8001f00 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fd f928 	bl	8001f00 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e04d      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbe:	4b2a      	ldr	r3, [pc, #168]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x41c>
 8004cca:	e045      	b.n	8004d58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ccc:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <HAL_RCC_OscConfig+0x4dc>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd2:	f7fd f915 	bl	8001f00 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fd f911 	bl	8001f00 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e036      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cec:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCC_OscConfig+0x44a>
 8004cf8:	e02e      	b.n	8004d58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e029      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_RCC_OscConfig+0x4d8>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d11c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d115      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10d      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d106      	bne.n	8004d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40007000 	.word	0x40007000
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470060 	.word	0x42470060

08004d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0cc      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d90c      	bls.n	8004dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b63      	ldr	r3, [pc, #396]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0b8      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc4:	4b59      	ldr	r3, [pc, #356]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a58      	ldr	r2, [pc, #352]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ddc:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a52      	ldr	r2, [pc, #328]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de8:	4b50      	ldr	r3, [pc, #320]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	494d      	ldr	r1, [pc, #308]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d044      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d119      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e07f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b3f      	ldr	r3, [pc, #252]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e06f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e067      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4934      	ldr	r1, [pc, #208]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e60:	f7fd f84e 	bl	8001f00 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fd f84a 	bl	8001f00 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 020c 	and.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1eb      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e90:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d20c      	bcs.n	8004eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e032      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec4:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4916      	ldr	r1, [pc, #88]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee2:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	490e      	ldr	r1, [pc, #56]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ef6:	f000 f821 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004efa:	4601      	mov	r1, r0
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	5cd3      	ldrb	r3, [r2, r3]
 8004f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f0e:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f12:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fc fc30 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40023c00 	.word	0x40023c00
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	0800a648 	.word	0x0800a648
 8004f34:	20000020 	.word	0x20000020
 8004f38:	20000024 	.word	0x20000024

08004f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f52:	4b63      	ldr	r3, [pc, #396]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d007      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0x32>
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d008      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0x38>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f040 80b4 	bne.w	80050d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f68:	4b5e      	ldr	r3, [pc, #376]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f6a:	60bb      	str	r3, [r7, #8]
       break;
 8004f6c:	e0b3      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f6e:	4b5e      	ldr	r3, [pc, #376]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f70:	60bb      	str	r3, [r7, #8]
      break;
 8004f72:	e0b0      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f74:	4b5a      	ldr	r3, [pc, #360]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f7e:	4b58      	ldr	r3, [pc, #352]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d04a      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8a:	4b55      	ldr	r3, [pc, #340]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	f04f 0400 	mov.w	r4, #0
 8004f94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	ea03 0501 	and.w	r5, r3, r1
 8004fa0:	ea04 0602 	and.w	r6, r4, r2
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	f04f 0400 	mov.w	r4, #0
 8004fb0:	0154      	lsls	r4, r2, #5
 8004fb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fb6:	014b      	lsls	r3, r1, #5
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4622      	mov	r2, r4
 8004fbc:	1b49      	subs	r1, r1, r5
 8004fbe:	eb62 0206 	sbc.w	r2, r2, r6
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	f04f 0400 	mov.w	r4, #0
 8004fca:	0194      	lsls	r4, r2, #6
 8004fcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fd0:	018b      	lsls	r3, r1, #6
 8004fd2:	1a5b      	subs	r3, r3, r1
 8004fd4:	eb64 0402 	sbc.w	r4, r4, r2
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	00e2      	lsls	r2, r4, #3
 8004fe2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fe6:	00d9      	lsls	r1, r3, #3
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4614      	mov	r4, r2
 8004fec:	195b      	adds	r3, r3, r5
 8004fee:	eb44 0406 	adc.w	r4, r4, r6
 8004ff2:	f04f 0100 	mov.w	r1, #0
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	0262      	lsls	r2, r4, #9
 8004ffc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005000:	0259      	lsls	r1, r3, #9
 8005002:	460b      	mov	r3, r1
 8005004:	4614      	mov	r4, r2
 8005006:	4618      	mov	r0, r3
 8005008:	4621      	mov	r1, r4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f04f 0400 	mov.w	r4, #0
 8005010:	461a      	mov	r2, r3
 8005012:	4623      	mov	r3, r4
 8005014:	f7fb f93c 	bl	8000290 <__aeabi_uldivmod>
 8005018:	4603      	mov	r3, r0
 800501a:	460c      	mov	r4, r1
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e049      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005020:	4b2f      	ldr	r3, [pc, #188]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	f04f 0400 	mov.w	r4, #0
 800502a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	ea03 0501 	and.w	r5, r3, r1
 8005036:	ea04 0602 	and.w	r6, r4, r2
 800503a:	4629      	mov	r1, r5
 800503c:	4632      	mov	r2, r6
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	0154      	lsls	r4, r2, #5
 8005048:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800504c:	014b      	lsls	r3, r1, #5
 800504e:	4619      	mov	r1, r3
 8005050:	4622      	mov	r2, r4
 8005052:	1b49      	subs	r1, r1, r5
 8005054:	eb62 0206 	sbc.w	r2, r2, r6
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	f04f 0400 	mov.w	r4, #0
 8005060:	0194      	lsls	r4, r2, #6
 8005062:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005066:	018b      	lsls	r3, r1, #6
 8005068:	1a5b      	subs	r3, r3, r1
 800506a:	eb64 0402 	sbc.w	r4, r4, r2
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	00e2      	lsls	r2, r4, #3
 8005078:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800507c:	00d9      	lsls	r1, r3, #3
 800507e:	460b      	mov	r3, r1
 8005080:	4614      	mov	r4, r2
 8005082:	195b      	adds	r3, r3, r5
 8005084:	eb44 0406 	adc.w	r4, r4, r6
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	02a2      	lsls	r2, r4, #10
 8005092:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005096:	0299      	lsls	r1, r3, #10
 8005098:	460b      	mov	r3, r1
 800509a:	4614      	mov	r4, r2
 800509c:	4618      	mov	r0, r3
 800509e:	4621      	mov	r1, r4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f7fb f8f1 	bl	8000290 <__aeabi_uldivmod>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	3301      	adds	r3, #1
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	60bb      	str	r3, [r7, #8]
      break;
 80050ce:	e002      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050d2:	60bb      	str	r3, [r7, #8]
      break;
 80050d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050d6:	68bb      	ldr	r3, [r7, #8]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e0:	40023800 	.word	0x40023800
 80050e4:	00f42400 	.word	0x00f42400
 80050e8:	007a1200 	.word	0x007a1200

080050ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f0:	4b03      	ldr	r3, [pc, #12]	; (8005100 <HAL_RCC_GetHCLKFreq+0x14>)
 80050f2:	681b      	ldr	r3, [r3, #0]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000020 	.word	0x20000020

08005104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005108:	f7ff fff0 	bl	80050ec <HAL_RCC_GetHCLKFreq>
 800510c:	4601      	mov	r1, r0
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	0a9b      	lsrs	r3, r3, #10
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4a03      	ldr	r2, [pc, #12]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800511a:	5cd3      	ldrb	r3, [r2, r3]
 800511c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40023800 	.word	0x40023800
 8005128:	0800a658 	.word	0x0800a658

0800512c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005130:	f7ff ffdc 	bl	80050ec <HAL_RCC_GetHCLKFreq>
 8005134:	4601      	mov	r1, r0
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0b5b      	lsrs	r3, r3, #13
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4a03      	ldr	r2, [pc, #12]	; (8005150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40023800 	.word	0x40023800
 8005150:	0800a658 	.word	0x0800a658

08005154 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	220f      	movs	r2, #15
 8005162:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005164:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_GetClockConfig+0x5c>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0203 	and.w	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <HAL_RCC_GetClockConfig+0x5c>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <HAL_RCC_GetClockConfig+0x5c>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCC_GetClockConfig+0x5c>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	08db      	lsrs	r3, r3, #3
 800518e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <HAL_RCC_GetClockConfig+0x60>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 020f 	and.w	r2, r3, #15
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40023c00 	.word	0x40023c00

080051b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d075      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051ec:	4bad      	ldr	r3, [pc, #692]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051f2:	f7fc fe85 	bl	8001f00 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f8:	e008      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051fa:	f7fc fe81 	bl	8001f00 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e18b      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800520c:	4ba6      	ldr	r3, [pc, #664]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f0      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	019a      	lsls	r2, r3, #6
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	071b      	lsls	r3, r3, #28
 8005230:	499d      	ldr	r1, [pc, #628]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01f      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005244:	4b98      	ldr	r3, [pc, #608]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524a:	0f1b      	lsrs	r3, r3, #28
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	019a      	lsls	r2, r3, #6
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	061b      	lsls	r3, r3, #24
 800525e:	431a      	orrs	r2, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	071b      	lsls	r3, r3, #28
 8005264:	4990      	ldr	r1, [pc, #576]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800526c:	4b8e      	ldr	r3, [pc, #568]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800526e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005272:	f023 021f 	bic.w	r2, r3, #31
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	3b01      	subs	r3, #1
 800527c:	498a      	ldr	r1, [pc, #552]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	019a      	lsls	r2, r3, #6
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	071b      	lsls	r3, r3, #28
 80052a4:	4980      	ldr	r1, [pc, #512]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052ac:	4b7d      	ldr	r3, [pc, #500]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052b2:	f7fc fe25 	bl	8001f00 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052ba:	f7fc fe21 	bl	8001f00 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e12b      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052cc:	4b76      	ldr	r3, [pc, #472]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d079      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052f0:	4b6e      	ldr	r3, [pc, #440]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052f6:	f7fc fe03 	bl	8001f00 <HAL_GetTick>
 80052fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052fc:	e008      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052fe:	f7fc fdff 	bl	8001f00 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e109      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005310:	4b65      	ldr	r3, [pc, #404]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531c:	d0ef      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d020      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800532a:	4b5f      	ldr	r3, [pc, #380]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	0f1b      	lsrs	r3, r3, #28
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	019a      	lsls	r2, r3, #6
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	061b      	lsls	r3, r3, #24
 8005344:	431a      	orrs	r2, r3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	4957      	ldr	r1, [pc, #348]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005352:	4b55      	ldr	r3, [pc, #340]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005358:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	3b01      	subs	r3, #1
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	4950      	ldr	r1, [pc, #320]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01e      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005378:	4b4b      	ldr	r3, [pc, #300]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	0e1b      	lsrs	r3, r3, #24
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	019a      	lsls	r2, r3, #6
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	061b      	lsls	r3, r3, #24
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	071b      	lsls	r3, r3, #28
 8005398:	4943      	ldr	r1, [pc, #268]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053a0:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	493e      	ldr	r1, [pc, #248]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053b6:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053bc:	f7fc fda0 	bl	8001f00 <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053c4:	f7fc fd9c 	bl	8001f00 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e0a6      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053d6:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e2:	d1ef      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 808d 	beq.w	800550c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	4a2b      	ldr	r2, [pc, #172]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	6413      	str	r3, [r2, #64]	; 0x40
 8005402:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800540e:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a27      	ldr	r2, [pc, #156]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005418:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800541a:	f7fc fd71 	bl	8001f00 <HAL_GetTick>
 800541e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005422:	f7fc fd6d 	bl	8001f00 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e077      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005434:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005440:	4b19      	ldr	r3, [pc, #100]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005448:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d039      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d032      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800545e:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005466:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005468:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005474:	4a0c      	ldr	r2, [pc, #48]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b01      	cmp	r3, #1
 8005484:	d11e      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005486:	f7fc fd3b 	bl	8001f00 <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548c:	e014      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800548e:	f7fc fd37 	bl	8001f00 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f241 3288 	movw	r2, #5000	; 0x1388
 800549c:	4293      	cmp	r3, r2
 800549e:	d90b      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e03f      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80054a4:	42470068 	.word	0x42470068
 80054a8:	40023800 	.word	0x40023800
 80054ac:	42470070 	.word	0x42470070
 80054b0:	40007000 	.word	0x40007000
 80054b4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b8:	4b1c      	ldr	r3, [pc, #112]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0e4      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d0:	d10d      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x336>
 80054d2:	4b16      	ldr	r3, [pc, #88]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e6:	4911      	ldr	r1, [pc, #68]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	608b      	str	r3, [r1, #8]
 80054ec:	e005      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x342>
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4a0e      	ldr	r2, [pc, #56]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054f8:	6093      	str	r3, [r2, #8]
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005506:	4909      	ldr	r1, [pc, #36]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005508:	4313      	orrs	r3, r2
 800550a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800551e:	4b04      	ldr	r3, [pc, #16]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005520:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40023800 	.word	0x40023800
 8005530:	424711e0 	.word	0x424711e0

08005534 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e025      	b.n	8005594 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fb faf9 	bl	8000b54 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f001 fbb7 	bl	8006ce8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	461a      	mov	r2, r3
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	f001 fc22 	bl	8006dce <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e056      	b.n	800565c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fc f863 	bl	8001694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	ea42 0103 	orr.w	r1, r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	0c1b      	lsrs	r3, r3, #16
 800562c:	f003 0104 	and.w	r1, r3, #4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69da      	ldr	r2, [r3, #28]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800564a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e01d      	b.n	80056b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fc fa98 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f000 fa14 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b06      	cmp	r3, #6
 80056e2:	d007      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b02      	cmp	r3, #2
 8005716:	d122      	bne.n	800575e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d11b      	bne.n	800575e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0202 	mvn.w	r2, #2
 800572e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f9a5 	bl	8005a94 <HAL_TIM_IC_CaptureCallback>
 800574a:	e005      	b.n	8005758 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f997 	bl	8005a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9a8 	bl	8005aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b04      	cmp	r3, #4
 800576a:	d122      	bne.n	80057b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d11b      	bne.n	80057b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0204 	mvn.w	r2, #4
 8005782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f97b 	bl	8005a94 <HAL_TIM_IC_CaptureCallback>
 800579e:	e005      	b.n	80057ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f96d 	bl	8005a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f97e 	bl	8005aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d122      	bne.n	8005806 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d11b      	bne.n	8005806 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f06f 0208 	mvn.w	r2, #8
 80057d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2204      	movs	r2, #4
 80057dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f951 	bl	8005a94 <HAL_TIM_IC_CaptureCallback>
 80057f2:	e005      	b.n	8005800 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f943 	bl	8005a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f954 	bl	8005aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b10      	cmp	r3, #16
 8005812:	d122      	bne.n	800585a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b10      	cmp	r3, #16
 8005820:	d11b      	bne.n	800585a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f06f 0210 	mvn.w	r2, #16
 800582a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2208      	movs	r2, #8
 8005830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f927 	bl	8005a94 <HAL_TIM_IC_CaptureCallback>
 8005846:	e005      	b.n	8005854 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f919 	bl	8005a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f92a 	bl	8005aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10e      	bne.n	8005886 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d107      	bne.n	8005886 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f06f 0201 	mvn.w	r2, #1
 800587e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fb feb7 	bl	80015f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	2b80      	cmp	r3, #128	; 0x80
 8005892:	d10e      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 facf 	bl	8005e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d10e      	bne.n	80058de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d107      	bne.n	80058de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8ef 	bl	8005abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d10e      	bne.n	800590a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d107      	bne.n	800590a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f06f 0220 	mvn.w	r2, #32
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fa99 	bl	8005e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_TIM_ConfigClockSource+0x18>
 8005926:	2302      	movs	r3, #2
 8005928:	e0a6      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x166>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005948:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005950:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d067      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x120>
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d80b      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x6c>
 8005966:	2b10      	cmp	r3, #16
 8005968:	d073      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x140>
 800596a:	2b10      	cmp	r3, #16
 800596c:	d802      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x62>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d06f      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005972:	e078      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005974:	2b20      	cmp	r3, #32
 8005976:	d06c      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x140>
 8005978:	2b30      	cmp	r3, #48	; 0x30
 800597a:	d06a      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800597c:	e073      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800597e:	2b70      	cmp	r3, #112	; 0x70
 8005980:	d00d      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x8c>
 8005982:	2b70      	cmp	r3, #112	; 0x70
 8005984:	d804      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x7e>
 8005986:	2b50      	cmp	r3, #80	; 0x50
 8005988:	d033      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0xe0>
 800598a:	2b60      	cmp	r3, #96	; 0x60
 800598c:	d041      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800598e:	e06a      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005994:	d066      	beq.n	8005a64 <HAL_TIM_ConfigClockSource+0x152>
 8005996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599a:	d017      	beq.n	80059cc <HAL_TIM_ConfigClockSource+0xba>
      break;
 800599c:	e063      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6899      	ldr	r1, [r3, #8]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f000 f9a9 	bl	8005d04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	609a      	str	r2, [r3, #8]
      break;
 80059ca:	e04c      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6899      	ldr	r1, [r3, #8]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f000 f992 	bl	8005d04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ee:	609a      	str	r2, [r3, #8]
      break;
 80059f0:	e039      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f000 f906 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2150      	movs	r1, #80	; 0x50
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f95f 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005a10:	e029      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6859      	ldr	r1, [r3, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f000 f925 	bl	8005c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2160      	movs	r1, #96	; 0x60
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f94f 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005a30:	e019      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6859      	ldr	r1, [r3, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f000 f8e6 	bl	8005c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2140      	movs	r1, #64	; 0x40
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 f93f 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005a50:	e009      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f000 f936 	bl	8005cce <TIM_ITRx_SetConfig>
      break;
 8005a62:	e000      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005a64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a40      	ldr	r2, [pc, #256]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d00f      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3d      	ldr	r2, [pc, #244]	; (8005be8 <TIM_Base_SetConfig+0x118>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a3c      	ldr	r2, [pc, #240]	; (8005bec <TIM_Base_SetConfig+0x11c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a3b      	ldr	r2, [pc, #236]	; (8005bf0 <TIM_Base_SetConfig+0x120>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3a      	ldr	r2, [pc, #232]	; (8005bf4 <TIM_Base_SetConfig+0x124>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2f      	ldr	r2, [pc, #188]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d02b      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b30:	d027      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2c      	ldr	r2, [pc, #176]	; (8005be8 <TIM_Base_SetConfig+0x118>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d023      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2b      	ldr	r2, [pc, #172]	; (8005bec <TIM_Base_SetConfig+0x11c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01f      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2a      	ldr	r2, [pc, #168]	; (8005bf0 <TIM_Base_SetConfig+0x120>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01b      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a29      	ldr	r2, [pc, #164]	; (8005bf4 <TIM_Base_SetConfig+0x124>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d017      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a28      	ldr	r2, [pc, #160]	; (8005bf8 <TIM_Base_SetConfig+0x128>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a27      	ldr	r2, [pc, #156]	; (8005bfc <TIM_Base_SetConfig+0x12c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00f      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a26      	ldr	r2, [pc, #152]	; (8005c00 <TIM_Base_SetConfig+0x130>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <TIM_Base_SetConfig+0x134>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <TIM_Base_SetConfig+0x138>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a23      	ldr	r2, [pc, #140]	; (8005c0c <TIM_Base_SetConfig+0x13c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d108      	bne.n	8005b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a0c      	ldr	r2, [pc, #48]	; (8005bf4 <TIM_Base_SetConfig+0x124>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d103      	bne.n	8005bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	615a      	str	r2, [r3, #20]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40010000 	.word	0x40010000
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40000800 	.word	0x40000800
 8005bf0:	40000c00 	.word	0x40000c00
 8005bf4:	40010400 	.word	0x40010400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800
 8005c04:	40001800 	.word	0x40001800
 8005c08:	40001c00 	.word	0x40001c00
 8005c0c:	40002000 	.word	0x40002000

08005c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f023 0201 	bic.w	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 030a 	bic.w	r3, r3, #10
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f023 0210 	bic.w	r2, r3, #16
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	031b      	lsls	r3, r3, #12
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005caa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f043 0307 	orr.w	r3, r3, #7
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	609a      	str	r2, [r3, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	021a      	lsls	r2, r3, #8
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	609a      	str	r2, [r3, #8]
}
 8005d38:	bf00      	nop
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e05a      	b.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da8:	d01d      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	; (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a17      	ldr	r2, [pc, #92]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10c      	bne.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40010400 	.word	0x40010400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40001800 	.word	0x40001800

08005e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e03f      	b.n	8005ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fb fefe 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2224      	movs	r2, #36	; 0x24
 8005e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fba1 	bl	80065f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b088      	sub	sp, #32
 8005f02:	af02      	add	r7, sp, #8
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	f040 8083 	bne.w	8006026 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_UART_Transmit+0x2e>
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e07b      	b.n	8006028 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Transmit+0x40>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e074      	b.n	8006028 <HAL_UART_Transmit+0x12a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2221      	movs	r2, #33	; 0x21
 8005f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f54:	f7fb ffd4 	bl	8001f00 <HAL_GetTick>
 8005f58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005f6e:	e042      	b.n	8005ff6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d122      	bne.n	8005fce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2180      	movs	r1, #128	; 0x80
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f9c0 	bl	8006318 <UART_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e042      	b.n	8006028 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	60bb      	str	r3, [r7, #8]
 8005fc4:	e017      	b.n	8005ff6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	e013      	b.n	8005ff6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2180      	movs	r1, #128	; 0x80
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f99d 	bl	8006318 <UART_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e01f      	b.n	8006028 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	60ba      	str	r2, [r7, #8]
 8005fee:	781a      	ldrb	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1b7      	bne.n	8005f70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2200      	movs	r2, #0
 8006008:	2140      	movs	r1, #64	; 0x40
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f984 	bl	8006318 <UART_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e006      	b.n	8006028 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e000      	b.n	8006028 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b20      	cmp	r3, #32
 8006048:	d140      	bne.n	80060cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_UART_Receive_IT+0x26>
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e039      	b.n	80060ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_UART_Receive_IT+0x38>
 8006064:	2302      	movs	r3, #2
 8006066:	e032      	b.n	80060ce <HAL_UART_Receive_IT+0x9e>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	88fa      	ldrh	r2, [r7, #6]
 8006080:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2222      	movs	r2, #34	; 0x22
 800608c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0220 	orr.w	r2, r2, #32
 80060c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e000      	b.n	80060ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10d      	bne.n	800612e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_UART_IRQHandler+0x52>
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f9e0 	bl	80064ec <UART_Receive_IT>
      return;
 800612c:	e0d1      	b.n	80062d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80b0 	beq.w	8006296 <HAL_UART_IRQHandler+0x1ba>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d105      	bne.n	800614c <HAL_UART_IRQHandler+0x70>
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80a5 	beq.w	8006296 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_UART_IRQHandler+0x90>
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006164:	f043 0201 	orr.w	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_UART_IRQHandler+0xb0>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	f043 0202 	orr.w	r2, r3, #2
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <HAL_UART_IRQHandler+0xd0>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a4:	f043 0204 	orr.w	r2, r3, #4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00f      	beq.n	80061d6 <HAL_UART_IRQHandler+0xfa>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_UART_IRQHandler+0xee>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	f043 0208 	orr.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d078      	beq.n	80062d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	f003 0320 	and.w	r3, r3, #32
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <HAL_UART_IRQHandler+0x11c>
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f97a 	bl	80064ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b40      	cmp	r3, #64	; 0x40
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <HAL_UART_IRQHandler+0x144>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d031      	beq.n	8006284 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f8c3 	bl	80063ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d123      	bne.n	800627c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006242:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006248:	2b00      	cmp	r3, #0
 800624a:	d013      	beq.n	8006274 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <HAL_UART_IRQHandler+0x1fc>)
 8006252:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	4618      	mov	r0, r3
 800625a:	f7fb ff7d 	bl	8002158 <HAL_DMA_Abort_IT>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d016      	beq.n	8006292 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800626e:	4610      	mov	r0, r2
 8006270:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006272:	e00e      	b.n	8006292 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f845 	bl	8006304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	e00a      	b.n	8006292 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f841 	bl	8006304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006282:	e006      	b.n	8006292 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f83d 	bl	8006304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006290:	e01e      	b.n	80062d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006292:	bf00      	nop
    return;
 8006294:	e01c      	b.n	80062d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1d6>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8b0 	bl	8006410 <UART_Transmit_IT>
    return;
 80062b0:	e00f      	b.n	80062d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1f6>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f8f8 	bl	80064bc <UART_EndTransmit_IT>
    return;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80062d0:	bf00      	nop
  }
}
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	080063e9 	.word	0x080063e9

080062dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006328:	e02c      	b.n	8006384 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d028      	beq.n	8006384 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <UART_WaitOnFlagUntilTimeout+0x30>
 8006338:	f7fb fde2 	bl	8001f00 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	429a      	cmp	r2, r3
 8006346:	d21d      	bcs.n	8006384 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006356:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e00f      	b.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4013      	ands	r3, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d0c3      	beq.n	800632a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff ff7e 	bl	8006304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b21      	cmp	r3, #33	; 0x21
 8006422:	d144      	bne.n	80064ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642c:	d11a      	bne.n	8006464 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006442:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	621a      	str	r2, [r3, #32]
 8006456:	e00e      	b.n	8006476 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]
 8006462:	e008      	b.n	8006476 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	1c59      	adds	r1, r3, #1
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6211      	str	r1, [r2, #32]
 800646e:	781a      	ldrb	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29b      	uxth	r3, r3
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4619      	mov	r1, r3
 8006484:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10f      	bne.n	80064aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006498:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e000      	b.n	80064b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064ae:	2302      	movs	r3, #2
  }
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff fefd 	bl	80062dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b22      	cmp	r3, #34	; 0x22
 80064fe:	d171      	bne.n	80065e4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006508:	d123      	bne.n	8006552 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10e      	bne.n	8006536 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	1c9a      	adds	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	629a      	str	r2, [r3, #40]	; 0x28
 8006534:	e029      	b.n	800658a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	b29b      	uxth	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	629a      	str	r2, [r3, #40]	; 0x28
 8006550:	e01b      	b.n	800658a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6858      	ldr	r0, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	1c59      	adds	r1, r3, #1
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6291      	str	r1, [r2, #40]	; 0x28
 800656a:	b2c2      	uxtb	r2, r0
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e00c      	b.n	800658a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b2da      	uxtb	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	1c58      	adds	r0, r3, #1
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	6288      	str	r0, [r1, #40]	; 0x28
 8006582:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29b      	uxth	r3, r3
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	4619      	mov	r1, r3
 8006598:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800659a:	2b00      	cmp	r3, #0
 800659c:	d120      	bne.n	80065e0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0220 	bic.w	r2, r2, #32
 80065ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0201 	bic.w	r2, r2, #1
 80065cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fe8a 	bl	80062f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e002      	b.n	80065e6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e000      	b.n	80065e6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80065e4:	2302      	movs	r3, #2
  }
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006632:	f023 030c 	bic.w	r3, r3, #12
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	430b      	orrs	r3, r1
 800663e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665e:	f040 818b 	bne.w	8006978 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4ac1      	ldr	r2, [pc, #772]	; (800696c <UART_SetConfig+0x37c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d005      	beq.n	8006678 <UART_SetConfig+0x88>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4abf      	ldr	r2, [pc, #764]	; (8006970 <UART_SetConfig+0x380>)
 8006672:	4293      	cmp	r3, r2
 8006674:	f040 80bd 	bne.w	80067f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006678:	f7fe fd58 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 800667c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	461d      	mov	r5, r3
 8006682:	f04f 0600 	mov.w	r6, #0
 8006686:	46a8      	mov	r8, r5
 8006688:	46b1      	mov	r9, r6
 800668a:	eb18 0308 	adds.w	r3, r8, r8
 800668e:	eb49 0409 	adc.w	r4, r9, r9
 8006692:	4698      	mov	r8, r3
 8006694:	46a1      	mov	r9, r4
 8006696:	eb18 0805 	adds.w	r8, r8, r5
 800669a:	eb49 0906 	adc.w	r9, r9, r6
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066b2:	4688      	mov	r8, r1
 80066b4:	4691      	mov	r9, r2
 80066b6:	eb18 0005 	adds.w	r0, r8, r5
 80066ba:	eb49 0106 	adc.w	r1, r9, r6
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	461d      	mov	r5, r3
 80066c4:	f04f 0600 	mov.w	r6, #0
 80066c8:	196b      	adds	r3, r5, r5
 80066ca:	eb46 0406 	adc.w	r4, r6, r6
 80066ce:	461a      	mov	r2, r3
 80066d0:	4623      	mov	r3, r4
 80066d2:	f7f9 fddd 	bl	8000290 <__aeabi_uldivmod>
 80066d6:	4603      	mov	r3, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	461a      	mov	r2, r3
 80066dc:	4ba5      	ldr	r3, [pc, #660]	; (8006974 <UART_SetConfig+0x384>)
 80066de:	fba3 2302 	umull	r2, r3, r3, r2
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	461d      	mov	r5, r3
 80066ec:	f04f 0600 	mov.w	r6, #0
 80066f0:	46a9      	mov	r9, r5
 80066f2:	46b2      	mov	sl, r6
 80066f4:	eb19 0309 	adds.w	r3, r9, r9
 80066f8:	eb4a 040a 	adc.w	r4, sl, sl
 80066fc:	4699      	mov	r9, r3
 80066fe:	46a2      	mov	sl, r4
 8006700:	eb19 0905 	adds.w	r9, r9, r5
 8006704:	eb4a 0a06 	adc.w	sl, sl, r6
 8006708:	f04f 0100 	mov.w	r1, #0
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006714:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006718:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800671c:	4689      	mov	r9, r1
 800671e:	4692      	mov	sl, r2
 8006720:	eb19 0005 	adds.w	r0, r9, r5
 8006724:	eb4a 0106 	adc.w	r1, sl, r6
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	461d      	mov	r5, r3
 800672e:	f04f 0600 	mov.w	r6, #0
 8006732:	196b      	adds	r3, r5, r5
 8006734:	eb46 0406 	adc.w	r4, r6, r6
 8006738:	461a      	mov	r2, r3
 800673a:	4623      	mov	r3, r4
 800673c:	f7f9 fda8 	bl	8000290 <__aeabi_uldivmod>
 8006740:	4603      	mov	r3, r0
 8006742:	460c      	mov	r4, r1
 8006744:	461a      	mov	r2, r3
 8006746:	4b8b      	ldr	r3, [pc, #556]	; (8006974 <UART_SetConfig+0x384>)
 8006748:	fba3 1302 	umull	r1, r3, r3, r2
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	2164      	movs	r1, #100	; 0x64
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	3332      	adds	r3, #50	; 0x32
 800675a:	4a86      	ldr	r2, [pc, #536]	; (8006974 <UART_SetConfig+0x384>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006768:	4498      	add	r8, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	461d      	mov	r5, r3
 800676e:	f04f 0600 	mov.w	r6, #0
 8006772:	46a9      	mov	r9, r5
 8006774:	46b2      	mov	sl, r6
 8006776:	eb19 0309 	adds.w	r3, r9, r9
 800677a:	eb4a 040a 	adc.w	r4, sl, sl
 800677e:	4699      	mov	r9, r3
 8006780:	46a2      	mov	sl, r4
 8006782:	eb19 0905 	adds.w	r9, r9, r5
 8006786:	eb4a 0a06 	adc.w	sl, sl, r6
 800678a:	f04f 0100 	mov.w	r1, #0
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006796:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800679a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800679e:	4689      	mov	r9, r1
 80067a0:	4692      	mov	sl, r2
 80067a2:	eb19 0005 	adds.w	r0, r9, r5
 80067a6:	eb4a 0106 	adc.w	r1, sl, r6
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	461d      	mov	r5, r3
 80067b0:	f04f 0600 	mov.w	r6, #0
 80067b4:	196b      	adds	r3, r5, r5
 80067b6:	eb46 0406 	adc.w	r4, r6, r6
 80067ba:	461a      	mov	r2, r3
 80067bc:	4623      	mov	r3, r4
 80067be:	f7f9 fd67 	bl	8000290 <__aeabi_uldivmod>
 80067c2:	4603      	mov	r3, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	461a      	mov	r2, r3
 80067c8:	4b6a      	ldr	r3, [pc, #424]	; (8006974 <UART_SetConfig+0x384>)
 80067ca:	fba3 1302 	umull	r1, r3, r3, r2
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	2164      	movs	r1, #100	; 0x64
 80067d2:	fb01 f303 	mul.w	r3, r1, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	3332      	adds	r3, #50	; 0x32
 80067dc:	4a65      	ldr	r2, [pc, #404]	; (8006974 <UART_SetConfig+0x384>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	f003 0207 	and.w	r2, r3, #7
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4442      	add	r2, r8
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	e26f      	b.n	8006cd2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067f2:	f7fe fc87 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 80067f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	461d      	mov	r5, r3
 80067fc:	f04f 0600 	mov.w	r6, #0
 8006800:	46a8      	mov	r8, r5
 8006802:	46b1      	mov	r9, r6
 8006804:	eb18 0308 	adds.w	r3, r8, r8
 8006808:	eb49 0409 	adc.w	r4, r9, r9
 800680c:	4698      	mov	r8, r3
 800680e:	46a1      	mov	r9, r4
 8006810:	eb18 0805 	adds.w	r8, r8, r5
 8006814:	eb49 0906 	adc.w	r9, r9, r6
 8006818:	f04f 0100 	mov.w	r1, #0
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006824:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006828:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800682c:	4688      	mov	r8, r1
 800682e:	4691      	mov	r9, r2
 8006830:	eb18 0005 	adds.w	r0, r8, r5
 8006834:	eb49 0106 	adc.w	r1, r9, r6
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	461d      	mov	r5, r3
 800683e:	f04f 0600 	mov.w	r6, #0
 8006842:	196b      	adds	r3, r5, r5
 8006844:	eb46 0406 	adc.w	r4, r6, r6
 8006848:	461a      	mov	r2, r3
 800684a:	4623      	mov	r3, r4
 800684c:	f7f9 fd20 	bl	8000290 <__aeabi_uldivmod>
 8006850:	4603      	mov	r3, r0
 8006852:	460c      	mov	r4, r1
 8006854:	461a      	mov	r2, r3
 8006856:	4b47      	ldr	r3, [pc, #284]	; (8006974 <UART_SetConfig+0x384>)
 8006858:	fba3 2302 	umull	r2, r3, r3, r2
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	461d      	mov	r5, r3
 8006866:	f04f 0600 	mov.w	r6, #0
 800686a:	46a9      	mov	r9, r5
 800686c:	46b2      	mov	sl, r6
 800686e:	eb19 0309 	adds.w	r3, r9, r9
 8006872:	eb4a 040a 	adc.w	r4, sl, sl
 8006876:	4699      	mov	r9, r3
 8006878:	46a2      	mov	sl, r4
 800687a:	eb19 0905 	adds.w	r9, r9, r5
 800687e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800688e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006892:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006896:	4689      	mov	r9, r1
 8006898:	4692      	mov	sl, r2
 800689a:	eb19 0005 	adds.w	r0, r9, r5
 800689e:	eb4a 0106 	adc.w	r1, sl, r6
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	461d      	mov	r5, r3
 80068a8:	f04f 0600 	mov.w	r6, #0
 80068ac:	196b      	adds	r3, r5, r5
 80068ae:	eb46 0406 	adc.w	r4, r6, r6
 80068b2:	461a      	mov	r2, r3
 80068b4:	4623      	mov	r3, r4
 80068b6:	f7f9 fceb 	bl	8000290 <__aeabi_uldivmod>
 80068ba:	4603      	mov	r3, r0
 80068bc:	460c      	mov	r4, r1
 80068be:	461a      	mov	r2, r3
 80068c0:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <UART_SetConfig+0x384>)
 80068c2:	fba3 1302 	umull	r1, r3, r3, r2
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	2164      	movs	r1, #100	; 0x64
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	3332      	adds	r3, #50	; 0x32
 80068d4:	4a27      	ldr	r2, [pc, #156]	; (8006974 <UART_SetConfig+0x384>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068e2:	4498      	add	r8, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	461d      	mov	r5, r3
 80068e8:	f04f 0600 	mov.w	r6, #0
 80068ec:	46a9      	mov	r9, r5
 80068ee:	46b2      	mov	sl, r6
 80068f0:	eb19 0309 	adds.w	r3, r9, r9
 80068f4:	eb4a 040a 	adc.w	r4, sl, sl
 80068f8:	4699      	mov	r9, r3
 80068fa:	46a2      	mov	sl, r4
 80068fc:	eb19 0905 	adds.w	r9, r9, r5
 8006900:	eb4a 0a06 	adc.w	sl, sl, r6
 8006904:	f04f 0100 	mov.w	r1, #0
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006910:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006914:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006918:	4689      	mov	r9, r1
 800691a:	4692      	mov	sl, r2
 800691c:	eb19 0005 	adds.w	r0, r9, r5
 8006920:	eb4a 0106 	adc.w	r1, sl, r6
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	461d      	mov	r5, r3
 800692a:	f04f 0600 	mov.w	r6, #0
 800692e:	196b      	adds	r3, r5, r5
 8006930:	eb46 0406 	adc.w	r4, r6, r6
 8006934:	461a      	mov	r2, r3
 8006936:	4623      	mov	r3, r4
 8006938:	f7f9 fcaa 	bl	8000290 <__aeabi_uldivmod>
 800693c:	4603      	mov	r3, r0
 800693e:	460c      	mov	r4, r1
 8006940:	461a      	mov	r2, r3
 8006942:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <UART_SetConfig+0x384>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	; 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	3332      	adds	r3, #50	; 0x32
 8006956:	4a07      	ldr	r2, [pc, #28]	; (8006974 <UART_SetConfig+0x384>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 0207 	and.w	r2, r3, #7
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4442      	add	r2, r8
 8006968:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800696a:	e1b2      	b.n	8006cd2 <UART_SetConfig+0x6e2>
 800696c:	40011000 	.word	0x40011000
 8006970:	40011400 	.word	0x40011400
 8006974:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4ad7      	ldr	r2, [pc, #860]	; (8006cdc <UART_SetConfig+0x6ec>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d005      	beq.n	800698e <UART_SetConfig+0x39e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4ad6      	ldr	r2, [pc, #856]	; (8006ce0 <UART_SetConfig+0x6f0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	f040 80d1 	bne.w	8006b30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800698e:	f7fe fbcd 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8006992:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	469a      	mov	sl, r3
 8006998:	f04f 0b00 	mov.w	fp, #0
 800699c:	46d0      	mov	r8, sl
 800699e:	46d9      	mov	r9, fp
 80069a0:	eb18 0308 	adds.w	r3, r8, r8
 80069a4:	eb49 0409 	adc.w	r4, r9, r9
 80069a8:	4698      	mov	r8, r3
 80069aa:	46a1      	mov	r9, r4
 80069ac:	eb18 080a 	adds.w	r8, r8, sl
 80069b0:	eb49 090b 	adc.w	r9, r9, fp
 80069b4:	f04f 0100 	mov.w	r1, #0
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069c8:	4688      	mov	r8, r1
 80069ca:	4691      	mov	r9, r2
 80069cc:	eb1a 0508 	adds.w	r5, sl, r8
 80069d0:	eb4b 0609 	adc.w	r6, fp, r9
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4619      	mov	r1, r3
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	f04f 0400 	mov.w	r4, #0
 80069e6:	0094      	lsls	r4, r2, #2
 80069e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069ec:	008b      	lsls	r3, r1, #2
 80069ee:	461a      	mov	r2, r3
 80069f0:	4623      	mov	r3, r4
 80069f2:	4628      	mov	r0, r5
 80069f4:	4631      	mov	r1, r6
 80069f6:	f7f9 fc4b 	bl	8000290 <__aeabi_uldivmod>
 80069fa:	4603      	mov	r3, r0
 80069fc:	460c      	mov	r4, r1
 80069fe:	461a      	mov	r2, r3
 8006a00:	4bb8      	ldr	r3, [pc, #736]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006a02:	fba3 2302 	umull	r2, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	469b      	mov	fp, r3
 8006a10:	f04f 0c00 	mov.w	ip, #0
 8006a14:	46d9      	mov	r9, fp
 8006a16:	46e2      	mov	sl, ip
 8006a18:	eb19 0309 	adds.w	r3, r9, r9
 8006a1c:	eb4a 040a 	adc.w	r4, sl, sl
 8006a20:	4699      	mov	r9, r3
 8006a22:	46a2      	mov	sl, r4
 8006a24:	eb19 090b 	adds.w	r9, r9, fp
 8006a28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a2c:	f04f 0100 	mov.w	r1, #0
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a40:	4689      	mov	r9, r1
 8006a42:	4692      	mov	sl, r2
 8006a44:	eb1b 0509 	adds.w	r5, fp, r9
 8006a48:	eb4c 060a 	adc.w	r6, ip, sl
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4619      	mov	r1, r3
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	f04f 0400 	mov.w	r4, #0
 8006a5e:	0094      	lsls	r4, r2, #2
 8006a60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a64:	008b      	lsls	r3, r1, #2
 8006a66:	461a      	mov	r2, r3
 8006a68:	4623      	mov	r3, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	f7f9 fc0f 	bl	8000290 <__aeabi_uldivmod>
 8006a72:	4603      	mov	r3, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	461a      	mov	r2, r3
 8006a78:	4b9a      	ldr	r3, [pc, #616]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	2164      	movs	r1, #100	; 0x64
 8006a82:	fb01 f303 	mul.w	r3, r1, r3
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	3332      	adds	r3, #50	; 0x32
 8006a8c:	4a95      	ldr	r2, [pc, #596]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a98:	4498      	add	r8, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	469b      	mov	fp, r3
 8006a9e:	f04f 0c00 	mov.w	ip, #0
 8006aa2:	46d9      	mov	r9, fp
 8006aa4:	46e2      	mov	sl, ip
 8006aa6:	eb19 0309 	adds.w	r3, r9, r9
 8006aaa:	eb4a 040a 	adc.w	r4, sl, sl
 8006aae:	4699      	mov	r9, r3
 8006ab0:	46a2      	mov	sl, r4
 8006ab2:	eb19 090b 	adds.w	r9, r9, fp
 8006ab6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006aba:	f04f 0100 	mov.w	r1, #0
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ac6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006aca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ace:	4689      	mov	r9, r1
 8006ad0:	4692      	mov	sl, r2
 8006ad2:	eb1b 0509 	adds.w	r5, fp, r9
 8006ad6:	eb4c 060a 	adc.w	r6, ip, sl
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	f04f 0400 	mov.w	r4, #0
 8006aec:	0094      	lsls	r4, r2, #2
 8006aee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006af2:	008b      	lsls	r3, r1, #2
 8006af4:	461a      	mov	r2, r3
 8006af6:	4623      	mov	r3, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	4631      	mov	r1, r6
 8006afc:	f7f9 fbc8 	bl	8000290 <__aeabi_uldivmod>
 8006b00:	4603      	mov	r3, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b77      	ldr	r3, [pc, #476]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006b08:	fba3 1302 	umull	r1, r3, r3, r2
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	2164      	movs	r1, #100	; 0x64
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	3332      	adds	r3, #50	; 0x32
 8006b1a:	4a72      	ldr	r2, [pc, #456]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	f003 020f 	and.w	r2, r3, #15
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4442      	add	r2, r8
 8006b2c:	609a      	str	r2, [r3, #8]
 8006b2e:	e0d0      	b.n	8006cd2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b30:	f7fe fae8 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8006b34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	469a      	mov	sl, r3
 8006b3a:	f04f 0b00 	mov.w	fp, #0
 8006b3e:	46d0      	mov	r8, sl
 8006b40:	46d9      	mov	r9, fp
 8006b42:	eb18 0308 	adds.w	r3, r8, r8
 8006b46:	eb49 0409 	adc.w	r4, r9, r9
 8006b4a:	4698      	mov	r8, r3
 8006b4c:	46a1      	mov	r9, r4
 8006b4e:	eb18 080a 	adds.w	r8, r8, sl
 8006b52:	eb49 090b 	adc.w	r9, r9, fp
 8006b56:	f04f 0100 	mov.w	r1, #0
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b6a:	4688      	mov	r8, r1
 8006b6c:	4691      	mov	r9, r2
 8006b6e:	eb1a 0508 	adds.w	r5, sl, r8
 8006b72:	eb4b 0609 	adc.w	r6, fp, r9
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	f04f 0400 	mov.w	r4, #0
 8006b88:	0094      	lsls	r4, r2, #2
 8006b8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b8e:	008b      	lsls	r3, r1, #2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4623      	mov	r3, r4
 8006b94:	4628      	mov	r0, r5
 8006b96:	4631      	mov	r1, r6
 8006b98:	f7f9 fb7a 	bl	8000290 <__aeabi_uldivmod>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4b50      	ldr	r3, [pc, #320]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	469b      	mov	fp, r3
 8006bb2:	f04f 0c00 	mov.w	ip, #0
 8006bb6:	46d9      	mov	r9, fp
 8006bb8:	46e2      	mov	sl, ip
 8006bba:	eb19 0309 	adds.w	r3, r9, r9
 8006bbe:	eb4a 040a 	adc.w	r4, sl, sl
 8006bc2:	4699      	mov	r9, r3
 8006bc4:	46a2      	mov	sl, r4
 8006bc6:	eb19 090b 	adds.w	r9, r9, fp
 8006bca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bce:	f04f 0100 	mov.w	r1, #0
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006be2:	4689      	mov	r9, r1
 8006be4:	4692      	mov	sl, r2
 8006be6:	eb1b 0509 	adds.w	r5, fp, r9
 8006bea:	eb4c 060a 	adc.w	r6, ip, sl
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	f04f 0400 	mov.w	r4, #0
 8006c00:	0094      	lsls	r4, r2, #2
 8006c02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c06:	008b      	lsls	r3, r1, #2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4623      	mov	r3, r4
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	4631      	mov	r1, r6
 8006c10:	f7f9 fb3e 	bl	8000290 <__aeabi_uldivmod>
 8006c14:	4603      	mov	r3, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b32      	ldr	r3, [pc, #200]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	2164      	movs	r1, #100	; 0x64
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	3332      	adds	r3, #50	; 0x32
 8006c2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c3a:	4498      	add	r8, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	469b      	mov	fp, r3
 8006c40:	f04f 0c00 	mov.w	ip, #0
 8006c44:	46d9      	mov	r9, fp
 8006c46:	46e2      	mov	sl, ip
 8006c48:	eb19 0309 	adds.w	r3, r9, r9
 8006c4c:	eb4a 040a 	adc.w	r4, sl, sl
 8006c50:	4699      	mov	r9, r3
 8006c52:	46a2      	mov	sl, r4
 8006c54:	eb19 090b 	adds.w	r9, r9, fp
 8006c58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c5c:	f04f 0100 	mov.w	r1, #0
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c70:	4689      	mov	r9, r1
 8006c72:	4692      	mov	sl, r2
 8006c74:	eb1b 0509 	adds.w	r5, fp, r9
 8006c78:	eb4c 060a 	adc.w	r6, ip, sl
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4619      	mov	r1, r3
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	f04f 0400 	mov.w	r4, #0
 8006c8e:	0094      	lsls	r4, r2, #2
 8006c90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c94:	008b      	lsls	r3, r1, #2
 8006c96:	461a      	mov	r2, r3
 8006c98:	4623      	mov	r3, r4
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	f7f9 faf7 	bl	8000290 <__aeabi_uldivmod>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006caa:	fba3 1302 	umull	r1, r3, r3, r2
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	2164      	movs	r1, #100	; 0x64
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	3332      	adds	r3, #50	; 0x32
 8006cbc:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <UART_SetConfig+0x6f4>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4442      	add	r2, r8
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	e7ff      	b.n	8006cd2 <UART_SetConfig+0x6e2>
 8006cd2:	bf00      	nop
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	40011000 	.word	0x40011000
 8006ce0:	40011400 	.word	0x40011400
 8006ce4:	51eb851f 	.word	0x51eb851f

08006ce8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d029      	beq.n	8006d56 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d12:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d1c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006d22:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006d28:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006d2e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006d34:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006d3a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006d40:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006d46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e034      	b.n	8006dc0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d62:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d6c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006d72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d8a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d94:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006d9a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006da0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006da6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006dac:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b087      	sub	sp, #28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d02e      	beq.n	8006e46 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006df4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006e04:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006e0e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006e18:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e22:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006e2c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006e36:	4313      	orrs	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	609a      	str	r2, [r3, #8]
 8006e44:	e03b      	b.n	8006ebe <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e56:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e7c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006e8c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006e96:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006ea0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ecc:	b084      	sub	sp, #16
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	f107 001c 	add.w	r0, r7, #28
 8006eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d122      	bne.n	8006f2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d105      	bne.n	8006f1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f902 	bl	8007128 <USB_CoreReset>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e01a      	b.n	8006f60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8f6 	bl	8007128 <USB_CoreReset>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
 8006f52:	e005      	b.n	8006f60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d10b      	bne.n	8006f7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f043 0206 	orr.w	r2, r3, #6
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f043 0220 	orr.w	r2, r3, #32
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f8a:	b004      	add	sp, #16
 8006f8c:	4770      	bx	lr

08006f8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f023 0201 	bic.w	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d106      	bne.n	8006fdc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60da      	str	r2, [r3, #12]
 8006fda:	e00b      	b.n	8006ff4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60da      	str	r2, [r3, #12]
 8006fee:	e001      	b.n	8006ff4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e003      	b.n	8006ffc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ff4:	2032      	movs	r0, #50	; 0x32
 8006ff6:	f7fa ff8f 	bl	8001f18 <HAL_Delay>

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	019b      	lsls	r3, r3, #6
 8007016:	f043 0220 	orr.w	r2, r3, #32
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <USB_FlushTxFifo+0x48>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e006      	b.n	800703e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b20      	cmp	r3, #32
 800703a:	d0f0      	beq.n	800701e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	00030d40 	.word	0x00030d40

08007050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2210      	movs	r2, #16
 8007060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <USB_FlushRxFifo+0x40>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d901      	bls.n	8007074 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e006      	b.n	8007082 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b10      	cmp	r3, #16
 800707e:	d0f0      	beq.n	8007062 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	00030d40 	.word	0x00030d40

08007094 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	3303      	adds	r3, #3
 80070ae:	089b      	lsrs	r3, r3, #2
 80070b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e00b      	b.n	80070d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	3304      	adds	r3, #4
 80070c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	3301      	adds	r3, #1
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d3ef      	bcc.n	80070b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80070d8:	69fb      	ldr	r3, [r7, #28]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3724      	adds	r7, #36	; 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4013      	ands	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070fe:	68fb      	ldr	r3, [r7, #12]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f003 0301 	and.w	r3, r3, #1
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4a13      	ldr	r2, [pc, #76]	; (800718c <USB_CoreReset+0x64>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e01b      	b.n	800717e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	daf2      	bge.n	8007134 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f043 0201 	orr.w	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a09      	ldr	r2, [pc, #36]	; (800718c <USB_CoreReset+0x64>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d901      	bls.n	8007170 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e006      	b.n	800717e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b01      	cmp	r3, #1
 800717a:	d0f0      	beq.n	800715e <USB_CoreReset+0x36>

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	00030d40 	.word	0x00030d40

08007190 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007190:	b084      	sub	sp, #16
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	f107 001c 	add.w	r0, r7, #28
 800719e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071ac:	461a      	mov	r2, r3
 80071ae:	2300      	movs	r3, #0
 80071b0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d018      	beq.n	8007214 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d10a      	bne.n	80071fe <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071f6:	f043 0304 	orr.w	r3, r3, #4
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	e014      	b.n	8007228 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800720c:	f023 0304 	bic.w	r3, r3, #4
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	e009      	b.n	8007228 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007222:	f023 0304 	bic.w	r3, r3, #4
 8007226:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007228:	2110      	movs	r1, #16
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff feea 	bl	8007004 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ff0d 	bl	8007050 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	e015      	b.n	8007268 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007248:	461a      	mov	r2, r3
 800724a:	f04f 33ff 	mov.w	r3, #4294967295
 800724e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4413      	add	r3, r2
 8007258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725c:	461a      	mov	r2, r3
 800725e:	2300      	movs	r3, #0
 8007260:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3301      	adds	r3, #1
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d3e5      	bcc.n	800723c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007270:	2101      	movs	r1, #1
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f882 	bl	800737c <USB_DriveVbus>

  HAL_Delay(200U);
 8007278:	20c8      	movs	r0, #200	; 0xc8
 800727a:	f7fa fe4d 	bl	8001f18 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f04f 32ff 	mov.w	r2, #4294967295
 800728a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800729e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a14      	ldr	r2, [pc, #80]	; (80072f4 <USB_HostInit+0x164>)
 80072a4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <USB_HostInit+0x168>)
 80072aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80072ae:	e009      	b.n	80072c4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2280      	movs	r2, #128	; 0x80
 80072b4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a10      	ldr	r2, [pc, #64]	; (80072fc <USB_HostInit+0x16c>)
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a10      	ldr	r2, [pc, #64]	; (8007300 <USB_HostInit+0x170>)
 80072c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f043 0210 	orr.w	r2, r3, #16
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <USB_HostInit+0x174>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072ee:	b004      	add	sp, #16
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	01000200 	.word	0x01000200
 80072f8:	00e00300 	.word	0x00e00300
 80072fc:	00600080 	.word	0x00600080
 8007300:	004000e0 	.word	0x004000e0
 8007304:	a3200008 	.word	0xa3200008

08007308 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	68f9      	ldr	r1, [r7, #12]
 800733c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007340:	4313      	orrs	r3, r2
 8007342:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d107      	bne.n	800735a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007350:	461a      	mov	r2, r3
 8007352:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007356:	6053      	str	r3, [r2, #4]
 8007358:	e009      	b.n	800736e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d106      	bne.n	800736e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007366:	461a      	mov	r2, r3
 8007368:	f241 7370 	movw	r3, #6000	; 0x1770
 800736c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <USB_DriveVbus+0x44>
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d106      	bne.n	80073c0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073be:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	d109      	bne.n	80073e0 <USB_DriveVbus+0x64>
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	b29b      	uxth	r3, r3
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4413      	add	r3, r2
 8007430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	0c9b      	lsrs	r3, r3, #18
 8007438:	f003 0303 	and.w	r3, r3, #3
 800743c:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <USB_HC_Halt+0x3a>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d16c      	bne.n	8007524 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	440a      	add	r2, r1
 8007460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007468:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d143      	bne.n	80074fe <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	4413      	add	r3, r2
 800747e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	440a      	add	r2, r1
 800748c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007494:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4413      	add	r3, r2
 800749e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	0151      	lsls	r1, r2, #5
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	440a      	add	r2, r1
 80074ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	0151      	lsls	r1, r2, #5
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	440a      	add	r2, r1
 80074cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074d4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	3301      	adds	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074e2:	d81d      	bhi.n	8007520 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074fa:	d0ec      	beq.n	80074d6 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80074fc:	e080      	b.n	8007600 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	4413      	add	r3, r2
 8007506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	440a      	add	r2, r1
 8007514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800751c:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800751e:	e06f      	b.n	8007600 <USB_HC_Halt+0x1f0>
          break;
 8007520:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007522:	e06d      	b.n	8007600 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4413      	add	r3, r2
 800752c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	440a      	add	r2, r1
 800753a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800753e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007542:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d143      	bne.n	80075dc <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	4413      	add	r3, r2
 800755c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	440a      	add	r2, r1
 800756a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800756e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007572:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	4413      	add	r3, r2
 800757c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	440a      	add	r2, r1
 800758a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800758e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007592:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	4413      	add	r3, r2
 800759c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	3301      	adds	r3, #1
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075c0:	d81d      	bhi.n	80075fe <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d8:	d0ec      	beq.n	80075b4 <USB_HC_Halt+0x1a4>
 80075da:	e011      	b.n	8007600 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e000      	b.n	8007600 <USB_HC_Halt+0x1f0>
          break;
 80075fe:	bf00      	nop
    }
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800760e:	b480      	push	{r7}
 8007610:	b085      	sub	sp, #20
 8007612:	af00      	add	r7, sp, #0
 8007614:	4603      	mov	r3, r0
 8007616:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800761c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007620:	2b84      	cmp	r3, #132	; 0x84
 8007622:	d005      	beq.n	8007630 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007624:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	3303      	adds	r3, #3
 800762e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007642:	f000 fdb3 	bl	80081ac <vTaskStartScheduler>
  
  return osOK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	bd80      	pop	{r7, pc}

0800764c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764e:	b089      	sub	sp, #36	; 0x24
 8007650:	af04      	add	r7, sp, #16
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d020      	beq.n	80076a0 <osThreadCreate+0x54>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01c      	beq.n	80076a0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685c      	ldr	r4, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681d      	ldr	r5, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691e      	ldr	r6, [r3, #16]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff ffc8 	bl	800760e <makeFreeRtosPriority>
 800767e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007688:	9202      	str	r2, [sp, #8]
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	9100      	str	r1, [sp, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	4632      	mov	r2, r6
 8007692:	4629      	mov	r1, r5
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fbc5 	bl	8007e24 <xTaskCreateStatic>
 800769a:	4603      	mov	r3, r0
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e01c      	b.n	80076da <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685c      	ldr	r4, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076ac:	b29e      	uxth	r6, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff ffaa 	bl	800760e <makeFreeRtosPriority>
 80076ba:	4602      	mov	r2, r0
 80076bc:	f107 030c 	add.w	r3, r7, #12
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	9200      	str	r2, [sp, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	4632      	mov	r2, r6
 80076c8:	4629      	mov	r1, r5
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 fc04 	bl	8007ed8 <xTaskCreate>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d001      	beq.n	80076da <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	e000      	b.n	80076dc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076da:	68fb      	ldr	r3, [r7, #12]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <osDelay+0x16>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	e000      	b.n	80076fc <osDelay+0x18>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fd21 	bl	8008144 <vTaskDelay>
  
  return osOK;
 8007702:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f103 0208 	add.w	r2, r3, #8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f04f 32ff 	mov.w	r2, #4294967295
 8007724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f103 0208 	add.w	r2, r3, #8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f103 0208 	add.w	r2, r3, #8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077ae:	b480      	push	{r7}
 80077b0:	b085      	sub	sp, #20
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d103      	bne.n	80077ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	e00c      	b.n	80077e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3308      	adds	r3, #8
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e002      	b.n	80077dc <vListInsert+0x2e>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d2f6      	bcs.n	80077d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6892      	ldr	r2, [r2, #8]
 8007836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6852      	ldr	r2, [r2, #4]
 8007840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d103      	bne.n	8007854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60bb      	str	r3, [r7, #8]
 800789a:	e7fe      	b.n	800789a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800789c:	f001 fb4e 	bl	8008f3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a8:	68f9      	ldr	r1, [r7, #12]
 80078aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078cc:	3b01      	subs	r3, #1
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	441a      	add	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	22ff      	movs	r2, #255	; 0xff
 80078e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	22ff      	movs	r2, #255	; 0xff
 80078e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d114      	bne.n	800791c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01a      	beq.n	8007930 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3310      	adds	r3, #16
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fe92 	bl	8008628 <xTaskRemoveFromEventList>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d012      	beq.n	8007930 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <xQueueGenericReset+0xcc>)
 800790c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	e009      	b.n	8007930 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3310      	adds	r3, #16
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fef3 	bl	800770c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3324      	adds	r3, #36	; 0x24
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff feee 	bl	800770c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007930:	f001 fb32 	bl	8008f98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007934:	2301      	movs	r3, #1
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	; 0x28
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	4613      	mov	r3, r2
 8007950:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d109      	bne.n	800796c <xQueueGenericCreate+0x28>
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	e7fe      	b.n	800796a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007972:	2300      	movs	r3, #0
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	e004      	b.n	8007982 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	fb02 f303 	mul.w	r3, r2, r3
 8007980:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	3348      	adds	r3, #72	; 0x48
 8007986:	4618      	mov	r0, r3
 8007988:	f001 fbf2 	bl	8009170 <pvPortMalloc>
 800798c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d011      	beq.n	80079b8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	3348      	adds	r3, #72	; 0x48
 800799c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079a6:	79fa      	ldrb	r2, [r7, #7]
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f805 	bl	80079c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079b8:	69bb      	ldr	r3, [r7, #24]
	}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	607a      	str	r2, [r7, #4]
 80079ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e002      	b.n	80079e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079f0:	2101      	movs	r1, #1
 80079f2:	69b8      	ldr	r0, [r7, #24]
 80079f4:	f7ff ff3e 	bl	8007874 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08e      	sub	sp, #56	; 0x38
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <xQueueGiveFromISR+0x28>
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	623b      	str	r3, [r7, #32]
 8007a26:	e7fe      	b.n	8007a26 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d009      	beq.n	8007a44 <xQueueGiveFromISR+0x44>
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	61fb      	str	r3, [r7, #28]
 8007a42:	e7fe      	b.n	8007a42 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <xQueueGiveFromISR+0x54>
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <xQueueGiveFromISR+0x58>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <xQueueGiveFromISR+0x5a>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d109      	bne.n	8007a72 <xQueueGiveFromISR+0x72>
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	e7fe      	b.n	8007a70 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a72:	f001 fb3f 	bl	80090f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a76:	f3ef 8211 	mrs	r2, BASEPRI
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	617a      	str	r2, [r7, #20]
 8007a8c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d22b      	bcs.n	8007afa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d112      	bne.n	8007ae4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d016      	beq.n	8007af4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	3324      	adds	r3, #36	; 0x24
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fdac 	bl	8008628 <xTaskRemoveFromEventList>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	e007      	b.n	8007af4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae8:	3301      	adds	r3, #1
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	b25a      	sxtb	r2, r3
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007af4:	2301      	movs	r3, #1
 8007af6:	637b      	str	r3, [r7, #52]	; 0x34
 8007af8:	e001      	b.n	8007afe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3738      	adds	r7, #56	; 0x38
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08e      	sub	sp, #56	; 0x38
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	623b      	str	r3, [r7, #32]
 8007b42:	e7fe      	b.n	8007b42 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d009      	beq.n	8007b60 <xQueueSemaphoreTake+0x4c>
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	e7fe      	b.n	8007b5e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b60:	f000 ff18 	bl	8008994 <xTaskGetSchedulerState>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <xQueueSemaphoreTake+0x5c>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <xQueueSemaphoreTake+0x60>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e000      	b.n	8007b76 <xQueueSemaphoreTake+0x62>
 8007b74:	2300      	movs	r3, #0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d109      	bne.n	8007b8e <xQueueSemaphoreTake+0x7a>
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	61bb      	str	r3, [r7, #24]
 8007b8c:	e7fe      	b.n	8007b8c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b8e:	f001 f9d5 	bl	8008f3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d024      	beq.n	8007be8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	1e5a      	subs	r2, r3, #1
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d104      	bne.n	8007bb8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007bae:	f001 f827 	bl	8008c00 <pvTaskIncrementMutexHeldCount>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00f      	beq.n	8007be0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fd2f 	bl	8008628 <xTaskRemoveFromEventList>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d007      	beq.n	8007be0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bd0:	4b53      	ldr	r3, [pc, #332]	; (8007d20 <xQueueSemaphoreTake+0x20c>)
 8007bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007be0:	f001 f9da 	bl	8008f98 <vPortExitCritical>
				return pdPASS;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e096      	b.n	8007d16 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d110      	bne.n	8007c10 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <xQueueSemaphoreTake+0xf4>
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	e7fe      	b.n	8007c06 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c08:	f001 f9c6 	bl	8008f98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e082      	b.n	8007d16 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c16:	f107 030c 	add.w	r3, r7, #12
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 fd66 	bl	80086ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c20:	2301      	movs	r3, #1
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c24:	f001 f9b8 	bl	8008f98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c28:	f000 fb1e 	bl	8008268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c2c:	f001 f986 	bl	8008f3c <vPortEnterCritical>
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c36:	b25b      	sxtb	r3, r3
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d103      	bne.n	8007c46 <xQueueSemaphoreTake+0x132>
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c4c:	b25b      	sxtb	r3, r3
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c52:	d103      	bne.n	8007c5c <xQueueSemaphoreTake+0x148>
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c5c:	f001 f99c 	bl	8008f98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c60:	463a      	mov	r2, r7
 8007c62:	f107 030c 	add.w	r3, r7, #12
 8007c66:	4611      	mov	r1, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fd55 	bl	8008718 <xTaskCheckForTimeOut>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d132      	bne.n	8007cda <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c76:	f000 f8bf 	bl	8007df8 <prvIsQueueEmpty>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d026      	beq.n	8007cce <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d109      	bne.n	8007c9c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007c88:	f001 f958 	bl	8008f3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fe9d 	bl	80089d0 <xTaskPriorityInherit>
 8007c96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007c98:	f001 f97e 	bl	8008f98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fc9b 	bl	80085e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007caa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cac:	f000 f852 	bl	8007d54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cb0:	f000 fae8 	bl	8008284 <xTaskResumeAll>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f47f af69 	bne.w	8007b8e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007cbc:	4b18      	ldr	r3, [pc, #96]	; (8007d20 <xQueueSemaphoreTake+0x20c>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	e75f      	b.n	8007b8e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cd0:	f000 f840 	bl	8007d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cd4:	f000 fad6 	bl	8008284 <xTaskResumeAll>
 8007cd8:	e759      	b.n	8007b8e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cdc:	f000 f83a 	bl	8007d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ce0:	f000 fad0 	bl	8008284 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ce6:	f000 f887 	bl	8007df8 <prvIsQueueEmpty>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f43f af4e 	beq.w	8007b8e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00d      	beq.n	8007d14 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007cf8:	f001 f920 	bl	8008f3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cfe:	f000 f811 	bl	8007d24 <prvGetDisinheritPriorityAfterTimeout>
 8007d02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fee0 	bl	8008ad0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d10:	f001 f942 	bl	8008f98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3738      	adds	r7, #56	; 0x38
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	e000ed04 	.word	0xe000ed04

08007d24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d006      	beq.n	8007d42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f1c3 0307 	rsb	r3, r3, #7
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	e001      	b.n	8007d46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d46:	68fb      	ldr	r3, [r7, #12]
	}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d5c:	f001 f8ee 	bl	8008f3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d68:	e011      	b.n	8007d8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d012      	beq.n	8007d98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3324      	adds	r3, #36	; 0x24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fc56 	bl	8008628 <xTaskRemoveFromEventList>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d82:	f000 fd29 	bl	80087d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	dce9      	bgt.n	8007d6a <prvUnlockQueue+0x16>
 8007d96:	e000      	b.n	8007d9a <prvUnlockQueue+0x46>
					break;
 8007d98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	22ff      	movs	r2, #255	; 0xff
 8007d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007da2:	f001 f8f9 	bl	8008f98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007da6:	f001 f8c9 	bl	8008f3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007db0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007db2:	e011      	b.n	8007dd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d012      	beq.n	8007de2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3310      	adds	r3, #16
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fc31 	bl	8008628 <xTaskRemoveFromEventList>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dcc:	f000 fd04 	bl	80087d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dce9      	bgt.n	8007db4 <prvUnlockQueue+0x60>
 8007de0:	e000      	b.n	8007de4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007de2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	22ff      	movs	r2, #255	; 0xff
 8007de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007dec:	f001 f8d4 	bl	8008f98 <vPortExitCritical>
}
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e00:	f001 f89c 	bl	8008f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e001      	b.n	8007e16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e16:	f001 f8bf 	bl	8008f98 <vPortExitCritical>

	return xReturn;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	; 0x38
 8007e28:	af04      	add	r7, sp, #16
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <xTaskCreateStatic+0x28>
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	623b      	str	r3, [r7, #32]
 8007e4a:	e7fe      	b.n	8007e4a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <xTaskCreateStatic+0x42>
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	61fb      	str	r3, [r7, #28]
 8007e64:	e7fe      	b.n	8007e64 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e66:	2354      	movs	r3, #84	; 0x54
 8007e68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b54      	cmp	r3, #84	; 0x54
 8007e6e:	d009      	beq.n	8007e84 <xTaskCreateStatic+0x60>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	e7fe      	b.n	8007e82 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01e      	beq.n	8007eca <xTaskCreateStatic+0xa6>
 8007e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01b      	beq.n	8007eca <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	9302      	str	r3, [sp, #8]
 8007eac:	f107 0314 	add.w	r3, r7, #20
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 f850 	bl	8007f62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ec4:	f000 f8d4 	bl	8008070 <prvAddNewTaskToReadyList>
 8007ec8:	e001      	b.n	8007ece <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ece:	697b      	ldr	r3, [r7, #20]
	}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3728      	adds	r7, #40	; 0x28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08c      	sub	sp, #48	; 0x30
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 f93f 	bl	8009170 <pvPortMalloc>
 8007ef2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00e      	beq.n	8007f18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007efa:	2054      	movs	r0, #84	; 0x54
 8007efc:	f001 f938 	bl	8009170 <pvPortMalloc>
 8007f00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f0e:	e005      	b.n	8007f1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f10:	6978      	ldr	r0, [r7, #20]
 8007f12:	f001 f9ef 	bl	80092f4 <vPortFree>
 8007f16:	e001      	b.n	8007f1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d017      	beq.n	8007f52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	9302      	str	r3, [sp, #8]
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f80e 	bl	8007f62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f46:	69f8      	ldr	r0, [r7, #28]
 8007f48:	f000 f892 	bl	8008070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	e002      	b.n	8007f58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f58:	69bb      	ldr	r3, [r7, #24]
	}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b088      	sub	sp, #32
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f023 0307 	bic.w	r3, r3, #7
 8007f88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <prvInitialiseNewTask+0x46>
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	e7fe      	b.n	8007fa6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01f      	beq.n	8007fee <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	e012      	b.n	8007fda <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	4413      	add	r3, r2
 8007fba:	7819      	ldrb	r1, [r3, #0]
 8007fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3334      	adds	r3, #52	; 0x34
 8007fc4:	460a      	mov	r2, r1
 8007fc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	4413      	add	r3, r2
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d006      	beq.n	8007fe2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2b0f      	cmp	r3, #15
 8007fde:	d9e9      	bls.n	8007fb4 <prvInitialiseNewTask+0x52>
 8007fe0:	e000      	b.n	8007fe4 <prvInitialiseNewTask+0x82>
			{
				break;
 8007fe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fec:	e003      	b.n	8007ff6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	2b06      	cmp	r3, #6
 8007ffa:	d901      	bls.n	8008000 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ffc:	2306      	movs	r3, #6
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008004:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800800a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	2200      	movs	r2, #0
 8008010:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	3304      	adds	r3, #4
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fb98 	bl	800774c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	3318      	adds	r3, #24
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fb93 	bl	800774c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	f1c3 0207 	rsb	r2, r3, #7
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800803a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	2200      	movs	r2, #0
 8008040:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	68f9      	ldr	r1, [r7, #12]
 800804e:	69b8      	ldr	r0, [r7, #24]
 8008050:	f000 fe50 	bl	8008cf4 <pxPortInitialiseStack>
 8008054:	4602      	mov	r2, r0
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008066:	bf00      	nop
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008078:	f000 ff60 	bl	8008f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800807c:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <prvAddNewTaskToReadyList+0xb8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3301      	adds	r3, #1
 8008082:	4a29      	ldr	r2, [pc, #164]	; (8008128 <prvAddNewTaskToReadyList+0xb8>)
 8008084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008086:	4b29      	ldr	r3, [pc, #164]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800808e:	4a27      	ldr	r2, [pc, #156]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008094:	4b24      	ldr	r3, [pc, #144]	; (8008128 <prvAddNewTaskToReadyList+0xb8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d110      	bne.n	80080be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800809c:	f000 fbc0 	bl	8008820 <prvInitialiseTaskLists>
 80080a0:	e00d      	b.n	80080be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080a2:	4b23      	ldr	r3, [pc, #140]	; (8008130 <prvAddNewTaskToReadyList+0xc0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d109      	bne.n	80080be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080aa:	4b20      	ldr	r3, [pc, #128]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d802      	bhi.n	80080be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080b8:	4a1c      	ldr	r2, [pc, #112]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080be:	4b1d      	ldr	r3, [pc, #116]	; (8008134 <prvAddNewTaskToReadyList+0xc4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	4a1b      	ldr	r2, [pc, #108]	; (8008134 <prvAddNewTaskToReadyList+0xc4>)
 80080c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	2201      	movs	r2, #1
 80080ce:	409a      	lsls	r2, r3
 80080d0:	4b19      	ldr	r3, [pc, #100]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	4a18      	ldr	r2, [pc, #96]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4a15      	ldr	r2, [pc, #84]	; (800813c <prvAddNewTaskToReadyList+0xcc>)
 80080e8:	441a      	add	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7ff fb38 	bl	8007766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080f6:	f000 ff4f 	bl	8008f98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080fa:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <prvAddNewTaskToReadyList+0xc0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00e      	beq.n	8008120 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008102:	4b0a      	ldr	r3, [pc, #40]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	429a      	cmp	r2, r3
 800810e:	d207      	bcs.n	8008120 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <prvAddNewTaskToReadyList+0xd0>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000410 	.word	0x20000410
 800812c:	20000310 	.word	0x20000310
 8008130:	2000041c 	.word	0x2000041c
 8008134:	2000042c 	.word	0x2000042c
 8008138:	20000418 	.word	0x20000418
 800813c:	20000314 	.word	0x20000314
 8008140:	e000ed04 	.word	0xe000ed04

08008144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800814c:	2300      	movs	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d016      	beq.n	8008184 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <vTaskDelay+0x60>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <vTaskDelay+0x2e>
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60bb      	str	r3, [r7, #8]
 8008170:	e7fe      	b.n	8008170 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008172:	f000 f879 	bl	8008268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008176:	2100      	movs	r1, #0
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fd55 	bl	8008c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800817e:	f000 f881 	bl	8008284 <xTaskResumeAll>
 8008182:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d107      	bne.n	800819a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <vTaskDelay+0x64>)
 800818c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000438 	.word	0x20000438
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	; 0x28
 80081b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ba:	463a      	mov	r2, r7
 80081bc:	1d39      	adds	r1, r7, #4
 80081be:	f107 0308 	add.w	r3, r7, #8
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7f8 fcd0 	bl	8000b68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	9202      	str	r2, [sp, #8]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2300      	movs	r3, #0
 80081d8:	460a      	mov	r2, r1
 80081da:	491d      	ldr	r1, [pc, #116]	; (8008250 <vTaskStartScheduler+0xa4>)
 80081dc:	481d      	ldr	r0, [pc, #116]	; (8008254 <vTaskStartScheduler+0xa8>)
 80081de:	f7ff fe21 	bl	8007e24 <xTaskCreateStatic>
 80081e2:	4602      	mov	r2, r0
 80081e4:	4b1c      	ldr	r3, [pc, #112]	; (8008258 <vTaskStartScheduler+0xac>)
 80081e6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081e8:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <vTaskStartScheduler+0xac>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e001      	b.n	80081fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d115      	bne.n	800822c <vTaskStartScheduler+0x80>
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <vTaskStartScheduler+0xb0>)
 8008214:	f04f 32ff 	mov.w	r2, #4294967295
 8008218:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800821a:	4b11      	ldr	r3, [pc, #68]	; (8008260 <vTaskStartScheduler+0xb4>)
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008220:	4b10      	ldr	r3, [pc, #64]	; (8008264 <vTaskStartScheduler+0xb8>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008226:	f000 fdeb 	bl	8008e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800822a:	e00d      	b.n	8008248 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d109      	bne.n	8008248 <vTaskStartScheduler+0x9c>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	e7fe      	b.n	8008246 <vTaskStartScheduler+0x9a>
}
 8008248:	bf00      	nop
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	0800a640 	.word	0x0800a640
 8008254:	080087f1 	.word	0x080087f1
 8008258:	20000434 	.word	0x20000434
 800825c:	20000430 	.word	0x20000430
 8008260:	2000041c 	.word	0x2000041c
 8008264:	20000414 	.word	0x20000414

08008268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800826c:	4b04      	ldr	r3, [pc, #16]	; (8008280 <vTaskSuspendAll+0x18>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	4a03      	ldr	r2, [pc, #12]	; (8008280 <vTaskSuspendAll+0x18>)
 8008274:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008276:	bf00      	nop
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000438 	.word	0x20000438

08008284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008292:	4b41      	ldr	r3, [pc, #260]	; (8008398 <xTaskResumeAll+0x114>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <xTaskResumeAll+0x2a>
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	603b      	str	r3, [r7, #0]
 80082ac:	e7fe      	b.n	80082ac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082ae:	f000 fe45 	bl	8008f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082b2:	4b39      	ldr	r3, [pc, #228]	; (8008398 <xTaskResumeAll+0x114>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	4a37      	ldr	r2, [pc, #220]	; (8008398 <xTaskResumeAll+0x114>)
 80082ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082bc:	4b36      	ldr	r3, [pc, #216]	; (8008398 <xTaskResumeAll+0x114>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d161      	bne.n	8008388 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082c4:	4b35      	ldr	r3, [pc, #212]	; (800839c <xTaskResumeAll+0x118>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d05d      	beq.n	8008388 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082cc:	e02e      	b.n	800832c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ce:	4b34      	ldr	r3, [pc, #208]	; (80083a0 <xTaskResumeAll+0x11c>)
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3318      	adds	r3, #24
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff faa0 	bl	8007820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3304      	adds	r3, #4
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff fa9b 	bl	8007820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	2201      	movs	r2, #1
 80082f0:	409a      	lsls	r2, r3
 80082f2:	4b2c      	ldr	r3, [pc, #176]	; (80083a4 <xTaskResumeAll+0x120>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	4a2a      	ldr	r2, [pc, #168]	; (80083a4 <xTaskResumeAll+0x120>)
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008300:	4613      	mov	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4a27      	ldr	r2, [pc, #156]	; (80083a8 <xTaskResumeAll+0x124>)
 800830a:	441a      	add	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f7ff fa27 	bl	8007766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831c:	4b23      	ldr	r3, [pc, #140]	; (80083ac <xTaskResumeAll+0x128>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	429a      	cmp	r2, r3
 8008324:	d302      	bcc.n	800832c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008326:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <xTaskResumeAll+0x12c>)
 8008328:	2201      	movs	r2, #1
 800832a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800832c:	4b1c      	ldr	r3, [pc, #112]	; (80083a0 <xTaskResumeAll+0x11c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1cc      	bne.n	80082ce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800833a:	f000 fb0b 	bl	8008954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800833e:	4b1d      	ldr	r3, [pc, #116]	; (80083b4 <xTaskResumeAll+0x130>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d010      	beq.n	800836c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800834a:	f000 f837 	bl	80083bc <xTaskIncrementTick>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008354:	4b16      	ldr	r3, [pc, #88]	; (80083b0 <xTaskResumeAll+0x12c>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3b01      	subs	r3, #1
 800835e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f1      	bne.n	800834a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <xTaskResumeAll+0x130>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800836c:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <xTaskResumeAll+0x12c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d009      	beq.n	8008388 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008374:	2301      	movs	r3, #1
 8008376:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008378:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <xTaskResumeAll+0x134>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008388:	f000 fe06 	bl	8008f98 <vPortExitCritical>

	return xAlreadyYielded;
 800838c:	68bb      	ldr	r3, [r7, #8]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000438 	.word	0x20000438
 800839c:	20000410 	.word	0x20000410
 80083a0:	200003d0 	.word	0x200003d0
 80083a4:	20000418 	.word	0x20000418
 80083a8:	20000314 	.word	0x20000314
 80083ac:	20000310 	.word	0x20000310
 80083b0:	20000424 	.word	0x20000424
 80083b4:	20000420 	.word	0x20000420
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083c6:	4b4e      	ldr	r3, [pc, #312]	; (8008500 <xTaskIncrementTick+0x144>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f040 8087 	bne.w	80084de <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083d0:	4b4c      	ldr	r3, [pc, #304]	; (8008504 <xTaskIncrementTick+0x148>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3301      	adds	r3, #1
 80083d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083d8:	4a4a      	ldr	r2, [pc, #296]	; (8008504 <xTaskIncrementTick+0x148>)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d11f      	bne.n	8008424 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80083e4:	4b48      	ldr	r3, [pc, #288]	; (8008508 <xTaskIncrementTick+0x14c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d009      	beq.n	8008402 <xTaskIncrementTick+0x46>
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	e7fe      	b.n	8008400 <xTaskIncrementTick+0x44>
 8008402:	4b41      	ldr	r3, [pc, #260]	; (8008508 <xTaskIncrementTick+0x14c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	4b40      	ldr	r3, [pc, #256]	; (800850c <xTaskIncrementTick+0x150>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a3e      	ldr	r2, [pc, #248]	; (8008508 <xTaskIncrementTick+0x14c>)
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	4a3e      	ldr	r2, [pc, #248]	; (800850c <xTaskIncrementTick+0x150>)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	4b3e      	ldr	r3, [pc, #248]	; (8008510 <xTaskIncrementTick+0x154>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3301      	adds	r3, #1
 800841c:	4a3c      	ldr	r2, [pc, #240]	; (8008510 <xTaskIncrementTick+0x154>)
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	f000 fa98 	bl	8008954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008424:	4b3b      	ldr	r3, [pc, #236]	; (8008514 <xTaskIncrementTick+0x158>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	429a      	cmp	r2, r3
 800842c:	d348      	bcc.n	80084c0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800842e:	4b36      	ldr	r3, [pc, #216]	; (8008508 <xTaskIncrementTick+0x14c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008438:	4b36      	ldr	r3, [pc, #216]	; (8008514 <xTaskIncrementTick+0x158>)
 800843a:	f04f 32ff 	mov.w	r2, #4294967295
 800843e:	601a      	str	r2, [r3, #0]
					break;
 8008440:	e03e      	b.n	80084c0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008442:	4b31      	ldr	r3, [pc, #196]	; (8008508 <xTaskIncrementTick+0x14c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d203      	bcs.n	8008462 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800845a:	4a2e      	ldr	r2, [pc, #184]	; (8008514 <xTaskIncrementTick+0x158>)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008460:	e02e      	b.n	80084c0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	3304      	adds	r3, #4
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff f9da 	bl	8007820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008470:	2b00      	cmp	r3, #0
 8008472:	d004      	beq.n	800847e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	3318      	adds	r3, #24
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff f9d1 	bl	8007820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	2201      	movs	r2, #1
 8008484:	409a      	lsls	r2, r3
 8008486:	4b24      	ldr	r3, [pc, #144]	; (8008518 <xTaskIncrementTick+0x15c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4313      	orrs	r3, r2
 800848c:	4a22      	ldr	r2, [pc, #136]	; (8008518 <xTaskIncrementTick+0x15c>)
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4a1f      	ldr	r2, [pc, #124]	; (800851c <xTaskIncrementTick+0x160>)
 800849e:	441a      	add	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f7ff f95d 	bl	8007766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b0:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <xTaskIncrementTick+0x164>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d3b9      	bcc.n	800842e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084be:	e7b6      	b.n	800842e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084c0:	4b17      	ldr	r3, [pc, #92]	; (8008520 <xTaskIncrementTick+0x164>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c6:	4915      	ldr	r1, [pc, #84]	; (800851c <xTaskIncrementTick+0x160>)
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d907      	bls.n	80084e8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	e004      	b.n	80084e8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084de:	4b11      	ldr	r3, [pc, #68]	; (8008524 <xTaskIncrementTick+0x168>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3301      	adds	r3, #1
 80084e4:	4a0f      	ldr	r2, [pc, #60]	; (8008524 <xTaskIncrementTick+0x168>)
 80084e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <xTaskIncrementTick+0x16c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80084f0:	2301      	movs	r3, #1
 80084f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084f4:	697b      	ldr	r3, [r7, #20]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000438 	.word	0x20000438
 8008504:	20000414 	.word	0x20000414
 8008508:	200003c8 	.word	0x200003c8
 800850c:	200003cc 	.word	0x200003cc
 8008510:	20000428 	.word	0x20000428
 8008514:	20000430 	.word	0x20000430
 8008518:	20000418 	.word	0x20000418
 800851c:	20000314 	.word	0x20000314
 8008520:	20000310 	.word	0x20000310
 8008524:	20000420 	.word	0x20000420
 8008528:	20000424 	.word	0x20000424

0800852c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008532:	4b26      	ldr	r3, [pc, #152]	; (80085cc <vTaskSwitchContext+0xa0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800853a:	4b25      	ldr	r3, [pc, #148]	; (80085d0 <vTaskSwitchContext+0xa4>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008540:	e03e      	b.n	80085c0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008542:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <vTaskSwitchContext+0xa4>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008548:	4b22      	ldr	r3, [pc, #136]	; (80085d4 <vTaskSwitchContext+0xa8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	fab3 f383 	clz	r3, r3
 8008554:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008556:	7afb      	ldrb	r3, [r7, #11]
 8008558:	f1c3 031f 	rsb	r3, r3, #31
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	491e      	ldr	r1, [pc, #120]	; (80085d8 <vTaskSwitchContext+0xac>)
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	440b      	add	r3, r1
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	607b      	str	r3, [r7, #4]
 8008584:	e7fe      	b.n	8008584 <vTaskSwitchContext+0x58>
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a11      	ldr	r2, [pc, #68]	; (80085d8 <vTaskSwitchContext+0xac>)
 8008592:	4413      	add	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	605a      	str	r2, [r3, #4]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	3308      	adds	r3, #8
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d104      	bne.n	80085b6 <vTaskSwitchContext+0x8a>
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	4a07      	ldr	r2, [pc, #28]	; (80085dc <vTaskSwitchContext+0xb0>)
 80085be:	6013      	str	r3, [r2, #0]
}
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000438 	.word	0x20000438
 80085d0:	20000424 	.word	0x20000424
 80085d4:	20000418 	.word	0x20000418
 80085d8:	20000314 	.word	0x20000314
 80085dc:	20000310 	.word	0x20000310

080085e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <vTaskPlaceOnEventList+0x24>
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	e7fe      	b.n	8008602 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008604:	4b07      	ldr	r3, [pc, #28]	; (8008624 <vTaskPlaceOnEventList+0x44>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3318      	adds	r3, #24
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff f8ce 	bl	80077ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008612:	2101      	movs	r1, #1
 8008614:	6838      	ldr	r0, [r7, #0]
 8008616:	f000 fb07 	bl	8008c28 <prvAddCurrentTaskToDelayedList>
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000310 	.word	0x20000310

08008628 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <xTaskRemoveFromEventList+0x2a>
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e7fe      	b.n	8008650 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	3318      	adds	r3, #24
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff f8e2 	bl	8007820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865c:	4b1d      	ldr	r3, [pc, #116]	; (80086d4 <xTaskRemoveFromEventList+0xac>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d11c      	bne.n	800869e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	3304      	adds	r3, #4
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff f8d9 	bl	8007820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	2201      	movs	r2, #1
 8008674:	409a      	lsls	r2, r3
 8008676:	4b18      	ldr	r3, [pc, #96]	; (80086d8 <xTaskRemoveFromEventList+0xb0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4313      	orrs	r3, r2
 800867c:	4a16      	ldr	r2, [pc, #88]	; (80086d8 <xTaskRemoveFromEventList+0xb0>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4a13      	ldr	r2, [pc, #76]	; (80086dc <xTaskRemoveFromEventList+0xb4>)
 800868e:	441a      	add	r2, r3
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f7ff f865 	bl	8007766 <vListInsertEnd>
 800869c:	e005      	b.n	80086aa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3318      	adds	r3, #24
 80086a2:	4619      	mov	r1, r3
 80086a4:	480e      	ldr	r0, [pc, #56]	; (80086e0 <xTaskRemoveFromEventList+0xb8>)
 80086a6:	f7ff f85e 	bl	8007766 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ae:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <xTaskRemoveFromEventList+0xbc>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d905      	bls.n	80086c4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086b8:	2301      	movs	r3, #1
 80086ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086bc:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <xTaskRemoveFromEventList+0xc0>)
 80086be:	2201      	movs	r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e001      	b.n	80086c8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086c8:	697b      	ldr	r3, [r7, #20]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000438 	.word	0x20000438
 80086d8:	20000418 	.word	0x20000418
 80086dc:	20000314 	.word	0x20000314
 80086e0:	200003d0 	.word	0x200003d0
 80086e4:	20000310 	.word	0x20000310
 80086e8:	20000424 	.word	0x20000424

080086ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <vTaskInternalSetTimeOutState+0x24>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <vTaskInternalSetTimeOutState+0x28>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	605a      	str	r2, [r3, #4]
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	20000428 	.word	0x20000428
 8008714:	20000414 	.word	0x20000414

08008718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <xTaskCheckForTimeOut+0x24>
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	613b      	str	r3, [r7, #16]
 800873a:	e7fe      	b.n	800873a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <xTaskCheckForTimeOut+0x3e>
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	e7fe      	b.n	8008754 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008756:	f000 fbf1 	bl	8008f3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800875a:	4b1d      	ldr	r3, [pc, #116]	; (80087d0 <xTaskCheckForTimeOut+0xb8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d102      	bne.n	800877a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008774:	2300      	movs	r3, #0
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	e023      	b.n	80087c2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b15      	ldr	r3, [pc, #84]	; (80087d4 <xTaskCheckForTimeOut+0xbc>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d007      	beq.n	8008796 <xTaskCheckForTimeOut+0x7e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	429a      	cmp	r2, r3
 800878e:	d302      	bcc.n	8008796 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008790:	2301      	movs	r3, #1
 8008792:	61fb      	str	r3, [r7, #28]
 8008794:	e015      	b.n	80087c2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	429a      	cmp	r2, r3
 800879e:	d20b      	bcs.n	80087b8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	1ad2      	subs	r2, r2, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff ff9d 	bl	80086ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61fb      	str	r3, [r7, #28]
 80087b6:	e004      	b.n	80087c2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087be:	2301      	movs	r3, #1
 80087c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087c2:	f000 fbe9 	bl	8008f98 <vPortExitCritical>

	return xReturn;
 80087c6:	69fb      	ldr	r3, [r7, #28]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3720      	adds	r7, #32
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000414 	.word	0x20000414
 80087d4:	20000428 	.word	0x20000428

080087d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087dc:	4b03      	ldr	r3, [pc, #12]	; (80087ec <vTaskMissedYield+0x14>)
 80087de:	2201      	movs	r2, #1
 80087e0:	601a      	str	r2, [r3, #0]
}
 80087e2:	bf00      	nop
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	20000424 	.word	0x20000424

080087f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087f8:	f000 f852 	bl	80088a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <prvIdleTask+0x28>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d9f9      	bls.n	80087f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <prvIdleTask+0x2c>)
 8008806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008814:	e7f0      	b.n	80087f8 <prvIdleTask+0x8>
 8008816:	bf00      	nop
 8008818:	20000314 	.word	0x20000314
 800881c:	e000ed04 	.word	0xe000ed04

08008820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008826:	2300      	movs	r3, #0
 8008828:	607b      	str	r3, [r7, #4]
 800882a:	e00c      	b.n	8008846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4a12      	ldr	r2, [pc, #72]	; (8008880 <prvInitialiseTaskLists+0x60>)
 8008838:	4413      	add	r3, r2
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe ff66 	bl	800770c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3301      	adds	r3, #1
 8008844:	607b      	str	r3, [r7, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b06      	cmp	r3, #6
 800884a:	d9ef      	bls.n	800882c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800884c:	480d      	ldr	r0, [pc, #52]	; (8008884 <prvInitialiseTaskLists+0x64>)
 800884e:	f7fe ff5d 	bl	800770c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008852:	480d      	ldr	r0, [pc, #52]	; (8008888 <prvInitialiseTaskLists+0x68>)
 8008854:	f7fe ff5a 	bl	800770c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008858:	480c      	ldr	r0, [pc, #48]	; (800888c <prvInitialiseTaskLists+0x6c>)
 800885a:	f7fe ff57 	bl	800770c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800885e:	480c      	ldr	r0, [pc, #48]	; (8008890 <prvInitialiseTaskLists+0x70>)
 8008860:	f7fe ff54 	bl	800770c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008864:	480b      	ldr	r0, [pc, #44]	; (8008894 <prvInitialiseTaskLists+0x74>)
 8008866:	f7fe ff51 	bl	800770c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800886a:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <prvInitialiseTaskLists+0x78>)
 800886c:	4a05      	ldr	r2, [pc, #20]	; (8008884 <prvInitialiseTaskLists+0x64>)
 800886e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <prvInitialiseTaskLists+0x7c>)
 8008872:	4a05      	ldr	r2, [pc, #20]	; (8008888 <prvInitialiseTaskLists+0x68>)
 8008874:	601a      	str	r2, [r3, #0]
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20000314 	.word	0x20000314
 8008884:	200003a0 	.word	0x200003a0
 8008888:	200003b4 	.word	0x200003b4
 800888c:	200003d0 	.word	0x200003d0
 8008890:	200003e4 	.word	0x200003e4
 8008894:	200003fc 	.word	0x200003fc
 8008898:	200003c8 	.word	0x200003c8
 800889c:	200003cc 	.word	0x200003cc

080088a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088a6:	e019      	b.n	80088dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088a8:	f000 fb48 	bl	8008f3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <prvCheckTasksWaitingTermination+0x4c>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3304      	adds	r3, #4
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe ffb1 	bl	8007820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088be:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <prvCheckTasksWaitingTermination+0x50>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	4a0a      	ldr	r2, [pc, #40]	; (80088f0 <prvCheckTasksWaitingTermination+0x50>)
 80088c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088c8:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <prvCheckTasksWaitingTermination+0x54>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	4a09      	ldr	r2, [pc, #36]	; (80088f4 <prvCheckTasksWaitingTermination+0x54>)
 80088d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088d2:	f000 fb61 	bl	8008f98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f80e 	bl	80088f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <prvCheckTasksWaitingTermination+0x54>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e1      	bne.n	80088a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	200003e4 	.word	0x200003e4
 80088f0:	20000410 	.word	0x20000410
 80088f4:	200003f8 	.word	0x200003f8

080088f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008906:	2b00      	cmp	r3, #0
 8008908:	d108      	bne.n	800891c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fcf0 	bl	80092f4 <vPortFree>
				vPortFree( pxTCB );
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fced 	bl	80092f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800891a:	e017      	b.n	800894c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008922:	2b01      	cmp	r3, #1
 8008924:	d103      	bne.n	800892e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fce4 	bl	80092f4 <vPortFree>
	}
 800892c:	e00e      	b.n	800894c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008934:	2b02      	cmp	r3, #2
 8008936:	d009      	beq.n	800894c <prvDeleteTCB+0x54>
 8008938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e7fe      	b.n	800894a <prvDeleteTCB+0x52>
	}
 800894c:	bf00      	nop
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800895a:	4b0c      	ldr	r3, [pc, #48]	; (800898c <prvResetNextTaskUnblockTime+0x38>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d104      	bne.n	800896e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008964:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <prvResetNextTaskUnblockTime+0x3c>)
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800896c:	e008      	b.n	8008980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <prvResetNextTaskUnblockTime+0x38>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4a04      	ldr	r2, [pc, #16]	; (8008990 <prvResetNextTaskUnblockTime+0x3c>)
 800897e:	6013      	str	r3, [r2, #0]
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	200003c8 	.word	0x200003c8
 8008990:	20000430 	.word	0x20000430

08008994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800899a:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <xTaskGetSchedulerState+0x34>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089a2:	2301      	movs	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	e008      	b.n	80089ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a8:	4b08      	ldr	r3, [pc, #32]	; (80089cc <xTaskGetSchedulerState+0x38>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089b0:	2302      	movs	r3, #2
 80089b2:	607b      	str	r3, [r7, #4]
 80089b4:	e001      	b.n	80089ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089b6:	2300      	movs	r3, #0
 80089b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089ba:	687b      	ldr	r3, [r7, #4]
	}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	2000041c 	.word	0x2000041c
 80089cc:	20000438 	.word	0x20000438

080089d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d069      	beq.n	8008aba <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ea:	4b36      	ldr	r3, [pc, #216]	; (8008ac4 <xTaskPriorityInherit+0xf4>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d259      	bcs.n	8008aa8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	db06      	blt.n	8008a0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089fc:	4b31      	ldr	r3, [pc, #196]	; (8008ac4 <xTaskPriorityInherit+0xf4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	f1c3 0207 	rsb	r2, r3, #7
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	6959      	ldr	r1, [r3, #20]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4a2b      	ldr	r2, [pc, #172]	; (8008ac8 <xTaskPriorityInherit+0xf8>)
 8008a1c:	4413      	add	r3, r2
 8008a1e:	4299      	cmp	r1, r3
 8008a20:	d13a      	bne.n	8008a98 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	3304      	adds	r3, #4
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fefa 	bl	8007820 <uxListRemove>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d115      	bne.n	8008a5e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a36:	4924      	ldr	r1, [pc, #144]	; (8008ac8 <xTaskPriorityInherit+0xf8>)
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	440b      	add	r3, r1
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <xTaskPriorityInherit+0x8e>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a52:	43da      	mvns	r2, r3
 8008a54:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <xTaskPriorityInherit+0xfc>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	4a1c      	ldr	r2, [pc, #112]	; (8008acc <xTaskPriorityInherit+0xfc>)
 8008a5c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a5e:	4b19      	ldr	r3, [pc, #100]	; (8008ac4 <xTaskPriorityInherit+0xf4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	409a      	lsls	r2, r3
 8008a70:	4b16      	ldr	r3, [pc, #88]	; (8008acc <xTaskPriorityInherit+0xfc>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	4a15      	ldr	r2, [pc, #84]	; (8008acc <xTaskPriorityInherit+0xfc>)
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4a10      	ldr	r2, [pc, #64]	; (8008ac8 <xTaskPriorityInherit+0xf8>)
 8008a88:	441a      	add	r2, r3
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f7fe fe68 	bl	8007766 <vListInsertEnd>
 8008a96:	e004      	b.n	8008aa2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a98:	4b0a      	ldr	r3, [pc, #40]	; (8008ac4 <xTaskPriorityInherit+0xf4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e008      	b.n	8008aba <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <xTaskPriorityInherit+0xf4>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d201      	bcs.n	8008aba <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008aba:	68fb      	ldr	r3, [r7, #12]
	}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	20000310 	.word	0x20000310
 8008ac8:	20000314 	.word	0x20000314
 8008acc:	20000418 	.word	0x20000418

08008ad0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 8081 	beq.w	8008bec <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d109      	bne.n	8008b06 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e7fe      	b.n	8008b04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d902      	bls.n	8008b16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	e002      	b.n	8008b1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d062      	beq.n	8008bec <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d15d      	bne.n	8008bec <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b30:	4b30      	ldr	r3, [pc, #192]	; (8008bf4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d109      	bne.n	8008b4e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	60bb      	str	r3, [r7, #8]
 8008b4c:	e7fe      	b.n	8008b4c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	db04      	blt.n	8008b6c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	f1c3 0207 	rsb	r2, r3, #7
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	6959      	ldr	r1, [r3, #20]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4613      	mov	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4a1f      	ldr	r2, [pc, #124]	; (8008bf8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008b7c:	4413      	add	r3, r2
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	d134      	bne.n	8008bec <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	3304      	adds	r3, #4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fe4a 	bl	8007820 <uxListRemove>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d115      	bne.n	8008bbe <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4918      	ldr	r1, [pc, #96]	; (8008bf8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <vTaskPriorityDisinheritAfterTimeout+0xee>
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	2201      	movs	r2, #1
 8008bae:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb2:	43da      	mvns	r2, r3
 8008bb4:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	4a10      	ldr	r2, [pc, #64]	; (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008bbc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	409a      	lsls	r2, r3
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	4a0b      	ldr	r2, [pc, #44]	; (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4a06      	ldr	r2, [pc, #24]	; (8008bf8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008bde:	441a      	add	r2, r3
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f7fe fdbd 	bl	8007766 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bec:	bf00      	nop
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20000310 	.word	0x20000310
 8008bf8:	20000314 	.word	0x20000314
 8008bfc:	20000418 	.word	0x20000418

08008c00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c12:	3201      	adds	r2, #1
 8008c14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008c16:	4b03      	ldr	r3, [pc, #12]	; (8008c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c18:	681b      	ldr	r3, [r3, #0]
	}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	20000310 	.word	0x20000310

08008c28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c32:	4b29      	ldr	r3, [pc, #164]	; (8008cd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c38:	4b28      	ldr	r3, [pc, #160]	; (8008cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe fdee 	bl	8007820 <uxListRemove>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10b      	bne.n	8008c62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c4a:	4b24      	ldr	r3, [pc, #144]	; (8008cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	2201      	movs	r2, #1
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	43da      	mvns	r2, r3
 8008c58:	4b21      	ldr	r3, [pc, #132]	; (8008ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	4a20      	ldr	r2, [pc, #128]	; (8008ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c68:	d10a      	bne.n	8008c80 <prvAddCurrentTaskToDelayedList+0x58>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c70:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4619      	mov	r1, r3
 8008c78:	481a      	ldr	r0, [pc, #104]	; (8008ce4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c7a:	f7fe fd74 	bl	8007766 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c7e:	e026      	b.n	8008cce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4413      	add	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c88:	4b14      	ldr	r3, [pc, #80]	; (8008cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d209      	bcs.n	8008cac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c98:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f7fe fd82 	bl	80077ae <vListInsert>
}
 8008caa:	e010      	b.n	8008cce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <prvAddCurrentTaskToDelayedList+0xc4>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f7fe fd78 	bl	80077ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d202      	bcs.n	8008cce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008cc8:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	6013      	str	r3, [r2, #0]
}
 8008cce:	bf00      	nop
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000414 	.word	0x20000414
 8008cdc:	20000310 	.word	0x20000310
 8008ce0:	20000418 	.word	0x20000418
 8008ce4:	200003fc 	.word	0x200003fc
 8008ce8:	200003cc 	.word	0x200003cc
 8008cec:	200003c8 	.word	0x200003c8
 8008cf0:	20000430 	.word	0x20000430

08008cf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3b04      	subs	r3, #4
 8008d04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3b04      	subs	r3, #4
 8008d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f023 0201 	bic.w	r2, r3, #1
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3b04      	subs	r3, #4
 8008d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d24:	4a0c      	ldr	r2, [pc, #48]	; (8008d58 <pxPortInitialiseStack+0x64>)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3b14      	subs	r3, #20
 8008d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3b04      	subs	r3, #4
 8008d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f06f 0202 	mvn.w	r2, #2
 8008d42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	3b20      	subs	r3, #32
 8008d48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	08008d5d 	.word	0x08008d5d

08008d5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d66:	4b11      	ldr	r3, [pc, #68]	; (8008dac <prvTaskExitError+0x50>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d009      	beq.n	8008d84 <prvTaskExitError+0x28>
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	e7fe      	b.n	8008d82 <prvTaskExitError+0x26>
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d96:	bf00      	nop
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0fc      	beq.n	8008d98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d9e:	bf00      	nop
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	2000002c 	.word	0x2000002c

08008db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <pxCurrentTCBConst2>)
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	6808      	ldr	r0, [r1, #0]
 8008db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dba:	f380 8809 	msr	PSP, r0
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8811 	msr	BASEPRI, r0
 8008dca:	4770      	bx	lr
 8008dcc:	f3af 8000 	nop.w

08008dd0 <pxCurrentTCBConst2>:
 8008dd0:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop

08008dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008dd8:	4808      	ldr	r0, [pc, #32]	; (8008dfc <prvPortStartFirstTask+0x24>)
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	6800      	ldr	r0, [r0, #0]
 8008dde:	f380 8808 	msr	MSP, r0
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f380 8814 	msr	CONTROL, r0
 8008dea:	b662      	cpsie	i
 8008dec:	b661      	cpsie	f
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	df00      	svc	0
 8008df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dfa:	bf00      	nop
 8008dfc:	e000ed08 	.word	0xe000ed08

08008e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e06:	4b44      	ldr	r3, [pc, #272]	; (8008f18 <xPortStartScheduler+0x118>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a44      	ldr	r2, [pc, #272]	; (8008f1c <xPortStartScheduler+0x11c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d109      	bne.n	8008e24 <xPortStartScheduler+0x24>
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	e7fe      	b.n	8008e22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e24:	4b3c      	ldr	r3, [pc, #240]	; (8008f18 <xPortStartScheduler+0x118>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a3d      	ldr	r2, [pc, #244]	; (8008f20 <xPortStartScheduler+0x120>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d109      	bne.n	8008e42 <xPortStartScheduler+0x42>
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e7fe      	b.n	8008e40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e42:	4b38      	ldr	r3, [pc, #224]	; (8008f24 <xPortStartScheduler+0x124>)
 8008e44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	22ff      	movs	r2, #255	; 0xff
 8008e52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	4b30      	ldr	r3, [pc, #192]	; (8008f28 <xPortStartScheduler+0x128>)
 8008e68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e6a:	4b30      	ldr	r3, [pc, #192]	; (8008f2c <xPortStartScheduler+0x12c>)
 8008e6c:	2207      	movs	r2, #7
 8008e6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e70:	e009      	b.n	8008e86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008e72:	4b2e      	ldr	r3, [pc, #184]	; (8008f2c <xPortStartScheduler+0x12c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	4a2c      	ldr	r2, [pc, #176]	; (8008f2c <xPortStartScheduler+0x12c>)
 8008e7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8e:	2b80      	cmp	r3, #128	; 0x80
 8008e90:	d0ef      	beq.n	8008e72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e92:	4b26      	ldr	r3, [pc, #152]	; (8008f2c <xPortStartScheduler+0x12c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f1c3 0307 	rsb	r3, r3, #7
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d009      	beq.n	8008eb2 <xPortStartScheduler+0xb2>
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	60bb      	str	r3, [r7, #8]
 8008eb0:	e7fe      	b.n	8008eb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008eb2:	4b1e      	ldr	r3, [pc, #120]	; (8008f2c <xPortStartScheduler+0x12c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	021b      	lsls	r3, r3, #8
 8008eb8:	4a1c      	ldr	r2, [pc, #112]	; (8008f2c <xPortStartScheduler+0x12c>)
 8008eba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ebc:	4b1b      	ldr	r3, [pc, #108]	; (8008f2c <xPortStartScheduler+0x12c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ec4:	4a19      	ldr	r2, [pc, #100]	; (8008f2c <xPortStartScheduler+0x12c>)
 8008ec6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ed0:	4b17      	ldr	r3, [pc, #92]	; (8008f30 <xPortStartScheduler+0x130>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a16      	ldr	r2, [pc, #88]	; (8008f30 <xPortStartScheduler+0x130>)
 8008ed6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008eda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008edc:	4b14      	ldr	r3, [pc, #80]	; (8008f30 <xPortStartScheduler+0x130>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a13      	ldr	r2, [pc, #76]	; (8008f30 <xPortStartScheduler+0x130>)
 8008ee2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ee6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ee8:	f000 f8d6 	bl	8009098 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008eec:	4b11      	ldr	r3, [pc, #68]	; (8008f34 <xPortStartScheduler+0x134>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ef2:	f000 f8f5 	bl	80090e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ef6:	4b10      	ldr	r3, [pc, #64]	; (8008f38 <xPortStartScheduler+0x138>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a0f      	ldr	r2, [pc, #60]	; (8008f38 <xPortStartScheduler+0x138>)
 8008efc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f02:	f7ff ff69 	bl	8008dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f06:	f7ff fb11 	bl	800852c <vTaskSwitchContext>
	prvTaskExitError();
 8008f0a:	f7ff ff27 	bl	8008d5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	e000ed00 	.word	0xe000ed00
 8008f1c:	410fc271 	.word	0x410fc271
 8008f20:	410fc270 	.word	0x410fc270
 8008f24:	e000e400 	.word	0xe000e400
 8008f28:	2000043c 	.word	0x2000043c
 8008f2c:	20000440 	.word	0x20000440
 8008f30:	e000ed20 	.word	0xe000ed20
 8008f34:	2000002c 	.word	0x2000002c
 8008f38:	e000ef34 	.word	0xe000ef34

08008f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f54:	4b0e      	ldr	r3, [pc, #56]	; (8008f90 <vPortEnterCritical+0x54>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	4a0d      	ldr	r2, [pc, #52]	; (8008f90 <vPortEnterCritical+0x54>)
 8008f5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f5e:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <vPortEnterCritical+0x54>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d10e      	bne.n	8008f84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f66:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <vPortEnterCritical+0x58>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d009      	beq.n	8008f84 <vPortEnterCritical+0x48>
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	e7fe      	b.n	8008f82 <vPortEnterCritical+0x46>
	}
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	2000002c 	.word	0x2000002c
 8008f94:	e000ed04 	.word	0xe000ed04

08008f98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f9e:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <vPortExitCritical+0x4c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <vPortExitCritical+0x22>
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	607b      	str	r3, [r7, #4]
 8008fb8:	e7fe      	b.n	8008fb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008fba:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <vPortExitCritical+0x4c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	4a08      	ldr	r2, [pc, #32]	; (8008fe4 <vPortExitCritical+0x4c>)
 8008fc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fc4:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <vPortExitCritical+0x4c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d104      	bne.n	8008fd6 <vPortExitCritical+0x3e>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	2000002c 	.word	0x2000002c
	...

08008ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ff0:	f3ef 8009 	mrs	r0, PSP
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	4b15      	ldr	r3, [pc, #84]	; (8009050 <pxCurrentTCBConst>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f01e 0f10 	tst.w	lr, #16
 8009000:	bf08      	it	eq
 8009002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900a:	6010      	str	r0, [r2, #0]
 800900c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009014:	f380 8811 	msr	BASEPRI, r0
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f7ff fa84 	bl	800852c <vTaskSwitchContext>
 8009024:	f04f 0000 	mov.w	r0, #0
 8009028:	f380 8811 	msr	BASEPRI, r0
 800902c:	bc09      	pop	{r0, r3}
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	6808      	ldr	r0, [r1, #0]
 8009032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009036:	f01e 0f10 	tst.w	lr, #16
 800903a:	bf08      	it	eq
 800903c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009040:	f380 8809 	msr	PSP, r0
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w

08009050 <pxCurrentTCBConst>:
 8009050:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop

08009058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009070:	f7ff f9a4 	bl	80083bc <xTaskIncrementTick>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800907a:	4b06      	ldr	r3, [pc, #24]	; (8009094 <SysTick_Handler+0x3c>)
 800907c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	2300      	movs	r3, #0
 8009084:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <vPortSetupTimerInterrupt+0x34>)
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090a2:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <vPortSetupTimerInterrupt+0x38>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <vPortSetupTimerInterrupt+0x3c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a0a      	ldr	r2, [pc, #40]	; (80090d8 <vPortSetupTimerInterrupt+0x40>)
 80090ae:	fba2 2303 	umull	r2, r3, r2, r3
 80090b2:	099b      	lsrs	r3, r3, #6
 80090b4:	4a09      	ldr	r2, [pc, #36]	; (80090dc <vPortSetupTimerInterrupt+0x44>)
 80090b6:	3b01      	subs	r3, #1
 80090b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ba:	4b04      	ldr	r3, [pc, #16]	; (80090cc <vPortSetupTimerInterrupt+0x34>)
 80090bc:	2207      	movs	r2, #7
 80090be:	601a      	str	r2, [r3, #0]
}
 80090c0:	bf00      	nop
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	e000e010 	.word	0xe000e010
 80090d0:	e000e018 	.word	0xe000e018
 80090d4:	20000020 	.word	0x20000020
 80090d8:	10624dd3 	.word	0x10624dd3
 80090dc:	e000e014 	.word	0xe000e014

080090e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090f0 <vPortEnableVFP+0x10>
 80090e4:	6801      	ldr	r1, [r0, #0]
 80090e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090ea:	6001      	str	r1, [r0, #0]
 80090ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090ee:	bf00      	nop
 80090f0:	e000ed88 	.word	0xe000ed88

080090f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090fa:	f3ef 8305 	mrs	r3, IPSR
 80090fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b0f      	cmp	r3, #15
 8009104:	d913      	bls.n	800912e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009106:	4a16      	ldr	r2, [pc, #88]	; (8009160 <vPortValidateInterruptPriority+0x6c>)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009110:	4b14      	ldr	r3, [pc, #80]	; (8009164 <vPortValidateInterruptPriority+0x70>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	7afa      	ldrb	r2, [r7, #11]
 8009116:	429a      	cmp	r2, r3
 8009118:	d209      	bcs.n	800912e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	607b      	str	r3, [r7, #4]
 800912c:	e7fe      	b.n	800912c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800912e:	4b0e      	ldr	r3, [pc, #56]	; (8009168 <vPortValidateInterruptPriority+0x74>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009136:	4b0d      	ldr	r3, [pc, #52]	; (800916c <vPortValidateInterruptPriority+0x78>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d909      	bls.n	8009152 <vPortValidateInterruptPriority+0x5e>
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	e7fe      	b.n	8009150 <vPortValidateInterruptPriority+0x5c>
	}
 8009152:	bf00      	nop
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	e000e3f0 	.word	0xe000e3f0
 8009164:	2000043c 	.word	0x2000043c
 8009168:	e000ed0c 	.word	0xe000ed0c
 800916c:	20000440 	.word	0x20000440

08009170 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	; 0x28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009178:	2300      	movs	r3, #0
 800917a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800917c:	f7ff f874 	bl	8008268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009180:	4b57      	ldr	r3, [pc, #348]	; (80092e0 <pvPortMalloc+0x170>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009188:	f000 f90c 	bl	80093a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800918c:	4b55      	ldr	r3, [pc, #340]	; (80092e4 <pvPortMalloc+0x174>)
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4013      	ands	r3, r2
 8009194:	2b00      	cmp	r3, #0
 8009196:	f040 808c 	bne.w	80092b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01c      	beq.n	80091da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80091a0:	2208      	movs	r2, #8
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d013      	beq.n	80091da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f023 0307 	bic.w	r3, r3, #7
 80091b8:	3308      	adds	r3, #8
 80091ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f003 0307 	and.w	r3, r3, #7
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d009      	beq.n	80091da <pvPortMalloc+0x6a>
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	e7fe      	b.n	80091d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d068      	beq.n	80092b2 <pvPortMalloc+0x142>
 80091e0:	4b41      	ldr	r3, [pc, #260]	; (80092e8 <pvPortMalloc+0x178>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d863      	bhi.n	80092b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091ea:	4b40      	ldr	r3, [pc, #256]	; (80092ec <pvPortMalloc+0x17c>)
 80091ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091ee:	4b3f      	ldr	r3, [pc, #252]	; (80092ec <pvPortMalloc+0x17c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091f4:	e004      	b.n	8009200 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d903      	bls.n	8009212 <pvPortMalloc+0xa2>
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1f1      	bne.n	80091f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009212:	4b33      	ldr	r3, [pc, #204]	; (80092e0 <pvPortMalloc+0x170>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009218:	429a      	cmp	r2, r3
 800921a:	d04a      	beq.n	80092b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2208      	movs	r2, #8
 8009222:	4413      	add	r3, r2
 8009224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	1ad2      	subs	r2, r2, r3
 8009236:	2308      	movs	r3, #8
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	429a      	cmp	r2, r3
 800923c:	d91e      	bls.n	800927c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800923e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	2b00      	cmp	r3, #0
 800924e:	d009      	beq.n	8009264 <pvPortMalloc+0xf4>
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	e7fe      	b.n	8009262 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	1ad2      	subs	r2, r2, r3
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009276:	69b8      	ldr	r0, [r7, #24]
 8009278:	f000 f8f6 	bl	8009468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800927c:	4b1a      	ldr	r3, [pc, #104]	; (80092e8 <pvPortMalloc+0x178>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	4a18      	ldr	r2, [pc, #96]	; (80092e8 <pvPortMalloc+0x178>)
 8009288:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800928a:	4b17      	ldr	r3, [pc, #92]	; (80092e8 <pvPortMalloc+0x178>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4b18      	ldr	r3, [pc, #96]	; (80092f0 <pvPortMalloc+0x180>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d203      	bcs.n	800929e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <pvPortMalloc+0x178>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a15      	ldr	r2, [pc, #84]	; (80092f0 <pvPortMalloc+0x180>)
 800929c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <pvPortMalloc+0x174>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092b2:	f7fe ffe7 	bl	8008284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <pvPortMalloc+0x164>
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	e7fe      	b.n	80092d2 <pvPortMalloc+0x162>
	return pvReturn;
 80092d4:	69fb      	ldr	r3, [r7, #28]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3728      	adds	r7, #40	; 0x28
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	2000404c 	.word	0x2000404c
 80092e4:	20004058 	.word	0x20004058
 80092e8:	20004050 	.word	0x20004050
 80092ec:	20004044 	.word	0x20004044
 80092f0:	20004054 	.word	0x20004054

080092f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d046      	beq.n	8009394 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009306:	2308      	movs	r3, #8
 8009308:	425b      	negs	r3, r3
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	4413      	add	r3, r2
 800930e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	4b20      	ldr	r3, [pc, #128]	; (800939c <vPortFree+0xa8>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4013      	ands	r3, r2
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <vPortFree+0x42>
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	e7fe      	b.n	8009334 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d009      	beq.n	8009352 <vPortFree+0x5e>
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	60bb      	str	r3, [r7, #8]
 8009350:	e7fe      	b.n	8009350 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	4b11      	ldr	r3, [pc, #68]	; (800939c <vPortFree+0xa8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d019      	beq.n	8009394 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d115      	bne.n	8009394 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	4b0b      	ldr	r3, [pc, #44]	; (800939c <vPortFree+0xa8>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	43db      	mvns	r3, r3
 8009372:	401a      	ands	r2, r3
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009378:	f7fe ff76 	bl	8008268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <vPortFree+0xac>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4413      	add	r3, r2
 8009386:	4a06      	ldr	r2, [pc, #24]	; (80093a0 <vPortFree+0xac>)
 8009388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800938a:	6938      	ldr	r0, [r7, #16]
 800938c:	f000 f86c 	bl	8009468 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009390:	f7fe ff78 	bl	8008284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009394:	bf00      	nop
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	20004058 	.word	0x20004058
 80093a0:	20004050 	.word	0x20004050

080093a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093b0:	4b27      	ldr	r3, [pc, #156]	; (8009450 <prvHeapInit+0xac>)
 80093b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00c      	beq.n	80093d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3307      	adds	r3, #7
 80093c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0307 	bic.w	r3, r3, #7
 80093ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	4a1f      	ldr	r2, [pc, #124]	; (8009450 <prvHeapInit+0xac>)
 80093d4:	4413      	add	r3, r2
 80093d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093dc:	4a1d      	ldr	r2, [pc, #116]	; (8009454 <prvHeapInit+0xb0>)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093e2:	4b1c      	ldr	r3, [pc, #112]	; (8009454 <prvHeapInit+0xb0>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	4413      	add	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093f0:	2208      	movs	r2, #8
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1a9b      	subs	r3, r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f023 0307 	bic.w	r3, r3, #7
 80093fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a15      	ldr	r2, [pc, #84]	; (8009458 <prvHeapInit+0xb4>)
 8009404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009406:	4b14      	ldr	r3, [pc, #80]	; (8009458 <prvHeapInit+0xb4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2200      	movs	r2, #0
 800940c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800940e:	4b12      	ldr	r3, [pc, #72]	; (8009458 <prvHeapInit+0xb4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <prvHeapInit+0xb4>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	4a0a      	ldr	r2, [pc, #40]	; (800945c <prvHeapInit+0xb8>)
 8009432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4a09      	ldr	r2, [pc, #36]	; (8009460 <prvHeapInit+0xbc>)
 800943a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800943c:	4b09      	ldr	r3, [pc, #36]	; (8009464 <prvHeapInit+0xc0>)
 800943e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009442:	601a      	str	r2, [r3, #0]
}
 8009444:	bf00      	nop
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	20000444 	.word	0x20000444
 8009454:	20004044 	.word	0x20004044
 8009458:	2000404c 	.word	0x2000404c
 800945c:	20004054 	.word	0x20004054
 8009460:	20004050 	.word	0x20004050
 8009464:	20004058 	.word	0x20004058

08009468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009470:	4b28      	ldr	r3, [pc, #160]	; (8009514 <prvInsertBlockIntoFreeList+0xac>)
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e002      	b.n	800947c <prvInsertBlockIntoFreeList+0x14>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	429a      	cmp	r2, r3
 8009484:	d8f7      	bhi.n	8009476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4413      	add	r3, r2
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	429a      	cmp	r2, r3
 8009496:	d108      	bne.n	80094aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	441a      	add	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	441a      	add	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d118      	bne.n	80094f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <prvInsertBlockIntoFreeList+0xb0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d00d      	beq.n	80094e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	441a      	add	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e008      	b.n	80094f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094e6:	4b0c      	ldr	r3, [pc, #48]	; (8009518 <prvInsertBlockIntoFreeList+0xb0>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	e003      	b.n	80094f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d002      	beq.n	8009506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20004044 	.word	0x20004044
 8009518:	2000404c 	.word	0x2000404c

0800951c <__errno>:
 800951c:	4b01      	ldr	r3, [pc, #4]	; (8009524 <__errno+0x8>)
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000030 	.word	0x20000030

08009528 <__sflush_r>:
 8009528:	898a      	ldrh	r2, [r1, #12]
 800952a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952e:	4605      	mov	r5, r0
 8009530:	0710      	lsls	r0, r2, #28
 8009532:	460c      	mov	r4, r1
 8009534:	d458      	bmi.n	80095e8 <__sflush_r+0xc0>
 8009536:	684b      	ldr	r3, [r1, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	dc05      	bgt.n	8009548 <__sflush_r+0x20>
 800953c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	dc02      	bgt.n	8009548 <__sflush_r+0x20>
 8009542:	2000      	movs	r0, #0
 8009544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800954a:	2e00      	cmp	r6, #0
 800954c:	d0f9      	beq.n	8009542 <__sflush_r+0x1a>
 800954e:	2300      	movs	r3, #0
 8009550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009554:	682f      	ldr	r7, [r5, #0]
 8009556:	6a21      	ldr	r1, [r4, #32]
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	d032      	beq.n	80095c2 <__sflush_r+0x9a>
 800955c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	075a      	lsls	r2, r3, #29
 8009562:	d505      	bpl.n	8009570 <__sflush_r+0x48>
 8009564:	6863      	ldr	r3, [r4, #4]
 8009566:	1ac0      	subs	r0, r0, r3
 8009568:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800956a:	b10b      	cbz	r3, 8009570 <__sflush_r+0x48>
 800956c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800956e:	1ac0      	subs	r0, r0, r3
 8009570:	2300      	movs	r3, #0
 8009572:	4602      	mov	r2, r0
 8009574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009576:	6a21      	ldr	r1, [r4, #32]
 8009578:	4628      	mov	r0, r5
 800957a:	47b0      	blx	r6
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	d106      	bne.n	8009590 <__sflush_r+0x68>
 8009582:	6829      	ldr	r1, [r5, #0]
 8009584:	291d      	cmp	r1, #29
 8009586:	d848      	bhi.n	800961a <__sflush_r+0xf2>
 8009588:	4a29      	ldr	r2, [pc, #164]	; (8009630 <__sflush_r+0x108>)
 800958a:	40ca      	lsrs	r2, r1
 800958c:	07d6      	lsls	r6, r2, #31
 800958e:	d544      	bpl.n	800961a <__sflush_r+0xf2>
 8009590:	2200      	movs	r2, #0
 8009592:	6062      	str	r2, [r4, #4]
 8009594:	04d9      	lsls	r1, r3, #19
 8009596:	6922      	ldr	r2, [r4, #16]
 8009598:	6022      	str	r2, [r4, #0]
 800959a:	d504      	bpl.n	80095a6 <__sflush_r+0x7e>
 800959c:	1c42      	adds	r2, r0, #1
 800959e:	d101      	bne.n	80095a4 <__sflush_r+0x7c>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b903      	cbnz	r3, 80095a6 <__sflush_r+0x7e>
 80095a4:	6560      	str	r0, [r4, #84]	; 0x54
 80095a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a8:	602f      	str	r7, [r5, #0]
 80095aa:	2900      	cmp	r1, #0
 80095ac:	d0c9      	beq.n	8009542 <__sflush_r+0x1a>
 80095ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095b2:	4299      	cmp	r1, r3
 80095b4:	d002      	beq.n	80095bc <__sflush_r+0x94>
 80095b6:	4628      	mov	r0, r5
 80095b8:	f000 f96e 	bl	8009898 <_free_r>
 80095bc:	2000      	movs	r0, #0
 80095be:	6360      	str	r0, [r4, #52]	; 0x34
 80095c0:	e7c0      	b.n	8009544 <__sflush_r+0x1c>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4628      	mov	r0, r5
 80095c6:	47b0      	blx	r6
 80095c8:	1c41      	adds	r1, r0, #1
 80095ca:	d1c8      	bne.n	800955e <__sflush_r+0x36>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0c5      	beq.n	800955e <__sflush_r+0x36>
 80095d2:	2b1d      	cmp	r3, #29
 80095d4:	d001      	beq.n	80095da <__sflush_r+0xb2>
 80095d6:	2b16      	cmp	r3, #22
 80095d8:	d101      	bne.n	80095de <__sflush_r+0xb6>
 80095da:	602f      	str	r7, [r5, #0]
 80095dc:	e7b1      	b.n	8009542 <__sflush_r+0x1a>
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e4:	81a3      	strh	r3, [r4, #12]
 80095e6:	e7ad      	b.n	8009544 <__sflush_r+0x1c>
 80095e8:	690f      	ldr	r7, [r1, #16]
 80095ea:	2f00      	cmp	r7, #0
 80095ec:	d0a9      	beq.n	8009542 <__sflush_r+0x1a>
 80095ee:	0793      	lsls	r3, r2, #30
 80095f0:	680e      	ldr	r6, [r1, #0]
 80095f2:	bf08      	it	eq
 80095f4:	694b      	ldreq	r3, [r1, #20]
 80095f6:	600f      	str	r7, [r1, #0]
 80095f8:	bf18      	it	ne
 80095fa:	2300      	movne	r3, #0
 80095fc:	eba6 0807 	sub.w	r8, r6, r7
 8009600:	608b      	str	r3, [r1, #8]
 8009602:	f1b8 0f00 	cmp.w	r8, #0
 8009606:	dd9c      	ble.n	8009542 <__sflush_r+0x1a>
 8009608:	4643      	mov	r3, r8
 800960a:	463a      	mov	r2, r7
 800960c:	6a21      	ldr	r1, [r4, #32]
 800960e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009610:	4628      	mov	r0, r5
 8009612:	47b0      	blx	r6
 8009614:	2800      	cmp	r0, #0
 8009616:	dc06      	bgt.n	8009626 <__sflush_r+0xfe>
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	e78e      	b.n	8009544 <__sflush_r+0x1c>
 8009626:	4407      	add	r7, r0
 8009628:	eba8 0800 	sub.w	r8, r8, r0
 800962c:	e7e9      	b.n	8009602 <__sflush_r+0xda>
 800962e:	bf00      	nop
 8009630:	20400001 	.word	0x20400001

08009634 <_fflush_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	690b      	ldr	r3, [r1, #16]
 8009638:	4605      	mov	r5, r0
 800963a:	460c      	mov	r4, r1
 800963c:	b1db      	cbz	r3, 8009676 <_fflush_r+0x42>
 800963e:	b118      	cbz	r0, 8009648 <_fflush_r+0x14>
 8009640:	6983      	ldr	r3, [r0, #24]
 8009642:	b90b      	cbnz	r3, 8009648 <_fflush_r+0x14>
 8009644:	f000 f872 	bl	800972c <__sinit>
 8009648:	4b0c      	ldr	r3, [pc, #48]	; (800967c <_fflush_r+0x48>)
 800964a:	429c      	cmp	r4, r3
 800964c:	d109      	bne.n	8009662 <_fflush_r+0x2e>
 800964e:	686c      	ldr	r4, [r5, #4]
 8009650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009654:	b17b      	cbz	r3, 8009676 <_fflush_r+0x42>
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800965e:	f7ff bf63 	b.w	8009528 <__sflush_r>
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <_fflush_r+0x4c>)
 8009664:	429c      	cmp	r4, r3
 8009666:	d101      	bne.n	800966c <_fflush_r+0x38>
 8009668:	68ac      	ldr	r4, [r5, #8]
 800966a:	e7f1      	b.n	8009650 <_fflush_r+0x1c>
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <_fflush_r+0x50>)
 800966e:	429c      	cmp	r4, r3
 8009670:	bf08      	it	eq
 8009672:	68ec      	ldreq	r4, [r5, #12]
 8009674:	e7ec      	b.n	8009650 <_fflush_r+0x1c>
 8009676:	2000      	movs	r0, #0
 8009678:	bd38      	pop	{r3, r4, r5, pc}
 800967a:	bf00      	nop
 800967c:	0800a680 	.word	0x0800a680
 8009680:	0800a6a0 	.word	0x0800a6a0
 8009684:	0800a660 	.word	0x0800a660

08009688 <fflush>:
 8009688:	4601      	mov	r1, r0
 800968a:	b920      	cbnz	r0, 8009696 <fflush+0xe>
 800968c:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <fflush+0x18>)
 800968e:	4905      	ldr	r1, [pc, #20]	; (80096a4 <fflush+0x1c>)
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f000 b8b7 	b.w	8009804 <_fwalk_reent>
 8009696:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <fflush+0x20>)
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	f7ff bfcb 	b.w	8009634 <_fflush_r>
 800969e:	bf00      	nop
 80096a0:	0800a6c0 	.word	0x0800a6c0
 80096a4:	08009635 	.word	0x08009635
 80096a8:	20000030 	.word	0x20000030

080096ac <std>:
 80096ac:	2300      	movs	r3, #0
 80096ae:	b510      	push	{r4, lr}
 80096b0:	4604      	mov	r4, r0
 80096b2:	e9c0 3300 	strd	r3, r3, [r0]
 80096b6:	6083      	str	r3, [r0, #8]
 80096b8:	8181      	strh	r1, [r0, #12]
 80096ba:	6643      	str	r3, [r0, #100]	; 0x64
 80096bc:	81c2      	strh	r2, [r0, #14]
 80096be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096c2:	6183      	str	r3, [r0, #24]
 80096c4:	4619      	mov	r1, r3
 80096c6:	2208      	movs	r2, #8
 80096c8:	305c      	adds	r0, #92	; 0x5c
 80096ca:	f000 f8dd 	bl	8009888 <memset>
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <std+0x38>)
 80096d0:	6263      	str	r3, [r4, #36]	; 0x24
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <std+0x3c>)
 80096d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <std+0x40>)
 80096d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <std+0x44>)
 80096dc:	6224      	str	r4, [r4, #32]
 80096de:	6323      	str	r3, [r4, #48]	; 0x30
 80096e0:	bd10      	pop	{r4, pc}
 80096e2:	bf00      	nop
 80096e4:	08009b01 	.word	0x08009b01
 80096e8:	08009b23 	.word	0x08009b23
 80096ec:	08009b5b 	.word	0x08009b5b
 80096f0:	08009b7f 	.word	0x08009b7f

080096f4 <_cleanup_r>:
 80096f4:	4901      	ldr	r1, [pc, #4]	; (80096fc <_cleanup_r+0x8>)
 80096f6:	f000 b885 	b.w	8009804 <_fwalk_reent>
 80096fa:	bf00      	nop
 80096fc:	08009635 	.word	0x08009635

08009700 <__sfmoreglue>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	1e4a      	subs	r2, r1, #1
 8009704:	2568      	movs	r5, #104	; 0x68
 8009706:	4355      	muls	r5, r2
 8009708:	460e      	mov	r6, r1
 800970a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800970e:	f000 f911 	bl	8009934 <_malloc_r>
 8009712:	4604      	mov	r4, r0
 8009714:	b140      	cbz	r0, 8009728 <__sfmoreglue+0x28>
 8009716:	2100      	movs	r1, #0
 8009718:	e9c0 1600 	strd	r1, r6, [r0]
 800971c:	300c      	adds	r0, #12
 800971e:	60a0      	str	r0, [r4, #8]
 8009720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009724:	f000 f8b0 	bl	8009888 <memset>
 8009728:	4620      	mov	r0, r4
 800972a:	bd70      	pop	{r4, r5, r6, pc}

0800972c <__sinit>:
 800972c:	6983      	ldr	r3, [r0, #24]
 800972e:	b510      	push	{r4, lr}
 8009730:	4604      	mov	r4, r0
 8009732:	bb33      	cbnz	r3, 8009782 <__sinit+0x56>
 8009734:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009738:	6503      	str	r3, [r0, #80]	; 0x50
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <__sinit+0x58>)
 800973c:	4a12      	ldr	r2, [pc, #72]	; (8009788 <__sinit+0x5c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6282      	str	r2, [r0, #40]	; 0x28
 8009742:	4298      	cmp	r0, r3
 8009744:	bf04      	itt	eq
 8009746:	2301      	moveq	r3, #1
 8009748:	6183      	streq	r3, [r0, #24]
 800974a:	f000 f81f 	bl	800978c <__sfp>
 800974e:	6060      	str	r0, [r4, #4]
 8009750:	4620      	mov	r0, r4
 8009752:	f000 f81b 	bl	800978c <__sfp>
 8009756:	60a0      	str	r0, [r4, #8]
 8009758:	4620      	mov	r0, r4
 800975a:	f000 f817 	bl	800978c <__sfp>
 800975e:	2200      	movs	r2, #0
 8009760:	60e0      	str	r0, [r4, #12]
 8009762:	2104      	movs	r1, #4
 8009764:	6860      	ldr	r0, [r4, #4]
 8009766:	f7ff ffa1 	bl	80096ac <std>
 800976a:	2201      	movs	r2, #1
 800976c:	2109      	movs	r1, #9
 800976e:	68a0      	ldr	r0, [r4, #8]
 8009770:	f7ff ff9c 	bl	80096ac <std>
 8009774:	2202      	movs	r2, #2
 8009776:	2112      	movs	r1, #18
 8009778:	68e0      	ldr	r0, [r4, #12]
 800977a:	f7ff ff97 	bl	80096ac <std>
 800977e:	2301      	movs	r3, #1
 8009780:	61a3      	str	r3, [r4, #24]
 8009782:	bd10      	pop	{r4, pc}
 8009784:	0800a6c0 	.word	0x0800a6c0
 8009788:	080096f5 	.word	0x080096f5

0800978c <__sfp>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	4b1b      	ldr	r3, [pc, #108]	; (80097fc <__sfp+0x70>)
 8009790:	681e      	ldr	r6, [r3, #0]
 8009792:	69b3      	ldr	r3, [r6, #24]
 8009794:	4607      	mov	r7, r0
 8009796:	b913      	cbnz	r3, 800979e <__sfp+0x12>
 8009798:	4630      	mov	r0, r6
 800979a:	f7ff ffc7 	bl	800972c <__sinit>
 800979e:	3648      	adds	r6, #72	; 0x48
 80097a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	d503      	bpl.n	80097b0 <__sfp+0x24>
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	b133      	cbz	r3, 80097ba <__sfp+0x2e>
 80097ac:	6836      	ldr	r6, [r6, #0]
 80097ae:	e7f7      	b.n	80097a0 <__sfp+0x14>
 80097b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097b4:	b16d      	cbz	r5, 80097d2 <__sfp+0x46>
 80097b6:	3468      	adds	r4, #104	; 0x68
 80097b8:	e7f4      	b.n	80097a4 <__sfp+0x18>
 80097ba:	2104      	movs	r1, #4
 80097bc:	4638      	mov	r0, r7
 80097be:	f7ff ff9f 	bl	8009700 <__sfmoreglue>
 80097c2:	6030      	str	r0, [r6, #0]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1f1      	bne.n	80097ac <__sfp+0x20>
 80097c8:	230c      	movs	r3, #12
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	4604      	mov	r4, r0
 80097ce:	4620      	mov	r0, r4
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d2:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <__sfp+0x74>)
 80097d4:	6665      	str	r5, [r4, #100]	; 0x64
 80097d6:	e9c4 5500 	strd	r5, r5, [r4]
 80097da:	60a5      	str	r5, [r4, #8]
 80097dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80097e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80097e4:	2208      	movs	r2, #8
 80097e6:	4629      	mov	r1, r5
 80097e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097ec:	f000 f84c 	bl	8009888 <memset>
 80097f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097f8:	e7e9      	b.n	80097ce <__sfp+0x42>
 80097fa:	bf00      	nop
 80097fc:	0800a6c0 	.word	0x0800a6c0
 8009800:	ffff0001 	.word	0xffff0001

08009804 <_fwalk_reent>:
 8009804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009808:	4680      	mov	r8, r0
 800980a:	4689      	mov	r9, r1
 800980c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009810:	2600      	movs	r6, #0
 8009812:	b914      	cbnz	r4, 800981a <_fwalk_reent+0x16>
 8009814:	4630      	mov	r0, r6
 8009816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800981e:	3f01      	subs	r7, #1
 8009820:	d501      	bpl.n	8009826 <_fwalk_reent+0x22>
 8009822:	6824      	ldr	r4, [r4, #0]
 8009824:	e7f5      	b.n	8009812 <_fwalk_reent+0xe>
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d907      	bls.n	800983c <_fwalk_reent+0x38>
 800982c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009830:	3301      	adds	r3, #1
 8009832:	d003      	beq.n	800983c <_fwalk_reent+0x38>
 8009834:	4629      	mov	r1, r5
 8009836:	4640      	mov	r0, r8
 8009838:	47c8      	blx	r9
 800983a:	4306      	orrs	r6, r0
 800983c:	3568      	adds	r5, #104	; 0x68
 800983e:	e7ee      	b.n	800981e <_fwalk_reent+0x1a>

08009840 <__libc_init_array>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4e0d      	ldr	r6, [pc, #52]	; (8009878 <__libc_init_array+0x38>)
 8009844:	4c0d      	ldr	r4, [pc, #52]	; (800987c <__libc_init_array+0x3c>)
 8009846:	1ba4      	subs	r4, r4, r6
 8009848:	10a4      	asrs	r4, r4, #2
 800984a:	2500      	movs	r5, #0
 800984c:	42a5      	cmp	r5, r4
 800984e:	d109      	bne.n	8009864 <__libc_init_array+0x24>
 8009850:	4e0b      	ldr	r6, [pc, #44]	; (8009880 <__libc_init_array+0x40>)
 8009852:	4c0c      	ldr	r4, [pc, #48]	; (8009884 <__libc_init_array+0x44>)
 8009854:	f000 fdee 	bl	800a434 <_init>
 8009858:	1ba4      	subs	r4, r4, r6
 800985a:	10a4      	asrs	r4, r4, #2
 800985c:	2500      	movs	r5, #0
 800985e:	42a5      	cmp	r5, r4
 8009860:	d105      	bne.n	800986e <__libc_init_array+0x2e>
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009868:	4798      	blx	r3
 800986a:	3501      	adds	r5, #1
 800986c:	e7ee      	b.n	800984c <__libc_init_array+0xc>
 800986e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009872:	4798      	blx	r3
 8009874:	3501      	adds	r5, #1
 8009876:	e7f2      	b.n	800985e <__libc_init_array+0x1e>
 8009878:	0800a700 	.word	0x0800a700
 800987c:	0800a700 	.word	0x0800a700
 8009880:	0800a700 	.word	0x0800a700
 8009884:	0800a704 	.word	0x0800a704

08009888 <memset>:
 8009888:	4402      	add	r2, r0
 800988a:	4603      	mov	r3, r0
 800988c:	4293      	cmp	r3, r2
 800988e:	d100      	bne.n	8009892 <memset+0xa>
 8009890:	4770      	bx	lr
 8009892:	f803 1b01 	strb.w	r1, [r3], #1
 8009896:	e7f9      	b.n	800988c <memset+0x4>

08009898 <_free_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4605      	mov	r5, r0
 800989c:	2900      	cmp	r1, #0
 800989e:	d045      	beq.n	800992c <_free_r+0x94>
 80098a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a4:	1f0c      	subs	r4, r1, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfb8      	it	lt
 80098aa:	18e4      	addlt	r4, r4, r3
 80098ac:	f000 fac4 	bl	8009e38 <__malloc_lock>
 80098b0:	4a1f      	ldr	r2, [pc, #124]	; (8009930 <_free_r+0x98>)
 80098b2:	6813      	ldr	r3, [r2, #0]
 80098b4:	4610      	mov	r0, r2
 80098b6:	b933      	cbnz	r3, 80098c6 <_free_r+0x2e>
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	6014      	str	r4, [r2, #0]
 80098bc:	4628      	mov	r0, r5
 80098be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c2:	f000 baba 	b.w	8009e3a <__malloc_unlock>
 80098c6:	42a3      	cmp	r3, r4
 80098c8:	d90c      	bls.n	80098e4 <_free_r+0x4c>
 80098ca:	6821      	ldr	r1, [r4, #0]
 80098cc:	1862      	adds	r2, r4, r1
 80098ce:	4293      	cmp	r3, r2
 80098d0:	bf04      	itt	eq
 80098d2:	681a      	ldreq	r2, [r3, #0]
 80098d4:	685b      	ldreq	r3, [r3, #4]
 80098d6:	6063      	str	r3, [r4, #4]
 80098d8:	bf04      	itt	eq
 80098da:	1852      	addeq	r2, r2, r1
 80098dc:	6022      	streq	r2, [r4, #0]
 80098de:	6004      	str	r4, [r0, #0]
 80098e0:	e7ec      	b.n	80098bc <_free_r+0x24>
 80098e2:	4613      	mov	r3, r2
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	b10a      	cbz	r2, 80098ec <_free_r+0x54>
 80098e8:	42a2      	cmp	r2, r4
 80098ea:	d9fa      	bls.n	80098e2 <_free_r+0x4a>
 80098ec:	6819      	ldr	r1, [r3, #0]
 80098ee:	1858      	adds	r0, r3, r1
 80098f0:	42a0      	cmp	r0, r4
 80098f2:	d10b      	bne.n	800990c <_free_r+0x74>
 80098f4:	6820      	ldr	r0, [r4, #0]
 80098f6:	4401      	add	r1, r0
 80098f8:	1858      	adds	r0, r3, r1
 80098fa:	4282      	cmp	r2, r0
 80098fc:	6019      	str	r1, [r3, #0]
 80098fe:	d1dd      	bne.n	80098bc <_free_r+0x24>
 8009900:	6810      	ldr	r0, [r2, #0]
 8009902:	6852      	ldr	r2, [r2, #4]
 8009904:	605a      	str	r2, [r3, #4]
 8009906:	4401      	add	r1, r0
 8009908:	6019      	str	r1, [r3, #0]
 800990a:	e7d7      	b.n	80098bc <_free_r+0x24>
 800990c:	d902      	bls.n	8009914 <_free_r+0x7c>
 800990e:	230c      	movs	r3, #12
 8009910:	602b      	str	r3, [r5, #0]
 8009912:	e7d3      	b.n	80098bc <_free_r+0x24>
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	1821      	adds	r1, r4, r0
 8009918:	428a      	cmp	r2, r1
 800991a:	bf04      	itt	eq
 800991c:	6811      	ldreq	r1, [r2, #0]
 800991e:	6852      	ldreq	r2, [r2, #4]
 8009920:	6062      	str	r2, [r4, #4]
 8009922:	bf04      	itt	eq
 8009924:	1809      	addeq	r1, r1, r0
 8009926:	6021      	streq	r1, [r4, #0]
 8009928:	605c      	str	r4, [r3, #4]
 800992a:	e7c7      	b.n	80098bc <_free_r+0x24>
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	2000405c 	.word	0x2000405c

08009934 <_malloc_r>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	1ccd      	adds	r5, r1, #3
 8009938:	f025 0503 	bic.w	r5, r5, #3
 800993c:	3508      	adds	r5, #8
 800993e:	2d0c      	cmp	r5, #12
 8009940:	bf38      	it	cc
 8009942:	250c      	movcc	r5, #12
 8009944:	2d00      	cmp	r5, #0
 8009946:	4606      	mov	r6, r0
 8009948:	db01      	blt.n	800994e <_malloc_r+0x1a>
 800994a:	42a9      	cmp	r1, r5
 800994c:	d903      	bls.n	8009956 <_malloc_r+0x22>
 800994e:	230c      	movs	r3, #12
 8009950:	6033      	str	r3, [r6, #0]
 8009952:	2000      	movs	r0, #0
 8009954:	bd70      	pop	{r4, r5, r6, pc}
 8009956:	f000 fa6f 	bl	8009e38 <__malloc_lock>
 800995a:	4a21      	ldr	r2, [pc, #132]	; (80099e0 <_malloc_r+0xac>)
 800995c:	6814      	ldr	r4, [r2, #0]
 800995e:	4621      	mov	r1, r4
 8009960:	b991      	cbnz	r1, 8009988 <_malloc_r+0x54>
 8009962:	4c20      	ldr	r4, [pc, #128]	; (80099e4 <_malloc_r+0xb0>)
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	b91b      	cbnz	r3, 8009970 <_malloc_r+0x3c>
 8009968:	4630      	mov	r0, r6
 800996a:	f000 f8b9 	bl	8009ae0 <_sbrk_r>
 800996e:	6020      	str	r0, [r4, #0]
 8009970:	4629      	mov	r1, r5
 8009972:	4630      	mov	r0, r6
 8009974:	f000 f8b4 	bl	8009ae0 <_sbrk_r>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d124      	bne.n	80099c6 <_malloc_r+0x92>
 800997c:	230c      	movs	r3, #12
 800997e:	6033      	str	r3, [r6, #0]
 8009980:	4630      	mov	r0, r6
 8009982:	f000 fa5a 	bl	8009e3a <__malloc_unlock>
 8009986:	e7e4      	b.n	8009952 <_malloc_r+0x1e>
 8009988:	680b      	ldr	r3, [r1, #0]
 800998a:	1b5b      	subs	r3, r3, r5
 800998c:	d418      	bmi.n	80099c0 <_malloc_r+0x8c>
 800998e:	2b0b      	cmp	r3, #11
 8009990:	d90f      	bls.n	80099b2 <_malloc_r+0x7e>
 8009992:	600b      	str	r3, [r1, #0]
 8009994:	50cd      	str	r5, [r1, r3]
 8009996:	18cc      	adds	r4, r1, r3
 8009998:	4630      	mov	r0, r6
 800999a:	f000 fa4e 	bl	8009e3a <__malloc_unlock>
 800999e:	f104 000b 	add.w	r0, r4, #11
 80099a2:	1d23      	adds	r3, r4, #4
 80099a4:	f020 0007 	bic.w	r0, r0, #7
 80099a8:	1ac3      	subs	r3, r0, r3
 80099aa:	d0d3      	beq.n	8009954 <_malloc_r+0x20>
 80099ac:	425a      	negs	r2, r3
 80099ae:	50e2      	str	r2, [r4, r3]
 80099b0:	e7d0      	b.n	8009954 <_malloc_r+0x20>
 80099b2:	428c      	cmp	r4, r1
 80099b4:	684b      	ldr	r3, [r1, #4]
 80099b6:	bf16      	itet	ne
 80099b8:	6063      	strne	r3, [r4, #4]
 80099ba:	6013      	streq	r3, [r2, #0]
 80099bc:	460c      	movne	r4, r1
 80099be:	e7eb      	b.n	8009998 <_malloc_r+0x64>
 80099c0:	460c      	mov	r4, r1
 80099c2:	6849      	ldr	r1, [r1, #4]
 80099c4:	e7cc      	b.n	8009960 <_malloc_r+0x2c>
 80099c6:	1cc4      	adds	r4, r0, #3
 80099c8:	f024 0403 	bic.w	r4, r4, #3
 80099cc:	42a0      	cmp	r0, r4
 80099ce:	d005      	beq.n	80099dc <_malloc_r+0xa8>
 80099d0:	1a21      	subs	r1, r4, r0
 80099d2:	4630      	mov	r0, r6
 80099d4:	f000 f884 	bl	8009ae0 <_sbrk_r>
 80099d8:	3001      	adds	r0, #1
 80099da:	d0cf      	beq.n	800997c <_malloc_r+0x48>
 80099dc:	6025      	str	r5, [r4, #0]
 80099de:	e7db      	b.n	8009998 <_malloc_r+0x64>
 80099e0:	2000405c 	.word	0x2000405c
 80099e4:	20004060 	.word	0x20004060

080099e8 <iprintf>:
 80099e8:	b40f      	push	{r0, r1, r2, r3}
 80099ea:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <iprintf+0x2c>)
 80099ec:	b513      	push	{r0, r1, r4, lr}
 80099ee:	681c      	ldr	r4, [r3, #0]
 80099f0:	b124      	cbz	r4, 80099fc <iprintf+0x14>
 80099f2:	69a3      	ldr	r3, [r4, #24]
 80099f4:	b913      	cbnz	r3, 80099fc <iprintf+0x14>
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7ff fe98 	bl	800972c <__sinit>
 80099fc:	ab05      	add	r3, sp, #20
 80099fe:	9a04      	ldr	r2, [sp, #16]
 8009a00:	68a1      	ldr	r1, [r4, #8]
 8009a02:	9301      	str	r3, [sp, #4]
 8009a04:	4620      	mov	r0, r4
 8009a06:	f000 fa43 	bl	8009e90 <_vfiprintf_r>
 8009a0a:	b002      	add	sp, #8
 8009a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a10:	b004      	add	sp, #16
 8009a12:	4770      	bx	lr
 8009a14:	20000030 	.word	0x20000030

08009a18 <_puts_r>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	460e      	mov	r6, r1
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	b118      	cbz	r0, 8009a28 <_puts_r+0x10>
 8009a20:	6983      	ldr	r3, [r0, #24]
 8009a22:	b90b      	cbnz	r3, 8009a28 <_puts_r+0x10>
 8009a24:	f7ff fe82 	bl	800972c <__sinit>
 8009a28:	69ab      	ldr	r3, [r5, #24]
 8009a2a:	68ac      	ldr	r4, [r5, #8]
 8009a2c:	b913      	cbnz	r3, 8009a34 <_puts_r+0x1c>
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f7ff fe7c 	bl	800972c <__sinit>
 8009a34:	4b23      	ldr	r3, [pc, #140]	; (8009ac4 <_puts_r+0xac>)
 8009a36:	429c      	cmp	r4, r3
 8009a38:	d117      	bne.n	8009a6a <_puts_r+0x52>
 8009a3a:	686c      	ldr	r4, [r5, #4]
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	071b      	lsls	r3, r3, #28
 8009a40:	d51d      	bpl.n	8009a7e <_puts_r+0x66>
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	b1db      	cbz	r3, 8009a7e <_puts_r+0x66>
 8009a46:	3e01      	subs	r6, #1
 8009a48:	68a3      	ldr	r3, [r4, #8]
 8009a4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	b9e9      	cbnz	r1, 8009a90 <_puts_r+0x78>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	da2e      	bge.n	8009ab6 <_puts_r+0x9e>
 8009a58:	4622      	mov	r2, r4
 8009a5a:	210a      	movs	r1, #10
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f000 f893 	bl	8009b88 <__swbuf_r>
 8009a62:	3001      	adds	r0, #1
 8009a64:	d011      	beq.n	8009a8a <_puts_r+0x72>
 8009a66:	200a      	movs	r0, #10
 8009a68:	e011      	b.n	8009a8e <_puts_r+0x76>
 8009a6a:	4b17      	ldr	r3, [pc, #92]	; (8009ac8 <_puts_r+0xb0>)
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	d101      	bne.n	8009a74 <_puts_r+0x5c>
 8009a70:	68ac      	ldr	r4, [r5, #8]
 8009a72:	e7e3      	b.n	8009a3c <_puts_r+0x24>
 8009a74:	4b15      	ldr	r3, [pc, #84]	; (8009acc <_puts_r+0xb4>)
 8009a76:	429c      	cmp	r4, r3
 8009a78:	bf08      	it	eq
 8009a7a:	68ec      	ldreq	r4, [r5, #12]
 8009a7c:	e7de      	b.n	8009a3c <_puts_r+0x24>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4628      	mov	r0, r5
 8009a82:	f000 f8e5 	bl	8009c50 <__swsetup_r>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d0dd      	beq.n	8009a46 <_puts_r+0x2e>
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da04      	bge.n	8009a9e <_puts_r+0x86>
 8009a94:	69a2      	ldr	r2, [r4, #24]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	dc06      	bgt.n	8009aa8 <_puts_r+0x90>
 8009a9a:	290a      	cmp	r1, #10
 8009a9c:	d004      	beq.n	8009aa8 <_puts_r+0x90>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	6022      	str	r2, [r4, #0]
 8009aa4:	7019      	strb	r1, [r3, #0]
 8009aa6:	e7cf      	b.n	8009a48 <_puts_r+0x30>
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 f86c 	bl	8009b88 <__swbuf_r>
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d1c9      	bne.n	8009a48 <_puts_r+0x30>
 8009ab4:	e7e9      	b.n	8009a8a <_puts_r+0x72>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	200a      	movs	r0, #10
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	6022      	str	r2, [r4, #0]
 8009abe:	7018      	strb	r0, [r3, #0]
 8009ac0:	e7e5      	b.n	8009a8e <_puts_r+0x76>
 8009ac2:	bf00      	nop
 8009ac4:	0800a680 	.word	0x0800a680
 8009ac8:	0800a6a0 	.word	0x0800a6a0
 8009acc:	0800a660 	.word	0x0800a660

08009ad0 <puts>:
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <puts+0xc>)
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	f7ff bf9f 	b.w	8009a18 <_puts_r>
 8009ada:	bf00      	nop
 8009adc:	20000030 	.word	0x20000030

08009ae0 <_sbrk_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4c06      	ldr	r4, [pc, #24]	; (8009afc <_sbrk_r+0x1c>)
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	f7f7 ff88 	bl	8001a00 <_sbrk>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d102      	bne.n	8009afa <_sbrk_r+0x1a>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	b103      	cbz	r3, 8009afa <_sbrk_r+0x1a>
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	20004948 	.word	0x20004948

08009b00 <__sread>:
 8009b00:	b510      	push	{r4, lr}
 8009b02:	460c      	mov	r4, r1
 8009b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b08:	f000 fc60 	bl	800a3cc <_read_r>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	bfab      	itete	ge
 8009b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b12:	89a3      	ldrhlt	r3, [r4, #12]
 8009b14:	181b      	addge	r3, r3, r0
 8009b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b1a:	bfac      	ite	ge
 8009b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b1e:	81a3      	strhlt	r3, [r4, #12]
 8009b20:	bd10      	pop	{r4, pc}

08009b22 <__swrite>:
 8009b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b26:	461f      	mov	r7, r3
 8009b28:	898b      	ldrh	r3, [r1, #12]
 8009b2a:	05db      	lsls	r3, r3, #23
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4616      	mov	r6, r2
 8009b32:	d505      	bpl.n	8009b40 <__swrite+0x1e>
 8009b34:	2302      	movs	r3, #2
 8009b36:	2200      	movs	r2, #0
 8009b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b3c:	f000 f906 	bl	8009d4c <_lseek_r>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	4628      	mov	r0, r5
 8009b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	f000 b869 	b.w	8009c2c <_write_r>

08009b5a <__sseek>:
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b62:	f000 f8f3 	bl	8009d4c <_lseek_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	bf15      	itete	ne
 8009b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b76:	81a3      	strheq	r3, [r4, #12]
 8009b78:	bf18      	it	ne
 8009b7a:	81a3      	strhne	r3, [r4, #12]
 8009b7c:	bd10      	pop	{r4, pc}

08009b7e <__sclose>:
 8009b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b82:	f000 b8d3 	b.w	8009d2c <_close_r>
	...

08009b88 <__swbuf_r>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	460e      	mov	r6, r1
 8009b8c:	4614      	mov	r4, r2
 8009b8e:	4605      	mov	r5, r0
 8009b90:	b118      	cbz	r0, 8009b9a <__swbuf_r+0x12>
 8009b92:	6983      	ldr	r3, [r0, #24]
 8009b94:	b90b      	cbnz	r3, 8009b9a <__swbuf_r+0x12>
 8009b96:	f7ff fdc9 	bl	800972c <__sinit>
 8009b9a:	4b21      	ldr	r3, [pc, #132]	; (8009c20 <__swbuf_r+0x98>)
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d12a      	bne.n	8009bf6 <__swbuf_r+0x6e>
 8009ba0:	686c      	ldr	r4, [r5, #4]
 8009ba2:	69a3      	ldr	r3, [r4, #24]
 8009ba4:	60a3      	str	r3, [r4, #8]
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	071a      	lsls	r2, r3, #28
 8009baa:	d52e      	bpl.n	8009c0a <__swbuf_r+0x82>
 8009bac:	6923      	ldr	r3, [r4, #16]
 8009bae:	b363      	cbz	r3, 8009c0a <__swbuf_r+0x82>
 8009bb0:	6923      	ldr	r3, [r4, #16]
 8009bb2:	6820      	ldr	r0, [r4, #0]
 8009bb4:	1ac0      	subs	r0, r0, r3
 8009bb6:	6963      	ldr	r3, [r4, #20]
 8009bb8:	b2f6      	uxtb	r6, r6
 8009bba:	4283      	cmp	r3, r0
 8009bbc:	4637      	mov	r7, r6
 8009bbe:	dc04      	bgt.n	8009bca <__swbuf_r+0x42>
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f7ff fd36 	bl	8009634 <_fflush_r>
 8009bc8:	bb28      	cbnz	r0, 8009c16 <__swbuf_r+0x8e>
 8009bca:	68a3      	ldr	r3, [r4, #8]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	60a3      	str	r3, [r4, #8]
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	6022      	str	r2, [r4, #0]
 8009bd6:	701e      	strb	r6, [r3, #0]
 8009bd8:	6963      	ldr	r3, [r4, #20]
 8009bda:	3001      	adds	r0, #1
 8009bdc:	4283      	cmp	r3, r0
 8009bde:	d004      	beq.n	8009bea <__swbuf_r+0x62>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	07db      	lsls	r3, r3, #31
 8009be4:	d519      	bpl.n	8009c1a <__swbuf_r+0x92>
 8009be6:	2e0a      	cmp	r6, #10
 8009be8:	d117      	bne.n	8009c1a <__swbuf_r+0x92>
 8009bea:	4621      	mov	r1, r4
 8009bec:	4628      	mov	r0, r5
 8009bee:	f7ff fd21 	bl	8009634 <_fflush_r>
 8009bf2:	b190      	cbz	r0, 8009c1a <__swbuf_r+0x92>
 8009bf4:	e00f      	b.n	8009c16 <__swbuf_r+0x8e>
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <__swbuf_r+0x9c>)
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	d101      	bne.n	8009c00 <__swbuf_r+0x78>
 8009bfc:	68ac      	ldr	r4, [r5, #8]
 8009bfe:	e7d0      	b.n	8009ba2 <__swbuf_r+0x1a>
 8009c00:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <__swbuf_r+0xa0>)
 8009c02:	429c      	cmp	r4, r3
 8009c04:	bf08      	it	eq
 8009c06:	68ec      	ldreq	r4, [r5, #12]
 8009c08:	e7cb      	b.n	8009ba2 <__swbuf_r+0x1a>
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f000 f81f 	bl	8009c50 <__swsetup_r>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d0cc      	beq.n	8009bb0 <__swbuf_r+0x28>
 8009c16:	f04f 37ff 	mov.w	r7, #4294967295
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	0800a680 	.word	0x0800a680
 8009c24:	0800a6a0 	.word	0x0800a6a0
 8009c28:	0800a660 	.word	0x0800a660

08009c2c <_write_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4c07      	ldr	r4, [pc, #28]	; (8009c4c <_write_r+0x20>)
 8009c30:	4605      	mov	r5, r0
 8009c32:	4608      	mov	r0, r1
 8009c34:	4611      	mov	r1, r2
 8009c36:	2200      	movs	r2, #0
 8009c38:	6022      	str	r2, [r4, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f7f7 fe8f 	bl	800195e <_write>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d102      	bne.n	8009c4a <_write_r+0x1e>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	b103      	cbz	r3, 8009c4a <_write_r+0x1e>
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	20004948 	.word	0x20004948

08009c50 <__swsetup_r>:
 8009c50:	4b32      	ldr	r3, [pc, #200]	; (8009d1c <__swsetup_r+0xcc>)
 8009c52:	b570      	push	{r4, r5, r6, lr}
 8009c54:	681d      	ldr	r5, [r3, #0]
 8009c56:	4606      	mov	r6, r0
 8009c58:	460c      	mov	r4, r1
 8009c5a:	b125      	cbz	r5, 8009c66 <__swsetup_r+0x16>
 8009c5c:	69ab      	ldr	r3, [r5, #24]
 8009c5e:	b913      	cbnz	r3, 8009c66 <__swsetup_r+0x16>
 8009c60:	4628      	mov	r0, r5
 8009c62:	f7ff fd63 	bl	800972c <__sinit>
 8009c66:	4b2e      	ldr	r3, [pc, #184]	; (8009d20 <__swsetup_r+0xd0>)
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	d10f      	bne.n	8009c8c <__swsetup_r+0x3c>
 8009c6c:	686c      	ldr	r4, [r5, #4]
 8009c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	0715      	lsls	r5, r2, #28
 8009c76:	d42c      	bmi.n	8009cd2 <__swsetup_r+0x82>
 8009c78:	06d0      	lsls	r0, r2, #27
 8009c7a:	d411      	bmi.n	8009ca0 <__swsetup_r+0x50>
 8009c7c:	2209      	movs	r2, #9
 8009c7e:	6032      	str	r2, [r6, #0]
 8009c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8a:	e03e      	b.n	8009d0a <__swsetup_r+0xba>
 8009c8c:	4b25      	ldr	r3, [pc, #148]	; (8009d24 <__swsetup_r+0xd4>)
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d101      	bne.n	8009c96 <__swsetup_r+0x46>
 8009c92:	68ac      	ldr	r4, [r5, #8]
 8009c94:	e7eb      	b.n	8009c6e <__swsetup_r+0x1e>
 8009c96:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <__swsetup_r+0xd8>)
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	bf08      	it	eq
 8009c9c:	68ec      	ldreq	r4, [r5, #12]
 8009c9e:	e7e6      	b.n	8009c6e <__swsetup_r+0x1e>
 8009ca0:	0751      	lsls	r1, r2, #29
 8009ca2:	d512      	bpl.n	8009cca <__swsetup_r+0x7a>
 8009ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ca6:	b141      	cbz	r1, 8009cba <__swsetup_r+0x6a>
 8009ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cac:	4299      	cmp	r1, r3
 8009cae:	d002      	beq.n	8009cb6 <__swsetup_r+0x66>
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f7ff fdf1 	bl	8009898 <_free_r>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	6063      	str	r3, [r4, #4]
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	f043 0308 	orr.w	r3, r3, #8
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	6923      	ldr	r3, [r4, #16]
 8009cd4:	b94b      	cbnz	r3, 8009cea <__swsetup_r+0x9a>
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ce0:	d003      	beq.n	8009cea <__swsetup_r+0x9a>
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f000 f867 	bl	8009db8 <__smakebuf_r>
 8009cea:	89a2      	ldrh	r2, [r4, #12]
 8009cec:	f012 0301 	ands.w	r3, r2, #1
 8009cf0:	d00c      	beq.n	8009d0c <__swsetup_r+0xbc>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60a3      	str	r3, [r4, #8]
 8009cf6:	6963      	ldr	r3, [r4, #20]
 8009cf8:	425b      	negs	r3, r3
 8009cfa:	61a3      	str	r3, [r4, #24]
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	b953      	cbnz	r3, 8009d16 <__swsetup_r+0xc6>
 8009d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009d08:	d1ba      	bne.n	8009c80 <__swsetup_r+0x30>
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
 8009d0c:	0792      	lsls	r2, r2, #30
 8009d0e:	bf58      	it	pl
 8009d10:	6963      	ldrpl	r3, [r4, #20]
 8009d12:	60a3      	str	r3, [r4, #8]
 8009d14:	e7f2      	b.n	8009cfc <__swsetup_r+0xac>
 8009d16:	2000      	movs	r0, #0
 8009d18:	e7f7      	b.n	8009d0a <__swsetup_r+0xba>
 8009d1a:	bf00      	nop
 8009d1c:	20000030 	.word	0x20000030
 8009d20:	0800a680 	.word	0x0800a680
 8009d24:	0800a6a0 	.word	0x0800a6a0
 8009d28:	0800a660 	.word	0x0800a660

08009d2c <_close_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4c06      	ldr	r4, [pc, #24]	; (8009d48 <_close_r+0x1c>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	4605      	mov	r5, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	f7f7 fe2d 	bl	8001996 <_close>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_close_r+0x1a>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_close_r+0x1a>
 8009d44:	602b      	str	r3, [r5, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20004948 	.word	0x20004948

08009d4c <_lseek_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4c07      	ldr	r4, [pc, #28]	; (8009d6c <_lseek_r+0x20>)
 8009d50:	4605      	mov	r5, r0
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	6022      	str	r2, [r4, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f7f7 fe42 	bl	80019e4 <_lseek>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_lseek_r+0x1e>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_lseek_r+0x1e>
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20004948 	.word	0x20004948

08009d70 <__swhatbuf_r>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	460e      	mov	r6, r1
 8009d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d78:	2900      	cmp	r1, #0
 8009d7a:	b096      	sub	sp, #88	; 0x58
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	461d      	mov	r5, r3
 8009d80:	da07      	bge.n	8009d92 <__swhatbuf_r+0x22>
 8009d82:	2300      	movs	r3, #0
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	89b3      	ldrh	r3, [r6, #12]
 8009d88:	061a      	lsls	r2, r3, #24
 8009d8a:	d410      	bmi.n	8009dae <__swhatbuf_r+0x3e>
 8009d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d90:	e00e      	b.n	8009db0 <__swhatbuf_r+0x40>
 8009d92:	466a      	mov	r2, sp
 8009d94:	f000 fb2c 	bl	800a3f0 <_fstat_r>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	dbf2      	blt.n	8009d82 <__swhatbuf_r+0x12>
 8009d9c:	9a01      	ldr	r2, [sp, #4]
 8009d9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009da2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009da6:	425a      	negs	r2, r3
 8009da8:	415a      	adcs	r2, r3
 8009daa:	602a      	str	r2, [r5, #0]
 8009dac:	e7ee      	b.n	8009d8c <__swhatbuf_r+0x1c>
 8009dae:	2340      	movs	r3, #64	; 0x40
 8009db0:	2000      	movs	r0, #0
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	b016      	add	sp, #88	; 0x58
 8009db6:	bd70      	pop	{r4, r5, r6, pc}

08009db8 <__smakebuf_r>:
 8009db8:	898b      	ldrh	r3, [r1, #12]
 8009dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dbc:	079d      	lsls	r5, r3, #30
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	d507      	bpl.n	8009dd4 <__smakebuf_r+0x1c>
 8009dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	2301      	movs	r3, #1
 8009dce:	6163      	str	r3, [r4, #20]
 8009dd0:	b002      	add	sp, #8
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	ab01      	add	r3, sp, #4
 8009dd6:	466a      	mov	r2, sp
 8009dd8:	f7ff ffca 	bl	8009d70 <__swhatbuf_r>
 8009ddc:	9900      	ldr	r1, [sp, #0]
 8009dde:	4605      	mov	r5, r0
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff fda7 	bl	8009934 <_malloc_r>
 8009de6:	b948      	cbnz	r0, 8009dfc <__smakebuf_r+0x44>
 8009de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dec:	059a      	lsls	r2, r3, #22
 8009dee:	d4ef      	bmi.n	8009dd0 <__smakebuf_r+0x18>
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	f043 0302 	orr.w	r3, r3, #2
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	e7e3      	b.n	8009dc4 <__smakebuf_r+0xc>
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <__smakebuf_r+0x7c>)
 8009dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	6020      	str	r0, [r4, #0]
 8009e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	6163      	str	r3, [r4, #20]
 8009e0e:	9b01      	ldr	r3, [sp, #4]
 8009e10:	6120      	str	r0, [r4, #16]
 8009e12:	b15b      	cbz	r3, 8009e2c <__smakebuf_r+0x74>
 8009e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f000 fafb 	bl	800a414 <_isatty_r>
 8009e1e:	b128      	cbz	r0, 8009e2c <__smakebuf_r+0x74>
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	431d      	orrs	r5, r3
 8009e30:	81a5      	strh	r5, [r4, #12]
 8009e32:	e7cd      	b.n	8009dd0 <__smakebuf_r+0x18>
 8009e34:	080096f5 	.word	0x080096f5

08009e38 <__malloc_lock>:
 8009e38:	4770      	bx	lr

08009e3a <__malloc_unlock>:
 8009e3a:	4770      	bx	lr

08009e3c <__sfputc_r>:
 8009e3c:	6893      	ldr	r3, [r2, #8]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	b410      	push	{r4}
 8009e44:	6093      	str	r3, [r2, #8]
 8009e46:	da08      	bge.n	8009e5a <__sfputc_r+0x1e>
 8009e48:	6994      	ldr	r4, [r2, #24]
 8009e4a:	42a3      	cmp	r3, r4
 8009e4c:	db01      	blt.n	8009e52 <__sfputc_r+0x16>
 8009e4e:	290a      	cmp	r1, #10
 8009e50:	d103      	bne.n	8009e5a <__sfputc_r+0x1e>
 8009e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e56:	f7ff be97 	b.w	8009b88 <__swbuf_r>
 8009e5a:	6813      	ldr	r3, [r2, #0]
 8009e5c:	1c58      	adds	r0, r3, #1
 8009e5e:	6010      	str	r0, [r2, #0]
 8009e60:	7019      	strb	r1, [r3, #0]
 8009e62:	4608      	mov	r0, r1
 8009e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <__sfputs_r>:
 8009e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	460f      	mov	r7, r1
 8009e70:	4614      	mov	r4, r2
 8009e72:	18d5      	adds	r5, r2, r3
 8009e74:	42ac      	cmp	r4, r5
 8009e76:	d101      	bne.n	8009e7c <__sfputs_r+0x12>
 8009e78:	2000      	movs	r0, #0
 8009e7a:	e007      	b.n	8009e8c <__sfputs_r+0x22>
 8009e7c:	463a      	mov	r2, r7
 8009e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ffda 	bl	8009e3c <__sfputc_r>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d1f3      	bne.n	8009e74 <__sfputs_r+0xa>
 8009e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e90 <_vfiprintf_r>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	b09d      	sub	sp, #116	; 0x74
 8009e98:	4617      	mov	r7, r2
 8009e9a:	461d      	mov	r5, r3
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	b118      	cbz	r0, 8009ea8 <_vfiprintf_r+0x18>
 8009ea0:	6983      	ldr	r3, [r0, #24]
 8009ea2:	b90b      	cbnz	r3, 8009ea8 <_vfiprintf_r+0x18>
 8009ea4:	f7ff fc42 	bl	800972c <__sinit>
 8009ea8:	4b7c      	ldr	r3, [pc, #496]	; (800a09c <_vfiprintf_r+0x20c>)
 8009eaa:	429c      	cmp	r4, r3
 8009eac:	d158      	bne.n	8009f60 <_vfiprintf_r+0xd0>
 8009eae:	6874      	ldr	r4, [r6, #4]
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	0718      	lsls	r0, r3, #28
 8009eb4:	d55e      	bpl.n	8009f74 <_vfiprintf_r+0xe4>
 8009eb6:	6923      	ldr	r3, [r4, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d05b      	beq.n	8009f74 <_vfiprintf_r+0xe4>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ec6:	2330      	movs	r3, #48	; 0x30
 8009ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ecc:	9503      	str	r5, [sp, #12]
 8009ece:	f04f 0b01 	mov.w	fp, #1
 8009ed2:	46b8      	mov	r8, r7
 8009ed4:	4645      	mov	r5, r8
 8009ed6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009eda:	b10b      	cbz	r3, 8009ee0 <_vfiprintf_r+0x50>
 8009edc:	2b25      	cmp	r3, #37	; 0x25
 8009ede:	d154      	bne.n	8009f8a <_vfiprintf_r+0xfa>
 8009ee0:	ebb8 0a07 	subs.w	sl, r8, r7
 8009ee4:	d00b      	beq.n	8009efe <_vfiprintf_r+0x6e>
 8009ee6:	4653      	mov	r3, sl
 8009ee8:	463a      	mov	r2, r7
 8009eea:	4621      	mov	r1, r4
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7ff ffbc 	bl	8009e6a <__sfputs_r>
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	f000 80c2 	beq.w	800a07c <_vfiprintf_r+0x1ec>
 8009ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efa:	4453      	add	r3, sl
 8009efc:	9309      	str	r3, [sp, #36]	; 0x24
 8009efe:	f898 3000 	ldrb.w	r3, [r8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 80ba 	beq.w	800a07c <_vfiprintf_r+0x1ec>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f12:	9304      	str	r3, [sp, #16]
 8009f14:	9307      	str	r3, [sp, #28]
 8009f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f1c:	46a8      	mov	r8, r5
 8009f1e:	2205      	movs	r2, #5
 8009f20:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009f24:	485e      	ldr	r0, [pc, #376]	; (800a0a0 <_vfiprintf_r+0x210>)
 8009f26:	f7f6 f963 	bl	80001f0 <memchr>
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	bb78      	cbnz	r0, 8009f8e <_vfiprintf_r+0xfe>
 8009f2e:	06d9      	lsls	r1, r3, #27
 8009f30:	bf44      	itt	mi
 8009f32:	2220      	movmi	r2, #32
 8009f34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f38:	071a      	lsls	r2, r3, #28
 8009f3a:	bf44      	itt	mi
 8009f3c:	222b      	movmi	r2, #43	; 0x2b
 8009f3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f42:	782a      	ldrb	r2, [r5, #0]
 8009f44:	2a2a      	cmp	r2, #42	; 0x2a
 8009f46:	d02a      	beq.n	8009f9e <_vfiprintf_r+0x10e>
 8009f48:	9a07      	ldr	r2, [sp, #28]
 8009f4a:	46a8      	mov	r8, r5
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	250a      	movs	r5, #10
 8009f50:	4641      	mov	r1, r8
 8009f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f56:	3b30      	subs	r3, #48	; 0x30
 8009f58:	2b09      	cmp	r3, #9
 8009f5a:	d969      	bls.n	800a030 <_vfiprintf_r+0x1a0>
 8009f5c:	b360      	cbz	r0, 8009fb8 <_vfiprintf_r+0x128>
 8009f5e:	e024      	b.n	8009faa <_vfiprintf_r+0x11a>
 8009f60:	4b50      	ldr	r3, [pc, #320]	; (800a0a4 <_vfiprintf_r+0x214>)
 8009f62:	429c      	cmp	r4, r3
 8009f64:	d101      	bne.n	8009f6a <_vfiprintf_r+0xda>
 8009f66:	68b4      	ldr	r4, [r6, #8]
 8009f68:	e7a2      	b.n	8009eb0 <_vfiprintf_r+0x20>
 8009f6a:	4b4f      	ldr	r3, [pc, #316]	; (800a0a8 <_vfiprintf_r+0x218>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	bf08      	it	eq
 8009f70:	68f4      	ldreq	r4, [r6, #12]
 8009f72:	e79d      	b.n	8009eb0 <_vfiprintf_r+0x20>
 8009f74:	4621      	mov	r1, r4
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7ff fe6a 	bl	8009c50 <__swsetup_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d09d      	beq.n	8009ebc <_vfiprintf_r+0x2c>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	b01d      	add	sp, #116	; 0x74
 8009f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8a:	46a8      	mov	r8, r5
 8009f8c:	e7a2      	b.n	8009ed4 <_vfiprintf_r+0x44>
 8009f8e:	4a44      	ldr	r2, [pc, #272]	; (800a0a0 <_vfiprintf_r+0x210>)
 8009f90:	1a80      	subs	r0, r0, r2
 8009f92:	fa0b f000 	lsl.w	r0, fp, r0
 8009f96:	4318      	orrs	r0, r3
 8009f98:	9004      	str	r0, [sp, #16]
 8009f9a:	4645      	mov	r5, r8
 8009f9c:	e7be      	b.n	8009f1c <_vfiprintf_r+0x8c>
 8009f9e:	9a03      	ldr	r2, [sp, #12]
 8009fa0:	1d11      	adds	r1, r2, #4
 8009fa2:	6812      	ldr	r2, [r2, #0]
 8009fa4:	9103      	str	r1, [sp, #12]
 8009fa6:	2a00      	cmp	r2, #0
 8009fa8:	db01      	blt.n	8009fae <_vfiprintf_r+0x11e>
 8009faa:	9207      	str	r2, [sp, #28]
 8009fac:	e004      	b.n	8009fb8 <_vfiprintf_r+0x128>
 8009fae:	4252      	negs	r2, r2
 8009fb0:	f043 0302 	orr.w	r3, r3, #2
 8009fb4:	9207      	str	r2, [sp, #28]
 8009fb6:	9304      	str	r3, [sp, #16]
 8009fb8:	f898 3000 	ldrb.w	r3, [r8]
 8009fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8009fbe:	d10e      	bne.n	8009fde <_vfiprintf_r+0x14e>
 8009fc0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fc6:	d138      	bne.n	800a03a <_vfiprintf_r+0x1aa>
 8009fc8:	9b03      	ldr	r3, [sp, #12]
 8009fca:	1d1a      	adds	r2, r3, #4
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	9203      	str	r2, [sp, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	bfb8      	it	lt
 8009fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fd8:	f108 0802 	add.w	r8, r8, #2
 8009fdc:	9305      	str	r3, [sp, #20]
 8009fde:	4d33      	ldr	r5, [pc, #204]	; (800a0ac <_vfiprintf_r+0x21c>)
 8009fe0:	f898 1000 	ldrb.w	r1, [r8]
 8009fe4:	2203      	movs	r2, #3
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f7f6 f902 	bl	80001f0 <memchr>
 8009fec:	b140      	cbz	r0, 800a000 <_vfiprintf_r+0x170>
 8009fee:	2340      	movs	r3, #64	; 0x40
 8009ff0:	1b40      	subs	r0, r0, r5
 8009ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ff6:	9b04      	ldr	r3, [sp, #16]
 8009ff8:	4303      	orrs	r3, r0
 8009ffa:	f108 0801 	add.w	r8, r8, #1
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	f898 1000 	ldrb.w	r1, [r8]
 800a004:	482a      	ldr	r0, [pc, #168]	; (800a0b0 <_vfiprintf_r+0x220>)
 800a006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a00a:	2206      	movs	r2, #6
 800a00c:	f108 0701 	add.w	r7, r8, #1
 800a010:	f7f6 f8ee 	bl	80001f0 <memchr>
 800a014:	2800      	cmp	r0, #0
 800a016:	d037      	beq.n	800a088 <_vfiprintf_r+0x1f8>
 800a018:	4b26      	ldr	r3, [pc, #152]	; (800a0b4 <_vfiprintf_r+0x224>)
 800a01a:	bb1b      	cbnz	r3, 800a064 <_vfiprintf_r+0x1d4>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	3307      	adds	r3, #7
 800a020:	f023 0307 	bic.w	r3, r3, #7
 800a024:	3308      	adds	r3, #8
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02a:	444b      	add	r3, r9
 800a02c:	9309      	str	r3, [sp, #36]	; 0x24
 800a02e:	e750      	b.n	8009ed2 <_vfiprintf_r+0x42>
 800a030:	fb05 3202 	mla	r2, r5, r2, r3
 800a034:	2001      	movs	r0, #1
 800a036:	4688      	mov	r8, r1
 800a038:	e78a      	b.n	8009f50 <_vfiprintf_r+0xc0>
 800a03a:	2300      	movs	r3, #0
 800a03c:	f108 0801 	add.w	r8, r8, #1
 800a040:	9305      	str	r3, [sp, #20]
 800a042:	4619      	mov	r1, r3
 800a044:	250a      	movs	r5, #10
 800a046:	4640      	mov	r0, r8
 800a048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a04c:	3a30      	subs	r2, #48	; 0x30
 800a04e:	2a09      	cmp	r2, #9
 800a050:	d903      	bls.n	800a05a <_vfiprintf_r+0x1ca>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0c3      	beq.n	8009fde <_vfiprintf_r+0x14e>
 800a056:	9105      	str	r1, [sp, #20]
 800a058:	e7c1      	b.n	8009fde <_vfiprintf_r+0x14e>
 800a05a:	fb05 2101 	mla	r1, r5, r1, r2
 800a05e:	2301      	movs	r3, #1
 800a060:	4680      	mov	r8, r0
 800a062:	e7f0      	b.n	800a046 <_vfiprintf_r+0x1b6>
 800a064:	ab03      	add	r3, sp, #12
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	4622      	mov	r2, r4
 800a06a:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <_vfiprintf_r+0x228>)
 800a06c:	a904      	add	r1, sp, #16
 800a06e:	4630      	mov	r0, r6
 800a070:	f3af 8000 	nop.w
 800a074:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a078:	4681      	mov	r9, r0
 800a07a:	d1d5      	bne.n	800a028 <_vfiprintf_r+0x198>
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	065b      	lsls	r3, r3, #25
 800a080:	f53f af7e 	bmi.w	8009f80 <_vfiprintf_r+0xf0>
 800a084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a086:	e77d      	b.n	8009f84 <_vfiprintf_r+0xf4>
 800a088:	ab03      	add	r3, sp, #12
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	4622      	mov	r2, r4
 800a08e:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <_vfiprintf_r+0x228>)
 800a090:	a904      	add	r1, sp, #16
 800a092:	4630      	mov	r0, r6
 800a094:	f000 f888 	bl	800a1a8 <_printf_i>
 800a098:	e7ec      	b.n	800a074 <_vfiprintf_r+0x1e4>
 800a09a:	bf00      	nop
 800a09c:	0800a680 	.word	0x0800a680
 800a0a0:	0800a6c4 	.word	0x0800a6c4
 800a0a4:	0800a6a0 	.word	0x0800a6a0
 800a0a8:	0800a660 	.word	0x0800a660
 800a0ac:	0800a6ca 	.word	0x0800a6ca
 800a0b0:	0800a6ce 	.word	0x0800a6ce
 800a0b4:	00000000 	.word	0x00000000
 800a0b8:	08009e6b 	.word	0x08009e6b

0800a0bc <_printf_common>:
 800a0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c0:	4691      	mov	r9, r2
 800a0c2:	461f      	mov	r7, r3
 800a0c4:	688a      	ldr	r2, [r1, #8]
 800a0c6:	690b      	ldr	r3, [r1, #16]
 800a0c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	bfb8      	it	lt
 800a0d0:	4613      	movlt	r3, r2
 800a0d2:	f8c9 3000 	str.w	r3, [r9]
 800a0d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0da:	4606      	mov	r6, r0
 800a0dc:	460c      	mov	r4, r1
 800a0de:	b112      	cbz	r2, 800a0e6 <_printf_common+0x2a>
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	f8c9 3000 	str.w	r3, [r9]
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	0699      	lsls	r1, r3, #26
 800a0ea:	bf42      	ittt	mi
 800a0ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a0f0:	3302      	addmi	r3, #2
 800a0f2:	f8c9 3000 	strmi.w	r3, [r9]
 800a0f6:	6825      	ldr	r5, [r4, #0]
 800a0f8:	f015 0506 	ands.w	r5, r5, #6
 800a0fc:	d107      	bne.n	800a10e <_printf_common+0x52>
 800a0fe:	f104 0a19 	add.w	sl, r4, #25
 800a102:	68e3      	ldr	r3, [r4, #12]
 800a104:	f8d9 2000 	ldr.w	r2, [r9]
 800a108:	1a9b      	subs	r3, r3, r2
 800a10a:	42ab      	cmp	r3, r5
 800a10c:	dc28      	bgt.n	800a160 <_printf_common+0xa4>
 800a10e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a112:	6822      	ldr	r2, [r4, #0]
 800a114:	3300      	adds	r3, #0
 800a116:	bf18      	it	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	0692      	lsls	r2, r2, #26
 800a11c:	d42d      	bmi.n	800a17a <_printf_common+0xbe>
 800a11e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a122:	4639      	mov	r1, r7
 800a124:	4630      	mov	r0, r6
 800a126:	47c0      	blx	r8
 800a128:	3001      	adds	r0, #1
 800a12a:	d020      	beq.n	800a16e <_printf_common+0xb2>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	68e5      	ldr	r5, [r4, #12]
 800a130:	f8d9 2000 	ldr.w	r2, [r9]
 800a134:	f003 0306 	and.w	r3, r3, #6
 800a138:	2b04      	cmp	r3, #4
 800a13a:	bf08      	it	eq
 800a13c:	1aad      	subeq	r5, r5, r2
 800a13e:	68a3      	ldr	r3, [r4, #8]
 800a140:	6922      	ldr	r2, [r4, #16]
 800a142:	bf0c      	ite	eq
 800a144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a148:	2500      	movne	r5, #0
 800a14a:	4293      	cmp	r3, r2
 800a14c:	bfc4      	itt	gt
 800a14e:	1a9b      	subgt	r3, r3, r2
 800a150:	18ed      	addgt	r5, r5, r3
 800a152:	f04f 0900 	mov.w	r9, #0
 800a156:	341a      	adds	r4, #26
 800a158:	454d      	cmp	r5, r9
 800a15a:	d11a      	bne.n	800a192 <_printf_common+0xd6>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e008      	b.n	800a172 <_printf_common+0xb6>
 800a160:	2301      	movs	r3, #1
 800a162:	4652      	mov	r2, sl
 800a164:	4639      	mov	r1, r7
 800a166:	4630      	mov	r0, r6
 800a168:	47c0      	blx	r8
 800a16a:	3001      	adds	r0, #1
 800a16c:	d103      	bne.n	800a176 <_printf_common+0xba>
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a176:	3501      	adds	r5, #1
 800a178:	e7c3      	b.n	800a102 <_printf_common+0x46>
 800a17a:	18e1      	adds	r1, r4, r3
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	2030      	movs	r0, #48	; 0x30
 800a180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a184:	4422      	add	r2, r4
 800a186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a18a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a18e:	3302      	adds	r3, #2
 800a190:	e7c5      	b.n	800a11e <_printf_common+0x62>
 800a192:	2301      	movs	r3, #1
 800a194:	4622      	mov	r2, r4
 800a196:	4639      	mov	r1, r7
 800a198:	4630      	mov	r0, r6
 800a19a:	47c0      	blx	r8
 800a19c:	3001      	adds	r0, #1
 800a19e:	d0e6      	beq.n	800a16e <_printf_common+0xb2>
 800a1a0:	f109 0901 	add.w	r9, r9, #1
 800a1a4:	e7d8      	b.n	800a158 <_printf_common+0x9c>
	...

0800a1a8 <_printf_i>:
 800a1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	7e09      	ldrb	r1, [r1, #24]
 800a1b4:	b085      	sub	sp, #20
 800a1b6:	296e      	cmp	r1, #110	; 0x6e
 800a1b8:	4617      	mov	r7, r2
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	4698      	mov	r8, r3
 800a1be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1c0:	f000 80b3 	beq.w	800a32a <_printf_i+0x182>
 800a1c4:	d822      	bhi.n	800a20c <_printf_i+0x64>
 800a1c6:	2963      	cmp	r1, #99	; 0x63
 800a1c8:	d036      	beq.n	800a238 <_printf_i+0x90>
 800a1ca:	d80a      	bhi.n	800a1e2 <_printf_i+0x3a>
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	f000 80b9 	beq.w	800a344 <_printf_i+0x19c>
 800a1d2:	2958      	cmp	r1, #88	; 0x58
 800a1d4:	f000 8083 	beq.w	800a2de <_printf_i+0x136>
 800a1d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a1e0:	e032      	b.n	800a248 <_printf_i+0xa0>
 800a1e2:	2964      	cmp	r1, #100	; 0x64
 800a1e4:	d001      	beq.n	800a1ea <_printf_i+0x42>
 800a1e6:	2969      	cmp	r1, #105	; 0x69
 800a1e8:	d1f6      	bne.n	800a1d8 <_printf_i+0x30>
 800a1ea:	6820      	ldr	r0, [r4, #0]
 800a1ec:	6813      	ldr	r3, [r2, #0]
 800a1ee:	0605      	lsls	r5, r0, #24
 800a1f0:	f103 0104 	add.w	r1, r3, #4
 800a1f4:	d52a      	bpl.n	800a24c <_printf_i+0xa4>
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6011      	str	r1, [r2, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	da03      	bge.n	800a206 <_printf_i+0x5e>
 800a1fe:	222d      	movs	r2, #45	; 0x2d
 800a200:	425b      	negs	r3, r3
 800a202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a206:	486f      	ldr	r0, [pc, #444]	; (800a3c4 <_printf_i+0x21c>)
 800a208:	220a      	movs	r2, #10
 800a20a:	e039      	b.n	800a280 <_printf_i+0xd8>
 800a20c:	2973      	cmp	r1, #115	; 0x73
 800a20e:	f000 809d 	beq.w	800a34c <_printf_i+0x1a4>
 800a212:	d808      	bhi.n	800a226 <_printf_i+0x7e>
 800a214:	296f      	cmp	r1, #111	; 0x6f
 800a216:	d020      	beq.n	800a25a <_printf_i+0xb2>
 800a218:	2970      	cmp	r1, #112	; 0x70
 800a21a:	d1dd      	bne.n	800a1d8 <_printf_i+0x30>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	f043 0320 	orr.w	r3, r3, #32
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	e003      	b.n	800a22e <_printf_i+0x86>
 800a226:	2975      	cmp	r1, #117	; 0x75
 800a228:	d017      	beq.n	800a25a <_printf_i+0xb2>
 800a22a:	2978      	cmp	r1, #120	; 0x78
 800a22c:	d1d4      	bne.n	800a1d8 <_printf_i+0x30>
 800a22e:	2378      	movs	r3, #120	; 0x78
 800a230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a234:	4864      	ldr	r0, [pc, #400]	; (800a3c8 <_printf_i+0x220>)
 800a236:	e055      	b.n	800a2e4 <_printf_i+0x13c>
 800a238:	6813      	ldr	r3, [r2, #0]
 800a23a:	1d19      	adds	r1, r3, #4
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	6011      	str	r1, [r2, #0]
 800a240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a248:	2301      	movs	r3, #1
 800a24a:	e08c      	b.n	800a366 <_printf_i+0x1be>
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6011      	str	r1, [r2, #0]
 800a250:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a254:	bf18      	it	ne
 800a256:	b21b      	sxthne	r3, r3
 800a258:	e7cf      	b.n	800a1fa <_printf_i+0x52>
 800a25a:	6813      	ldr	r3, [r2, #0]
 800a25c:	6825      	ldr	r5, [r4, #0]
 800a25e:	1d18      	adds	r0, r3, #4
 800a260:	6010      	str	r0, [r2, #0]
 800a262:	0628      	lsls	r0, r5, #24
 800a264:	d501      	bpl.n	800a26a <_printf_i+0xc2>
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	e002      	b.n	800a270 <_printf_i+0xc8>
 800a26a:	0668      	lsls	r0, r5, #25
 800a26c:	d5fb      	bpl.n	800a266 <_printf_i+0xbe>
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	4854      	ldr	r0, [pc, #336]	; (800a3c4 <_printf_i+0x21c>)
 800a272:	296f      	cmp	r1, #111	; 0x6f
 800a274:	bf14      	ite	ne
 800a276:	220a      	movne	r2, #10
 800a278:	2208      	moveq	r2, #8
 800a27a:	2100      	movs	r1, #0
 800a27c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a280:	6865      	ldr	r5, [r4, #4]
 800a282:	60a5      	str	r5, [r4, #8]
 800a284:	2d00      	cmp	r5, #0
 800a286:	f2c0 8095 	blt.w	800a3b4 <_printf_i+0x20c>
 800a28a:	6821      	ldr	r1, [r4, #0]
 800a28c:	f021 0104 	bic.w	r1, r1, #4
 800a290:	6021      	str	r1, [r4, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d13d      	bne.n	800a312 <_printf_i+0x16a>
 800a296:	2d00      	cmp	r5, #0
 800a298:	f040 808e 	bne.w	800a3b8 <_printf_i+0x210>
 800a29c:	4665      	mov	r5, ip
 800a29e:	2a08      	cmp	r2, #8
 800a2a0:	d10b      	bne.n	800a2ba <_printf_i+0x112>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	07db      	lsls	r3, r3, #31
 800a2a6:	d508      	bpl.n	800a2ba <_printf_i+0x112>
 800a2a8:	6923      	ldr	r3, [r4, #16]
 800a2aa:	6862      	ldr	r2, [r4, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	bfde      	ittt	le
 800a2b0:	2330      	movle	r3, #48	; 0x30
 800a2b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2ba:	ebac 0305 	sub.w	r3, ip, r5
 800a2be:	6123      	str	r3, [r4, #16]
 800a2c0:	f8cd 8000 	str.w	r8, [sp]
 800a2c4:	463b      	mov	r3, r7
 800a2c6:	aa03      	add	r2, sp, #12
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7ff fef6 	bl	800a0bc <_printf_common>
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d14d      	bne.n	800a370 <_printf_i+0x1c8>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	b005      	add	sp, #20
 800a2da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2de:	4839      	ldr	r0, [pc, #228]	; (800a3c4 <_printf_i+0x21c>)
 800a2e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a2e4:	6813      	ldr	r3, [r2, #0]
 800a2e6:	6821      	ldr	r1, [r4, #0]
 800a2e8:	1d1d      	adds	r5, r3, #4
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6015      	str	r5, [r2, #0]
 800a2ee:	060a      	lsls	r2, r1, #24
 800a2f0:	d50b      	bpl.n	800a30a <_printf_i+0x162>
 800a2f2:	07ca      	lsls	r2, r1, #31
 800a2f4:	bf44      	itt	mi
 800a2f6:	f041 0120 	orrmi.w	r1, r1, #32
 800a2fa:	6021      	strmi	r1, [r4, #0]
 800a2fc:	b91b      	cbnz	r3, 800a306 <_printf_i+0x15e>
 800a2fe:	6822      	ldr	r2, [r4, #0]
 800a300:	f022 0220 	bic.w	r2, r2, #32
 800a304:	6022      	str	r2, [r4, #0]
 800a306:	2210      	movs	r2, #16
 800a308:	e7b7      	b.n	800a27a <_printf_i+0xd2>
 800a30a:	064d      	lsls	r5, r1, #25
 800a30c:	bf48      	it	mi
 800a30e:	b29b      	uxthmi	r3, r3
 800a310:	e7ef      	b.n	800a2f2 <_printf_i+0x14a>
 800a312:	4665      	mov	r5, ip
 800a314:	fbb3 f1f2 	udiv	r1, r3, r2
 800a318:	fb02 3311 	mls	r3, r2, r1, r3
 800a31c:	5cc3      	ldrb	r3, [r0, r3]
 800a31e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a322:	460b      	mov	r3, r1
 800a324:	2900      	cmp	r1, #0
 800a326:	d1f5      	bne.n	800a314 <_printf_i+0x16c>
 800a328:	e7b9      	b.n	800a29e <_printf_i+0xf6>
 800a32a:	6813      	ldr	r3, [r2, #0]
 800a32c:	6825      	ldr	r5, [r4, #0]
 800a32e:	6961      	ldr	r1, [r4, #20]
 800a330:	1d18      	adds	r0, r3, #4
 800a332:	6010      	str	r0, [r2, #0]
 800a334:	0628      	lsls	r0, r5, #24
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	d501      	bpl.n	800a33e <_printf_i+0x196>
 800a33a:	6019      	str	r1, [r3, #0]
 800a33c:	e002      	b.n	800a344 <_printf_i+0x19c>
 800a33e:	066a      	lsls	r2, r5, #25
 800a340:	d5fb      	bpl.n	800a33a <_printf_i+0x192>
 800a342:	8019      	strh	r1, [r3, #0]
 800a344:	2300      	movs	r3, #0
 800a346:	6123      	str	r3, [r4, #16]
 800a348:	4665      	mov	r5, ip
 800a34a:	e7b9      	b.n	800a2c0 <_printf_i+0x118>
 800a34c:	6813      	ldr	r3, [r2, #0]
 800a34e:	1d19      	adds	r1, r3, #4
 800a350:	6011      	str	r1, [r2, #0]
 800a352:	681d      	ldr	r5, [r3, #0]
 800a354:	6862      	ldr	r2, [r4, #4]
 800a356:	2100      	movs	r1, #0
 800a358:	4628      	mov	r0, r5
 800a35a:	f7f5 ff49 	bl	80001f0 <memchr>
 800a35e:	b108      	cbz	r0, 800a364 <_printf_i+0x1bc>
 800a360:	1b40      	subs	r0, r0, r5
 800a362:	6060      	str	r0, [r4, #4]
 800a364:	6863      	ldr	r3, [r4, #4]
 800a366:	6123      	str	r3, [r4, #16]
 800a368:	2300      	movs	r3, #0
 800a36a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a36e:	e7a7      	b.n	800a2c0 <_printf_i+0x118>
 800a370:	6923      	ldr	r3, [r4, #16]
 800a372:	462a      	mov	r2, r5
 800a374:	4639      	mov	r1, r7
 800a376:	4630      	mov	r0, r6
 800a378:	47c0      	blx	r8
 800a37a:	3001      	adds	r0, #1
 800a37c:	d0aa      	beq.n	800a2d4 <_printf_i+0x12c>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	079b      	lsls	r3, r3, #30
 800a382:	d413      	bmi.n	800a3ac <_printf_i+0x204>
 800a384:	68e0      	ldr	r0, [r4, #12]
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	4298      	cmp	r0, r3
 800a38a:	bfb8      	it	lt
 800a38c:	4618      	movlt	r0, r3
 800a38e:	e7a3      	b.n	800a2d8 <_printf_i+0x130>
 800a390:	2301      	movs	r3, #1
 800a392:	464a      	mov	r2, r9
 800a394:	4639      	mov	r1, r7
 800a396:	4630      	mov	r0, r6
 800a398:	47c0      	blx	r8
 800a39a:	3001      	adds	r0, #1
 800a39c:	d09a      	beq.n	800a2d4 <_printf_i+0x12c>
 800a39e:	3501      	adds	r5, #1
 800a3a0:	68e3      	ldr	r3, [r4, #12]
 800a3a2:	9a03      	ldr	r2, [sp, #12]
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	42ab      	cmp	r3, r5
 800a3a8:	dcf2      	bgt.n	800a390 <_printf_i+0x1e8>
 800a3aa:	e7eb      	b.n	800a384 <_printf_i+0x1dc>
 800a3ac:	2500      	movs	r5, #0
 800a3ae:	f104 0919 	add.w	r9, r4, #25
 800a3b2:	e7f5      	b.n	800a3a0 <_printf_i+0x1f8>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1ac      	bne.n	800a312 <_printf_i+0x16a>
 800a3b8:	7803      	ldrb	r3, [r0, #0]
 800a3ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c2:	e76c      	b.n	800a29e <_printf_i+0xf6>
 800a3c4:	0800a6d5 	.word	0x0800a6d5
 800a3c8:	0800a6e6 	.word	0x0800a6e6

0800a3cc <_read_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	4c07      	ldr	r4, [pc, #28]	; (800a3ec <_read_r+0x20>)
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	6022      	str	r2, [r4, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f7f7 faa2 	bl	8001924 <_read>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_read_r+0x1e>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_read_r+0x1e>
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	20004948 	.word	0x20004948

0800a3f0 <_fstat_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4c07      	ldr	r4, [pc, #28]	; (800a410 <_fstat_r+0x20>)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	f7f7 fad6 	bl	80019ae <_fstat>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	d102      	bne.n	800a40c <_fstat_r+0x1c>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	b103      	cbz	r3, 800a40c <_fstat_r+0x1c>
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	bd38      	pop	{r3, r4, r5, pc}
 800a40e:	bf00      	nop
 800a410:	20004948 	.word	0x20004948

0800a414 <_isatty_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4c06      	ldr	r4, [pc, #24]	; (800a430 <_isatty_r+0x1c>)
 800a418:	2300      	movs	r3, #0
 800a41a:	4605      	mov	r5, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	f7f7 fad5 	bl	80019ce <_isatty>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_isatty_r+0x1a>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_isatty_r+0x1a>
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	20004948 	.word	0x20004948

0800a434 <_init>:
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a436:	bf00      	nop
 800a438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43a:	bc08      	pop	{r3}
 800a43c:	469e      	mov	lr, r3
 800a43e:	4770      	bx	lr

0800a440 <_fini>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	bf00      	nop
 800a444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a446:	bc08      	pop	{r3}
 800a448:	469e      	mov	lr, r3
 800a44a:	4770      	bx	lr
