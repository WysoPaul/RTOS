
testFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009948  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce0  08009ce0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009ce0  08009ce0  00019ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ce8  08009ce8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce8  08009ce8  00019ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004540  20000074  08009d64  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045b4  08009d64  000245b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b18  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b1b  00000000  00000000  00049bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020d8  00000000  00000000  0004f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e10  00000000  00000000  000517b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002af7a  00000000  00000000  000535c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f898  00000000  00000000  0007e53a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4ff9  00000000  00000000  0009ddd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00192dcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f30  00000000  00000000  00192e48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ae0 	.word	0x08009ae0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08009ae0 	.word	0x08009ae0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Test>:

#include "dac.h"
#include "adc.h"
//#incldue "stm32f4xx_hal_dac.h"

void Test(void){
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000596:	482a      	ldr	r0, [pc, #168]	; (8000640 <Test+0xb0>)
 8000598:	f001 fb6e 	bl	8001c78 <HAL_ADC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800059c:	2110      	movs	r1, #16
 800059e:	4829      	ldr	r0, [pc, #164]	; (8000644 <Test+0xb4>)
 80005a0:	f002 f842 	bl	8002628 <HAL_DAC_Start>



	for (int i = 1 ; i<11;i++){
 80005a4:	2301      	movs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	e022      	b.n	80005f0 <Test+0x60>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, (370*i) );
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	2200      	movs	r2, #0
 80005b6:	2110      	movs	r1, #16
 80005b8:	4822      	ldr	r0, [pc, #136]	; (8000644 <Test+0xb4>)
 80005ba:	f002 f96c 	bl	8002896 <HAL_DAC_SetValue>
		HAL_ADC_PollForConversion(&hadc1, 0);
 80005be:	2100      	movs	r1, #0
 80005c0:	481f      	ldr	r0, [pc, #124]	; (8000640 <Test+0xb0>)
 80005c2:	f001 fc52 	bl	8001e6a <HAL_ADC_PollForConversion>
		printf("%d DAC= %lu\tADC= %lu\r\n", i, HAL_DAC_GetValue(&hdac, DAC_CHANNEL_2), HAL_ADC_GetValue(&hadc1));
 80005c6:	2110      	movs	r1, #16
 80005c8:	481e      	ldr	r0, [pc, #120]	; (8000644 <Test+0xb4>)
 80005ca:	f002 f8ae 	bl	800272a <HAL_DAC_GetValue>
 80005ce:	4604      	mov	r4, r0
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <Test+0xb0>)
 80005d2:	f001 fcce 	bl	8001f72 <HAL_ADC_GetValue>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4622      	mov	r2, r4
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	481a      	ldr	r0, [pc, #104]	; (8000648 <Test+0xb8>)
 80005de:	f008 fd59 	bl	8009094 <iprintf>
		vTaskDelay(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e6:	f007 fb03 	bl	8007bf0 <vTaskDelay>
	for (int i = 1 ; i<11;i++){
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3301      	adds	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b0a      	cmp	r3, #10
 80005f4:	ddd9      	ble.n	80005aa <Test+0x1a>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 80005f6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80005fa:	2200      	movs	r2, #0
 80005fc:	2110      	movs	r1, #16
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <Test+0xb4>)
 8000600:	f002 f949 	bl	8002896 <HAL_DAC_SetValue>
	printf("DAC= %u\r\n", HAL_DAC_GetValue(&hdac, DAC_CHANNEL_2));
 8000604:	2110      	movs	r1, #16
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <Test+0xb4>)
 8000608:	f002 f88f 	bl	800272a <HAL_DAC_GetValue>
 800060c:	4603      	mov	r3, r0
 800060e:	4619      	mov	r1, r3
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <Test+0xbc>)
 8000612:	f008 fd3f 	bl	8009094 <iprintf>
	vTaskDelay(1000);
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f007 fae9 	bl	8007bf0 <vTaskDelay>


	HAL_DAC_Stop(&hdac, DAC_CHANNEL_2);
 800061e:	2110      	movs	r1, #16
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <Test+0xb4>)
 8000622:	f002 f867 	bl	80026f4 <HAL_DAC_Stop>
	HAL_ADC_Stop(&hadc1);
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <Test+0xb0>)
 8000628:	f001 fbec 	bl	8001e04 <HAL_ADC_Stop>
	printf("ByeBye\n");
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <Test+0xc0>)
 800062e:	f008 fda5 	bl	800917c <puts>
	vTaskDelete(NULL);
 8000632:	2000      	movs	r0, #0
 8000634:	f007 fa4e 	bl	8007ad4 <vTaskDelete>
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bd90      	pop	{r4, r7, pc}
 8000640:	20004040 	.word	0x20004040
 8000644:	20004090 	.word	0x20004090
 8000648:	08009af8 	.word	0x08009af8
 800064c:	08009b10 	.word	0x08009b10
 8000650:	08009b1c 	.word	0x08009b1c

08000654 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_ADC1_Init+0x98>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_ADC1_Init+0x9c>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ADC1_Init+0x98>)
 800066e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000672:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_ADC1_Init+0x98>)
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xa0>)
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b6:	f001 fa9b 	bl	8001bf0 <HAL_ADC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c0:	f000 fdfa 	bl	80012b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006c4:	2303      	movs	r3, #3
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_ADC1_Init+0x98>)
 80006d6:	f001 fc59 	bl	8001f8c <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 fdea 	bl	80012b8 <Error_Handler>
  }

}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20004040 	.word	0x20004040
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_ADC_MspInit+0x7c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d127      	bne.n	800076a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_ADC_MspInit+0x80>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <HAL_ADC_MspInit+0x80>)
 8000724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <HAL_ADC_MspInit+0x80>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_ADC_MspInit+0x80>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_ADC_MspInit+0x80>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_ADC_MspInit+0x80>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000752:	2308      	movs	r3, #8
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000756:	2303      	movs	r3, #3
 8000758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <HAL_ADC_MspInit+0x84>)
 8000766:	f002 fad3 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40012000 	.word	0x40012000
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000

08000780 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_CRC_Init+0x20>)
 8000786:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <MX_CRC_Init+0x24>)
 8000788:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_CRC_Init+0x20>)
 800078c:	f001 ff0e 	bl	80025ac <HAL_CRC_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000796:	f000 fd8f 	bl	80012b8 <Error_Handler>
  }

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20004088 	.word	0x20004088
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10d      	bne.n	80007d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_CRC_MspInit+0x40>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <HAL_CRC_MspInit+0x40>)
 80007c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <HAL_CRC_MspInit+0x40>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023000 	.word	0x40023000
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_DAC_Init+0x4c>)
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <MX_DAC_Init+0x50>)
 80007fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_DAC_Init+0x4c>)
 8000802:	f001 feef 	bl	80025e4 <HAL_DAC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800080c:	f000 fd54 	bl	80012b8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	2210      	movs	r2, #16
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <MX_DAC_Init+0x4c>)
 8000820:	f001 ffec 	bl	80027fc <HAL_DAC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800082a:	f000 fd45 	bl	80012b8 <Error_Handler>
  }

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20004090 	.word	0x20004090
 800083c:	40007400 	.word	0x40007400

08000840 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <HAL_DAC_MspInit+0x8c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d12f      	bne.n	80008c2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_DAC_MspInit+0x90>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <HAL_DAC_MspInit+0x90>)
 800086c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_DAC_MspInit+0x90>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_DAC_MspInit+0x90>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <HAL_DAC_MspInit+0x90>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_DAC_MspInit+0x90>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800089a:	2320      	movs	r3, #32
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089e:	2303      	movs	r3, #3
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <HAL_DAC_MspInit+0x94>)
 80008ae:	f002 fa2f 	bl	8002d10 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2105      	movs	r1, #5
 80008b6:	2036      	movs	r0, #54	; 0x36
 80008b8:	f001 fe4e 	bl	8002558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008bc:	2036      	movs	r0, #54	; 0x36
 80008be:	f001 fe67 	bl	8002590 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40007400 	.word	0x40007400
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_DMA2D_Init+0x5c>)
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <MX_DMA2D_Init+0x60>)
 80008e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_DMA2D_Init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_DMA2D_Init+0x5c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_DMA2D_Init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_DMA2D_Init+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_DMA2D_Init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_DMA2D_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_DMA2D_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <MX_DMA2D_Init+0x5c>)
 800090e:	f002 f813 	bl	8002938 <HAL_DMA2D_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000918:	f000 fcce 	bl	80012b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800091c:	2101      	movs	r1, #1
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_DMA2D_Init+0x5c>)
 8000920:	f002 f964 	bl	8002bec <HAL_DMA2D_ConfigLayer>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800092a:	f000 fcc5 	bl	80012b8 <Error_Handler>
  }

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200040a4 	.word	0x200040a4
 8000938:	4002b000 	.word	0x4002b000

0800093c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_DMA2D_MspInit+0x48>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d115      	bne.n	800097a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_DMA2D_MspInit+0x4c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <HAL_DMA2D_MspInit+0x4c>)
 8000958:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_DMA2D_MspInit+0x4c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	205a      	movs	r0, #90	; 0x5a
 8000970:	f001 fdf2 	bl	8002558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000974:	205a      	movs	r0, #90	; 0x5a
 8000976:	f001 fe0b 	bl	8002590 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	4002b000 	.word	0x4002b000
 8000988:	40023800 	.word	0x40023800

0800098c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_FMC_Init+0x98>)
 80009a6:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <MX_FMC_Init+0x9c>)
 80009a8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_FMC_Init+0x98>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_FMC_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_FMC_Init+0x98>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_FMC_Init+0x98>)
 80009be:	2210      	movs	r2, #16
 80009c0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_FMC_Init+0x98>)
 80009c4:	2240      	movs	r2, #64	; 0x40
 80009c6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_FMC_Init+0x98>)
 80009ca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009ce:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_FMC_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_FMC_Init+0x98>)
 80009d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009dc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_FMC_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_FMC_Init+0x98>)
 80009e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009f0:	2307      	movs	r3, #7
 80009f2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009f8:	2307      	movs	r3, #7
 80009fa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009fc:	2303      	movs	r3, #3
 80009fe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_FMC_Init+0x98>)
 8000a0e:	f004 fc39 	bl	8005284 <HAL_SDRAM_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a18:	f000 fc4e 	bl	80012b8 <Error_Handler>
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200040e4 	.word	0x200040e4
 8000a28:	a0000140 	.word	0xa0000140

08000a2c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a40:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <HAL_FMC_MspInit+0x104>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d16f      	bne.n	8000b28 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000a48:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <HAL_FMC_MspInit+0x104>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <HAL_FMC_MspInit+0x108>)
 8000a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a56:	4a37      	ldr	r2, [pc, #220]	; (8000b34 <HAL_FMC_MspInit+0x108>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a5e:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <HAL_FMC_MspInit+0x108>)
 8000a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8000a6a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a6e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	482c      	ldr	r0, [pc, #176]	; (8000b38 <HAL_FMC_MspInit+0x10c>)
 8000a86:	f002 f943 	bl	8002d10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4826      	ldr	r0, [pc, #152]	; (8000b3c <HAL_FMC_MspInit+0x110>)
 8000aa4:	f002 f934 	bl	8002d10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000aa8:	f248 1333 	movw	r3, #33075	; 0x8133
 8000aac:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aba:	230c      	movs	r3, #12
 8000abc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481f      	ldr	r0, [pc, #124]	; (8000b40 <HAL_FMC_MspInit+0x114>)
 8000ac4:	f002 f924 	bl	8002d10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000ac8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000acc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ada:	230c      	movs	r3, #12
 8000adc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4818      	ldr	r0, [pc, #96]	; (8000b44 <HAL_FMC_MspInit+0x118>)
 8000ae4:	f002 f914 	bl	8002d10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8000ae8:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000aec:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afa:	230c      	movs	r3, #12
 8000afc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4811      	ldr	r0, [pc, #68]	; (8000b48 <HAL_FMC_MspInit+0x11c>)
 8000b04:	f002 f904 	bl	8002d10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b08:	2360      	movs	r3, #96	; 0x60
 8000b0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <HAL_FMC_MspInit+0x120>)
 8000b22:	f002 f8f5 	bl	8002d10 <HAL_GPIO_Init>
 8000b26:	e000      	b.n	8000b2a <HAL_FMC_MspInit+0xfe>
    return;
 8000b28:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000090 	.word	0x20000090
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40020400 	.word	0x40020400

08000b50 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b58:	f7ff ff68 	bl	8000a2c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <vApplicationGetIdleTaskMemory+0x30>)
 8000b7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000094 	.word	0x20000094
 8000b94:	200000e8 	.word	0x200000e8

08000b98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_FREERTOS_Init+0x30>)
 8000ba0:	1d3c      	adds	r4, r7, #4
 8000ba2:	461d      	mov	r5, r3
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f006 fb9b 	bl	80072f0 <osThreadCreate>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <MX_FREERTOS_Init+0x34>)
 8000bbe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc8:	08009b30 	.word	0x08009b30
 8000bcc:	20004118 	.word	0x20004118

08000bd0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f006 fbd5 	bl	8007388 <osDelay>
 8000bde:	e7fb      	b.n	8000bd8 <StartDefaultTask+0x8>

08000be0 <MX_GPIO_Init>:
     PG12   ------> LTDC_B4
     PB8   ------> LTDC_B6
     PB9   ------> LTDC_B7
*/
void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
 8000bfa:	4bb0      	ldr	r3, [pc, #704]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4aaf      	ldr	r2, [pc, #700]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4bad      	ldr	r3, [pc, #692]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	623b      	str	r3, [r7, #32]
 8000c10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	4ba9      	ldr	r3, [pc, #676]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4aa8      	ldr	r2, [pc, #672]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4ba6      	ldr	r3, [pc, #664]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	4ba2      	ldr	r3, [pc, #648]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4aa1      	ldr	r2, [pc, #644]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b9f      	ldr	r3, [pc, #636]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	4b9b      	ldr	r3, [pc, #620]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a9a      	ldr	r2, [pc, #616]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b98      	ldr	r3, [pc, #608]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b94      	ldr	r3, [pc, #592]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a93      	ldr	r2, [pc, #588]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b91      	ldr	r3, [pc, #580]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b8d      	ldr	r3, [pc, #564]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a8c      	ldr	r2, [pc, #560]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b8a      	ldr	r3, [pc, #552]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b86      	ldr	r3, [pc, #536]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a85      	ldr	r2, [pc, #532]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b83      	ldr	r3, [pc, #524]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a7e      	ldr	r2, [pc, #504]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b7c      	ldr	r3, [pc, #496]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2116      	movs	r1, #22
 8000cda:	4879      	ldr	r0, [pc, #484]	; (8000ec0 <MX_GPIO_Init+0x2e0>)
 8000cdc:	f002 f9c2 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	4877      	ldr	r0, [pc, #476]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000ce6:	f002 f9bd 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cf0:	4875      	ldr	r0, [pc, #468]	; (8000ec8 <MX_GPIO_Init+0x2e8>)
 8000cf2:	f002 f9b7 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cfc:	4873      	ldr	r0, [pc, #460]	; (8000ecc <MX_GPIO_Init+0x2ec>)
 8000cfe:	f002 f9b1 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d14:	230e      	movs	r3, #14
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	486c      	ldr	r0, [pc, #432]	; (8000ed0 <MX_GPIO_Init+0x2f0>)
 8000d20:	f001 fff6 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d24:	2316      	movs	r3, #22
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4861      	ldr	r0, [pc, #388]	; (8000ec0 <MX_GPIO_Init+0x2e0>)
 8000d3c:	f001 ffe8 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d44:	4b63      	ldr	r3, [pc, #396]	; (8000ed4 <MX_GPIO_Init+0x2f4>)
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	485c      	ldr	r0, [pc, #368]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000d54:	f001 ffdc 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d58:	f248 0306 	movw	r3, #32774	; 0x8006
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <MX_GPIO_Init+0x2f8>)
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4855      	ldr	r0, [pc, #340]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000d6e:	f001 ffcf 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VSYNC_Pin|G2_Pin|R4_Pin|R5_Pin;
 8000d72:	f641 0350 	movw	r3, #6224	; 0x1850
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d84:	230e      	movs	r3, #14
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	484d      	ldr	r0, [pc, #308]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000d90:	f001 ffbe 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4846      	ldr	r0, [pc, #280]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000dac:	f001 ffb0 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000db0:	2320      	movs	r3, #32
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000db4:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <MX_GPIO_Init+0x2f8>)
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	483f      	ldr	r0, [pc, #252]	; (8000ec0 <MX_GPIO_Init+0x2e0>)
 8000dc4:	f001 ffa4 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	483e      	ldr	r0, [pc, #248]	; (8000edc <MX_GPIO_Init+0x2fc>)
 8000de4:	f001 ff94 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000de8:	2304      	movs	r3, #4
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4838      	ldr	r0, [pc, #224]	; (8000edc <MX_GPIO_Init+0x2fc>)
 8000dfc:	f001 ff88 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e12:	230e      	movs	r3, #14
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	482f      	ldr	r0, [pc, #188]	; (8000edc <MX_GPIO_Init+0x2fc>)
 8000e1e:	f001 ff77 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <MX_GPIO_Init+0x2e8>)
 8000e38:	f001 ff6a 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e3c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <MX_GPIO_Init+0x2e8>)
 8000e56:	f001 ff5b 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e5a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e6c:	230e      	movs	r3, #14
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4815      	ldr	r0, [pc, #84]	; (8000ecc <MX_GPIO_Init+0x2ec>)
 8000e78:	f001 ff4a 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000e7c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e8e:	230e      	movs	r3, #14
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_GPIO_Init+0x2e0>)
 8000e9a:	f001 ff39 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e9e:	2348      	movs	r3, #72	; 0x48
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eae:	230e      	movs	r3, #14
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	e012      	b.n	8000ee0 <MX_GPIO_Init+0x300>
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020c00 	.word	0x40020c00
 8000ecc:	40021800 	.word	0x40021800
 8000ed0:	40021400 	.word	0x40021400
 8000ed4:	10110000 	.word	0x10110000
 8000ed8:	10120000 	.word	0x10120000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <MX_GPIO_Init+0x360>)
 8000ee2:	f001 ff15 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ee6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ef8:	2309      	movs	r3, #9
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4810      	ldr	r0, [pc, #64]	; (8000f44 <MX_GPIO_Init+0x364>)
 8000f04:	f001 ff04 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000f08:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <MX_GPIO_Init+0x364>)
 8000f22:	f001 fef5 	bl	8002d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2105      	movs	r1, #5
 8000f2a:	2006      	movs	r0, #6
 8000f2c:	f001 fb14 	bl	8002558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f30:	2006      	movs	r0, #6
 8000f32:	f001 fb2d 	bl	8002590 <HAL_NVIC_EnableIRQ>

}
 8000f36:	bf00      	nop
 8000f38:	3738      	adds	r7, #56	; 0x38
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	40021800 	.word	0x40021800

08000f48 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_I2C3_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <MX_I2C3_Init+0x7c>)
 8000f56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f86:	f003 fb35 	bl	80045f4 <HAL_I2C_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f90:	f000 f992 	bl	80012b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000f98:	f003 fc64 	bl	8004864 <HAL_I2CEx_ConfigAnalogFilter>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000fa2:	f000 f989 	bl	80012b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_I2C3_Init+0x74>)
 8000faa:	f003 fc97 	bl	80048dc <HAL_I2CEx_ConfigDigitalFilter>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f000 f980 	bl	80012b8 <Error_Handler>
  }

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000411c 	.word	0x2000411c
 8000fc0:	40005c00 	.word	0x40005c00
 8000fc4:	000186a0 	.word	0x000186a0

08000fc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a29      	ldr	r2, [pc, #164]	; (800108c <HAL_I2C_MspInit+0xc4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d14b      	bne.n	8001082 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a27      	ldr	r2, [pc, #156]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a20      	ldr	r2, [pc, #128]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001034:	2304      	movs	r3, #4
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4815      	ldr	r0, [pc, #84]	; (8001094 <HAL_I2C_MspInit+0xcc>)
 8001040:	f001 fe66 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104a:	2312      	movs	r3, #18
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001056:	2304      	movs	r3, #4
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <HAL_I2C_MspInit+0xd0>)
 8001062:	f001 fe55 	bl	8002d10 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 8001070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_I2C_MspInit+0xc8>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40005c00 	.word	0x40005c00
 8001090:	40023800 	.word	0x40023800
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000

0800109c <__io_putchar>:



//Redéfinition de la fonction printf ... qui utilise io_putchar()
int __io_putchar(int ch)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80010a4:	1d39      	adds	r1, r7, #4
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	2201      	movs	r2, #1
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <__io_putchar+0x20>)
 80010ae:	f004 fdce 	bl	8005c4e <HAL_UART_Transmit>
	return ch;
 80010b2:	687b      	ldr	r3, [r7, #4]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200042a8 	.word	0x200042a8

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
uint8_t bidon = 0x58;
 80010c6:	2358      	movs	r3, #88	; 0x58
 80010c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
uint8_t message[] = {"On va commencer\r\n"};
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <main+0xd4>)
 80010ce:	1d3c      	adds	r4, r7, #4
 80010d0:	461d      	mov	r5, r3
 80010d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f000 fd25 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f86f 	bl	80011c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f7ff fd7d 	bl	8000be0 <MX_GPIO_Init>
  MX_CRC_Init();
 80010e6:	f7ff fb4b 	bl	8000780 <MX_CRC_Init>
  MX_DMA2D_Init();
 80010ea:	f7ff fbf5 	bl	80008d8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80010ee:	f7ff fc4d 	bl	800098c <MX_FMC_Init>
  MX_I2C3_Init();
 80010f2:	f7ff ff29 	bl	8000f48 <MX_I2C3_Init>
  MX_SPI5_Init();
 80010f6:	f000 f8e7 	bl	80012c8 <MX_SPI5_Init>
  MX_TIM1_Init();
 80010fa:	f000 fb0d 	bl	8001718 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010fe:	f000 fbe5 	bl	80018cc <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8001102:	f000 fc5d 	bl	80019c0 <MX_USB_OTG_HS_HCD_Init>
  MX_TIM2_Init();
 8001106:	f000 fb57 	bl	80017b8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800110a:	f7ff faa3 	bl	8000654 <MX_ADC1_Init>
  MX_DAC_Init();
 800110e:	f7ff fb6d 	bl	80007ec <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Transmit(&huart1, message, sizeof(message), 0xff);
  printf("T0: Tache INIT commence\r\n");
 8001112:	4821      	ldr	r0, [pc, #132]	; (8001198 <main+0xd8>)
 8001114:	f008 f832 	bl	800917c <puts>


  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 8001118:	2300      	movs	r3, #0
 800111a:	603b      	str	r3, [r7, #0]
  int p1=1;
 800111c:	2301      	movs	r3, #1
 800111e:	623b      	str	r3, [r7, #32]
  int p2=2;
 8001120:	2302      	movs	r3, #2
 8001122:	61fb      	str	r3, [r7, #28]

  //Création d'un Meesage/Qeue
  //BaL1 = xQueueCreate( 5, sizeof( QMessage ) );

  //Création du Semaphore
  printf("T0: Creation du semaphore (vide)\r\n");
 8001124:	481d      	ldr	r0, [pc, #116]	; (800119c <main+0xdc>)
 8001126:	f008 f829 	bl	800917c <puts>
  //MonSem=semBCreate(SEM_Q_FIFO,SEM_EMPTY);		//Façon VxWorks
  MonSem = xSemaphoreCreateBinary();				//Façon FreeRTOS
 800112a:	2203      	movs	r2, #3
 800112c:	2100      	movs	r1, #0
 800112e:	2001      	movs	r0, #1
 8001130:	f006 fa5a 	bl	80075e8 <xQueueGenericCreate>
 8001134:	4602      	mov	r2, r0
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <main+0xe0>)
 8001138:	601a      	str	r2, [r3, #0]
  MonSemUART = xSemaphoreCreateBinary();				//Façon FreeRTOS
 800113a:	2203      	movs	r2, #3
 800113c:	2100      	movs	r1, #0
 800113e:	2001      	movs	r0, #1
 8001140:	f006 fa52 	bl	80075e8 <xQueueGenericCreate>
 8001144:	4602      	mov	r2, r0
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <main+0xe4>)
 8001148:	601a      	str	r2, [r3, #0]
				  &xHandle );      /* Used to pass out the created task's handle.
  if( xReturned == pdPASS )
  printf("T0: Tache ''Bidon'' cree avec priorite %d\r\n", p1);
*/

  printf("T0: Creation tache 2\r\n");
 800114a:	4817      	ldr	r0, [pc, #92]	; (80011a8 <main+0xe8>)
 800114c:	f008 f816 	bl	800917c <puts>
  xReturned = xTaskCreate(
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	463a      	mov	r2, r7
 8001154:	9201      	str	r2, [sp, #4]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800115e:	4913      	ldr	r1, [pc, #76]	; (80011ac <main+0xec>)
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <main+0xf0>)
 8001162:	f006 fb82 	bl	800786a <xTaskCreate>
 8001166:	61b8      	str	r0, [r7, #24]
				  "Test",
		  	  	  1000,      		/* Stack size in words, not bytes.*/
				  NULL,    			/* Parameter passed into the task.*/
				  p2,				/* Priority at which the task is created.*/
				  &xHandle );       /* Used to pass out the created task's handle.*/
  if( xReturned == pdPASS )
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d103      	bne.n	8001176 <main+0xb6>
	  printf("T0: Tache ''test'' cree avec priorite %d\r\n", p2);
 800116e:	69f9      	ldr	r1, [r7, #28]
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <main+0xf4>)
 8001172:	f007 ff8f 	bl	8009094 <iprintf>

  printf("T0: Fin fct main x_x\r\n\n");
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <main+0xf8>)
 8001178:	f008 f800 	bl	800917c <puts>

   /* ==============================================================================================
  -----------------------------------------------------------------------------------------------*/

  //Initier le timer TIM2
  HAL_TIM_Base_Start_IT (&htim2);
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <main+0xfc>)
 800117e:	f004 f944 	bl	800540a <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001182:	f7ff fd09 	bl	8000b98 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001186:	f006 f8ac 	bl	80072e2 <osKernelStart>
 800118a:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  //..
  /* USER CODE END 3 */
}
 800118c:	4618      	mov	r0, r3
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	08009c14 	.word	0x08009c14
 8001198:	08009b70 	.word	0x08009b70
 800119c:	08009b8c 	.word	0x08009b8c
 80011a0:	20004174 	.word	0x20004174
 80011a4:	20004170 	.word	0x20004170
 80011a8:	08009bb0 	.word	0x08009bb0
 80011ac:	08009bc8 	.word	0x08009bc8
 80011b0:	08000591 	.word	0x08000591
 80011b4:	08009bd0 	.word	0x08009bd0
 80011b8:	08009bfc 	.word	0x08009bfc
 80011bc:	20004268 	.word	0x20004268

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	; 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 feb0 	bl	8008f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <SystemClock_Config+0xcc>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <SystemClock_Config+0xcc>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <SystemClock_Config+0xcc>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <SystemClock_Config+0xd0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a21      	ldr	r2, [pc, #132]	; (8001290 <SystemClock_Config+0xd0>)
 800120a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <SystemClock_Config+0xd0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121c:	2301      	movs	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001234:	23a8      	movs	r3, #168	; 0xa8
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001238:	2302      	movs	r3, #2
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800123c:	2307      	movs	r3, #7
 800123e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fb89 	bl	800495c <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001250:	f000 f832 	bl	80012b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001254:	230f      	movs	r3, #15
 8001256:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001258:	2302      	movs	r3, #2
 800125a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001260:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2105      	movs	r1, #5
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fde2 	bl	8004e3c <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800127e:	f000 f81b 	bl	80012b8 <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	3750      	adds	r7, #80	; 0x50
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40007000 	.word	0x40007000

08001294 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012a6:	f000 fc61 	bl	8001b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40001000 	.word	0x40001000

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_SPI5_Init+0x64>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <MX_SPI5_Init+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI5_Init+0x64>)
 80012d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI5_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_SPI5_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI5_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI5_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI5_Init+0x64>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI5_Init+0x64>)
 80012fc:	2218      	movs	r2, #24
 80012fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_SPI5_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI5_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_SPI5_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI5_Init+0x64>)
 8001314:	220a      	movs	r2, #10
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_SPI5_Init+0x64>)
 800131a:	f003 ffe7 	bl	80052ec <HAL_SPI_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001324:	f7ff ffc8 	bl	80012b8 <Error_Handler>
  }

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20004190 	.word	0x20004190
 8001330:	40015000 	.word	0x40015000

08001334 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_SPI_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12c      	bne.n	80013b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_SPI_MspInit+0x88>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_SPI_MspInit+0x88>)
 8001360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_SPI_MspInit+0x88>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_SPI_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <HAL_SPI_MspInit+0x88>)
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_SPI_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800138e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013a0:	2305      	movs	r3, #5
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_SPI_MspInit+0x8c>)
 80013ac:	f001 fcb0 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40015000 	.word	0x40015000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40021400 	.word	0x40021400

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_MspInit+0x54>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_MspInit+0x54>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_MspInit+0x54>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_MspInit+0x54>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_MspInit+0x54>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_MspInit+0x54>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	210f      	movs	r1, #15
 8001406:	f06f 0001 	mvn.w	r0, #1
 800140a:	f001 f8a5 	bl	8002558 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	2036      	movs	r0, #54	; 0x36
 8001432:	f001 f891 	bl	8002558 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001436:	2036      	movs	r0, #54	; 0x36
 8001438:	f001 f8aa 	bl	8002590 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_InitTick+0xa4>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_InitTick+0xa4>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_InitTick+0xa4>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001458:	f107 0210 	add.w	r2, r7, #16
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fedc 	bl	8005220 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001468:	f003 feb2 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 800146c:	4603      	mov	r3, r0
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_InitTick+0xa8>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	3b01      	subs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_InitTick+0xac>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <HAL_InitTick+0xb0>)
 8001484:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_InitTick+0xac>)
 8001488:	f240 32e7 	movw	r2, #999	; 0x3e7
 800148c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_InitTick+0xac>)
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_InitTick+0xac>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_InitTick+0xac>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <HAL_InitTick+0xac>)
 80014a2:	f003 ff87 	bl	80053b4 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d104      	bne.n	80014b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <HAL_InitTick+0xac>)
 80014ae:	f003 ffac 	bl	800540a <HAL_TIM_Base_Start_IT>
 80014b2:	4603      	mov	r3, r0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3730      	adds	r7, #48	; 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	431bde83 	.word	0x431bde83
 80014c8:	200041e8 	.word	0x200041e8
 80014cc:	40001000 	.word	0x40001000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8001508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <EXTI0_IRQHandler+0x18>)
 800150e:	f001 fdc2 	bl	8003096 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001512:	2001      	movs	r0, #1
 8001514:	f001 fdda 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021800 	.word	0x40021800

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//printf("IT: TIMER #2 a claqué\r\n");		//A ne pas faire dans la vrai vie, c'est juste pour l'exo
	HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8001524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <TIM2_IRQHandler+0x24>)
 800152a:	f001 fdb4 	bl	8003096 <HAL_GPIO_TogglePin>
	xSemaphoreGiveFromISR(MonSem,pdFALSE);
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <TIM2_IRQHandler+0x28>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f006 f8b5 	bl	80076a4 <xQueueGiveFromISR>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800153a:	4804      	ldr	r0, [pc, #16]	; (800154c <TIM2_IRQHandler+0x2c>)
 800153c:	f003 ff89 	bl	8005452 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021800 	.word	0x40021800
 8001548:	20004174 	.word	0x20004174
 800154c:	20004268 	.word	0x20004268

08001550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	xSemaphoreGiveFromISR(MonSemUART,pdFALSE);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <USART1_IRQHandler+0x1c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f006 f8a2 	bl	80076a4 <xQueueGiveFromISR>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <USART1_IRQHandler+0x20>)
 8001562:	f004 fc0d 	bl	8005d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20004170 	.word	0x20004170
 8001570:	200042a8 	.word	0x200042a8

08001574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <TIM6_DAC_IRQHandler+0x14>)
 800157a:	f001 f8eb 	bl	8002754 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <TIM6_DAC_IRQHandler+0x18>)
 8001580:	f003 ff67 	bl	8005452 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20004090 	.word	0x20004090
 800158c:	200041e8 	.word	0x200041e8

08001590 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <OTG_HS_IRQHandler+0x10>)
 8001596:	f001 fe1e 	bl	80031d6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200042e8 	.word	0x200042e8

080015a4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <DMA2D_IRQHandler+0x10>)
 80015aa:	f001 fa0e 	bl	80029ca <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200040a4 	.word	0x200040a4

080015b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e00a      	b.n	80015e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ca:	f3af 8000 	nop.w
 80015ce:	4601      	mov	r1, r0
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	b2ca      	uxtb	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf0      	blt.n	80015ca <_read+0x12>
	}

return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e009      	b.n	8001618 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fd45 	bl	800109c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf1      	blt.n	8001604 <_write+0x12>
	}
	return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_close>:

int _close(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001652:	605a      	str	r2, [r3, #4]
	return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_isatty>:

int _isatty(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
	return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x50>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x16>
		heap_end = &end;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <_sbrk+0x50>)
 80016a6:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <_sbrk+0x54>)
 80016a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <_sbrk+0x50>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <_sbrk+0x50>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	466a      	mov	r2, sp
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d907      	bls.n	80016ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016be:	f007 fa95 	bl	8008bec <__errno>
 80016c2:	4602      	mov	r2, r0
 80016c4:	230c      	movs	r3, #12
 80016c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	e006      	b.n	80016dc <_sbrk+0x48>
	}

	heap_end += incr;
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <_sbrk+0x50>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <_sbrk+0x50>)
 80016d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200002e8 	.word	0x200002e8
 80016e8:	200045b8 	.word	0x200045b8

080016ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <SystemInit+0x28>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a07      	ldr	r2, [pc, #28]	; (8001714 <SystemInit+0x28>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SystemInit+0x28>)
 8001702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001706:	609a      	str	r2, [r3, #8]
#endif
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001736:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <MX_TIM1_Init+0x9c>)
 8001738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <MX_TIM1_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_TIM1_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_TIM1_Init+0x98>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800175e:	4814      	ldr	r0, [pc, #80]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001760:	f003 fe28 	bl	80053b4 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800176a:	f7ff fda5 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4619      	mov	r1, r3
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_TIM1_Init+0x98>)
 800177c:	f003 ff71 	bl	8005662 <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001786:	f7ff fd97 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <MX_TIM1_Init+0x98>)
 8001798:	f004 f97c 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80017a2:	f7ff fd89 	bl	80012b8 <Error_Handler>
  }

}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20004228 	.word	0x20004228
 80017b4:	40010000 	.word	0x40010000

080017b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_TIM2_Init+0x94>)
 80017d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_TIM2_Init+0x94>)
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_TIM2_Init+0x94>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399999;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_TIM2_Init+0x94>)
 80017ea:	4a19      	ldr	r2, [pc, #100]	; (8001850 <MX_TIM2_Init+0x98>)
 80017ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_TIM2_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_TIM2_Init+0x94>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fa:	4814      	ldr	r0, [pc, #80]	; (800184c <MX_TIM2_Init+0x94>)
 80017fc:	f003 fdda 	bl	80053b4 <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001806:	f7ff fd57 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4619      	mov	r1, r3
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_TIM2_Init+0x94>)
 8001818:	f003 ff23 	bl	8005662 <HAL_TIM_ConfigClockSource>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001822:	f7ff fd49 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <MX_TIM2_Init+0x94>)
 8001834:	f004 f92e 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800183e:	f7ff fd3b 	bl	80012b8 <Error_Handler>
  }

}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20004268 	.word	0x20004268
 8001850:	00802c7f 	.word	0x00802c7f

08001854 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <HAL_TIM_Base_MspInit+0x70>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10e      	bne.n	8001884 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_TIM_Base_MspInit+0x74>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_TIM_Base_MspInit+0x74>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_TIM_Base_MspInit+0x74>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001882:	e01a      	b.n	80018ba <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d115      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_TIM_Base_MspInit+0x74>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <HAL_TIM_Base_MspInit+0x74>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_TIM_Base_MspInit+0x74>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2105      	movs	r1, #5
 80018ae:	201c      	movs	r0, #28
 80018b0:	f000 fe52 	bl	8002558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018b4:	201c      	movs	r0, #28
 80018b6:	f000 fe6b 	bl	8002590 <HAL_NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40023800 	.word	0x40023800

080018cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <MX_USART1_UART_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 80018d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_USART1_UART_Init+0x4c>)
 8001904:	f004 f956 	bl	8005bb4 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800190e:	f7ff fcd3 	bl	80012b8 <Error_Handler>
  }

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200042a8 	.word	0x200042a8
 800191c:	40011000 	.word	0x40011000

08001920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_UART_MspInit+0x94>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d134      	bne.n	80019ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_UART_MspInit+0x98>)
 800194c:	f043 0310 	orr.w	r3, r3, #16
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800197a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800198c:	2307      	movs	r3, #7
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4809      	ldr	r0, [pc, #36]	; (80019bc <HAL_UART_MspInit+0x9c>)
 8001998:	f001 f9ba 	bl	8002d10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2105      	movs	r1, #5
 80019a0:	2025      	movs	r0, #37	; 0x25
 80019a2:	f000 fdd9 	bl	8002558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019a6:	2025      	movs	r0, #37	; 0x25
 80019a8:	f000 fdf2 	bl	8002590 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000

080019c0 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019c6:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <MX_USB_OTG_HS_HCD_Init+0x54>)
 80019c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019cc:	220c      	movs	r2, #12
 80019ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019de:	2202      	movs	r2, #2
 80019e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80019fc:	f001 fb89 	bl	8003112 <HAL_HCD_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001a06:	f7ff fc57 	bl	80012b8 <Error_Handler>
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200042e8 	.word	0x200042e8
 8001a14:	40040000 	.word	0x40040000

08001a18 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_HCD_MspInit+0xb0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d141      	bne.n	8001abe <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_HCD_MspInit+0xb4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a22      	ldr	r2, [pc, #136]	; (8001acc <HAL_HCD_MspInit+0xb4>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_HCD_MspInit+0xb4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001a56:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001a68:	230c      	movs	r3, #12
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <HAL_HCD_MspInit+0xb8>)
 8001a74:	f001 f94c 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <HAL_HCD_MspInit+0xb8>)
 8001a8e:	f001 f93f 	bl	8002d10 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_HCD_MspInit+0xb4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <HAL_HCD_MspInit+0xb4>)
 8001a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_HCD_MspInit+0xb4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	204d      	movs	r0, #77	; 0x4d
 8001ab4:	f000 fd50 	bl	8002558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001ab8:	204d      	movs	r0, #77	; 0x4d
 8001aba:	f000 fd69 	bl	8002590 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40040000 	.word	0x40040000
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ada:	e003      	b.n	8001ae4 <LoopCopyDataInit>

08001adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ae2:	3104      	adds	r1, #4

08001ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aec:	d3f6      	bcc.n	8001adc <CopyDataInit>
  ldr  r2, =_sbss
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001af0:	e002      	b.n	8001af8 <LoopFillZerobss>

08001af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001af4:	f842 3b04 	str.w	r3, [r2], #4

08001af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001afc:	d3f9      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001afe:	f7ff fdf5 	bl	80016ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b02:	f007 f9f3 	bl	8008eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b06:	f7ff fadb 	bl	80010c0 <main>
  bx  lr    
 8001b0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b0c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001b10:	08009cf0 	.word	0x08009cf0
  ldr  r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b18:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001b1c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001b20:	200045b4 	.word	0x200045b4

08001b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC_IRQHandler>
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_Init+0x40>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_Init+0x40>)
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_Init+0x40>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 fcf6 	bl	8002542 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	2005      	movs	r0, #5
 8001b58:	f7ff fc60 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5c:	f7ff fc32 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	200045ac 	.word	0x200045ac

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200045ac 	.word	0x200045ac

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_Delay+0x40>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000008 	.word	0x20000008

08001bf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e033      	b.n	8001c6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fd72 	bl	80006f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c36:	f023 0302 	bic.w	r3, r3, #2
 8001c3a:	f043 0202 	orr.w	r2, r3, #2
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fad4 	bl	80021f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f023 0303 	bic.w	r3, r3, #3
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5e:	e001      	b.n	8001c64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Start+0x1a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e0a5      	b.n	8001dde <HAL_ADC_Start+0x166>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d018      	beq.n	8001cda <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <HAL_ADC_Start+0x174>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a4c      	ldr	r2, [pc, #304]	; (8001df0 <HAL_ADC_Start+0x178>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9a      	lsrs	r2, r3, #18
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d179      	bne.n	8001ddc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d26:	d106      	bne.n	8001d36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f023 0206 	bic.w	r2, r3, #6
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
 8001d34:	e002      	b.n	8001d3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_ADC_Start+0x17c>)
 8001d46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d12a      	bne.n	8001db4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a25      	ldr	r2, [pc, #148]	; (8001df8 <HAL_ADC_Start+0x180>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d015      	beq.n	8001d94 <HAL_ADC_Start+0x11c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_ADC_Start+0x184>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d105      	bne.n	8001d7e <HAL_ADC_Start+0x106>
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_ADC_Start+0x17c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_ADC_Start+0x188>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d129      	bne.n	8001ddc <HAL_ADC_Start+0x164>
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_ADC_Start+0x17c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d823      	bhi.n	8001ddc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d11c      	bne.n	8001ddc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	e013      	b.n	8001ddc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <HAL_ADC_Start+0x180>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10e      	bne.n	8001ddc <HAL_ADC_Start+0x164>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dda:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000
 8001df0:	431bde83 	.word	0x431bde83
 8001df4:	40012300 	.word	0x40012300
 8001df8:	40012000 	.word	0x40012000
 8001dfc:	40012100 	.word	0x40012100
 8001e00:	40012200 	.word	0x40012200

08001e04 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Stop+0x16>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e021      	b.n	8001e5e <HAL_ADC_Stop+0x5a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e86:	d113      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e96:	d10b      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f043 0220 	orr.w	r2, r3, #32
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e05c      	b.n	8001f6a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001eb0:	f7ff fe70 	bl	8001b94 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb6:	e01a      	b.n	8001eee <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebe:	d016      	beq.n	8001eee <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_ADC_PollForConversion+0x6c>
 8001ec6:	f7ff fe65 	bl	8001b94 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d20b      	bcs.n	8001eee <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f043 0204 	orr.w	r2, r3, #4
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e03d      	b.n	8001f6a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d1dd      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0212 	mvn.w	r2, #18
 8001f04:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d123      	bne.n	8001f68 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11f      	bne.n	8001f68 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d111      	bne.n	8001f68 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1c>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e113      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x244>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d925      	bls.n	8002004 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b1e      	subs	r3, #30
 8001fce:	2207      	movs	r2, #7
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	400a      	ands	r2, r1
 8001fdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68d9      	ldr	r1, [r3, #12]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4403      	add	r3, r0
 8001ff6:	3b1e      	subs	r3, #30
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	e022      	b.n	800204a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	2207      	movs	r2, #7
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	400a      	ands	r2, r1
 8002026:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6919      	ldr	r1, [r3, #16]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	4603      	mov	r3, r0
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4403      	add	r3, r0
 8002040:	409a      	lsls	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d824      	bhi.n	800209c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	3b05      	subs	r3, #5
 8002064:	221f      	movs	r2, #31
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	400a      	ands	r2, r1
 8002072:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	3b05      	subs	r3, #5
 800208e:	fa00 f203 	lsl.w	r2, r0, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
 800209a:	e04c      	b.n	8002136 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d824      	bhi.n	80020ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b23      	subs	r3, #35	; 0x23
 80020b6:	221f      	movs	r2, #31
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43da      	mvns	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	400a      	ands	r2, r1
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b23      	subs	r3, #35	; 0x23
 80020e0:	fa00 f203 	lsl.w	r2, r0, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
 80020ec:	e023      	b.n	8002136 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b41      	subs	r3, #65	; 0x41
 8002100:	221f      	movs	r2, #31
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	400a      	ands	r2, r1
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b41      	subs	r3, #65	; 0x41
 800212a:	fa00 f203 	lsl.w	r2, r0, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_ADC_ConfigChannel+0x250>)
 8002138:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <HAL_ADC_ConfigChannel+0x254>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d10f      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1d8>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b12      	cmp	r3, #18
 800214a:	d10b      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_ADC_ConfigChannel+0x254>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d12b      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x23a>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_ADC_ConfigChannel+0x258>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d003      	beq.n	8002180 <HAL_ADC_ConfigChannel+0x1f4>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b11      	cmp	r3, #17
 800217e:	d122      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_ADC_ConfigChannel+0x258>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d111      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_ADC_ConfigChannel+0x25c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_ADC_ConfigChannel+0x260>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	0c9a      	lsrs	r2, r3, #18
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021b8:	e002      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3b01      	subs	r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f9      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40012300 	.word	0x40012300
 80021e0:	40012000 	.word	0x40012000
 80021e4:	10000012 	.word	0x10000012
 80021e8:	20000000 	.word	0x20000000
 80021ec:	431bde83 	.word	0x431bde83

080021f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f8:	4b79      	ldr	r3, [pc, #484]	; (80023e0 <ADC_Init+0x1f0>)
 80021fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	431a      	orrs	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002224:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	021a      	lsls	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002248:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6899      	ldr	r1, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <ADC_Init+0x1f4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d022      	beq.n	80022ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002296:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6899      	ldr	r1, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6899      	ldr	r1, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	e00f      	b.n	80022ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0202 	bic.w	r2, r2, #2
 80022fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7e1b      	ldrb	r3, [r3, #24]
 8002308:	005a      	lsls	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01b      	beq.n	8002354 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800233a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	3b01      	subs	r3, #1
 8002348:	035a      	lsls	r2, r3, #13
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	e007      	b.n	8002364 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002362:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	3b01      	subs	r3, #1
 8002380:	051a      	lsls	r2, r3, #20
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023a6:	025a      	lsls	r2, r3, #9
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6899      	ldr	r1, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	029a      	lsls	r2, r3, #10
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	609a      	str	r2, [r3, #8]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40012300 	.word	0x40012300
 80023e4:	0f000001 	.word	0x0f000001

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ff4c 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800256a:	f7ff ff61 	bl	8002430 <__NVIC_GetPriorityGrouping>
 800256e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	6978      	ldr	r0, [r7, #20]
 8002576:	f7ff ffb1 	bl	80024dc <NVIC_EncodePriority>
 800257a:	4602      	mov	r2, r0
 800257c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff80 	bl	8002488 <__NVIC_SetPriority>
}
 8002588:	bf00      	nop
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff54 	bl	800244c <__NVIC_EnableIRQ>
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00e      	b.n	80025dc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	795b      	ldrb	r3, [r3, #5]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe f8ea 	bl	80007a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e014      	b.n	8002620 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	791b      	ldrb	r3, [r3, #4]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe f91a 	bl	8000840 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	795b      	ldrb	r3, [r3, #5]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_DAC_Start+0x1e>
 8002642:	2302      	movs	r3, #2
 8002644:	e050      	b.n	80026e8 <HAL_DAC_Start+0xc0>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	409a      	lsls	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d11a      	bne.n	80026a2 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002682:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b04      	cmp	r3, #4
 8002688:	d127      	bne.n	80026da <HAL_DAC_Start+0xb2>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b38      	cmp	r3, #56	; 0x38
 800268e:	d124      	bne.n	80026da <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	e01b      	b.n	80026da <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ac:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80026b8:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026c0:	d10b      	bne.n	80026da <HAL_DAC_Start+0xb2>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80026c8:	d107      	bne.n	80026da <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0202 	orr.w	r2, r2, #2
 80026d8:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Returns the DAC channel data output register value */
  if(Channel == DAC_CHANNEL_1)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	e002      	b.n	8002748 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	d118      	bne.n	800279e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2204      	movs	r2, #4
 8002770:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002786:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002796:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f825 	bl	80027e8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ac:	d118      	bne.n	80027e0 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2204      	movs	r2, #4
 80027b2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f043 0202 	orr.w	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80027d8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f880 	bl	80028e0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	795b      	ldrb	r3, [r3, #5]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_DAC_ConfigChannel+0x20>
 8002818:	2302      	movs	r3, #2
 800281a:	e036      	b.n	800288a <HAL_DAC_ConfigChannel+0x8e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2202      	movs	r2, #2
 8002826:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002830:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4013      	ands	r3, r2
 8002840:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	22c0      	movs	r2, #192	; 0xc0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	400a      	ands	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002896:	b480      	push	{r7}
 8002898:	b087      	sub	sp, #28
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	3308      	adds	r3, #8
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e004      	b.n	80028ca <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	3314      	adds	r3, #20
 80028c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	461a      	mov	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d004      	beq.n	8002912 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00c      	b.n	800292c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2205      	movs	r2, #5
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e03b      	b.n	80029c2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fd ffec 	bl	800093c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	f023 0107 	bic.w	r1, r3, #7
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68d1      	ldr	r1, [r2, #12]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	430b      	orrs	r3, r1
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d026      	beq.n	8002a3a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d021      	beq.n	8002a3a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a04:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d026      	beq.n	8002a92 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d021      	beq.n	8002a92 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2220      	movs	r2, #32
 8002a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2204      	movs	r2, #4
 8002a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d026      	beq.n	8002aea <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d021      	beq.n	8002aea <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2208      	movs	r2, #8
 8002abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2204      	movs	r2, #4
 8002ace:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2204      	movs	r2, #4
 8002b14:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f853 	bl	8002bc2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d024      	beq.n	8002b70 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01f      	beq.n	8002b70 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2202      	movs	r2, #2
 8002b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01f      	beq.n	8002bba <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01a      	beq.n	8002bba <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b92:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f80e 	bl	8002bd6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_DMA2D_ConfigLayer+0x20>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e079      	b.n	8002d00 <HAL_DMA2D_ConfigLayer+0x114>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	3318      	adds	r3, #24
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002c36:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_DMA2D_ConfigLayer+0x120>)
 8002c38:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b0a      	cmp	r3, #10
 8002c40:	d003      	beq.n	8002c4a <HAL_DMA2D_ConfigLayer+0x5e>
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d107      	bne.n	8002c5a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e005      	b.n	8002c66 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d120      	bne.n	8002cae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	ea02 0103 	and.w	r1, r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d003      	beq.n	8002c9e <HAL_DMA2D_ConfigLayer+0xb2>
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	d127      	bne.n	8002cee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
 8002cac:	e01f      	b.n	8002cee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	ea02 0103 	and.w	r1, r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b0a      	cmp	r3, #10
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b09      	cmp	r3, #9
 8002cde:	d106      	bne.n	8002cee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002cec:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	ff03000f 	.word	0xff03000f

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e177      	b.n	800301c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 8166 	bne.w	8003016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d00b      	beq.n	8002d6a <HAL_GPIO_Init+0x5a>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d5e:	2b11      	cmp	r3, #17
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b12      	cmp	r3, #18
 8002d68:	d130      	bne.n	8002dcc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0201 	and.w	r2, r3, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0xfc>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b12      	cmp	r3, #18
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80c0 	beq.w	8003016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b65      	ldr	r3, [pc, #404]	; (8003030 <HAL_GPIO_Init+0x320>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a64      	ldr	r2, [pc, #400]	; (8003030 <HAL_GPIO_Init+0x320>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b62      	ldr	r3, [pc, #392]	; (8003030 <HAL_GPIO_Init+0x320>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a60      	ldr	r2, [pc, #384]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a57      	ldr	r2, [pc, #348]	; (8003038 <HAL_GPIO_Init+0x328>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d037      	beq.n	8002f4e <HAL_GPIO_Init+0x23e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a56      	ldr	r2, [pc, #344]	; (800303c <HAL_GPIO_Init+0x32c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_GPIO_Init+0x23a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a55      	ldr	r2, [pc, #340]	; (8003040 <HAL_GPIO_Init+0x330>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <HAL_GPIO_Init+0x236>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a54      	ldr	r2, [pc, #336]	; (8003044 <HAL_GPIO_Init+0x334>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d025      	beq.n	8002f42 <HAL_GPIO_Init+0x232>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a53      	ldr	r2, [pc, #332]	; (8003048 <HAL_GPIO_Init+0x338>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <HAL_GPIO_Init+0x22e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_GPIO_Init+0x33c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x22a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a51      	ldr	r2, [pc, #324]	; (8003050 <HAL_GPIO_Init+0x340>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x226>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a50      	ldr	r2, [pc, #320]	; (8003054 <HAL_GPIO_Init+0x344>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x222>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x348>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x21e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	; (800305c <HAL_GPIO_Init+0x34c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e012      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	e010      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00e      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00c      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e00a      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e008      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f60:	4934      	ldr	r1, [pc, #208]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f92:	4a33      	ldr	r2, [pc, #204]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fbc:	4a28      	ldr	r2, [pc, #160]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc2:	4b27      	ldr	r3, [pc, #156]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe6:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <HAL_GPIO_Init+0x350>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	f67f ae84 	bls.w	8002d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003024:	bf00      	nop
 8003026:	3724      	adds	r7, #36	; 0x24
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40023800 	.word	0x40023800
 8003034:	40013800 	.word	0x40013800
 8003038:	40020000 	.word	0x40020000
 800303c:	40020400 	.word	0x40020400
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40021400 	.word	0x40021400
 8003050:	40021800 	.word	0x40021800
 8003054:	40021c00 	.word	0x40021c00
 8003058:	40022000 	.word	0x40022000
 800305c:	40022400 	.word	0x40022400
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
 8003070:	4613      	mov	r3, r2
 8003072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003074:	787b      	ldrb	r3, [r7, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003080:	e003      	b.n	800308a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	041a      	lsls	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	619a      	str	r2, [r3, #24]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	401a      	ands	r2, r3
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d104      	bne.n	80030ba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	041a      	lsls	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f806 	bl	80030fc <HAL_GPIO_EXTI_Callback>
  }
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003114:	b08f      	sub	sp, #60	; 0x3c
 8003116:	af0a      	add	r7, sp, #40	; 0x28
 8003118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e054      	b.n	80031ce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe fc6a 	bl	8001a18 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2203      	movs	r2, #3
 8003148:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f003 fd65 	bl	8006c32 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	687e      	ldr	r6, [r7, #4]
 8003170:	466d      	mov	r5, sp
 8003172:	f106 0410 	add.w	r4, r6, #16
 8003176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800317c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003182:	e885 0003 	stmia.w	r5, {r0, r1}
 8003186:	1d33      	adds	r3, r6, #4
 8003188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800318a:	6838      	ldr	r0, [r7, #0]
 800318c:	f003 fcf0 	bl	8006b70 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f003 fd5c 	bl	8006c54 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	687e      	ldr	r6, [r7, #4]
 80031a4:	466d      	mov	r5, sp
 80031a6:	f106 0410 	add.w	r4, r6, #16
 80031aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ba:	1d33      	adds	r3, r6, #4
 80031bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	f003 fe38 	bl	8006e34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031d6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fddf 	bl	8006db0 <USB_GetMode>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f040 80ef 	bne.w	80033d8 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fdc3 	bl	8006d8a <USB_ReadInterrupts>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80e5 	beq.w	80033d6 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fdba 	bl	8006d8a <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003220:	d104      	bne.n	800322c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800322a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 fdaa 	bl	8006d8a <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003240:	d104      	bne.n	800324c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800324a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f003 fd9a 	bl	8006d8a <USB_ReadInterrupts>
 8003256:	4603      	mov	r3, r0
 8003258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003260:	d104      	bne.n	800326c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800326a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fd8a 	bl	8006d8a <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d103      	bne.n	8003288 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2202      	movs	r2, #2
 8003286:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fd7c 	bl	8006d8a <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329c:	d115      	bne.n	80032ca <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032a6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f8a4 	bl	8003406 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f003 fe71 	bl	8006fac <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 fd5b 	bl	8006d8a <USB_ReadInterrupts>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032de:	d102      	bne.n	80032e6 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f001 f913 	bl	800450c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f003 fd4d 	bl	8006d8a <USB_ReadInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d106      	bne.n	8003308 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f86f 	bl	80033de <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2208      	movs	r2, #8
 8003306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f003 fd3c 	bl	8006d8a <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800331c:	d138      	bne.n	8003390 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f003 feb5 	bl	8007092 <USB_HC_ReadInterrupt>
 8003328:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e025      	b.n	800337c <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d018      	beq.n	8003376 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335a:	d106      	bne.n	800336a <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f87b 	bl	800345e <HCD_HC_IN_IRQHandler>
 8003368:	e005      	b.n	8003376 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fca9 	bl	8003cc8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3301      	adds	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	429a      	cmp	r2, r3
 8003384:	d3d4      	bcc.n	8003330 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f003 fcf8 	bl	8006d8a <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d101      	bne.n	80033a8 <HAL_HCD_IRQHandler+0x1d2>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_HCD_IRQHandler+0x1d4>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d014      	beq.n	80033d8 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0210 	bic.w	r2, r2, #16
 80033bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fff8 	bl	80043b4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0210 	orr.w	r2, r2, #16
 80033d2:	619a      	str	r2, [r3, #24]
 80033d4:	e000      	b.n	80033d8 <HAL_HCD_IRQHandler+0x202>
      return;
 80033d6:	bf00      	nop
    }
  }
}
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	70fb      	strb	r3, [r7, #3]
 800344e:	4613      	mov	r3, r2
 8003450:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d119      	bne.n	80034c2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	2304      	movs	r3, #4
 800349e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	60d3      	str	r3, [r2, #12]
 80034c0:	e0ce      	b.n	8003660 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d8:	d12c      	bne.n	8003534 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e6:	461a      	mov	r2, r3
 80034e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	335d      	adds	r3, #93	; 0x5d
 80034fe:	2207      	movs	r2, #7
 8003500:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	0151      	lsls	r1, r2, #5
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	440a      	add	r2, r1
 8003518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f003 fdc1 	bl	80070b4 <USB_HC_Halt>
 8003532:	e095      	b.n	8003660 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d109      	bne.n	800355e <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	461a      	mov	r2, r3
 8003558:	2320      	movs	r3, #32
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	e080      	b.n	8003660 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b08      	cmp	r3, #8
 8003572:	d134      	bne.n	80035de <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	0151      	lsls	r1, r2, #5
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	440a      	add	r2, r1
 800358a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	335d      	adds	r3, #93	; 0x5d
 80035a4:	2205      	movs	r2, #5
 80035a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	461a      	mov	r2, r3
 80035b6:	2310      	movs	r3, #16
 80035b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	2308      	movs	r3, #8
 80035ca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f003 fd6c 	bl	80070b4 <USB_HC_Halt>
 80035dc:	e040      	b.n	8003660 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f4:	d134      	bne.n	8003660 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	440a      	add	r2, r1
 800360c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003610:	f043 0302 	orr.w	r3, r3, #2
 8003614:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fd47 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003632:	461a      	mov	r2, r3
 8003634:	2310      	movs	r3, #16
 8003636:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	440b      	add	r3, r1
 8003646:	335d      	adds	r3, #93	; 0x5d
 8003648:	2208      	movs	r2, #8
 800364a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800365e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003676:	d122      	bne.n	80036be <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	0151      	lsls	r1, r2, #5
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	440a      	add	r2, r1
 800368e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 fd06 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b4:	461a      	mov	r2, r3
 80036b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80036bc:	e300      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	f040 80fd 	bne.w	80038d0 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01b      	beq.n	8003716 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	3348      	adds	r3, #72	; 0x48
 80036ee:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0159      	lsls	r1, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	440b      	add	r3, r1
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003702:	1ad1      	subs	r1, r2, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4403      	add	r3, r0
 8003712:	334c      	adds	r3, #76	; 0x4c
 8003714:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	335d      	adds	r3, #93	; 0x5d
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	3358      	adds	r3, #88	; 0x58
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	2301      	movs	r3, #1
 800374e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	333f      	adds	r3, #63	; 0x3f
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	333f      	adds	r3, #63	; 0x3f
 8003776:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003778:	2b02      	cmp	r3, #2
 800377a:	d121      	bne.n	80037c0 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	0151      	lsls	r1, r2, #5
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	440a      	add	r2, r1
 8003792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 fc84 	bl	80070b4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b8:	461a      	mov	r2, r3
 80037ba:	2310      	movs	r3, #16
 80037bc:	6093      	str	r3, [r2, #8]
 80037be:	e070      	b.n	80038a2 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	333f      	adds	r3, #63	; 0x3f
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d12a      	bne.n	800382c <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	0151      	lsls	r1, r2, #5
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	440a      	add	r2, r1
 80037ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037f4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	440b      	add	r3, r1
 8003804:	335c      	adds	r3, #92	; 0x5c
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	b2d8      	uxtb	r0, r3
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	335c      	adds	r3, #92	; 0x5c
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4601      	mov	r1, r0
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fe0c 	bl	8003442 <HAL_HCD_HC_NotifyURBChange_Callback>
 800382a:	e03a      	b.n	80038a2 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	440b      	add	r3, r1
 800383a:	333f      	adds	r3, #63	; 0x3f
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d12f      	bne.n	80038a2 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	440b      	add	r3, r1
 8003850:	335c      	adds	r3, #92	; 0x5c
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	440b      	add	r3, r1
 8003864:	3350      	adds	r3, #80	; 0x50
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	f083 0301 	eor.w	r3, r3, #1
 800386c:	b2d8      	uxtb	r0, r3
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	440b      	add	r3, r1
 800387c:	3350      	adds	r3, #80	; 0x50
 800387e:	4602      	mov	r2, r0
 8003880:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	b2d8      	uxtb	r0, r3
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	335c      	adds	r3, #92	; 0x5c
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	4601      	mov	r1, r0
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fdd0 	bl	8003442 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	3350      	adds	r3, #80	; 0x50
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f083 0301 	eor.w	r3, r3, #1
 80038b8:	b2d8      	uxtb	r0, r3
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	3350      	adds	r3, #80	; 0x50
 80038ca:	4602      	mov	r2, r0
 80038cc:	701a      	strb	r2, [r3, #0]
}
 80038ce:	e1f7      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	f040 811a 	bne.w	8003b1c <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	0151      	lsls	r1, r2, #5
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	440a      	add	r2, r1
 80038fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003902:	f023 0302 	bic.w	r3, r3, #2
 8003906:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	335d      	adds	r3, #93	; 0x5d
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10a      	bne.n	8003934 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	335c      	adds	r3, #92	; 0x5c
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e0d9      	b.n	8003ae8 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	335d      	adds	r3, #93	; 0x5d
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b05      	cmp	r3, #5
 8003948:	d10a      	bne.n	8003960 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	440b      	add	r3, r1
 8003958:	335c      	adds	r3, #92	; 0x5c
 800395a:	2205      	movs	r2, #5
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e0c3      	b.n	8003ae8 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	335d      	adds	r3, #93	; 0x5d
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b06      	cmp	r3, #6
 8003974:	d00a      	beq.n	800398c <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	440b      	add	r3, r1
 8003984:	335d      	adds	r3, #93	; 0x5d
 8003986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003988:	2b08      	cmp	r3, #8
 800398a:	d156      	bne.n	8003a3a <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	3358      	adds	r3, #88	; 0x58
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	1c59      	adds	r1, r3, #1
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4403      	add	r3, r0
 80039ae:	3358      	adds	r3, #88	; 0x58
 80039b0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	440b      	add	r3, r1
 80039c0:	3358      	adds	r3, #88	; 0x58
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d914      	bls.n	80039f2 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	3358      	adds	r3, #88	; 0x58
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	335c      	adds	r3, #92	; 0x5c
 80039ec:	2204      	movs	r2, #4
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e009      	b.n	8003a06 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	335c      	adds	r3, #92	; 0x5c
 8003a02:	2202      	movs	r2, #2
 8003a04:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a1c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a24:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	e056      	b.n	8003ae8 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	335d      	adds	r3, #93	; 0x5d
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d123      	bne.n	8003a98 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	440b      	add	r3, r1
 8003a5e:	335c      	adds	r3, #92	; 0x5c
 8003a60:	2202      	movs	r2, #2
 8003a62:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a7a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a82:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a90:	461a      	mov	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e027      	b.n	8003ae8 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	440b      	add	r3, r1
 8003aa6:	335d      	adds	r3, #93	; 0x5d
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b07      	cmp	r3, #7
 8003aac:	d11c      	bne.n	8003ae8 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	440b      	add	r3, r1
 8003abc:	3358      	adds	r3, #88	; 0x58
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	1c59      	adds	r1, r3, #1
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4403      	add	r3, r0
 8003ad0:	3358      	adds	r3, #88	; 0x58
 8003ad2:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	335c      	adds	r3, #92	; 0x5c
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af4:	461a      	mov	r2, r3
 8003af6:	2302      	movs	r3, #2
 8003af8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	b2d8      	uxtb	r0, r3
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	440b      	add	r3, r1
 8003b0c:	335c      	adds	r3, #92	; 0x5c
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	4601      	mov	r1, r0
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fc94 	bl	8003442 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b1a:	e0d1      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d13e      	bne.n	8003bb0 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	440b      	add	r3, r1
 8003b60:	3358      	adds	r3, #88	; 0x58
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	1c59      	adds	r1, r3, #1
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4403      	add	r3, r0
 8003b74:	3358      	adds	r3, #88	; 0x58
 8003b76:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	335d      	adds	r3, #93	; 0x5d
 8003b88:	2206      	movs	r2, #6
 8003b8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f003 fa8c 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	6093      	str	r3, [r2, #8]
}
 8003bae:	e087      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d17c      	bne.n	8003cc0 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	333f      	adds	r3, #63	; 0x3f
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d122      	bne.n	8003c22 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	3358      	adds	r3, #88	; 0x58
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c0a:	f043 0302 	orr.w	r3, r3, #2
 8003c0e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 fa4a 	bl	80070b4 <USB_HC_Halt>
 8003c20:	e045      	b.n	8003cae <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	333f      	adds	r3, #63	; 0x3f
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	333f      	adds	r3, #63	; 0x3f
 8003c48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d12f      	bne.n	8003cae <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3358      	adds	r3, #88	; 0x58
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d121      	bne.n	8003cae <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	440b      	add	r3, r1
 8003c78:	335d      	adds	r3, #93	; 0x5d
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f003 fa03 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	6093      	str	r3, [r2, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d119      	bne.n	8003d2c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	461a      	mov	r2, r3
 8003d06:	2304      	movs	r3, #4
 8003d08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003d2a:	e33e      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d141      	bne.n	8003dc6 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2320      	movs	r3, #32
 8003d52:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	440b      	add	r3, r1
 8003d62:	333d      	adds	r3, #61	; 0x3d
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	f040 831f 	bne.w	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	440b      	add	r3, r1
 8003d7a:	333d      	adds	r3, #61	; 0x3d
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	440b      	add	r3, r1
 8003d8e:	335c      	adds	r3, #92	; 0x5c
 8003d90:	2202      	movs	r2, #2
 8003d92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f003 f978 	bl	80070b4 <USB_HC_Halt>
}
 8003dc4:	e2f1      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d13f      	bne.n	8003e5c <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	440b      	add	r3, r1
 8003dea:	335d      	adds	r3, #93	; 0x5d
 8003dec:	2204      	movs	r2, #4
 8003dee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	440b      	add	r3, r1
 8003dfe:	333d      	adds	r3, #61	; 0x3d
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	440b      	add	r3, r1
 8003e12:	3358      	adds	r3, #88	; 0x58
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	4611      	mov	r1, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f003 f936 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	461a      	mov	r2, r3
 8003e56:	2340      	movs	r3, #64	; 0x40
 8003e58:	6093      	str	r3, [r2, #8]
}
 8003e5a:	e2a6      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e72:	d122      	bne.n	8003eba <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e8e:	f043 0302 	orr.w	r3, r3, #2
 8003e92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f003 f908 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eb6:	6093      	str	r3, [r2, #8]
}
 8003eb8:	e277      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d135      	bne.n	8003f3c <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	440b      	add	r3, r1
 8003ede:	3358      	adds	r3, #88	; 0x58
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f003 f8d0 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2301      	movs	r3, #1
 8003f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	335d      	adds	r3, #93	; 0x5d
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
}
 8003f3a:	e236      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d12b      	bne.n	8003faa <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2308      	movs	r3, #8
 8003f62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	0151      	lsls	r1, r2, #5
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	440a      	add	r2, r1
 8003f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f7e:	f043 0302 	orr.w	r3, r3, #2
 8003f82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f003 f890 	bl	80070b4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	440b      	add	r3, r1
 8003fa2:	335d      	adds	r3, #93	; 0x5d
 8003fa4:	2205      	movs	r2, #5
 8003fa6:	701a      	strb	r2, [r3, #0]
}
 8003fa8:	e1ff      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d155      	bne.n	800406c <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	440b      	add	r3, r1
 8003fce:	3358      	adds	r3, #88	; 0x58
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	440b      	add	r3, r1
 8003fe2:	335d      	adds	r3, #93	; 0x5d
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	333d      	adds	r3, #61	; 0x3d
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d114      	bne.n	8004028 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	440b      	add	r3, r1
 800400c:	333c      	adds	r3, #60	; 0x3c
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	333d      	adds	r3, #61	; 0x3d
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	440a      	add	r2, r1
 800403e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004042:	f043 0302 	orr.w	r3, r3, #2
 8004046:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f003 f82e 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004064:	461a      	mov	r2, r3
 8004066:	2310      	movs	r3, #16
 8004068:	6093      	str	r3, [r2, #8]
}
 800406a:	e19e      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d12b      	bne.n	80040da <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	440a      	add	r2, r1
 8004098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 f801 	bl	80070b4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	335d      	adds	r3, #93	; 0x5d
 80040c2:	2206      	movs	r2, #6
 80040c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	461a      	mov	r2, r3
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	6093      	str	r3, [r2, #8]
}
 80040d8:	e167      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f0:	d135      	bne.n	800415e <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	440a      	add	r2, r1
 8004108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f002 ffc9 	bl	80070b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	461a      	mov	r2, r3
 8004130:	2310      	movs	r3, #16
 8004132:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004140:	461a      	mov	r2, r3
 8004142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004146:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	335d      	adds	r3, #93	; 0x5d
 8004158:	2208      	movs	r2, #8
 800415a:	701a      	strb	r2, [r3, #0]
}
 800415c:	e125      	b.n	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4413      	add	r3, r2
 8004166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	f040 811a 	bne.w	80043aa <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	440a      	add	r2, r1
 800418c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004190:	f023 0302 	bic.w	r3, r3, #2
 8004194:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	440b      	add	r3, r1
 80041a4:	335d      	adds	r3, #93	; 0x5d
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d137      	bne.n	800421c <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	440b      	add	r3, r1
 80041ba:	335c      	adds	r3, #92	; 0x5c
 80041bc:	2201      	movs	r2, #1
 80041be:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	440b      	add	r3, r1
 80041ce:	333f      	adds	r3, #63	; 0x3f
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d00b      	beq.n	80041ee <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	440b      	add	r3, r1
 80041e4:	333f      	adds	r3, #63	; 0x3f
 80041e6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	f040 80c5 	bne.w	8004378 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	3351      	adds	r3, #81	; 0x51
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f083 0301 	eor.w	r3, r3, #1
 8004204:	b2d8      	uxtb	r0, r3
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	440b      	add	r3, r1
 8004214:	3351      	adds	r3, #81	; 0x51
 8004216:	4602      	mov	r2, r0
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e0ad      	b.n	8004378 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	440b      	add	r3, r1
 800422a:	335d      	adds	r3, #93	; 0x5d
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d10a      	bne.n	8004248 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	335c      	adds	r3, #92	; 0x5c
 8004242:	2202      	movs	r2, #2
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e097      	b.n	8004378 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	440b      	add	r3, r1
 8004256:	335d      	adds	r3, #93	; 0x5d
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d10a      	bne.n	8004274 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	440b      	add	r3, r1
 800426c:	335c      	adds	r3, #92	; 0x5c
 800426e:	2202      	movs	r2, #2
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e081      	b.n	8004378 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	335d      	adds	r3, #93	; 0x5d
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b05      	cmp	r3, #5
 8004288:	d10a      	bne.n	80042a0 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	335c      	adds	r3, #92	; 0x5c
 800429a:	2205      	movs	r2, #5
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e06b      	b.n	8004378 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	335d      	adds	r3, #93	; 0x5d
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b06      	cmp	r3, #6
 80042b4:	d00a      	beq.n	80042cc <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	335d      	adds	r3, #93	; 0x5d
 80042c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d155      	bne.n	8004378 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	440b      	add	r3, r1
 80042da:	3358      	adds	r3, #88	; 0x58
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4403      	add	r3, r0
 80042ee:	3358      	adds	r3, #88	; 0x58
 80042f0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	3358      	adds	r3, #88	; 0x58
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d914      	bls.n	8004332 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	440b      	add	r3, r1
 8004316:	3358      	adds	r3, #88	; 0x58
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	440b      	add	r3, r1
 800432a:	335c      	adds	r3, #92	; 0x5c
 800432c:	2204      	movs	r2, #4
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e009      	b.n	8004346 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	440b      	add	r3, r1
 8004340:	335c      	adds	r3, #92	; 0x5c
 8004342:	2202      	movs	r2, #2
 8004344:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800435c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004364:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004372:	461a      	mov	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	2302      	movs	r3, #2
 8004388:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	b2d8      	uxtb	r0, r3
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	440b      	add	r3, r1
 800439c:	335c      	adds	r3, #92	; 0x5c
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	4601      	mov	r1, r0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff f84c 	bl	8003442 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80043aa:	bf00      	nop
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08a      	sub	sp, #40	; 0x28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	0c5b      	lsrs	r3, r3, #17
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d003      	beq.n	80043f8 <HCD_RXQLVL_IRQHandler+0x44>
 80043f0:	2b05      	cmp	r3, #5
 80043f2:	f000 8082 	beq.w	80044fa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043f6:	e083      	b.n	8004500 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d07f      	beq.n	80044fe <HCD_RXQLVL_IRQHandler+0x14a>
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	440b      	add	r3, r1
 800440c:	3344      	adds	r3, #68	; 0x44
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d074      	beq.n	80044fe <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	440b      	add	r3, r1
 8004426:	3344      	adds	r3, #68	; 0x44
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	b292      	uxth	r2, r2
 800442e:	4619      	mov	r1, r3
 8004430:	f002 fc82 	bl	8006d38 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	440b      	add	r3, r1
 8004442:	3344      	adds	r3, #68	; 0x44
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	18d1      	adds	r1, r2, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4403      	add	r3, r0
 8004458:	3344      	adds	r3, #68	; 0x44
 800445a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	334c      	adds	r3, #76	; 0x4c
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	18d1      	adds	r1, r2, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4403      	add	r3, r0
 8004480:	334c      	adds	r3, #76	; 0x4c
 8004482:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	4413      	add	r3, r2
 800448c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HCD_RXQLVL_IRQHandler+0x154>)
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d031      	beq.n	80044fe <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	440b      	add	r3, r1
 80044da:	3350      	adds	r3, #80	; 0x50
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	f083 0301 	eor.w	r3, r3, #1
 80044e2:	b2d8      	uxtb	r0, r3
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	3350      	adds	r3, #80	; 0x50
 80044f4:	4602      	mov	r2, r0
 80044f6:	701a      	strb	r2, [r3, #0]
      break;
 80044f8:	e001      	b.n	80044fe <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80044fe:	bf00      	nop
  }
}
 8004500:	bf00      	nop
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	1ff80000 	.word	0x1ff80000

0800450c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004538:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d10b      	bne.n	800455c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fe ff4f 	bl	80033f2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f043 0302 	orr.w	r3, r3, #2
 800455a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b08      	cmp	r3, #8
 8004564:	d132      	bne.n	80045cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b04      	cmp	r3, #4
 8004576:	d126      	bne.n	80045c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d113      	bne.n	80045a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800458a:	d106      	bne.n	800459a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2102      	movs	r1, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f002 fd0a 	bl	8006fac <USB_InitFSLSPClkSel>
 8004598:	e011      	b.n	80045be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	4618      	mov	r0, r3
 80045a2:	f002 fd03 	bl	8006fac <USB_InitFSLSPClkSel>
 80045a6:	e00a      	b.n	80045be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d106      	bne.n	80045be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045b6:	461a      	mov	r2, r3
 80045b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80045bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fe ff2b 	bl	800341a <HAL_HCD_PortEnabled_Callback>
 80045c4:	e002      	b.n	80045cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fe ff31 	bl	800342e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d103      	bne.n	80045de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f043 0320 	orr.w	r3, r3, #32
 80045dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6013      	str	r3, [r2, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e11f      	b.n	8004846 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fcd4 	bl	8000fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004658:	f000 fdba 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 800465c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4a7b      	ldr	r2, [pc, #492]	; (8004850 <HAL_I2C_Init+0x25c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d807      	bhi.n	8004678 <HAL_I2C_Init+0x84>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a7a      	ldr	r2, [pc, #488]	; (8004854 <HAL_I2C_Init+0x260>)
 800466c:	4293      	cmp	r3, r2
 800466e:	bf94      	ite	ls
 8004670:	2301      	movls	r3, #1
 8004672:	2300      	movhi	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e006      	b.n	8004686 <HAL_I2C_Init+0x92>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a77      	ldr	r2, [pc, #476]	; (8004858 <HAL_I2C_Init+0x264>)
 800467c:	4293      	cmp	r3, r2
 800467e:	bf94      	ite	ls
 8004680:	2301      	movls	r3, #1
 8004682:	2300      	movhi	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0db      	b.n	8004846 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a72      	ldr	r2, [pc, #456]	; (800485c <HAL_I2C_Init+0x268>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0c9b      	lsrs	r3, r3, #18
 8004698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a64      	ldr	r2, [pc, #400]	; (8004850 <HAL_I2C_Init+0x25c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d802      	bhi.n	80046c8 <HAL_I2C_Init+0xd4>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3301      	adds	r3, #1
 80046c6:	e009      	b.n	80046dc <HAL_I2C_Init+0xe8>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	4a63      	ldr	r2, [pc, #396]	; (8004860 <HAL_I2C_Init+0x26c>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	3301      	adds	r3, #1
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4956      	ldr	r1, [pc, #344]	; (8004850 <HAL_I2C_Init+0x25c>)
 80046f8:	428b      	cmp	r3, r1
 80046fa:	d80d      	bhi.n	8004718 <HAL_I2C_Init+0x124>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1e59      	subs	r1, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fbb1 f3f3 	udiv	r3, r1, r3
 800470a:	3301      	adds	r3, #1
 800470c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004710:	2b04      	cmp	r3, #4
 8004712:	bf38      	it	cc
 8004714:	2304      	movcc	r3, #4
 8004716:	e04f      	b.n	80047b8 <HAL_I2C_Init+0x1c4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d111      	bne.n	8004744 <HAL_I2C_Init+0x150>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e58      	subs	r0, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	440b      	add	r3, r1
 800472e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004732:	3301      	adds	r3, #1
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e012      	b.n	800476a <HAL_I2C_Init+0x176>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	0099      	lsls	r1, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Init+0x17e>
 800476e:	2301      	movs	r3, #1
 8004770:	e022      	b.n	80047b8 <HAL_I2C_Init+0x1c4>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10e      	bne.n	8004798 <HAL_I2C_Init+0x1a4>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1e58      	subs	r0, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	440b      	add	r3, r1
 8004788:	fbb0 f3f3 	udiv	r3, r0, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004796:	e00f      	b.n	80047b8 <HAL_I2C_Init+0x1c4>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1e58      	subs	r0, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	0099      	lsls	r1, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	6809      	ldr	r1, [r1, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6911      	ldr	r1, [r2, #16]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68d2      	ldr	r2, [r2, #12]
 80047f2:	4311      	orrs	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	000186a0 	.word	0x000186a0
 8004854:	001e847f 	.word	0x001e847f
 8004858:	003d08ff 	.word	0x003d08ff
 800485c:	431bde83 	.word	0x431bde83
 8004860:	10624dd3 	.word	0x10624dd3

08004864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b20      	cmp	r3, #32
 8004878:	d129      	bne.n	80048ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2224      	movs	r2, #36	; 0x24
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0210 	bic.w	r2, r2, #16
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d12a      	bne.n	800494c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2224      	movs	r2, #36	; 0x24
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004916:	89fb      	ldrh	r3, [r7, #14]
 8004918:	f023 030f 	bic.w	r3, r3, #15
 800491c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	b29a      	uxth	r2, r3
 8004922:	89fb      	ldrh	r3, [r7, #14]
 8004924:	4313      	orrs	r3, r2
 8004926:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	89fa      	ldrh	r2, [r7, #14]
 800492e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e25b      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d075      	beq.n	8004a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800497a:	4ba3      	ldr	r3, [pc, #652]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b04      	cmp	r3, #4
 8004984:	d00c      	beq.n	80049a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004986:	4ba0      	ldr	r3, [pc, #640]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800498e:	2b08      	cmp	r3, #8
 8004990:	d112      	bne.n	80049b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004992:	4b9d      	ldr	r3, [pc, #628]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800499e:	d10b      	bne.n	80049b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	4b99      	ldr	r3, [pc, #612]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d05b      	beq.n	8004a64 <HAL_RCC_OscConfig+0x108>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d157      	bne.n	8004a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e236      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d106      	bne.n	80049d0 <HAL_RCC_OscConfig+0x74>
 80049c2:	4b91      	ldr	r3, [pc, #580]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a90      	ldr	r2, [pc, #576]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e01d      	b.n	8004a0c <HAL_RCC_OscConfig+0xb0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x98>
 80049da:	4b8b      	ldr	r3, [pc, #556]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a8a      	ldr	r2, [pc, #552]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b88      	ldr	r3, [pc, #544]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a87      	ldr	r2, [pc, #540]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0xb0>
 80049f4:	4b84      	ldr	r3, [pc, #528]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a83      	ldr	r2, [pc, #524]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b81      	ldr	r3, [pc, #516]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a80      	ldr	r2, [pc, #512]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fd f8be 	bl	8001b94 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fd f8ba 	bl	8001b94 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1fb      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b76      	ldr	r3, [pc, #472]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0xc0>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd f8aa 	bl	8001b94 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd f8a6 	bl	8001b94 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e1e7      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0xe8>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d063      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a72:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a7e:	4b62      	ldr	r3, [pc, #392]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d11c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a8a:	4b5f      	ldr	r3, [pc, #380]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d116      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a96:	4b5c      	ldr	r3, [pc, #368]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_RCC_OscConfig+0x152>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d001      	beq.n	8004aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e1bb      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aae:	4b56      	ldr	r3, [pc, #344]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4952      	ldr	r1, [pc, #328]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac2:	e03a      	b.n	8004b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d020      	beq.n	8004b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004acc:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <HAL_RCC_OscConfig+0x2b0>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd f85f 	bl	8001b94 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ada:	f7fd f85b 	bl	8001b94 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e19c      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aec:	4b46      	ldr	r3, [pc, #280]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b43      	ldr	r3, [pc, #268]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4940      	ldr	r1, [pc, #256]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
 8004b0c:	e015      	b.n	8004b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_OscConfig+0x2b0>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fd f83e 	bl	8001b94 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1c:	f7fd f83a 	bl	8001b94 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e17b      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2e:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d030      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d016      	beq.n	8004b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4e:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <HAL_RCC_OscConfig+0x2b4>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fd f81e 	bl	8001b94 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5c:	f7fd f81a 	bl	8001b94 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e15b      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6e:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x200>
 8004b7a:	e015      	b.n	8004ba8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <HAL_RCC_OscConfig+0x2b4>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b82:	f7fd f807 	bl	8001b94 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b8a:	f7fd f803 	bl	8001b94 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e144      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f0      	bne.n	8004b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80a0 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a0e      	ldr	r2, [pc, #56]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCC_OscConfig+0x2b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d121      	bne.n	8004c36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_RCC_OscConfig+0x2b8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <HAL_RCC_OscConfig+0x2b8>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7fc ffc9 	bl	8001b94 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	e011      	b.n	8004c2a <HAL_RCC_OscConfig+0x2ce>
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	42470000 	.word	0x42470000
 8004c10:	42470e80 	.word	0x42470e80
 8004c14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c18:	f7fc ffbc 	bl	8001b94 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0fd      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2a:	4b81      	ldr	r3, [pc, #516]	; (8004e30 <HAL_RCC_OscConfig+0x4d4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCC_OscConfig+0x2f0>
 8004c3e:	4b7d      	ldr	r3, [pc, #500]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	4a7c      	ldr	r2, [pc, #496]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4a:	e01c      	b.n	8004c86 <HAL_RCC_OscConfig+0x32a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d10c      	bne.n	8004c6e <HAL_RCC_OscConfig+0x312>
 8004c54:	4b77      	ldr	r3, [pc, #476]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a76      	ldr	r2, [pc, #472]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c60:	4b74      	ldr	r3, [pc, #464]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	4a73      	ldr	r2, [pc, #460]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6c:	e00b      	b.n	8004c86 <HAL_RCC_OscConfig+0x32a>
 8004c6e:	4b71      	ldr	r3, [pc, #452]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a70      	ldr	r2, [pc, #448]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7a:	4b6e      	ldr	r3, [pc, #440]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	4a6d      	ldr	r2, [pc, #436]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d015      	beq.n	8004cba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fc ff81 	bl	8001b94 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fc ff7d 	bl	8001b94 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0bc      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ee      	beq.n	8004c96 <HAL_RCC_OscConfig+0x33a>
 8004cb8:	e014      	b.n	8004ce4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cba:	f7fc ff6b 	bl	8001b94 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fc ff67 	bl	8001b94 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0a6      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd8:	4b56      	ldr	r3, [pc, #344]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ee      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cea:	4b52      	ldr	r3, [pc, #328]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a51      	ldr	r2, [pc, #324]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8092 	beq.w	8004e24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d00:	4b4c      	ldr	r3, [pc, #304]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d05c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d141      	bne.n	8004d98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d14:	4b48      	ldr	r3, [pc, #288]	; (8004e38 <HAL_RCC_OscConfig+0x4dc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fc ff3b 	bl	8001b94 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fc ff37 	bl	8001b94 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e078      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d34:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	019b      	lsls	r3, r3, #6
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	061b      	lsls	r3, r3, #24
 8004d64:	4933      	ldr	r1, [pc, #204]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6a:	4b33      	ldr	r3, [pc, #204]	; (8004e38 <HAL_RCC_OscConfig+0x4dc>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fc ff10 	bl	8001b94 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fc ff0c 	bl	8001b94 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e04d      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8a:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x41c>
 8004d96:	e045      	b.n	8004e24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d98:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <HAL_RCC_OscConfig+0x4dc>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fc fef9 	bl	8001b94 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fc fef5 	bl	8001b94 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e036      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db8:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f0      	bne.n	8004da6 <HAL_RCC_OscConfig+0x44a>
 8004dc4:	e02e      	b.n	8004e24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e029      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dd2:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_RCC_OscConfig+0x4d8>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d11c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d115      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10d      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d106      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40007000 	.word	0x40007000
 8004e34:	40023800 	.word	0x40023800
 8004e38:	42470060 	.word	0x42470060

08004e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0cc      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e50:	4b68      	ldr	r3, [pc, #416]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d90c      	bls.n	8004e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5e:	4b65      	ldr	r3, [pc, #404]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b63      	ldr	r3, [pc, #396]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0b8      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d020      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e90:	4b59      	ldr	r3, [pc, #356]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4a58      	ldr	r2, [pc, #352]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea8:	4b53      	ldr	r3, [pc, #332]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4a52      	ldr	r2, [pc, #328]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb4:	4b50      	ldr	r3, [pc, #320]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	494d      	ldr	r1, [pc, #308]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d044      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b47      	ldr	r3, [pc, #284]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d119      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07f      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d003      	beq.n	8004efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efa:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06f      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0a:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e067      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f1a:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4934      	ldr	r1, [pc, #208]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f2c:	f7fc fe32 	bl	8001b94 <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f34:	f7fc fe2e 	bl	8001b94 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e04f      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 020c 	and.w	r2, r3, #12
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1eb      	bne.n	8004f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d20c      	bcs.n	8004f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e032      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f90:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4916      	ldr	r1, [pc, #88]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	490e      	ldr	r1, [pc, #56]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fc2:	f000 f821 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004fd4:	5cd3      	ldrb	r3, [r2, r3]
 8004fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fc fa1a 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023c00 	.word	0x40023c00
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	08009c30 	.word	0x08009c30
 8005000:	20000000 	.word	0x20000000
 8005004:	20000004 	.word	0x20000004

08005008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	2300      	movs	r3, #0
 8005018:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b04      	cmp	r3, #4
 8005028:	d007      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0x32>
 800502a:	2b08      	cmp	r3, #8
 800502c:	d008      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x38>
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 80b4 	bne.w	800519c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005034:	4b5e      	ldr	r3, [pc, #376]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005036:	60bb      	str	r3, [r7, #8]
       break;
 8005038:	e0b3      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800503a:	4b5e      	ldr	r3, [pc, #376]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800503c:	60bb      	str	r3, [r7, #8]
      break;
 800503e:	e0b0      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005040:	4b5a      	ldr	r3, [pc, #360]	; (80051ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005048:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800504a:	4b58      	ldr	r3, [pc, #352]	; (80051ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04a      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b55      	ldr	r3, [pc, #340]	; (80051ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	f04f 0400 	mov.w	r4, #0
 8005060:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	ea03 0501 	and.w	r5, r3, r1
 800506c:	ea04 0602 	and.w	r6, r4, r2
 8005070:	4629      	mov	r1, r5
 8005072:	4632      	mov	r2, r6
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	f04f 0400 	mov.w	r4, #0
 800507c:	0154      	lsls	r4, r2, #5
 800507e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005082:	014b      	lsls	r3, r1, #5
 8005084:	4619      	mov	r1, r3
 8005086:	4622      	mov	r2, r4
 8005088:	1b49      	subs	r1, r1, r5
 800508a:	eb62 0206 	sbc.w	r2, r2, r6
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	f04f 0400 	mov.w	r4, #0
 8005096:	0194      	lsls	r4, r2, #6
 8005098:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800509c:	018b      	lsls	r3, r1, #6
 800509e:	1a5b      	subs	r3, r3, r1
 80050a0:	eb64 0402 	sbc.w	r4, r4, r2
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	00e2      	lsls	r2, r4, #3
 80050ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050b2:	00d9      	lsls	r1, r3, #3
 80050b4:	460b      	mov	r3, r1
 80050b6:	4614      	mov	r4, r2
 80050b8:	195b      	adds	r3, r3, r5
 80050ba:	eb44 0406 	adc.w	r4, r4, r6
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	0262      	lsls	r2, r4, #9
 80050c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80050cc:	0259      	lsls	r1, r3, #9
 80050ce:	460b      	mov	r3, r1
 80050d0:	4614      	mov	r4, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	4621      	mov	r1, r4
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f04f 0400 	mov.w	r4, #0
 80050dc:	461a      	mov	r2, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	f7fb f8d6 	bl	8000290 <__aeabi_uldivmod>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e049      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ec:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	099b      	lsrs	r3, r3, #6
 80050f2:	f04f 0400 	mov.w	r4, #0
 80050f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	ea03 0501 	and.w	r5, r3, r1
 8005102:	ea04 0602 	and.w	r6, r4, r2
 8005106:	4629      	mov	r1, r5
 8005108:	4632      	mov	r2, r6
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	f04f 0400 	mov.w	r4, #0
 8005112:	0154      	lsls	r4, r2, #5
 8005114:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005118:	014b      	lsls	r3, r1, #5
 800511a:	4619      	mov	r1, r3
 800511c:	4622      	mov	r2, r4
 800511e:	1b49      	subs	r1, r1, r5
 8005120:	eb62 0206 	sbc.w	r2, r2, r6
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	0194      	lsls	r4, r2, #6
 800512e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005132:	018b      	lsls	r3, r1, #6
 8005134:	1a5b      	subs	r3, r3, r1
 8005136:	eb64 0402 	sbc.w	r4, r4, r2
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	00e2      	lsls	r2, r4, #3
 8005144:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005148:	00d9      	lsls	r1, r3, #3
 800514a:	460b      	mov	r3, r1
 800514c:	4614      	mov	r4, r2
 800514e:	195b      	adds	r3, r3, r5
 8005150:	eb44 0406 	adc.w	r4, r4, r6
 8005154:	f04f 0100 	mov.w	r1, #0
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	02a2      	lsls	r2, r4, #10
 800515e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005162:	0299      	lsls	r1, r3, #10
 8005164:	460b      	mov	r3, r1
 8005166:	4614      	mov	r4, r2
 8005168:	4618      	mov	r0, r3
 800516a:	4621      	mov	r1, r4
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f04f 0400 	mov.w	r4, #0
 8005172:	461a      	mov	r2, r3
 8005174:	4623      	mov	r3, r4
 8005176:	f7fb f88b 	bl	8000290 <__aeabi_uldivmod>
 800517a:	4603      	mov	r3, r0
 800517c:	460c      	mov	r4, r1
 800517e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	60bb      	str	r3, [r7, #8]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800519e:	60bb      	str	r3, [r7, #8]
      break;
 80051a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a2:	68bb      	ldr	r3, [r7, #8]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ac:	40023800 	.word	0x40023800
 80051b0:	00f42400 	.word	0x00f42400
 80051b4:	007a1200 	.word	0x007a1200

080051b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <HAL_RCC_GetHCLKFreq+0x14>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000000 	.word	0x20000000

080051d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051d4:	f7ff fff0 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051d8:	4601      	mov	r1, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0a9b      	lsrs	r3, r3, #10
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4a03      	ldr	r2, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e6:	5cd3      	ldrb	r3, [r2, r3]
 80051e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	08009c40 	.word	0x08009c40

080051f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051fc:	f7ff ffdc 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8005200:	4601      	mov	r1, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4a03      	ldr	r2, [pc, #12]	; (800521c <HAL_RCC_GetPCLK2Freq+0x24>)
 800520e:	5cd3      	ldrb	r3, [r2, r3]
 8005210:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	08009c40 	.word	0x08009c40

08005220 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	220f      	movs	r2, #15
 800522e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <HAL_RCC_GetClockConfig+0x5c>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0203 	and.w	r2, r3, #3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <HAL_RCC_GetClockConfig+0x5c>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <HAL_RCC_GetClockConfig+0x5c>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCC_GetClockConfig+0x5c>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005262:	4b07      	ldr	r3, [pc, #28]	; (8005280 <HAL_RCC_GetClockConfig+0x60>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 020f 	and.w	r2, r3, #15
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	601a      	str	r2, [r3, #0]
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800
 8005280:	40023c00 	.word	0x40023c00

08005284 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e025      	b.n	80052e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fb fc4f 	bl	8000b50 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f001 fb61 	bl	800698c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	f001 fbcc 	bl	8006a72 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e056      	b.n	80053ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fc f80b 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005334:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	ea42 0103 	orr.w	r1, r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	f003 0104 	and.w	r1, r3, #4
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800539a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e01d      	b.n	8005402 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc fa3a 	bl	8001854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 fa14 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b06      	cmp	r3, #6
 8005432:	d007      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d122      	bne.n	80054ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d11b      	bne.n	80054ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f06f 0202 	mvn.w	r2, #2
 800547e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f9a5 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 800549a:	e005      	b.n	80054a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f997 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9a8 	bl	80057f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d122      	bne.n	8005502 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d11b      	bne.n	8005502 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0204 	mvn.w	r2, #4
 80054d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f97b 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 80054ee:	e005      	b.n	80054fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f96d 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f97e 	bl	80057f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b08      	cmp	r3, #8
 800550e:	d122      	bne.n	8005556 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b08      	cmp	r3, #8
 800551c:	d11b      	bne.n	8005556 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f06f 0208 	mvn.w	r2, #8
 8005526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2204      	movs	r2, #4
 800552c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f951 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 8005542:	e005      	b.n	8005550 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f943 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f954 	bl	80057f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b10      	cmp	r3, #16
 8005562:	d122      	bne.n	80055aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b10      	cmp	r3, #16
 8005570:	d11b      	bne.n	80055aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f06f 0210 	mvn.w	r2, #16
 800557a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2208      	movs	r2, #8
 8005580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f927 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 8005596:	e005      	b.n	80055a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f919 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f92a 	bl	80057f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10e      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f06f 0201 	mvn.w	r2, #1
 80055ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7fb fe5f 	bl	8001294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	2b80      	cmp	r3, #128	; 0x80
 80055e2:	d10e      	bne.n	8005602 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d107      	bne.n	8005602 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 facf 	bl	8005ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d10e      	bne.n	800562e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d107      	bne.n	800562e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8ef 	bl	800580c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b20      	cmp	r3, #32
 800563a:	d10e      	bne.n	800565a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b20      	cmp	r3, #32
 8005648:	d107      	bne.n	800565a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f06f 0220 	mvn.w	r2, #32
 8005652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fa99 	bl	8005b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_TIM_ConfigClockSource+0x18>
 8005676:	2302      	movs	r3, #2
 8005678:	e0a6      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x166>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005698:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d067      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x120>
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d80b      	bhi.n	80056ce <HAL_TIM_ConfigClockSource+0x6c>
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d073      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x140>
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d802      	bhi.n	80056c4 <HAL_TIM_ConfigClockSource+0x62>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d06f      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056c2:	e078      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d06c      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x140>
 80056c8:	2b30      	cmp	r3, #48	; 0x30
 80056ca:	d06a      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80056cc:	e073      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056ce:	2b70      	cmp	r3, #112	; 0x70
 80056d0:	d00d      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x8c>
 80056d2:	2b70      	cmp	r3, #112	; 0x70
 80056d4:	d804      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x7e>
 80056d6:	2b50      	cmp	r3, #80	; 0x50
 80056d8:	d033      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0xe0>
 80056da:	2b60      	cmp	r3, #96	; 0x60
 80056dc:	d041      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056de:	e06a      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d066      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x152>
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ea:	d017      	beq.n	800571c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056ec:	e063      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6899      	ldr	r1, [r3, #8]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f000 f9a9 	bl	8005a54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005710:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	609a      	str	r2, [r3, #8]
      break;
 800571a:	e04c      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6899      	ldr	r1, [r3, #8]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f000 f992 	bl	8005a54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800573e:	609a      	str	r2, [r3, #8]
      break;
 8005740:	e039      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6859      	ldr	r1, [r3, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	461a      	mov	r2, r3
 8005750:	f000 f906 	bl	8005960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2150      	movs	r1, #80	; 0x50
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f95f 	bl	8005a1e <TIM_ITRx_SetConfig>
      break;
 8005760:	e029      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	461a      	mov	r2, r3
 8005770:	f000 f925 	bl	80059be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2160      	movs	r1, #96	; 0x60
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f94f 	bl	8005a1e <TIM_ITRx_SetConfig>
      break;
 8005780:	e019      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	461a      	mov	r2, r3
 8005790:	f000 f8e6 	bl	8005960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2140      	movs	r1, #64	; 0x40
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f93f 	bl	8005a1e <TIM_ITRx_SetConfig>
      break;
 80057a0:	e009      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f000 f936 	bl	8005a1e <TIM_ITRx_SetConfig>
      break;
 80057b2:	e000      	b.n	80057b6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a40      	ldr	r2, [pc, #256]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3d      	ldr	r2, [pc, #244]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3c      	ldr	r2, [pc, #240]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2f      	ldr	r2, [pc, #188]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d02b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d027      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d023      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a29      	ldr	r2, [pc, #164]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <TIM_Base_SetConfig+0x128>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a27      	ldr	r2, [pc, #156]	; (800594c <TIM_Base_SetConfig+0x12c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <TIM_Base_SetConfig+0x130>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a25      	ldr	r2, [pc, #148]	; (8005954 <TIM_Base_SetConfig+0x134>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <TIM_Base_SetConfig+0x138>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a23      	ldr	r2, [pc, #140]	; (800595c <TIM_Base_SetConfig+0x13c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <TIM_Base_SetConfig+0x114>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <TIM_Base_SetConfig+0x124>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d103      	bne.n	8005920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	615a      	str	r2, [r3, #20]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00
 8005944:	40010400 	.word	0x40010400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	40001800 	.word	0x40001800
 8005958:	40001c00 	.word	0x40001c00
 800595c:	40002000 	.word	0x40002000

08005960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0201 	bic.w	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f023 030a 	bic.w	r3, r3, #10
 800599c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059be:	b480      	push	{r7}
 80059c0:	b087      	sub	sp, #28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f023 0210 	bic.w	r2, r3, #16
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	031b      	lsls	r3, r3, #12
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f043 0307 	orr.w	r3, r3, #7
 8005a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	609a      	str	r2, [r3, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	021a      	lsls	r2, r3, #8
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	609a      	str	r2, [r3, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e05a      	b.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a21      	ldr	r2, [pc, #132]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d01d      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1a      	ldr	r2, [pc, #104]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a18      	ldr	r2, [pc, #96]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10c      	bne.n	8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40000c00 	.word	0x40000c00
 8005b80:	40010400 	.word	0x40010400
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40001800 	.word	0x40001800

08005b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e03f      	b.n	8005c46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fb fea0 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2224      	movs	r2, #36	; 0x24
 8005be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fb4b 	bl	8006294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b088      	sub	sp, #32
 8005c52:	af02      	add	r7, sp, #8
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	f040 8083 	bne.w	8005d76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_UART_Transmit+0x2e>
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e07b      	b.n	8005d78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_UART_Transmit+0x40>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e074      	b.n	8005d78 <HAL_UART_Transmit+0x12a>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2221      	movs	r2, #33	; 0x21
 8005ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ca4:	f7fb ff76 	bl	8001b94 <HAL_GetTick>
 8005ca8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	88fa      	ldrh	r2, [r7, #6]
 8005cb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005cbe:	e042      	b.n	8005d46 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd6:	d122      	bne.n	8005d1e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2180      	movs	r1, #128	; 0x80
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f96a 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e042      	b.n	8005d78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d04:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	3302      	adds	r3, #2
 8005d12:	60bb      	str	r3, [r7, #8]
 8005d14:	e017      	b.n	8005d46 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60bb      	str	r3, [r7, #8]
 8005d1c:	e013      	b.n	8005d46 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2180      	movs	r1, #128	; 0x80
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f947 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e01f      	b.n	8005d78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	60ba      	str	r2, [r7, #8]
 8005d3e:	781a      	ldrb	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1b7      	bne.n	8005cc0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2200      	movs	r2, #0
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f92e 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e006      	b.n	8005d78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e000      	b.n	8005d78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005d76:	2302      	movs	r3, #2
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10d      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x52>
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f9e0 	bl	8006190 <UART_Receive_IT>
      return;
 8005dd0:	e0d1      	b.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80b0 	beq.w	8005f3a <HAL_UART_IRQHandler+0x1ba>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <HAL_UART_IRQHandler+0x70>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80a5 	beq.w	8005f3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_UART_IRQHandler+0x90>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	f043 0201 	orr.w	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_UART_IRQHandler+0xb0>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e28:	f043 0202 	orr.w	r2, r3, #2
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_UART_IRQHandler+0xd0>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	f043 0204 	orr.w	r2, r3, #4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00f      	beq.n	8005e7a <HAL_UART_IRQHandler+0xfa>
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_UART_IRQHandler+0xee>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	f043 0208 	orr.w	r2, r3, #8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d078      	beq.n	8005f74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_UART_IRQHandler+0x11c>
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f97a 	bl	8006190 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2301      	moveq	r3, #1
 8005eac:	2300      	movne	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x144>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d031      	beq.n	8005f28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f8c3 	bl	8006050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d123      	bne.n	8005f20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d013      	beq.n	8005f18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <HAL_UART_IRQHandler+0x1fc>)
 8005ef6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fc fcf9 	bl	80028f4 <HAL_DMA_Abort_IT>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d016      	beq.n	8005f36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f12:	4610      	mov	r0, r2
 8005f14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f16:	e00e      	b.n	8005f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f845 	bl	8005fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1e:	e00a      	b.n	8005f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f841 	bl	8005fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f26:	e006      	b.n	8005f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f83d 	bl	8005fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f34:	e01e      	b.n	8005f74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f36:	bf00      	nop
    return;
 8005f38:	e01c      	b.n	8005f74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_UART_IRQHandler+0x1d6>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8b0 	bl	80060b4 <UART_Transmit_IT>
    return;
 8005f54:	e00f      	b.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8f8 	bl	8006160 <UART_EndTransmit_IT>
    return;
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f74:	bf00      	nop
  }
}
 8005f76:	3720      	adds	r7, #32
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	0800608d 	.word	0x0800608d

08005f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fcc:	e02c      	b.n	8006028 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d028      	beq.n	8006028 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <UART_WaitOnFlagUntilTimeout+0x30>
 8005fdc:	f7fb fdda 	bl	8001b94 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d21d      	bcs.n	8006028 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ffa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e00f      	b.n	8006048 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4013      	ands	r3, r2
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	bf0c      	ite	eq
 8006038:	2301      	moveq	r3, #1
 800603a:	2300      	movne	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	429a      	cmp	r2, r3
 8006044:	d0c3      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006066:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff ff7e 	bl	8005fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b21      	cmp	r3, #33	; 0x21
 80060c6:	d144      	bne.n	8006152 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d11a      	bne.n	8006108 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]
 80060fa:	e00e      	b.n	800611a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	621a      	str	r2, [r3, #32]
 8006106:	e008      	b.n	800611a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6211      	str	r1, [r2, #32]
 8006112:	781a      	ldrb	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29b      	uxth	r3, r3
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4619      	mov	r1, r3
 8006128:	84d1      	strh	r1, [r2, #38]	; 0x26
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10f      	bne.n	800614e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800613c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800614c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006152:	2302      	movs	r3, #2
  }
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006176:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fefd 	bl	8005f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b22      	cmp	r3, #34	; 0x22
 80061a2:	d171      	bne.n	8006288 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ac:	d123      	bne.n	80061f6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10e      	bne.n	80061da <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	1c9a      	adds	r2, r3, #2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28
 80061d8:	e029      	b.n	800622e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
 80061f4:	e01b      	b.n	800622e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6858      	ldr	r0, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6291      	str	r1, [r2, #40]	; 0x28
 800620e:	b2c2      	uxtb	r2, r0
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	e00c      	b.n	800622e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b2da      	uxtb	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	1c58      	adds	r0, r3, #1
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	6288      	str	r0, [r1, #40]	; 0x28
 8006226:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29b      	uxth	r3, r3
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	4619      	mov	r1, r3
 800623c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800623e:	2b00      	cmp	r3, #0
 8006240:	d120      	bne.n	8006284 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0220 	bic.w	r2, r2, #32
 8006250:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006260:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff fe8a 	bl	8005f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	e002      	b.n	800628a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006288:	2302      	movs	r3, #2
  }
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062d6:	f023 030c 	bic.w	r3, r3, #12
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006302:	f040 818b 	bne.w	800661c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4ac1      	ldr	r2, [pc, #772]	; (8006610 <UART_SetConfig+0x37c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d005      	beq.n	800631c <UART_SetConfig+0x88>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4abf      	ldr	r2, [pc, #764]	; (8006614 <UART_SetConfig+0x380>)
 8006316:	4293      	cmp	r3, r2
 8006318:	f040 80bd 	bne.w	8006496 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800631c:	f7fe ff6c 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8006320:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	461d      	mov	r5, r3
 8006326:	f04f 0600 	mov.w	r6, #0
 800632a:	46a8      	mov	r8, r5
 800632c:	46b1      	mov	r9, r6
 800632e:	eb18 0308 	adds.w	r3, r8, r8
 8006332:	eb49 0409 	adc.w	r4, r9, r9
 8006336:	4698      	mov	r8, r3
 8006338:	46a1      	mov	r9, r4
 800633a:	eb18 0805 	adds.w	r8, r8, r5
 800633e:	eb49 0906 	adc.w	r9, r9, r6
 8006342:	f04f 0100 	mov.w	r1, #0
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800634e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006352:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006356:	4688      	mov	r8, r1
 8006358:	4691      	mov	r9, r2
 800635a:	eb18 0005 	adds.w	r0, r8, r5
 800635e:	eb49 0106 	adc.w	r1, r9, r6
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	461d      	mov	r5, r3
 8006368:	f04f 0600 	mov.w	r6, #0
 800636c:	196b      	adds	r3, r5, r5
 800636e:	eb46 0406 	adc.w	r4, r6, r6
 8006372:	461a      	mov	r2, r3
 8006374:	4623      	mov	r3, r4
 8006376:	f7f9 ff8b 	bl	8000290 <__aeabi_uldivmod>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	461a      	mov	r2, r3
 8006380:	4ba5      	ldr	r3, [pc, #660]	; (8006618 <UART_SetConfig+0x384>)
 8006382:	fba3 2302 	umull	r2, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	461d      	mov	r5, r3
 8006390:	f04f 0600 	mov.w	r6, #0
 8006394:	46a9      	mov	r9, r5
 8006396:	46b2      	mov	sl, r6
 8006398:	eb19 0309 	adds.w	r3, r9, r9
 800639c:	eb4a 040a 	adc.w	r4, sl, sl
 80063a0:	4699      	mov	r9, r3
 80063a2:	46a2      	mov	sl, r4
 80063a4:	eb19 0905 	adds.w	r9, r9, r5
 80063a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80063ac:	f04f 0100 	mov.w	r1, #0
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063c0:	4689      	mov	r9, r1
 80063c2:	4692      	mov	sl, r2
 80063c4:	eb19 0005 	adds.w	r0, r9, r5
 80063c8:	eb4a 0106 	adc.w	r1, sl, r6
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	461d      	mov	r5, r3
 80063d2:	f04f 0600 	mov.w	r6, #0
 80063d6:	196b      	adds	r3, r5, r5
 80063d8:	eb46 0406 	adc.w	r4, r6, r6
 80063dc:	461a      	mov	r2, r3
 80063de:	4623      	mov	r3, r4
 80063e0:	f7f9 ff56 	bl	8000290 <__aeabi_uldivmod>
 80063e4:	4603      	mov	r3, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	461a      	mov	r2, r3
 80063ea:	4b8b      	ldr	r3, [pc, #556]	; (8006618 <UART_SetConfig+0x384>)
 80063ec:	fba3 1302 	umull	r1, r3, r3, r2
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	2164      	movs	r1, #100	; 0x64
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	3332      	adds	r3, #50	; 0x32
 80063fe:	4a86      	ldr	r2, [pc, #536]	; (8006618 <UART_SetConfig+0x384>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800640c:	4498      	add	r8, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	461d      	mov	r5, r3
 8006412:	f04f 0600 	mov.w	r6, #0
 8006416:	46a9      	mov	r9, r5
 8006418:	46b2      	mov	sl, r6
 800641a:	eb19 0309 	adds.w	r3, r9, r9
 800641e:	eb4a 040a 	adc.w	r4, sl, sl
 8006422:	4699      	mov	r9, r3
 8006424:	46a2      	mov	sl, r4
 8006426:	eb19 0905 	adds.w	r9, r9, r5
 800642a:	eb4a 0a06 	adc.w	sl, sl, r6
 800642e:	f04f 0100 	mov.w	r1, #0
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800643a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800643e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006442:	4689      	mov	r9, r1
 8006444:	4692      	mov	sl, r2
 8006446:	eb19 0005 	adds.w	r0, r9, r5
 800644a:	eb4a 0106 	adc.w	r1, sl, r6
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	461d      	mov	r5, r3
 8006454:	f04f 0600 	mov.w	r6, #0
 8006458:	196b      	adds	r3, r5, r5
 800645a:	eb46 0406 	adc.w	r4, r6, r6
 800645e:	461a      	mov	r2, r3
 8006460:	4623      	mov	r3, r4
 8006462:	f7f9 ff15 	bl	8000290 <__aeabi_uldivmod>
 8006466:	4603      	mov	r3, r0
 8006468:	460c      	mov	r4, r1
 800646a:	461a      	mov	r2, r3
 800646c:	4b6a      	ldr	r3, [pc, #424]	; (8006618 <UART_SetConfig+0x384>)
 800646e:	fba3 1302 	umull	r1, r3, r3, r2
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	2164      	movs	r1, #100	; 0x64
 8006476:	fb01 f303 	mul.w	r3, r1, r3
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	3332      	adds	r3, #50	; 0x32
 8006480:	4a65      	ldr	r2, [pc, #404]	; (8006618 <UART_SetConfig+0x384>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	f003 0207 	and.w	r2, r3, #7
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4442      	add	r2, r8
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	e26f      	b.n	8006976 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006496:	f7fe fe9b 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 800649a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	461d      	mov	r5, r3
 80064a0:	f04f 0600 	mov.w	r6, #0
 80064a4:	46a8      	mov	r8, r5
 80064a6:	46b1      	mov	r9, r6
 80064a8:	eb18 0308 	adds.w	r3, r8, r8
 80064ac:	eb49 0409 	adc.w	r4, r9, r9
 80064b0:	4698      	mov	r8, r3
 80064b2:	46a1      	mov	r9, r4
 80064b4:	eb18 0805 	adds.w	r8, r8, r5
 80064b8:	eb49 0906 	adc.w	r9, r9, r6
 80064bc:	f04f 0100 	mov.w	r1, #0
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064d0:	4688      	mov	r8, r1
 80064d2:	4691      	mov	r9, r2
 80064d4:	eb18 0005 	adds.w	r0, r8, r5
 80064d8:	eb49 0106 	adc.w	r1, r9, r6
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	461d      	mov	r5, r3
 80064e2:	f04f 0600 	mov.w	r6, #0
 80064e6:	196b      	adds	r3, r5, r5
 80064e8:	eb46 0406 	adc.w	r4, r6, r6
 80064ec:	461a      	mov	r2, r3
 80064ee:	4623      	mov	r3, r4
 80064f0:	f7f9 fece 	bl	8000290 <__aeabi_uldivmod>
 80064f4:	4603      	mov	r3, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	461a      	mov	r2, r3
 80064fa:	4b47      	ldr	r3, [pc, #284]	; (8006618 <UART_SetConfig+0x384>)
 80064fc:	fba3 2302 	umull	r2, r3, r3, r2
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	461d      	mov	r5, r3
 800650a:	f04f 0600 	mov.w	r6, #0
 800650e:	46a9      	mov	r9, r5
 8006510:	46b2      	mov	sl, r6
 8006512:	eb19 0309 	adds.w	r3, r9, r9
 8006516:	eb4a 040a 	adc.w	r4, sl, sl
 800651a:	4699      	mov	r9, r3
 800651c:	46a2      	mov	sl, r4
 800651e:	eb19 0905 	adds.w	r9, r9, r5
 8006522:	eb4a 0a06 	adc.w	sl, sl, r6
 8006526:	f04f 0100 	mov.w	r1, #0
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800653a:	4689      	mov	r9, r1
 800653c:	4692      	mov	sl, r2
 800653e:	eb19 0005 	adds.w	r0, r9, r5
 8006542:	eb4a 0106 	adc.w	r1, sl, r6
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	461d      	mov	r5, r3
 800654c:	f04f 0600 	mov.w	r6, #0
 8006550:	196b      	adds	r3, r5, r5
 8006552:	eb46 0406 	adc.w	r4, r6, r6
 8006556:	461a      	mov	r2, r3
 8006558:	4623      	mov	r3, r4
 800655a:	f7f9 fe99 	bl	8000290 <__aeabi_uldivmod>
 800655e:	4603      	mov	r3, r0
 8006560:	460c      	mov	r4, r1
 8006562:	461a      	mov	r2, r3
 8006564:	4b2c      	ldr	r3, [pc, #176]	; (8006618 <UART_SetConfig+0x384>)
 8006566:	fba3 1302 	umull	r1, r3, r3, r2
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	2164      	movs	r1, #100	; 0x64
 800656e:	fb01 f303 	mul.w	r3, r1, r3
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	3332      	adds	r3, #50	; 0x32
 8006578:	4a27      	ldr	r2, [pc, #156]	; (8006618 <UART_SetConfig+0x384>)
 800657a:	fba2 2303 	umull	r2, r3, r2, r3
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006586:	4498      	add	r8, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	461d      	mov	r5, r3
 800658c:	f04f 0600 	mov.w	r6, #0
 8006590:	46a9      	mov	r9, r5
 8006592:	46b2      	mov	sl, r6
 8006594:	eb19 0309 	adds.w	r3, r9, r9
 8006598:	eb4a 040a 	adc.w	r4, sl, sl
 800659c:	4699      	mov	r9, r3
 800659e:	46a2      	mov	sl, r4
 80065a0:	eb19 0905 	adds.w	r9, r9, r5
 80065a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065bc:	4689      	mov	r9, r1
 80065be:	4692      	mov	sl, r2
 80065c0:	eb19 0005 	adds.w	r0, r9, r5
 80065c4:	eb4a 0106 	adc.w	r1, sl, r6
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	461d      	mov	r5, r3
 80065ce:	f04f 0600 	mov.w	r6, #0
 80065d2:	196b      	adds	r3, r5, r5
 80065d4:	eb46 0406 	adc.w	r4, r6, r6
 80065d8:	461a      	mov	r2, r3
 80065da:	4623      	mov	r3, r4
 80065dc:	f7f9 fe58 	bl	8000290 <__aeabi_uldivmod>
 80065e0:	4603      	mov	r3, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	461a      	mov	r2, r3
 80065e6:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <UART_SetConfig+0x384>)
 80065e8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	2164      	movs	r1, #100	; 0x64
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	3332      	adds	r3, #50	; 0x32
 80065fa:	4a07      	ldr	r2, [pc, #28]	; (8006618 <UART_SetConfig+0x384>)
 80065fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	f003 0207 	and.w	r2, r3, #7
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4442      	add	r2, r8
 800660c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800660e:	e1b2      	b.n	8006976 <UART_SetConfig+0x6e2>
 8006610:	40011000 	.word	0x40011000
 8006614:	40011400 	.word	0x40011400
 8006618:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4ad7      	ldr	r2, [pc, #860]	; (8006980 <UART_SetConfig+0x6ec>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d005      	beq.n	8006632 <UART_SetConfig+0x39e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4ad6      	ldr	r2, [pc, #856]	; (8006984 <UART_SetConfig+0x6f0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	f040 80d1 	bne.w	80067d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006632:	f7fe fde1 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8006636:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	469a      	mov	sl, r3
 800663c:	f04f 0b00 	mov.w	fp, #0
 8006640:	46d0      	mov	r8, sl
 8006642:	46d9      	mov	r9, fp
 8006644:	eb18 0308 	adds.w	r3, r8, r8
 8006648:	eb49 0409 	adc.w	r4, r9, r9
 800664c:	4698      	mov	r8, r3
 800664e:	46a1      	mov	r9, r4
 8006650:	eb18 080a 	adds.w	r8, r8, sl
 8006654:	eb49 090b 	adc.w	r9, r9, fp
 8006658:	f04f 0100 	mov.w	r1, #0
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006664:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006668:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800666c:	4688      	mov	r8, r1
 800666e:	4691      	mov	r9, r2
 8006670:	eb1a 0508 	adds.w	r5, sl, r8
 8006674:	eb4b 0609 	adc.w	r6, fp, r9
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4619      	mov	r1, r3
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	f04f 0400 	mov.w	r4, #0
 800668a:	0094      	lsls	r4, r2, #2
 800668c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006690:	008b      	lsls	r3, r1, #2
 8006692:	461a      	mov	r2, r3
 8006694:	4623      	mov	r3, r4
 8006696:	4628      	mov	r0, r5
 8006698:	4631      	mov	r1, r6
 800669a:	f7f9 fdf9 	bl	8000290 <__aeabi_uldivmod>
 800669e:	4603      	mov	r3, r0
 80066a0:	460c      	mov	r4, r1
 80066a2:	461a      	mov	r2, r3
 80066a4:	4bb8      	ldr	r3, [pc, #736]	; (8006988 <UART_SetConfig+0x6f4>)
 80066a6:	fba3 2302 	umull	r2, r3, r3, r2
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	469b      	mov	fp, r3
 80066b4:	f04f 0c00 	mov.w	ip, #0
 80066b8:	46d9      	mov	r9, fp
 80066ba:	46e2      	mov	sl, ip
 80066bc:	eb19 0309 	adds.w	r3, r9, r9
 80066c0:	eb4a 040a 	adc.w	r4, sl, sl
 80066c4:	4699      	mov	r9, r3
 80066c6:	46a2      	mov	sl, r4
 80066c8:	eb19 090b 	adds.w	r9, r9, fp
 80066cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066d0:	f04f 0100 	mov.w	r1, #0
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066e4:	4689      	mov	r9, r1
 80066e6:	4692      	mov	sl, r2
 80066e8:	eb1b 0509 	adds.w	r5, fp, r9
 80066ec:	eb4c 060a 	adc.w	r6, ip, sl
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4619      	mov	r1, r3
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	f04f 0400 	mov.w	r4, #0
 8006702:	0094      	lsls	r4, r2, #2
 8006704:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006708:	008b      	lsls	r3, r1, #2
 800670a:	461a      	mov	r2, r3
 800670c:	4623      	mov	r3, r4
 800670e:	4628      	mov	r0, r5
 8006710:	4631      	mov	r1, r6
 8006712:	f7f9 fdbd 	bl	8000290 <__aeabi_uldivmod>
 8006716:	4603      	mov	r3, r0
 8006718:	460c      	mov	r4, r1
 800671a:	461a      	mov	r2, r3
 800671c:	4b9a      	ldr	r3, [pc, #616]	; (8006988 <UART_SetConfig+0x6f4>)
 800671e:	fba3 1302 	umull	r1, r3, r3, r2
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	2164      	movs	r1, #100	; 0x64
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	3332      	adds	r3, #50	; 0x32
 8006730:	4a95      	ldr	r2, [pc, #596]	; (8006988 <UART_SetConfig+0x6f4>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800673c:	4498      	add	r8, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	469b      	mov	fp, r3
 8006742:	f04f 0c00 	mov.w	ip, #0
 8006746:	46d9      	mov	r9, fp
 8006748:	46e2      	mov	sl, ip
 800674a:	eb19 0309 	adds.w	r3, r9, r9
 800674e:	eb4a 040a 	adc.w	r4, sl, sl
 8006752:	4699      	mov	r9, r3
 8006754:	46a2      	mov	sl, r4
 8006756:	eb19 090b 	adds.w	r9, r9, fp
 800675a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800675e:	f04f 0100 	mov.w	r1, #0
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800676a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800676e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006772:	4689      	mov	r9, r1
 8006774:	4692      	mov	sl, r2
 8006776:	eb1b 0509 	adds.w	r5, fp, r9
 800677a:	eb4c 060a 	adc.w	r6, ip, sl
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4619      	mov	r1, r3
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	f04f 0400 	mov.w	r4, #0
 8006790:	0094      	lsls	r4, r2, #2
 8006792:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006796:	008b      	lsls	r3, r1, #2
 8006798:	461a      	mov	r2, r3
 800679a:	4623      	mov	r3, r4
 800679c:	4628      	mov	r0, r5
 800679e:	4631      	mov	r1, r6
 80067a0:	f7f9 fd76 	bl	8000290 <__aeabi_uldivmod>
 80067a4:	4603      	mov	r3, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	461a      	mov	r2, r3
 80067aa:	4b77      	ldr	r3, [pc, #476]	; (8006988 <UART_SetConfig+0x6f4>)
 80067ac:	fba3 1302 	umull	r1, r3, r3, r2
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	2164      	movs	r1, #100	; 0x64
 80067b4:	fb01 f303 	mul.w	r3, r1, r3
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	3332      	adds	r3, #50	; 0x32
 80067be:	4a72      	ldr	r2, [pc, #456]	; (8006988 <UART_SetConfig+0x6f4>)
 80067c0:	fba2 2303 	umull	r2, r3, r2, r3
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f003 020f 	and.w	r2, r3, #15
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4442      	add	r2, r8
 80067d0:	609a      	str	r2, [r3, #8]
 80067d2:	e0d0      	b.n	8006976 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7fe fcfc 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 80067d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	469a      	mov	sl, r3
 80067de:	f04f 0b00 	mov.w	fp, #0
 80067e2:	46d0      	mov	r8, sl
 80067e4:	46d9      	mov	r9, fp
 80067e6:	eb18 0308 	adds.w	r3, r8, r8
 80067ea:	eb49 0409 	adc.w	r4, r9, r9
 80067ee:	4698      	mov	r8, r3
 80067f0:	46a1      	mov	r9, r4
 80067f2:	eb18 080a 	adds.w	r8, r8, sl
 80067f6:	eb49 090b 	adc.w	r9, r9, fp
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006806:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800680a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800680e:	4688      	mov	r8, r1
 8006810:	4691      	mov	r9, r2
 8006812:	eb1a 0508 	adds.w	r5, sl, r8
 8006816:	eb4b 0609 	adc.w	r6, fp, r9
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4619      	mov	r1, r3
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	f04f 0400 	mov.w	r4, #0
 800682c:	0094      	lsls	r4, r2, #2
 800682e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006832:	008b      	lsls	r3, r1, #2
 8006834:	461a      	mov	r2, r3
 8006836:	4623      	mov	r3, r4
 8006838:	4628      	mov	r0, r5
 800683a:	4631      	mov	r1, r6
 800683c:	f7f9 fd28 	bl	8000290 <__aeabi_uldivmod>
 8006840:	4603      	mov	r3, r0
 8006842:	460c      	mov	r4, r1
 8006844:	461a      	mov	r2, r3
 8006846:	4b50      	ldr	r3, [pc, #320]	; (8006988 <UART_SetConfig+0x6f4>)
 8006848:	fba3 2302 	umull	r2, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	469b      	mov	fp, r3
 8006856:	f04f 0c00 	mov.w	ip, #0
 800685a:	46d9      	mov	r9, fp
 800685c:	46e2      	mov	sl, ip
 800685e:	eb19 0309 	adds.w	r3, r9, r9
 8006862:	eb4a 040a 	adc.w	r4, sl, sl
 8006866:	4699      	mov	r9, r3
 8006868:	46a2      	mov	sl, r4
 800686a:	eb19 090b 	adds.w	r9, r9, fp
 800686e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006872:	f04f 0100 	mov.w	r1, #0
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800687e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006882:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006886:	4689      	mov	r9, r1
 8006888:	4692      	mov	sl, r2
 800688a:	eb1b 0509 	adds.w	r5, fp, r9
 800688e:	eb4c 060a 	adc.w	r6, ip, sl
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4619      	mov	r1, r3
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	f04f 0400 	mov.w	r4, #0
 80068a4:	0094      	lsls	r4, r2, #2
 80068a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068aa:	008b      	lsls	r3, r1, #2
 80068ac:	461a      	mov	r2, r3
 80068ae:	4623      	mov	r3, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	4631      	mov	r1, r6
 80068b4:	f7f9 fcec 	bl	8000290 <__aeabi_uldivmod>
 80068b8:	4603      	mov	r3, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	461a      	mov	r2, r3
 80068be:	4b32      	ldr	r3, [pc, #200]	; (8006988 <UART_SetConfig+0x6f4>)
 80068c0:	fba3 1302 	umull	r1, r3, r3, r2
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	2164      	movs	r1, #100	; 0x64
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	3332      	adds	r3, #50	; 0x32
 80068d2:	4a2d      	ldr	r2, [pc, #180]	; (8006988 <UART_SetConfig+0x6f4>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068de:	4498      	add	r8, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	469b      	mov	fp, r3
 80068e4:	f04f 0c00 	mov.w	ip, #0
 80068e8:	46d9      	mov	r9, fp
 80068ea:	46e2      	mov	sl, ip
 80068ec:	eb19 0309 	adds.w	r3, r9, r9
 80068f0:	eb4a 040a 	adc.w	r4, sl, sl
 80068f4:	4699      	mov	r9, r3
 80068f6:	46a2      	mov	sl, r4
 80068f8:	eb19 090b 	adds.w	r9, r9, fp
 80068fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006900:	f04f 0100 	mov.w	r1, #0
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800690c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006910:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006914:	4689      	mov	r9, r1
 8006916:	4692      	mov	sl, r2
 8006918:	eb1b 0509 	adds.w	r5, fp, r9
 800691c:	eb4c 060a 	adc.w	r6, ip, sl
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4619      	mov	r1, r3
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	f04f 0400 	mov.w	r4, #0
 8006932:	0094      	lsls	r4, r2, #2
 8006934:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006938:	008b      	lsls	r3, r1, #2
 800693a:	461a      	mov	r2, r3
 800693c:	4623      	mov	r3, r4
 800693e:	4628      	mov	r0, r5
 8006940:	4631      	mov	r1, r6
 8006942:	f7f9 fca5 	bl	8000290 <__aeabi_uldivmod>
 8006946:	4603      	mov	r3, r0
 8006948:	460c      	mov	r4, r1
 800694a:	461a      	mov	r2, r3
 800694c:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <UART_SetConfig+0x6f4>)
 800694e:	fba3 1302 	umull	r1, r3, r3, r2
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	2164      	movs	r1, #100	; 0x64
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	3332      	adds	r3, #50	; 0x32
 8006960:	4a09      	ldr	r2, [pc, #36]	; (8006988 <UART_SetConfig+0x6f4>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	f003 020f 	and.w	r2, r3, #15
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4442      	add	r2, r8
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	e7ff      	b.n	8006976 <UART_SetConfig+0x6e2>
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006980:	40011000 	.word	0x40011000
 8006984:	40011400 	.word	0x40011400
 8006988:	51eb851f 	.word	0x51eb851f

0800698c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d029      	beq.n	80069fa <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80069b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069b6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069c0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80069c6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80069cc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80069d2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80069d8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80069de:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80069e4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80069ea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e034      	b.n	8006a64 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a06:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a10:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006a16:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a2e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a38:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006a3e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006a44:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006a4a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006a50:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b087      	sub	sp, #28
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d02e      	beq.n	8006aea <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a98:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006aa8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006ab2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006abc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ac6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006ad0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006ada:	4313      	orrs	r3, r2
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	609a      	str	r2, [r3, #8]
 8006ae8:	e03b      	b.n	8006b62 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006afa:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b20:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b30:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006b3a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006b44:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b70:	b084      	sub	sp, #16
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	f107 001c 	add.w	r0, r7, #28
 8006b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d122      	bne.n	8006bce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d105      	bne.n	8006bc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f902 	bl	8006dcc <USB_CoreReset>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
 8006bcc:	e01a      	b.n	8006c04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f8f6 	bl	8006dcc <USB_CoreReset>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8006bf6:	e005      	b.n	8006c04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10b      	bne.n	8006c22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f043 0206 	orr.w	r2, r3, #6
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f043 0220 	orr.w	r2, r3, #32
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c2e:	b004      	add	sp, #16
 8006c30:	4770      	bx	lr

08006c32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f023 0201 	bic.w	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d106      	bne.n	8006c80 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]
 8006c7e:	e00b      	b.n	8006c98 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	e001      	b.n	8006c98 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e003      	b.n	8006ca0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c98:	2032      	movs	r0, #50	; 0x32
 8006c9a:	f7fa ff87 	bl	8001bac <HAL_Delay>

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	019b      	lsls	r3, r3, #6
 8006cba:	f043 0220 	orr.w	r2, r3, #32
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <USB_FlushTxFifo+0x48>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e006      	b.n	8006ce2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d0f0      	beq.n	8006cc2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	00030d40 	.word	0x00030d40

08006cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2210      	movs	r2, #16
 8006d04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <USB_FlushRxFifo+0x40>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e006      	b.n	8006d26 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d0f0      	beq.n	8006d06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	00030d40 	.word	0x00030d40

08006d38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b089      	sub	sp, #36	; 0x24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	3303      	adds	r3, #3
 8006d52:	089b      	lsrs	r3, r3, #2
 8006d54:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006d56:	2300      	movs	r3, #0
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	e00b      	b.n	8006d74 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	3301      	adds	r3, #1
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d3ef      	bcc.n	8006d5c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006d7c:	69fb      	ldr	r3, [r7, #28]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3724      	adds	r7, #36	; 0x24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006da2:	68fb      	ldr	r3, [r7, #12]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a13      	ldr	r2, [pc, #76]	; (8006e30 <USB_CoreReset+0x64>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e01b      	b.n	8006e22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	daf2      	bge.n	8006dd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f043 0201 	orr.w	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <USB_CoreReset+0x64>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d901      	bls.n	8006e14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e006      	b.n	8006e22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d0f0      	beq.n	8006e02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	00030d40 	.word	0x00030d40

08006e34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e34:	b084      	sub	sp, #16
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	f107 001c 	add.w	r0, r7, #28
 8006e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e50:	461a      	mov	r2, r3
 8006e52:	2300      	movs	r3, #0
 8006e54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d018      	beq.n	8006eb8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d10a      	bne.n	8006ea2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e9a:	f043 0304 	orr.w	r3, r3, #4
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	e014      	b.n	8006ecc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006eb0:	f023 0304 	bic.w	r3, r3, #4
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	e009      	b.n	8006ecc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ec6:	f023 0304 	bic.w	r3, r3, #4
 8006eca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006ecc:	2110      	movs	r1, #16
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff feea 	bl	8006ca8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff ff0d 	bl	8006cf4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e015      	b.n	8006f0c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eec:	461a      	mov	r2, r3
 8006eee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f00:	461a      	mov	r2, r3
 8006f02:	2300      	movs	r3, #0
 8006f04:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d3e5      	bcc.n	8006ee0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006f14:	2101      	movs	r1, #1
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f882 	bl	8007020 <USB_DriveVbus>

  HAL_Delay(200U);
 8006f1c:	20c8      	movs	r0, #200	; 0xc8
 8006f1e:	f7fa fe45 	bl	8001bac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f42:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a14      	ldr	r2, [pc, #80]	; (8006f98 <USB_HostInit+0x164>)
 8006f48:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <USB_HostInit+0x168>)
 8006f4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006f52:	e009      	b.n	8006f68 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2280      	movs	r2, #128	; 0x80
 8006f58:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a10      	ldr	r2, [pc, #64]	; (8006fa0 <USB_HostInit+0x16c>)
 8006f5e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a10      	ldr	r2, [pc, #64]	; (8006fa4 <USB_HostInit+0x170>)
 8006f64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	f043 0210 	orr.w	r2, r3, #16
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <USB_HostInit+0x174>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f92:	b004      	add	sp, #16
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	01000200 	.word	0x01000200
 8006f9c:	00e00300 	.word	0x00e00300
 8006fa0:	00600080 	.word	0x00600080
 8006fa4:	004000e0 	.word	0x004000e0
 8006fa8:	a3200008 	.word	0xa3200008

08006fac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d107      	bne.n	8006ffe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006ffa:	6053      	str	r3, [r2, #4]
 8006ffc:	e009      	b.n	8007012 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d106      	bne.n	8007012 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700a:	461a      	mov	r2, r3
 800700c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007010:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007044:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d109      	bne.n	8007064 <USB_DriveVbus+0x44>
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d106      	bne.n	8007064 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800705e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007062:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800706a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706e:	d109      	bne.n	8007084 <USB_DriveVbus+0x64>
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800707e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007082:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	b29b      	uxth	r3, r3
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	0c9b      	lsrs	r3, r3, #18
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <USB_HC_Halt+0x3a>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d16c      	bne.n	80071c8 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	440a      	add	r2, r1
 8007104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800710c:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d143      	bne.n	80071a2 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	4413      	add	r3, r2
 8007122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	0151      	lsls	r1, r2, #5
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	440a      	add	r2, r1
 8007130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007138:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	440a      	add	r2, r1
 8007150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007158:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	440a      	add	r2, r1
 8007170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007178:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	3301      	adds	r3, #1
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007186:	d81d      	bhi.n	80071c4 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	4413      	add	r3, r2
 8007190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800719a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800719e:	d0ec      	beq.n	800717a <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071a0:	e080      	b.n	80072a4 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071c0:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071c2:	e06f      	b.n	80072a4 <USB_HC_Halt+0x1f0>
          break;
 80071c4:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071c6:	e06d      	b.n	80072a4 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d143      	bne.n	8007280 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	440a      	add	r2, r1
 800720e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007216:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	4413      	add	r3, r2
 8007220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	440a      	add	r2, r1
 800722e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007236:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	4413      	add	r3, r2
 8007240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	440a      	add	r2, r1
 800724e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007256:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	3301      	adds	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007264:	d81d      	bhi.n	80072a2 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4413      	add	r3, r2
 800726e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800727c:	d0ec      	beq.n	8007258 <USB_HC_Halt+0x1a4>
 800727e:	e011      	b.n	80072a4 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	0151      	lsls	r1, r2, #5
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	440a      	add	r2, r1
 8007296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800729a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	e000      	b.n	80072a4 <USB_HC_Halt+0x1f0>
          break;
 80072a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	4603      	mov	r3, r0
 80072ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072c4:	2b84      	cmp	r3, #132	; 0x84
 80072c6:	d005      	beq.n	80072d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80072c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	3303      	adds	r3, #3
 80072d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80072e6:	f000 fcb7 	bl	8007c58 <vTaskStartScheduler>
  
  return osOK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80072f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f2:	b089      	sub	sp, #36	; 0x24
 80072f4:	af04      	add	r7, sp, #16
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d020      	beq.n	8007344 <osThreadCreate+0x54>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01c      	beq.n	8007344 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685c      	ldr	r4, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681d      	ldr	r5, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691e      	ldr	r6, [r3, #16]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff ffc8 	bl	80072b2 <makeFreeRtosPriority>
 8007322:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800732c:	9202      	str	r2, [sp, #8]
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	9100      	str	r1, [sp, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	4632      	mov	r2, r6
 8007336:	4629      	mov	r1, r5
 8007338:	4620      	mov	r0, r4
 800733a:	f000 fa3c 	bl	80077b6 <xTaskCreateStatic>
 800733e:	4603      	mov	r3, r0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e01c      	b.n	800737e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685c      	ldr	r4, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007350:	b29e      	uxth	r6, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff ffaa 	bl	80072b2 <makeFreeRtosPriority>
 800735e:	4602      	mov	r2, r0
 8007360:	f107 030c 	add.w	r3, r7, #12
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	9200      	str	r2, [sp, #0]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	4632      	mov	r2, r6
 800736c:	4629      	mov	r1, r5
 800736e:	4620      	mov	r0, r4
 8007370:	f000 fa7b 	bl	800786a <xTaskCreate>
 8007374:	4603      	mov	r3, r0
 8007376:	2b01      	cmp	r3, #1
 8007378:	d001      	beq.n	800737e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800737a:	2300      	movs	r3, #0
 800737c:	e000      	b.n	8007380 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800737e:	68fb      	ldr	r3, [r7, #12]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007388 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <osDelay+0x16>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	e000      	b.n	80073a0 <osDelay+0x18>
 800739e:	2301      	movs	r3, #1
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fc25 	bl	8007bf0 <vTaskDelay>
  
  return osOK;
 80073a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f103 0208 	add.w	r2, r3, #8
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f103 0208 	add.w	r2, r3, #8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 0208 	add.w	r2, r3, #8
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d103      	bne.n	8007472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e00c      	b.n	800748c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3308      	adds	r3, #8
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e002      	b.n	8007480 <vListInsert+0x2e>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	d2f6      	bcs.n	800747a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6892      	ldr	r2, [r2, #8]
 80074da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6852      	ldr	r2, [r2, #4]
 80074e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d103      	bne.n	80074f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	1e5a      	subs	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	e7fe      	b.n	800753e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007540:	f001 f864 	bl	800860c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	68f9      	ldr	r1, [r7, #12]
 800754e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	3b01      	subs	r3, #1
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	441a      	add	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	22ff      	movs	r2, #255	; 0xff
 8007584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	22ff      	movs	r2, #255	; 0xff
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d114      	bne.n	80075c0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01a      	beq.n	80075d4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3310      	adds	r3, #16
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fd72 	bl	800808c <xTaskRemoveFromEventList>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d012      	beq.n	80075d4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <xQueueGenericReset+0xcc>)
 80075b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	e009      	b.n	80075d4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3310      	adds	r3, #16
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fef3 	bl	80073b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3324      	adds	r3, #36	; 0x24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff feee 	bl	80073b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075d4:	f001 f848 	bl	8008668 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075d8:	2301      	movs	r3, #1
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d109      	bne.n	8007610 <xQueueGenericCreate+0x28>
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	e7fe      	b.n	800760e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d102      	bne.n	800761c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007616:	2300      	movs	r3, #0
 8007618:	61fb      	str	r3, [r7, #28]
 800761a:	e004      	b.n	8007626 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	fb02 f303 	mul.w	r3, r2, r3
 8007624:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	3348      	adds	r3, #72	; 0x48
 800762a:	4618      	mov	r0, r3
 800762c:	f001 f908 	bl	8008840 <pvPortMalloc>
 8007630:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d011      	beq.n	800765c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	3348      	adds	r3, #72	; 0x48
 8007640:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800764a:	79fa      	ldrb	r2, [r7, #7]
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4613      	mov	r3, r2
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 f805 	bl	8007666 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800765c:	69bb      	ldr	r3, [r7, #24]
	}
 800765e:	4618      	mov	r0, r3
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	e002      	b.n	8007688 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007694:	2101      	movs	r1, #1
 8007696:	69b8      	ldr	r0, [r7, #24]
 8007698:	f7ff ff3e 	bl	8007518 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08e      	sub	sp, #56	; 0x38
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d109      	bne.n	80076cc <xQueueGiveFromISR+0x28>
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	623b      	str	r3, [r7, #32]
 80076ca:	e7fe      	b.n	80076ca <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d009      	beq.n	80076e8 <xQueueGiveFromISR+0x44>
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	e7fe      	b.n	80076e6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d103      	bne.n	80076f8 <xQueueGiveFromISR+0x54>
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <xQueueGiveFromISR+0x58>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <xQueueGiveFromISR+0x5a>
 80076fc:	2300      	movs	r3, #0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <xQueueGiveFromISR+0x72>
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	e7fe      	b.n	8007714 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007716:	f001 f855 	bl	80087c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800771a:	f3ef 8211 	mrs	r2, BASEPRI
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	617a      	str	r2, [r7, #20]
 8007730:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007732:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007734:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007742:	429a      	cmp	r2, r3
 8007744:	d22b      	bcs.n	800779e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800774c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d112      	bne.n	8007788 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	2b00      	cmp	r3, #0
 8007768:	d016      	beq.n	8007798 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	3324      	adds	r3, #36	; 0x24
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fc8c 	bl	800808c <xTaskRemoveFromEventList>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00e      	beq.n	8007798 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00b      	beq.n	8007798 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2201      	movs	r2, #1
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	e007      	b.n	8007798 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800778c:	3301      	adds	r3, #1
 800778e:	b2db      	uxtb	r3, r3
 8007790:	b25a      	sxtb	r2, r3
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007798:	2301      	movs	r3, #1
 800779a:	637b      	str	r3, [r7, #52]	; 0x34
 800779c:	e001      	b.n	80077a2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3738      	adds	r7, #56	; 0x38
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b08e      	sub	sp, #56	; 0x38
 80077ba:	af04      	add	r7, sp, #16
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <xTaskCreateStatic+0x28>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	623b      	str	r3, [r7, #32]
 80077dc:	e7fe      	b.n	80077dc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <xTaskCreateStatic+0x42>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	61fb      	str	r3, [r7, #28]
 80077f6:	e7fe      	b.n	80077f6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077f8:	2354      	movs	r3, #84	; 0x54
 80077fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2b54      	cmp	r3, #84	; 0x54
 8007800:	d009      	beq.n	8007816 <xTaskCreateStatic+0x60>
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	e7fe      	b.n	8007814 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007816:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01e      	beq.n	800785c <xTaskCreateStatic+0xa6>
 800781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01b      	beq.n	800785c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800782c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2202      	movs	r2, #2
 8007832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007836:	2300      	movs	r3, #0
 8007838:	9303      	str	r3, [sp, #12]
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	9302      	str	r3, [sp, #8]
 800783e:	f107 0314 	add.w	r3, r7, #20
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 f850 	bl	80078f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007856:	f000 f8d3 	bl	8007a00 <prvAddNewTaskToReadyList>
 800785a:	e001      	b.n	8007860 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007860:	697b      	ldr	r3, [r7, #20]
	}
 8007862:	4618      	mov	r0, r3
 8007864:	3728      	adds	r7, #40	; 0x28
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800786a:	b580      	push	{r7, lr}
 800786c:	b08c      	sub	sp, #48	; 0x30
 800786e:	af04      	add	r7, sp, #16
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	603b      	str	r3, [r7, #0]
 8007876:	4613      	mov	r3, r2
 8007878:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4618      	mov	r0, r3
 8007880:	f000 ffde 	bl	8008840 <pvPortMalloc>
 8007884:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800788c:	2054      	movs	r0, #84	; 0x54
 800788e:	f000 ffd7 	bl	8008840 <pvPortMalloc>
 8007892:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	631a      	str	r2, [r3, #48]	; 0x30
 80078a0:	e005      	b.n	80078ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078a2:	6978      	ldr	r0, [r7, #20]
 80078a4:	f001 f88e 	bl	80089c4 <vPortFree>
 80078a8:	e001      	b.n	80078ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d017      	beq.n	80078e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	2300      	movs	r3, #0
 80078c0:	9303      	str	r3, [sp, #12]
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	9302      	str	r3, [sp, #8]
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 f80e 	bl	80078f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078d8:	69f8      	ldr	r0, [r7, #28]
 80078da:	f000 f891 	bl	8007a00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078de:	2301      	movs	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e002      	b.n	80078ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295
 80078e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078ea:	69bb      	ldr	r3, [r7, #24]
	}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800790c:	3b01      	subs	r3, #1
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	f023 0307 	bic.w	r3, r3, #7
 800791a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <prvInitialiseNewTask+0x46>
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e7fe      	b.n	8007938 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01f      	beq.n	8007980 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007940:	2300      	movs	r3, #0
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	e012      	b.n	800796c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	4413      	add	r3, r2
 800794c:	7819      	ldrb	r1, [r3, #0]
 800794e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	4413      	add	r3, r2
 8007954:	3334      	adds	r3, #52	; 0x34
 8007956:	460a      	mov	r2, r1
 8007958:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d006      	beq.n	8007974 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	3301      	adds	r3, #1
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d9e9      	bls.n	8007946 <prvInitialiseNewTask+0x52>
 8007972:	e000      	b.n	8007976 <prvInitialiseNewTask+0x82>
			{
				break;
 8007974:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800797e:	e003      	b.n	8007988 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	2b06      	cmp	r3, #6
 800798c:	d901      	bls.n	8007992 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800798e:	2306      	movs	r3, #6
 8007990:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800799c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2200      	movs	r2, #0
 80079a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	3304      	adds	r3, #4
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff fd21 	bl	80073f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	3318      	adds	r3, #24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff fd1c 	bl	80073f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	f1c3 0207 	rsb	r2, r3, #7
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	2200      	movs	r2, #0
 80079d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	69b8      	ldr	r0, [r7, #24]
 80079e2:	f000 fced 	bl	80083c0 <pxPortInitialiseStack>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079f8:	bf00      	nop
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a08:	f000 fe00 	bl	800860c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a0c:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <prvAddNewTaskToReadyList+0xb8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3301      	adds	r3, #1
 8007a12:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <prvAddNewTaskToReadyList+0xb8>)
 8007a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <prvAddNewTaskToReadyList+0xbc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d109      	bne.n	8007a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a1e:	4a27      	ldr	r2, [pc, #156]	; (8007abc <prvAddNewTaskToReadyList+0xbc>)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <prvAddNewTaskToReadyList+0xb8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d110      	bne.n	8007a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a2c:	f000 fba8 	bl	8008180 <prvInitialiseTaskLists>
 8007a30:	e00d      	b.n	8007a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a32:	4b23      	ldr	r3, [pc, #140]	; (8007ac0 <prvAddNewTaskToReadyList+0xc0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a3a:	4b20      	ldr	r3, [pc, #128]	; (8007abc <prvAddNewTaskToReadyList+0xbc>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d802      	bhi.n	8007a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a48:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <prvAddNewTaskToReadyList+0xbc>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <prvAddNewTaskToReadyList+0xc4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a1b      	ldr	r2, [pc, #108]	; (8007ac4 <prvAddNewTaskToReadyList+0xc4>)
 8007a56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	4b19      	ldr	r3, [pc, #100]	; (8007ac8 <prvAddNewTaskToReadyList+0xc8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <prvAddNewTaskToReadyList+0xc8>)
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4a15      	ldr	r2, [pc, #84]	; (8007acc <prvAddNewTaskToReadyList+0xcc>)
 8007a78:	441a      	add	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f7ff fcc2 	bl	800740a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a86:	f000 fdef 	bl	8008668 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ac0 <prvAddNewTaskToReadyList+0xc0>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00e      	beq.n	8007ab0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a92:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <prvAddNewTaskToReadyList+0xbc>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d207      	bcs.n	8007ab0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <prvAddNewTaskToReadyList+0xd0>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200003ec 	.word	0x200003ec
 8007abc:	200002ec 	.word	0x200002ec
 8007ac0:	200003f8 	.word	0x200003f8
 8007ac4:	20000408 	.word	0x20000408
 8007ac8:	200003f4 	.word	0x200003f4
 8007acc:	200002f0 	.word	0x200002f0
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007adc:	f000 fd96 	bl	800860c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <vTaskDelete+0x18>
 8007ae6:	4b38      	ldr	r3, [pc, #224]	; (8007bc8 <vTaskDelete+0xf4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	e000      	b.n	8007aee <vTaskDelete+0x1a>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fce5 	bl	80074c4 <uxListRemove>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d115      	bne.n	8007b2c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b04:	4931      	ldr	r1, [pc, #196]	; (8007bcc <vTaskDelete+0xf8>)
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10a      	bne.n	8007b2c <vTaskDelete+0x58>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	43da      	mvns	r2, r3
 8007b22:	4b2b      	ldr	r3, [pc, #172]	; (8007bd0 <vTaskDelete+0xfc>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4013      	ands	r3, r2
 8007b28:	4a29      	ldr	r2, [pc, #164]	; (8007bd0 <vTaskDelete+0xfc>)
 8007b2a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3318      	adds	r3, #24
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fcc3 	bl	80074c4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007b3e:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <vTaskDelete+0x100>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	4a23      	ldr	r2, [pc, #140]	; (8007bd4 <vTaskDelete+0x100>)
 8007b46:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007b48:	4b1f      	ldr	r3, [pc, #124]	; (8007bc8 <vTaskDelete+0xf4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d10b      	bne.n	8007b6a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4619      	mov	r1, r3
 8007b58:	481f      	ldr	r0, [pc, #124]	; (8007bd8 <vTaskDelete+0x104>)
 8007b5a:	f7ff fc56 	bl	800740a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007b5e:	4b1f      	ldr	r3, [pc, #124]	; (8007bdc <vTaskDelete+0x108>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <vTaskDelete+0x108>)
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	e009      	b.n	8007b7e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007b6a:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <vTaskDelete+0x10c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	4a1b      	ldr	r2, [pc, #108]	; (8007be0 <vTaskDelete+0x10c>)
 8007b72:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fb6f 	bl	8008258 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007b7a:	f000 fb9b 	bl	80082b4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007b7e:	f000 fd73 	bl	8008668 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007b82:	4b18      	ldr	r3, [pc, #96]	; (8007be4 <vTaskDelete+0x110>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01a      	beq.n	8007bc0 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <vTaskDelete+0xf4>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d115      	bne.n	8007bc0 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <vTaskDelete+0x114>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d009      	beq.n	8007bb0 <vTaskDelete+0xdc>
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	e7fe      	b.n	8007bae <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <vTaskDelete+0x118>)
 8007bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	200002ec 	.word	0x200002ec
 8007bcc:	200002f0 	.word	0x200002f0
 8007bd0:	200003f4 	.word	0x200003f4
 8007bd4:	20000408 	.word	0x20000408
 8007bd8:	200003c0 	.word	0x200003c0
 8007bdc:	200003d4 	.word	0x200003d4
 8007be0:	200003ec 	.word	0x200003ec
 8007be4:	200003f8 	.word	0x200003f8
 8007be8:	20000414 	.word	0x20000414
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d016      	beq.n	8007c30 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c02:	4b13      	ldr	r3, [pc, #76]	; (8007c50 <vTaskDelay+0x60>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <vTaskDelay+0x2e>
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60bb      	str	r3, [r7, #8]
 8007c1c:	e7fe      	b.n	8007c1c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007c1e:	f000 f879 	bl	8007d14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c22:	2100      	movs	r1, #0
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fb65 	bl	80082f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c2a:	f000 f881 	bl	8007d30 <xTaskResumeAll>
 8007c2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d107      	bne.n	8007c46 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <vTaskDelay+0x64>)
 8007c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000414 	.word	0x20000414
 8007c54:	e000ed04 	.word	0xe000ed04

08007c58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c66:	463a      	mov	r2, r7
 8007c68:	1d39      	adds	r1, r7, #4
 8007c6a:	f107 0308 	add.w	r3, r7, #8
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7f8 ff78 	bl	8000b64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	9202      	str	r2, [sp, #8]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	2300      	movs	r3, #0
 8007c84:	460a      	mov	r2, r1
 8007c86:	491d      	ldr	r1, [pc, #116]	; (8007cfc <vTaskStartScheduler+0xa4>)
 8007c88:	481d      	ldr	r0, [pc, #116]	; (8007d00 <vTaskStartScheduler+0xa8>)
 8007c8a:	f7ff fd94 	bl	80077b6 <xTaskCreateStatic>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	4b1c      	ldr	r3, [pc, #112]	; (8007d04 <vTaskStartScheduler+0xac>)
 8007c92:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c94:	4b1b      	ldr	r3, [pc, #108]	; (8007d04 <vTaskStartScheduler+0xac>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	e001      	b.n	8007ca6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d115      	bne.n	8007cd8 <vTaskStartScheduler+0x80>
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cbe:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <vTaskStartScheduler+0xb0>)
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cc6:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <vTaskStartScheduler+0xb4>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ccc:	4b10      	ldr	r3, [pc, #64]	; (8007d10 <vTaskStartScheduler+0xb8>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cd2:	f000 fbfd 	bl	80084d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cd6:	e00d      	b.n	8007cf4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d109      	bne.n	8007cf4 <vTaskStartScheduler+0x9c>
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	e7fe      	b.n	8007cf2 <vTaskStartScheduler+0x9a>
}
 8007cf4:	bf00      	nop
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	08009c28 	.word	0x08009c28
 8007d00:	08008151 	.word	0x08008151
 8007d04:	20000410 	.word	0x20000410
 8007d08:	2000040c 	.word	0x2000040c
 8007d0c:	200003f8 	.word	0x200003f8
 8007d10:	200003f0 	.word	0x200003f0

08007d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d18:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <vTaskSuspendAll+0x18>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	4a03      	ldr	r2, [pc, #12]	; (8007d2c <vTaskSuspendAll+0x18>)
 8007d20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007d22:	bf00      	nop
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	20000414 	.word	0x20000414

08007d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d3e:	4b41      	ldr	r3, [pc, #260]	; (8007e44 <xTaskResumeAll+0x114>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d109      	bne.n	8007d5a <xTaskResumeAll+0x2a>
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	e7fe      	b.n	8007d58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d5a:	f000 fc57 	bl	800860c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d5e:	4b39      	ldr	r3, [pc, #228]	; (8007e44 <xTaskResumeAll+0x114>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	4a37      	ldr	r2, [pc, #220]	; (8007e44 <xTaskResumeAll+0x114>)
 8007d66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d68:	4b36      	ldr	r3, [pc, #216]	; (8007e44 <xTaskResumeAll+0x114>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d161      	bne.n	8007e34 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d70:	4b35      	ldr	r3, [pc, #212]	; (8007e48 <xTaskResumeAll+0x118>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d05d      	beq.n	8007e34 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d78:	e02e      	b.n	8007dd8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d7a:	4b34      	ldr	r3, [pc, #208]	; (8007e4c <xTaskResumeAll+0x11c>)
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3318      	adds	r3, #24
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fb9c 	bl	80074c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff fb97 	bl	80074c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	409a      	lsls	r2, r3
 8007d9e:	4b2c      	ldr	r3, [pc, #176]	; (8007e50 <xTaskResumeAll+0x120>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	4a2a      	ldr	r2, [pc, #168]	; (8007e50 <xTaskResumeAll+0x120>)
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4a27      	ldr	r2, [pc, #156]	; (8007e54 <xTaskResumeAll+0x124>)
 8007db6:	441a      	add	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f7ff fb23 	bl	800740a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <xTaskResumeAll+0x128>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d302      	bcc.n	8007dd8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007dd2:	4b22      	ldr	r3, [pc, #136]	; (8007e5c <xTaskResumeAll+0x12c>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <xTaskResumeAll+0x11c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1cc      	bne.n	8007d7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007de6:	f000 fa65 	bl	80082b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007dea:	4b1d      	ldr	r3, [pc, #116]	; (8007e60 <xTaskResumeAll+0x130>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d010      	beq.n	8007e18 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007df6:	f000 f837 	bl	8007e68 <xTaskIncrementTick>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007e00:	4b16      	ldr	r3, [pc, #88]	; (8007e5c <xTaskResumeAll+0x12c>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f1      	bne.n	8007df6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007e12:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <xTaskResumeAll+0x130>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e18:	4b10      	ldr	r3, [pc, #64]	; (8007e5c <xTaskResumeAll+0x12c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <xTaskResumeAll+0x134>)
 8007e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e34:	f000 fc18 	bl	8008668 <vPortExitCritical>

	return xAlreadyYielded;
 8007e38:	68bb      	ldr	r3, [r7, #8]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000414 	.word	0x20000414
 8007e48:	200003ec 	.word	0x200003ec
 8007e4c:	200003ac 	.word	0x200003ac
 8007e50:	200003f4 	.word	0x200003f4
 8007e54:	200002f0 	.word	0x200002f0
 8007e58:	200002ec 	.word	0x200002ec
 8007e5c:	20000400 	.word	0x20000400
 8007e60:	200003fc 	.word	0x200003fc
 8007e64:	e000ed04 	.word	0xe000ed04

08007e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b4e      	ldr	r3, [pc, #312]	; (8007fac <xTaskIncrementTick+0x144>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 8087 	bne.w	8007f8a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e7c:	4b4c      	ldr	r3, [pc, #304]	; (8007fb0 <xTaskIncrementTick+0x148>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e84:	4a4a      	ldr	r2, [pc, #296]	; (8007fb0 <xTaskIncrementTick+0x148>)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11f      	bne.n	8007ed0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e90:	4b48      	ldr	r3, [pc, #288]	; (8007fb4 <xTaskIncrementTick+0x14c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <xTaskIncrementTick+0x46>
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	e7fe      	b.n	8007eac <xTaskIncrementTick+0x44>
 8007eae:	4b41      	ldr	r3, [pc, #260]	; (8007fb4 <xTaskIncrementTick+0x14c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	4b40      	ldr	r3, [pc, #256]	; (8007fb8 <xTaskIncrementTick+0x150>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a3e      	ldr	r2, [pc, #248]	; (8007fb4 <xTaskIncrementTick+0x14c>)
 8007eba:	6013      	str	r3, [r2, #0]
 8007ebc:	4a3e      	ldr	r2, [pc, #248]	; (8007fb8 <xTaskIncrementTick+0x150>)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	4b3e      	ldr	r3, [pc, #248]	; (8007fbc <xTaskIncrementTick+0x154>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	4a3c      	ldr	r2, [pc, #240]	; (8007fbc <xTaskIncrementTick+0x154>)
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	f000 f9f2 	bl	80082b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ed0:	4b3b      	ldr	r3, [pc, #236]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d348      	bcc.n	8007f6c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eda:	4b36      	ldr	r3, [pc, #216]	; (8007fb4 <xTaskIncrementTick+0x14c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee4:	4b36      	ldr	r3, [pc, #216]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	601a      	str	r2, [r3, #0]
					break;
 8007eec:	e03e      	b.n	8007f6c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eee:	4b31      	ldr	r3, [pc, #196]	; (8007fb4 <xTaskIncrementTick+0x14c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d203      	bcs.n	8007f0e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f06:	4a2e      	ldr	r2, [pc, #184]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f0c:	e02e      	b.n	8007f6c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	3304      	adds	r3, #4
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff fad6 	bl	80074c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	3318      	adds	r3, #24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff facd 	bl	80074c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	2201      	movs	r2, #1
 8007f30:	409a      	lsls	r2, r3
 8007f32:	4b24      	ldr	r3, [pc, #144]	; (8007fc4 <xTaskIncrementTick+0x15c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	4a22      	ldr	r2, [pc, #136]	; (8007fc4 <xTaskIncrementTick+0x15c>)
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f40:	4613      	mov	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4a1f      	ldr	r2, [pc, #124]	; (8007fc8 <xTaskIncrementTick+0x160>)
 8007f4a:	441a      	add	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4619      	mov	r1, r3
 8007f52:	4610      	mov	r0, r2
 8007f54:	f7ff fa59 	bl	800740a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5c:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <xTaskIncrementTick+0x164>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d3b9      	bcc.n	8007eda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007f66:	2301      	movs	r3, #1
 8007f68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f6a:	e7b6      	b.n	8007eda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f6c:	4b17      	ldr	r3, [pc, #92]	; (8007fcc <xTaskIncrementTick+0x164>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f72:	4915      	ldr	r1, [pc, #84]	; (8007fc8 <xTaskIncrementTick+0x160>)
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d907      	bls.n	8007f94 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007f84:	2301      	movs	r3, #1
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	e004      	b.n	8007f94 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f8a:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <xTaskIncrementTick+0x168>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	4a0f      	ldr	r2, [pc, #60]	; (8007fd0 <xTaskIncrementTick+0x168>)
 8007f92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f94:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <xTaskIncrementTick+0x16c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007fa0:	697b      	ldr	r3, [r7, #20]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000414 	.word	0x20000414
 8007fb0:	200003f0 	.word	0x200003f0
 8007fb4:	200003a4 	.word	0x200003a4
 8007fb8:	200003a8 	.word	0x200003a8
 8007fbc:	20000404 	.word	0x20000404
 8007fc0:	2000040c 	.word	0x2000040c
 8007fc4:	200003f4 	.word	0x200003f4
 8007fc8:	200002f0 	.word	0x200002f0
 8007fcc:	200002ec 	.word	0x200002ec
 8007fd0:	200003fc 	.word	0x200003fc
 8007fd4:	20000400 	.word	0x20000400

08007fd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fde:	4b26      	ldr	r3, [pc, #152]	; (8008078 <vTaskSwitchContext+0xa0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fe6:	4b25      	ldr	r3, [pc, #148]	; (800807c <vTaskSwitchContext+0xa4>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fec:	e03e      	b.n	800806c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007fee:	4b23      	ldr	r3, [pc, #140]	; (800807c <vTaskSwitchContext+0xa4>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff4:	4b22      	ldr	r3, [pc, #136]	; (8008080 <vTaskSwitchContext+0xa8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	fab3 f383 	clz	r3, r3
 8008000:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	f1c3 031f 	rsb	r3, r3, #31
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	491e      	ldr	r1, [pc, #120]	; (8008084 <vTaskSwitchContext+0xac>)
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	440b      	add	r3, r1
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d109      	bne.n	8008032 <vTaskSwitchContext+0x5a>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
 8008030:	e7fe      	b.n	8008030 <vTaskSwitchContext+0x58>
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4a11      	ldr	r2, [pc, #68]	; (8008084 <vTaskSwitchContext+0xac>)
 800803e:	4413      	add	r3, r2
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	605a      	str	r2, [r3, #4]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	3308      	adds	r3, #8
 8008054:	429a      	cmp	r2, r3
 8008056:	d104      	bne.n	8008062 <vTaskSwitchContext+0x8a>
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	605a      	str	r2, [r3, #4]
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	4a07      	ldr	r2, [pc, #28]	; (8008088 <vTaskSwitchContext+0xb0>)
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	20000414 	.word	0x20000414
 800807c:	20000400 	.word	0x20000400
 8008080:	200003f4 	.word	0x200003f4
 8008084:	200002f0 	.word	0x200002f0
 8008088:	200002ec 	.word	0x200002ec

0800808c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d109      	bne.n	80080b6 <xTaskRemoveFromEventList+0x2a>
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e7fe      	b.n	80080b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	3318      	adds	r3, #24
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff fa02 	bl	80074c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c0:	4b1d      	ldr	r3, [pc, #116]	; (8008138 <xTaskRemoveFromEventList+0xac>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d11c      	bne.n	8008102 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff f9f9 	bl	80074c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	2201      	movs	r2, #1
 80080d8:	409a      	lsls	r2, r3
 80080da:	4b18      	ldr	r3, [pc, #96]	; (800813c <xTaskRemoveFromEventList+0xb0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4313      	orrs	r3, r2
 80080e0:	4a16      	ldr	r2, [pc, #88]	; (800813c <xTaskRemoveFromEventList+0xb0>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4a13      	ldr	r2, [pc, #76]	; (8008140 <xTaskRemoveFromEventList+0xb4>)
 80080f2:	441a      	add	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7ff f985 	bl	800740a <vListInsertEnd>
 8008100:	e005      	b.n	800810e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	3318      	adds	r3, #24
 8008106:	4619      	mov	r1, r3
 8008108:	480e      	ldr	r0, [pc, #56]	; (8008144 <xTaskRemoveFromEventList+0xb8>)
 800810a:	f7ff f97e 	bl	800740a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008112:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <xTaskRemoveFromEventList+0xbc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	429a      	cmp	r2, r3
 800811a:	d905      	bls.n	8008128 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008120:	4b0a      	ldr	r3, [pc, #40]	; (800814c <xTaskRemoveFromEventList+0xc0>)
 8008122:	2201      	movs	r2, #1
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	e001      	b.n	800812c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008128:	2300      	movs	r3, #0
 800812a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800812c:	697b      	ldr	r3, [r7, #20]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000414 	.word	0x20000414
 800813c:	200003f4 	.word	0x200003f4
 8008140:	200002f0 	.word	0x200002f0
 8008144:	200003ac 	.word	0x200003ac
 8008148:	200002ec 	.word	0x200002ec
 800814c:	20000400 	.word	0x20000400

08008150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008158:	f000 f852 	bl	8008200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800815c:	4b06      	ldr	r3, [pc, #24]	; (8008178 <prvIdleTask+0x28>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d9f9      	bls.n	8008158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008164:	4b05      	ldr	r3, [pc, #20]	; (800817c <prvIdleTask+0x2c>)
 8008166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008174:	e7f0      	b.n	8008158 <prvIdleTask+0x8>
 8008176:	bf00      	nop
 8008178:	200002f0 	.word	0x200002f0
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008186:	2300      	movs	r3, #0
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	e00c      	b.n	80081a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4a12      	ldr	r2, [pc, #72]	; (80081e0 <prvInitialiseTaskLists+0x60>)
 8008198:	4413      	add	r3, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff f908 	bl	80073b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3301      	adds	r3, #1
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b06      	cmp	r3, #6
 80081aa:	d9ef      	bls.n	800818c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081ac:	480d      	ldr	r0, [pc, #52]	; (80081e4 <prvInitialiseTaskLists+0x64>)
 80081ae:	f7ff f8ff 	bl	80073b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081b2:	480d      	ldr	r0, [pc, #52]	; (80081e8 <prvInitialiseTaskLists+0x68>)
 80081b4:	f7ff f8fc 	bl	80073b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081b8:	480c      	ldr	r0, [pc, #48]	; (80081ec <prvInitialiseTaskLists+0x6c>)
 80081ba:	f7ff f8f9 	bl	80073b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081be:	480c      	ldr	r0, [pc, #48]	; (80081f0 <prvInitialiseTaskLists+0x70>)
 80081c0:	f7ff f8f6 	bl	80073b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081c4:	480b      	ldr	r0, [pc, #44]	; (80081f4 <prvInitialiseTaskLists+0x74>)
 80081c6:	f7ff f8f3 	bl	80073b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ca:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <prvInitialiseTaskLists+0x78>)
 80081cc:	4a05      	ldr	r2, [pc, #20]	; (80081e4 <prvInitialiseTaskLists+0x64>)
 80081ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvInitialiseTaskLists+0x7c>)
 80081d2:	4a05      	ldr	r2, [pc, #20]	; (80081e8 <prvInitialiseTaskLists+0x68>)
 80081d4:	601a      	str	r2, [r3, #0]
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	200002f0 	.word	0x200002f0
 80081e4:	2000037c 	.word	0x2000037c
 80081e8:	20000390 	.word	0x20000390
 80081ec:	200003ac 	.word	0x200003ac
 80081f0:	200003c0 	.word	0x200003c0
 80081f4:	200003d8 	.word	0x200003d8
 80081f8:	200003a4 	.word	0x200003a4
 80081fc:	200003a8 	.word	0x200003a8

08008200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008206:	e019      	b.n	800823c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008208:	f000 fa00 	bl	800860c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800820c:	4b0f      	ldr	r3, [pc, #60]	; (800824c <prvCheckTasksWaitingTermination+0x4c>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3304      	adds	r3, #4
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff f953 	bl	80074c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <prvCheckTasksWaitingTermination+0x50>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3b01      	subs	r3, #1
 8008224:	4a0a      	ldr	r2, [pc, #40]	; (8008250 <prvCheckTasksWaitingTermination+0x50>)
 8008226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <prvCheckTasksWaitingTermination+0x54>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3b01      	subs	r3, #1
 800822e:	4a09      	ldr	r2, [pc, #36]	; (8008254 <prvCheckTasksWaitingTermination+0x54>)
 8008230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008232:	f000 fa19 	bl	8008668 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f80e 	bl	8008258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <prvCheckTasksWaitingTermination+0x54>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e1      	bne.n	8008208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	200003c0 	.word	0x200003c0
 8008250:	200003ec 	.word	0x200003ec
 8008254:	200003d4 	.word	0x200003d4

08008258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008266:	2b00      	cmp	r3, #0
 8008268:	d108      	bne.n	800827c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fba8 	bl	80089c4 <vPortFree>
				vPortFree( pxTCB );
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fba5 	bl	80089c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800827a:	e017      	b.n	80082ac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008282:	2b01      	cmp	r3, #1
 8008284:	d103      	bne.n	800828e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fb9c 	bl	80089c4 <vPortFree>
	}
 800828c:	e00e      	b.n	80082ac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008294:	2b02      	cmp	r3, #2
 8008296:	d009      	beq.n	80082ac <prvDeleteTCB+0x54>
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	e7fe      	b.n	80082aa <prvDeleteTCB+0x52>
	}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082ba:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <prvResetNextTaskUnblockTime+0x38>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d104      	bne.n	80082ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082c4:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <prvResetNextTaskUnblockTime+0x3c>)
 80082c6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082cc:	e008      	b.n	80082e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ce:	4b07      	ldr	r3, [pc, #28]	; (80082ec <prvResetNextTaskUnblockTime+0x38>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	4a04      	ldr	r2, [pc, #16]	; (80082f0 <prvResetNextTaskUnblockTime+0x3c>)
 80082de:	6013      	str	r3, [r2, #0]
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	200003a4 	.word	0x200003a4
 80082f0:	2000040c 	.word	0x2000040c

080082f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082fe:	4b29      	ldr	r3, [pc, #164]	; (80083a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008304:	4b28      	ldr	r3, [pc, #160]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3304      	adds	r3, #4
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff f8da 	bl	80074c4 <uxListRemove>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10b      	bne.n	800832e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008316:	4b24      	ldr	r3, [pc, #144]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	2201      	movs	r2, #1
 800831e:	fa02 f303 	lsl.w	r3, r2, r3
 8008322:	43da      	mvns	r2, r3
 8008324:	4b21      	ldr	r3, [pc, #132]	; (80083ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4013      	ands	r3, r2
 800832a:	4a20      	ldr	r2, [pc, #128]	; (80083ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800832c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d10a      	bne.n	800834c <prvAddCurrentTaskToDelayedList+0x58>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800833c:	4b1a      	ldr	r3, [pc, #104]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	481a      	ldr	r0, [pc, #104]	; (80083b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008346:	f7ff f860 	bl	800740a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800834a:	e026      	b.n	800839a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008354:	4b14      	ldr	r3, [pc, #80]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	429a      	cmp	r2, r3
 8008362:	d209      	bcs.n	8008378 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008364:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3304      	adds	r3, #4
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f7ff f86e 	bl	8007452 <vListInsert>
}
 8008376:	e010      	b.n	800839a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008378:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3304      	adds	r3, #4
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f7ff f864 	bl	8007452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	429a      	cmp	r2, r3
 8008392:	d202      	bcs.n	800839a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008394:	4a09      	ldr	r2, [pc, #36]	; (80083bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	6013      	str	r3, [r2, #0]
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	200003f0 	.word	0x200003f0
 80083a8:	200002ec 	.word	0x200002ec
 80083ac:	200003f4 	.word	0x200003f4
 80083b0:	200003d8 	.word	0x200003d8
 80083b4:	200003a8 	.word	0x200003a8
 80083b8:	200003a4 	.word	0x200003a4
 80083bc:	2000040c 	.word	0x2000040c

080083c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3b04      	subs	r3, #4
 80083d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3b04      	subs	r3, #4
 80083de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f023 0201 	bic.w	r2, r3, #1
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3b04      	subs	r3, #4
 80083ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083f0:	4a0c      	ldr	r2, [pc, #48]	; (8008424 <pxPortInitialiseStack+0x64>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3b14      	subs	r3, #20
 80083fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3b04      	subs	r3, #4
 8008406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f06f 0202 	mvn.w	r2, #2
 800840e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3b20      	subs	r3, #32
 8008414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008416:	68fb      	ldr	r3, [r7, #12]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	08008429 	.word	0x08008429

08008428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008432:	4b11      	ldr	r3, [pc, #68]	; (8008478 <prvTaskExitError+0x50>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d009      	beq.n	8008450 <prvTaskExitError+0x28>
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	e7fe      	b.n	800844e <prvTaskExitError+0x26>
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008462:	bf00      	nop
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0fc      	beq.n	8008464 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	2000000c 	.word	0x2000000c
 800847c:	00000000 	.word	0x00000000

08008480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <pxCurrentTCBConst2>)
 8008482:	6819      	ldr	r1, [r3, #0]
 8008484:	6808      	ldr	r0, [r1, #0]
 8008486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	f380 8809 	msr	PSP, r0
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f04f 0000 	mov.w	r0, #0
 8008496:	f380 8811 	msr	BASEPRI, r0
 800849a:	4770      	bx	lr
 800849c:	f3af 8000 	nop.w

080084a0 <pxCurrentTCBConst2>:
 80084a0:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop

080084a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084a8:	4808      	ldr	r0, [pc, #32]	; (80084cc <prvPortStartFirstTask+0x24>)
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	6800      	ldr	r0, [r0, #0]
 80084ae:	f380 8808 	msr	MSP, r0
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f380 8814 	msr	CONTROL, r0
 80084ba:	b662      	cpsie	i
 80084bc:	b661      	cpsie	f
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	df00      	svc	0
 80084c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084ca:	bf00      	nop
 80084cc:	e000ed08 	.word	0xe000ed08

080084d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084d6:	4b44      	ldr	r3, [pc, #272]	; (80085e8 <xPortStartScheduler+0x118>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a44      	ldr	r2, [pc, #272]	; (80085ec <xPortStartScheduler+0x11c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d109      	bne.n	80084f4 <xPortStartScheduler+0x24>
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	613b      	str	r3, [r7, #16]
 80084f2:	e7fe      	b.n	80084f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084f4:	4b3c      	ldr	r3, [pc, #240]	; (80085e8 <xPortStartScheduler+0x118>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a3d      	ldr	r2, [pc, #244]	; (80085f0 <xPortStartScheduler+0x120>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d109      	bne.n	8008512 <xPortStartScheduler+0x42>
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	e7fe      	b.n	8008510 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008512:	4b38      	ldr	r3, [pc, #224]	; (80085f4 <xPortStartScheduler+0x124>)
 8008514:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	22ff      	movs	r2, #255	; 0xff
 8008522:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	b2db      	uxtb	r3, r3
 8008530:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008534:	b2da      	uxtb	r2, r3
 8008536:	4b30      	ldr	r3, [pc, #192]	; (80085f8 <xPortStartScheduler+0x128>)
 8008538:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800853a:	4b30      	ldr	r3, [pc, #192]	; (80085fc <xPortStartScheduler+0x12c>)
 800853c:	2207      	movs	r2, #7
 800853e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008540:	e009      	b.n	8008556 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008542:	4b2e      	ldr	r3, [pc, #184]	; (80085fc <xPortStartScheduler+0x12c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3b01      	subs	r3, #1
 8008548:	4a2c      	ldr	r2, [pc, #176]	; (80085fc <xPortStartScheduler+0x12c>)
 800854a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	b2db      	uxtb	r3, r3
 8008554:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855e:	2b80      	cmp	r3, #128	; 0x80
 8008560:	d0ef      	beq.n	8008542 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008562:	4b26      	ldr	r3, [pc, #152]	; (80085fc <xPortStartScheduler+0x12c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f1c3 0307 	rsb	r3, r3, #7
 800856a:	2b04      	cmp	r3, #4
 800856c:	d009      	beq.n	8008582 <xPortStartScheduler+0xb2>
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	60bb      	str	r3, [r7, #8]
 8008580:	e7fe      	b.n	8008580 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008582:	4b1e      	ldr	r3, [pc, #120]	; (80085fc <xPortStartScheduler+0x12c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	4a1c      	ldr	r2, [pc, #112]	; (80085fc <xPortStartScheduler+0x12c>)
 800858a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800858c:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <xPortStartScheduler+0x12c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008594:	4a19      	ldr	r2, [pc, #100]	; (80085fc <xPortStartScheduler+0x12c>)
 8008596:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	b2da      	uxtb	r2, r3
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085a0:	4b17      	ldr	r3, [pc, #92]	; (8008600 <xPortStartScheduler+0x130>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a16      	ldr	r2, [pc, #88]	; (8008600 <xPortStartScheduler+0x130>)
 80085a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80085aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085ac:	4b14      	ldr	r3, [pc, #80]	; (8008600 <xPortStartScheduler+0x130>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a13      	ldr	r2, [pc, #76]	; (8008600 <xPortStartScheduler+0x130>)
 80085b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80085b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085b8:	f000 f8d6 	bl	8008768 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085bc:	4b11      	ldr	r3, [pc, #68]	; (8008604 <xPortStartScheduler+0x134>)
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085c2:	f000 f8f5 	bl	80087b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085c6:	4b10      	ldr	r3, [pc, #64]	; (8008608 <xPortStartScheduler+0x138>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a0f      	ldr	r2, [pc, #60]	; (8008608 <xPortStartScheduler+0x138>)
 80085cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80085d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085d2:	f7ff ff69 	bl	80084a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085d6:	f7ff fcff 	bl	8007fd8 <vTaskSwitchContext>
	prvTaskExitError();
 80085da:	f7ff ff25 	bl	8008428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	e000ed00 	.word	0xe000ed00
 80085ec:	410fc271 	.word	0x410fc271
 80085f0:	410fc270 	.word	0x410fc270
 80085f4:	e000e400 	.word	0xe000e400
 80085f8:	20000418 	.word	0x20000418
 80085fc:	2000041c 	.word	0x2000041c
 8008600:	e000ed20 	.word	0xe000ed20
 8008604:	2000000c 	.word	0x2000000c
 8008608:	e000ef34 	.word	0xe000ef34

0800860c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008624:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <vPortEnterCritical+0x54>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3301      	adds	r3, #1
 800862a:	4a0d      	ldr	r2, [pc, #52]	; (8008660 <vPortEnterCritical+0x54>)
 800862c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800862e:	4b0c      	ldr	r3, [pc, #48]	; (8008660 <vPortEnterCritical+0x54>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d10e      	bne.n	8008654 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008636:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <vPortEnterCritical+0x58>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d009      	beq.n	8008654 <vPortEnterCritical+0x48>
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	e7fe      	b.n	8008652 <vPortEnterCritical+0x46>
	}
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	2000000c 	.word	0x2000000c
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800866e:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <vPortExitCritical+0x4c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <vPortExitCritical+0x22>
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	607b      	str	r3, [r7, #4]
 8008688:	e7fe      	b.n	8008688 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800868a:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <vPortExitCritical+0x4c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3b01      	subs	r3, #1
 8008690:	4a08      	ldr	r2, [pc, #32]	; (80086b4 <vPortExitCritical+0x4c>)
 8008692:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008694:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <vPortExitCritical+0x4c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d104      	bne.n	80086a6 <vPortExitCritical+0x3e>
 800869c:	2300      	movs	r3, #0
 800869e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	2000000c 	.word	0x2000000c
	...

080086c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086c0:	f3ef 8009 	mrs	r0, PSP
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	4b15      	ldr	r3, [pc, #84]	; (8008720 <pxCurrentTCBConst>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	f01e 0f10 	tst.w	lr, #16
 80086d0:	bf08      	it	eq
 80086d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	6010      	str	r0, [r2, #0]
 80086dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086e4:	f380 8811 	msr	BASEPRI, r0
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f7ff fc72 	bl	8007fd8 <vTaskSwitchContext>
 80086f4:	f04f 0000 	mov.w	r0, #0
 80086f8:	f380 8811 	msr	BASEPRI, r0
 80086fc:	bc09      	pop	{r0, r3}
 80086fe:	6819      	ldr	r1, [r3, #0]
 8008700:	6808      	ldr	r0, [r1, #0]
 8008702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008706:	f01e 0f10 	tst.w	lr, #16
 800870a:	bf08      	it	eq
 800870c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008710:	f380 8809 	msr	PSP, r0
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	f3af 8000 	nop.w

08008720 <pxCurrentTCBConst>:
 8008720:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop

08008728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008740:	f7ff fb92 	bl	8007e68 <xTaskIncrementTick>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800874a:	4b06      	ldr	r3, [pc, #24]	; (8008764 <SysTick_Handler+0x3c>)
 800874c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	2300      	movs	r3, #0
 8008754:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800876c:	4b0b      	ldr	r3, [pc, #44]	; (800879c <vPortSetupTimerInterrupt+0x34>)
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008772:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <vPortSetupTimerInterrupt+0x38>)
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <vPortSetupTimerInterrupt+0x3c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a0a      	ldr	r2, [pc, #40]	; (80087a8 <vPortSetupTimerInterrupt+0x40>)
 800877e:	fba2 2303 	umull	r2, r3, r2, r3
 8008782:	099b      	lsrs	r3, r3, #6
 8008784:	4a09      	ldr	r2, [pc, #36]	; (80087ac <vPortSetupTimerInterrupt+0x44>)
 8008786:	3b01      	subs	r3, #1
 8008788:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800878a:	4b04      	ldr	r3, [pc, #16]	; (800879c <vPortSetupTimerInterrupt+0x34>)
 800878c:	2207      	movs	r2, #7
 800878e:	601a      	str	r2, [r3, #0]
}
 8008790:	bf00      	nop
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	e000e010 	.word	0xe000e010
 80087a0:	e000e018 	.word	0xe000e018
 80087a4:	20000000 	.word	0x20000000
 80087a8:	10624dd3 	.word	0x10624dd3
 80087ac:	e000e014 	.word	0xe000e014

080087b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80087c0 <vPortEnableVFP+0x10>
 80087b4:	6801      	ldr	r1, [r0, #0]
 80087b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80087ba:	6001      	str	r1, [r0, #0]
 80087bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087be:	bf00      	nop
 80087c0:	e000ed88 	.word	0xe000ed88

080087c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087ca:	f3ef 8305 	mrs	r3, IPSR
 80087ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b0f      	cmp	r3, #15
 80087d4:	d913      	bls.n	80087fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087d6:	4a16      	ldr	r2, [pc, #88]	; (8008830 <vPortValidateInterruptPriority+0x6c>)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087e0:	4b14      	ldr	r3, [pc, #80]	; (8008834 <vPortValidateInterruptPriority+0x70>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	7afa      	ldrb	r2, [r7, #11]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d209      	bcs.n	80087fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	607b      	str	r3, [r7, #4]
 80087fc:	e7fe      	b.n	80087fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087fe:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <vPortValidateInterruptPriority+0x74>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008806:	4b0d      	ldr	r3, [pc, #52]	; (800883c <vPortValidateInterruptPriority+0x78>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d909      	bls.n	8008822 <vPortValidateInterruptPriority+0x5e>
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	e7fe      	b.n	8008820 <vPortValidateInterruptPriority+0x5c>
	}
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	e000e3f0 	.word	0xe000e3f0
 8008834:	20000418 	.word	0x20000418
 8008838:	e000ed0c 	.word	0xe000ed0c
 800883c:	2000041c 	.word	0x2000041c

08008840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008848:	2300      	movs	r3, #0
 800884a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800884c:	f7ff fa62 	bl	8007d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008850:	4b57      	ldr	r3, [pc, #348]	; (80089b0 <pvPortMalloc+0x170>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008858:	f000 f90c 	bl	8008a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800885c:	4b55      	ldr	r3, [pc, #340]	; (80089b4 <pvPortMalloc+0x174>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4013      	ands	r3, r2
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 808c 	bne.w	8008982 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01c      	beq.n	80088aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008870:	2208      	movs	r2, #8
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	2b00      	cmp	r3, #0
 8008880:	d013      	beq.n	80088aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f023 0307 	bic.w	r3, r3, #7
 8008888:	3308      	adds	r3, #8
 800888a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f003 0307 	and.w	r3, r3, #7
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <pvPortMalloc+0x6a>
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e7fe      	b.n	80088a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d068      	beq.n	8008982 <pvPortMalloc+0x142>
 80088b0:	4b41      	ldr	r3, [pc, #260]	; (80089b8 <pvPortMalloc+0x178>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d863      	bhi.n	8008982 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088ba:	4b40      	ldr	r3, [pc, #256]	; (80089bc <pvPortMalloc+0x17c>)
 80088bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088be:	4b3f      	ldr	r3, [pc, #252]	; (80089bc <pvPortMalloc+0x17c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088c4:	e004      	b.n	80088d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d903      	bls.n	80088e2 <pvPortMalloc+0xa2>
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f1      	bne.n	80088c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088e2:	4b33      	ldr	r3, [pc, #204]	; (80089b0 <pvPortMalloc+0x170>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d04a      	beq.n	8008982 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2208      	movs	r2, #8
 80088f2:	4413      	add	r3, r2
 80088f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	1ad2      	subs	r2, r2, r3
 8008906:	2308      	movs	r3, #8
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	429a      	cmp	r2, r3
 800890c:	d91e      	bls.n	800894c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800890e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4413      	add	r3, r2
 8008914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <pvPortMalloc+0xf4>
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	e7fe      	b.n	8008932 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	1ad2      	subs	r2, r2, r3
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008946:	69b8      	ldr	r0, [r7, #24]
 8008948:	f000 f8f6 	bl	8008b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800894c:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <pvPortMalloc+0x178>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	4a18      	ldr	r2, [pc, #96]	; (80089b8 <pvPortMalloc+0x178>)
 8008958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800895a:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <pvPortMalloc+0x178>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4b18      	ldr	r3, [pc, #96]	; (80089c0 <pvPortMalloc+0x180>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d203      	bcs.n	800896e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008966:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <pvPortMalloc+0x178>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <pvPortMalloc+0x180>)
 800896c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	4b10      	ldr	r3, [pc, #64]	; (80089b4 <pvPortMalloc+0x174>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	431a      	orrs	r2, r3
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008982:	f7ff f9d5 	bl	8007d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <pvPortMalloc+0x164>
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e7fe      	b.n	80089a2 <pvPortMalloc+0x162>
	return pvReturn;
 80089a4:	69fb      	ldr	r3, [r7, #28]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3728      	adds	r7, #40	; 0x28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20004028 	.word	0x20004028
 80089b4:	20004034 	.word	0x20004034
 80089b8:	2000402c 	.word	0x2000402c
 80089bc:	20004020 	.word	0x20004020
 80089c0:	20004030 	.word	0x20004030

080089c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d046      	beq.n	8008a64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089d6:	2308      	movs	r3, #8
 80089d8:	425b      	negs	r3, r3
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	4413      	add	r3, r2
 80089de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	4b20      	ldr	r3, [pc, #128]	; (8008a6c <vPortFree+0xa8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4013      	ands	r3, r2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <vPortFree+0x42>
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e7fe      	b.n	8008a04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d009      	beq.n	8008a22 <vPortFree+0x5e>
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	e7fe      	b.n	8008a20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <vPortFree+0xa8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d019      	beq.n	8008a64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d115      	bne.n	8008a64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <vPortFree+0xa8>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	43db      	mvns	r3, r3
 8008a42:	401a      	ands	r2, r3
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a48:	f7ff f964 	bl	8007d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	685a      	ldr	r2, [r3, #4]
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <vPortFree+0xac>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4413      	add	r3, r2
 8008a56:	4a06      	ldr	r2, [pc, #24]	; (8008a70 <vPortFree+0xac>)
 8008a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a5a:	6938      	ldr	r0, [r7, #16]
 8008a5c:	f000 f86c 	bl	8008b38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a60:	f7ff f966 	bl	8007d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a64:	bf00      	nop
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20004034 	.word	0x20004034
 8008a70:	2000402c 	.word	0x2000402c

08008a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a80:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <prvHeapInit+0xac>)
 8008a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00c      	beq.n	8008aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3307      	adds	r3, #7
 8008a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0307 	bic.w	r3, r3, #7
 8008a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	4a1f      	ldr	r2, [pc, #124]	; (8008b20 <prvHeapInit+0xac>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008aac:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <prvHeapInit+0xb0>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ab2:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <prvHeapInit+0xb0>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	4413      	add	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0307 	bic.w	r3, r3, #7
 8008ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <prvHeapInit+0xb4>)
 8008ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <prvHeapInit+0xb4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2200      	movs	r2, #0
 8008adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ade:	4b12      	ldr	r3, [pc, #72]	; (8008b28 <prvHeapInit+0xb4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008af4:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <prvHeapInit+0xb4>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4a0a      	ldr	r2, [pc, #40]	; (8008b2c <prvHeapInit+0xb8>)
 8008b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <prvHeapInit+0xbc>)
 8008b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <prvHeapInit+0xc0>)
 8008b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b12:	601a      	str	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	20000420 	.word	0x20000420
 8008b24:	20004020 	.word	0x20004020
 8008b28:	20004028 	.word	0x20004028
 8008b2c:	20004030 	.word	0x20004030
 8008b30:	2000402c 	.word	0x2000402c
 8008b34:	20004034 	.word	0x20004034

08008b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b40:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <prvInsertBlockIntoFreeList+0xac>)
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e002      	b.n	8008b4c <prvInsertBlockIntoFreeList+0x14>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d8f7      	bhi.n	8008b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d108      	bne.n	8008b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	441a      	add	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	441a      	add	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d118      	bne.n	8008bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d00d      	beq.n	8008bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	e008      	b.n	8008bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvInsertBlockIntoFreeList+0xb0>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	e003      	b.n	8008bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d002      	beq.n	8008bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20004020 	.word	0x20004020
 8008be8:	20004028 	.word	0x20004028

08008bec <__errno>:
 8008bec:	4b01      	ldr	r3, [pc, #4]	; (8008bf4 <__errno+0x8>)
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	20000010 	.word	0x20000010

08008bf8 <__sflush_r>:
 8008bf8:	898a      	ldrh	r2, [r1, #12]
 8008bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfe:	4605      	mov	r5, r0
 8008c00:	0710      	lsls	r0, r2, #28
 8008c02:	460c      	mov	r4, r1
 8008c04:	d458      	bmi.n	8008cb8 <__sflush_r+0xc0>
 8008c06:	684b      	ldr	r3, [r1, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	dc05      	bgt.n	8008c18 <__sflush_r+0x20>
 8008c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	dc02      	bgt.n	8008c18 <__sflush_r+0x20>
 8008c12:	2000      	movs	r0, #0
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c1a:	2e00      	cmp	r6, #0
 8008c1c:	d0f9      	beq.n	8008c12 <__sflush_r+0x1a>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c24:	682f      	ldr	r7, [r5, #0]
 8008c26:	6a21      	ldr	r1, [r4, #32]
 8008c28:	602b      	str	r3, [r5, #0]
 8008c2a:	d032      	beq.n	8008c92 <__sflush_r+0x9a>
 8008c2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	075a      	lsls	r2, r3, #29
 8008c32:	d505      	bpl.n	8008c40 <__sflush_r+0x48>
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	1ac0      	subs	r0, r0, r3
 8008c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c3a:	b10b      	cbz	r3, 8008c40 <__sflush_r+0x48>
 8008c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c3e:	1ac0      	subs	r0, r0, r3
 8008c40:	2300      	movs	r3, #0
 8008c42:	4602      	mov	r2, r0
 8008c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c46:	6a21      	ldr	r1, [r4, #32]
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b0      	blx	r6
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	d106      	bne.n	8008c60 <__sflush_r+0x68>
 8008c52:	6829      	ldr	r1, [r5, #0]
 8008c54:	291d      	cmp	r1, #29
 8008c56:	d848      	bhi.n	8008cea <__sflush_r+0xf2>
 8008c58:	4a29      	ldr	r2, [pc, #164]	; (8008d00 <__sflush_r+0x108>)
 8008c5a:	40ca      	lsrs	r2, r1
 8008c5c:	07d6      	lsls	r6, r2, #31
 8008c5e:	d544      	bpl.n	8008cea <__sflush_r+0xf2>
 8008c60:	2200      	movs	r2, #0
 8008c62:	6062      	str	r2, [r4, #4]
 8008c64:	04d9      	lsls	r1, r3, #19
 8008c66:	6922      	ldr	r2, [r4, #16]
 8008c68:	6022      	str	r2, [r4, #0]
 8008c6a:	d504      	bpl.n	8008c76 <__sflush_r+0x7e>
 8008c6c:	1c42      	adds	r2, r0, #1
 8008c6e:	d101      	bne.n	8008c74 <__sflush_r+0x7c>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b903      	cbnz	r3, 8008c76 <__sflush_r+0x7e>
 8008c74:	6560      	str	r0, [r4, #84]	; 0x54
 8008c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c78:	602f      	str	r7, [r5, #0]
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d0c9      	beq.n	8008c12 <__sflush_r+0x1a>
 8008c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c82:	4299      	cmp	r1, r3
 8008c84:	d002      	beq.n	8008c8c <__sflush_r+0x94>
 8008c86:	4628      	mov	r0, r5
 8008c88:	f000 f95c 	bl	8008f44 <_free_r>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8008c90:	e7c0      	b.n	8008c14 <__sflush_r+0x1c>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b0      	blx	r6
 8008c98:	1c41      	adds	r1, r0, #1
 8008c9a:	d1c8      	bne.n	8008c2e <__sflush_r+0x36>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0c5      	beq.n	8008c2e <__sflush_r+0x36>
 8008ca2:	2b1d      	cmp	r3, #29
 8008ca4:	d001      	beq.n	8008caa <__sflush_r+0xb2>
 8008ca6:	2b16      	cmp	r3, #22
 8008ca8:	d101      	bne.n	8008cae <__sflush_r+0xb6>
 8008caa:	602f      	str	r7, [r5, #0]
 8008cac:	e7b1      	b.n	8008c12 <__sflush_r+0x1a>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	e7ad      	b.n	8008c14 <__sflush_r+0x1c>
 8008cb8:	690f      	ldr	r7, [r1, #16]
 8008cba:	2f00      	cmp	r7, #0
 8008cbc:	d0a9      	beq.n	8008c12 <__sflush_r+0x1a>
 8008cbe:	0793      	lsls	r3, r2, #30
 8008cc0:	680e      	ldr	r6, [r1, #0]
 8008cc2:	bf08      	it	eq
 8008cc4:	694b      	ldreq	r3, [r1, #20]
 8008cc6:	600f      	str	r7, [r1, #0]
 8008cc8:	bf18      	it	ne
 8008cca:	2300      	movne	r3, #0
 8008ccc:	eba6 0807 	sub.w	r8, r6, r7
 8008cd0:	608b      	str	r3, [r1, #8]
 8008cd2:	f1b8 0f00 	cmp.w	r8, #0
 8008cd6:	dd9c      	ble.n	8008c12 <__sflush_r+0x1a>
 8008cd8:	4643      	mov	r3, r8
 8008cda:	463a      	mov	r2, r7
 8008cdc:	6a21      	ldr	r1, [r4, #32]
 8008cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b0      	blx	r6
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	dc06      	bgt.n	8008cf6 <__sflush_r+0xfe>
 8008ce8:	89a3      	ldrh	r3, [r4, #12]
 8008cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf4:	e78e      	b.n	8008c14 <__sflush_r+0x1c>
 8008cf6:	4407      	add	r7, r0
 8008cf8:	eba8 0800 	sub.w	r8, r8, r0
 8008cfc:	e7e9      	b.n	8008cd2 <__sflush_r+0xda>
 8008cfe:	bf00      	nop
 8008d00:	20400001 	.word	0x20400001

08008d04 <_fflush_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	690b      	ldr	r3, [r1, #16]
 8008d08:	4605      	mov	r5, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	b1db      	cbz	r3, 8008d46 <_fflush_r+0x42>
 8008d0e:	b118      	cbz	r0, 8008d18 <_fflush_r+0x14>
 8008d10:	6983      	ldr	r3, [r0, #24]
 8008d12:	b90b      	cbnz	r3, 8008d18 <_fflush_r+0x14>
 8008d14:	f000 f860 	bl	8008dd8 <__sinit>
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <_fflush_r+0x48>)
 8008d1a:	429c      	cmp	r4, r3
 8008d1c:	d109      	bne.n	8008d32 <_fflush_r+0x2e>
 8008d1e:	686c      	ldr	r4, [r5, #4]
 8008d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d24:	b17b      	cbz	r3, 8008d46 <_fflush_r+0x42>
 8008d26:	4621      	mov	r1, r4
 8008d28:	4628      	mov	r0, r5
 8008d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2e:	f7ff bf63 	b.w	8008bf8 <__sflush_r>
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <_fflush_r+0x4c>)
 8008d34:	429c      	cmp	r4, r3
 8008d36:	d101      	bne.n	8008d3c <_fflush_r+0x38>
 8008d38:	68ac      	ldr	r4, [r5, #8]
 8008d3a:	e7f1      	b.n	8008d20 <_fflush_r+0x1c>
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <_fflush_r+0x50>)
 8008d3e:	429c      	cmp	r4, r3
 8008d40:	bf08      	it	eq
 8008d42:	68ec      	ldreq	r4, [r5, #12]
 8008d44:	e7ec      	b.n	8008d20 <_fflush_r+0x1c>
 8008d46:	2000      	movs	r0, #0
 8008d48:	bd38      	pop	{r3, r4, r5, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08009c68 	.word	0x08009c68
 8008d50:	08009c88 	.word	0x08009c88
 8008d54:	08009c48 	.word	0x08009c48

08008d58 <std>:
 8008d58:	2300      	movs	r3, #0
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d62:	6083      	str	r3, [r0, #8]
 8008d64:	8181      	strh	r1, [r0, #12]
 8008d66:	6643      	str	r3, [r0, #100]	; 0x64
 8008d68:	81c2      	strh	r2, [r0, #14]
 8008d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d6e:	6183      	str	r3, [r0, #24]
 8008d70:	4619      	mov	r1, r3
 8008d72:	2208      	movs	r2, #8
 8008d74:	305c      	adds	r0, #92	; 0x5c
 8008d76:	f000 f8dd 	bl	8008f34 <memset>
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <std+0x38>)
 8008d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d7e:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <std+0x3c>)
 8008d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d82:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <std+0x40>)
 8008d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <std+0x44>)
 8008d88:	6224      	str	r4, [r4, #32]
 8008d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	bf00      	nop
 8008d90:	080091ad 	.word	0x080091ad
 8008d94:	080091cf 	.word	0x080091cf
 8008d98:	08009207 	.word	0x08009207
 8008d9c:	0800922b 	.word	0x0800922b

08008da0 <_cleanup_r>:
 8008da0:	4901      	ldr	r1, [pc, #4]	; (8008da8 <_cleanup_r+0x8>)
 8008da2:	f000 b885 	b.w	8008eb0 <_fwalk_reent>
 8008da6:	bf00      	nop
 8008da8:	08008d05 	.word	0x08008d05

08008dac <__sfmoreglue>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	1e4a      	subs	r2, r1, #1
 8008db0:	2568      	movs	r5, #104	; 0x68
 8008db2:	4355      	muls	r5, r2
 8008db4:	460e      	mov	r6, r1
 8008db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dba:	f000 f911 	bl	8008fe0 <_malloc_r>
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	b140      	cbz	r0, 8008dd4 <__sfmoreglue+0x28>
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8008dc8:	300c      	adds	r0, #12
 8008dca:	60a0      	str	r0, [r4, #8]
 8008dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dd0:	f000 f8b0 	bl	8008f34 <memset>
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}

08008dd8 <__sinit>:
 8008dd8:	6983      	ldr	r3, [r0, #24]
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	4604      	mov	r4, r0
 8008dde:	bb33      	cbnz	r3, 8008e2e <__sinit+0x56>
 8008de0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008de4:	6503      	str	r3, [r0, #80]	; 0x50
 8008de6:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <__sinit+0x58>)
 8008de8:	4a12      	ldr	r2, [pc, #72]	; (8008e34 <__sinit+0x5c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6282      	str	r2, [r0, #40]	; 0x28
 8008dee:	4298      	cmp	r0, r3
 8008df0:	bf04      	itt	eq
 8008df2:	2301      	moveq	r3, #1
 8008df4:	6183      	streq	r3, [r0, #24]
 8008df6:	f000 f81f 	bl	8008e38 <__sfp>
 8008dfa:	6060      	str	r0, [r4, #4]
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 f81b 	bl	8008e38 <__sfp>
 8008e02:	60a0      	str	r0, [r4, #8]
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 f817 	bl	8008e38 <__sfp>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	60e0      	str	r0, [r4, #12]
 8008e0e:	2104      	movs	r1, #4
 8008e10:	6860      	ldr	r0, [r4, #4]
 8008e12:	f7ff ffa1 	bl	8008d58 <std>
 8008e16:	2201      	movs	r2, #1
 8008e18:	2109      	movs	r1, #9
 8008e1a:	68a0      	ldr	r0, [r4, #8]
 8008e1c:	f7ff ff9c 	bl	8008d58 <std>
 8008e20:	2202      	movs	r2, #2
 8008e22:	2112      	movs	r1, #18
 8008e24:	68e0      	ldr	r0, [r4, #12]
 8008e26:	f7ff ff97 	bl	8008d58 <std>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	61a3      	str	r3, [r4, #24]
 8008e2e:	bd10      	pop	{r4, pc}
 8008e30:	08009ca8 	.word	0x08009ca8
 8008e34:	08008da1 	.word	0x08008da1

08008e38 <__sfp>:
 8008e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <__sfp+0x70>)
 8008e3c:	681e      	ldr	r6, [r3, #0]
 8008e3e:	69b3      	ldr	r3, [r6, #24]
 8008e40:	4607      	mov	r7, r0
 8008e42:	b913      	cbnz	r3, 8008e4a <__sfp+0x12>
 8008e44:	4630      	mov	r0, r6
 8008e46:	f7ff ffc7 	bl	8008dd8 <__sinit>
 8008e4a:	3648      	adds	r6, #72	; 0x48
 8008e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	d503      	bpl.n	8008e5c <__sfp+0x24>
 8008e54:	6833      	ldr	r3, [r6, #0]
 8008e56:	b133      	cbz	r3, 8008e66 <__sfp+0x2e>
 8008e58:	6836      	ldr	r6, [r6, #0]
 8008e5a:	e7f7      	b.n	8008e4c <__sfp+0x14>
 8008e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e60:	b16d      	cbz	r5, 8008e7e <__sfp+0x46>
 8008e62:	3468      	adds	r4, #104	; 0x68
 8008e64:	e7f4      	b.n	8008e50 <__sfp+0x18>
 8008e66:	2104      	movs	r1, #4
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f7ff ff9f 	bl	8008dac <__sfmoreglue>
 8008e6e:	6030      	str	r0, [r6, #0]
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d1f1      	bne.n	8008e58 <__sfp+0x20>
 8008e74:	230c      	movs	r3, #12
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	4604      	mov	r4, r0
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7e:	4b0b      	ldr	r3, [pc, #44]	; (8008eac <__sfp+0x74>)
 8008e80:	6665      	str	r5, [r4, #100]	; 0x64
 8008e82:	e9c4 5500 	strd	r5, r5, [r4]
 8008e86:	60a5      	str	r5, [r4, #8]
 8008e88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008e8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008e90:	2208      	movs	r2, #8
 8008e92:	4629      	mov	r1, r5
 8008e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e98:	f000 f84c 	bl	8008f34 <memset>
 8008e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ea4:	e7e9      	b.n	8008e7a <__sfp+0x42>
 8008ea6:	bf00      	nop
 8008ea8:	08009ca8 	.word	0x08009ca8
 8008eac:	ffff0001 	.word	0xffff0001

08008eb0 <_fwalk_reent>:
 8008eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4689      	mov	r9, r1
 8008eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	b914      	cbnz	r4, 8008ec6 <_fwalk_reent+0x16>
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008eca:	3f01      	subs	r7, #1
 8008ecc:	d501      	bpl.n	8008ed2 <_fwalk_reent+0x22>
 8008ece:	6824      	ldr	r4, [r4, #0]
 8008ed0:	e7f5      	b.n	8008ebe <_fwalk_reent+0xe>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d907      	bls.n	8008ee8 <_fwalk_reent+0x38>
 8008ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008edc:	3301      	adds	r3, #1
 8008ede:	d003      	beq.n	8008ee8 <_fwalk_reent+0x38>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	47c8      	blx	r9
 8008ee6:	4306      	orrs	r6, r0
 8008ee8:	3568      	adds	r5, #104	; 0x68
 8008eea:	e7ee      	b.n	8008eca <_fwalk_reent+0x1a>

08008eec <__libc_init_array>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	4e0d      	ldr	r6, [pc, #52]	; (8008f24 <__libc_init_array+0x38>)
 8008ef0:	4c0d      	ldr	r4, [pc, #52]	; (8008f28 <__libc_init_array+0x3c>)
 8008ef2:	1ba4      	subs	r4, r4, r6
 8008ef4:	10a4      	asrs	r4, r4, #2
 8008ef6:	2500      	movs	r5, #0
 8008ef8:	42a5      	cmp	r5, r4
 8008efa:	d109      	bne.n	8008f10 <__libc_init_array+0x24>
 8008efc:	4e0b      	ldr	r6, [pc, #44]	; (8008f2c <__libc_init_array+0x40>)
 8008efe:	4c0c      	ldr	r4, [pc, #48]	; (8008f30 <__libc_init_array+0x44>)
 8008f00:	f000 fdee 	bl	8009ae0 <_init>
 8008f04:	1ba4      	subs	r4, r4, r6
 8008f06:	10a4      	asrs	r4, r4, #2
 8008f08:	2500      	movs	r5, #0
 8008f0a:	42a5      	cmp	r5, r4
 8008f0c:	d105      	bne.n	8008f1a <__libc_init_array+0x2e>
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f14:	4798      	blx	r3
 8008f16:	3501      	adds	r5, #1
 8008f18:	e7ee      	b.n	8008ef8 <__libc_init_array+0xc>
 8008f1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f1e:	4798      	blx	r3
 8008f20:	3501      	adds	r5, #1
 8008f22:	e7f2      	b.n	8008f0a <__libc_init_array+0x1e>
 8008f24:	08009ce8 	.word	0x08009ce8
 8008f28:	08009ce8 	.word	0x08009ce8
 8008f2c:	08009ce8 	.word	0x08009ce8
 8008f30:	08009cec 	.word	0x08009cec

08008f34 <memset>:
 8008f34:	4402      	add	r2, r0
 8008f36:	4603      	mov	r3, r0
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d100      	bne.n	8008f3e <memset+0xa>
 8008f3c:	4770      	bx	lr
 8008f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f42:	e7f9      	b.n	8008f38 <memset+0x4>

08008f44 <_free_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	2900      	cmp	r1, #0
 8008f4a:	d045      	beq.n	8008fd8 <_free_r+0x94>
 8008f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f50:	1f0c      	subs	r4, r1, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfb8      	it	lt
 8008f56:	18e4      	addlt	r4, r4, r3
 8008f58:	f000 fac4 	bl	80094e4 <__malloc_lock>
 8008f5c:	4a1f      	ldr	r2, [pc, #124]	; (8008fdc <_free_r+0x98>)
 8008f5e:	6813      	ldr	r3, [r2, #0]
 8008f60:	4610      	mov	r0, r2
 8008f62:	b933      	cbnz	r3, 8008f72 <_free_r+0x2e>
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	6014      	str	r4, [r2, #0]
 8008f68:	4628      	mov	r0, r5
 8008f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f6e:	f000 baba 	b.w	80094e6 <__malloc_unlock>
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	d90c      	bls.n	8008f90 <_free_r+0x4c>
 8008f76:	6821      	ldr	r1, [r4, #0]
 8008f78:	1862      	adds	r2, r4, r1
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	bf04      	itt	eq
 8008f7e:	681a      	ldreq	r2, [r3, #0]
 8008f80:	685b      	ldreq	r3, [r3, #4]
 8008f82:	6063      	str	r3, [r4, #4]
 8008f84:	bf04      	itt	eq
 8008f86:	1852      	addeq	r2, r2, r1
 8008f88:	6022      	streq	r2, [r4, #0]
 8008f8a:	6004      	str	r4, [r0, #0]
 8008f8c:	e7ec      	b.n	8008f68 <_free_r+0x24>
 8008f8e:	4613      	mov	r3, r2
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	b10a      	cbz	r2, 8008f98 <_free_r+0x54>
 8008f94:	42a2      	cmp	r2, r4
 8008f96:	d9fa      	bls.n	8008f8e <_free_r+0x4a>
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	1858      	adds	r0, r3, r1
 8008f9c:	42a0      	cmp	r0, r4
 8008f9e:	d10b      	bne.n	8008fb8 <_free_r+0x74>
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	4401      	add	r1, r0
 8008fa4:	1858      	adds	r0, r3, r1
 8008fa6:	4282      	cmp	r2, r0
 8008fa8:	6019      	str	r1, [r3, #0]
 8008faa:	d1dd      	bne.n	8008f68 <_free_r+0x24>
 8008fac:	6810      	ldr	r0, [r2, #0]
 8008fae:	6852      	ldr	r2, [r2, #4]
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	4401      	add	r1, r0
 8008fb4:	6019      	str	r1, [r3, #0]
 8008fb6:	e7d7      	b.n	8008f68 <_free_r+0x24>
 8008fb8:	d902      	bls.n	8008fc0 <_free_r+0x7c>
 8008fba:	230c      	movs	r3, #12
 8008fbc:	602b      	str	r3, [r5, #0]
 8008fbe:	e7d3      	b.n	8008f68 <_free_r+0x24>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	1821      	adds	r1, r4, r0
 8008fc4:	428a      	cmp	r2, r1
 8008fc6:	bf04      	itt	eq
 8008fc8:	6811      	ldreq	r1, [r2, #0]
 8008fca:	6852      	ldreq	r2, [r2, #4]
 8008fcc:	6062      	str	r2, [r4, #4]
 8008fce:	bf04      	itt	eq
 8008fd0:	1809      	addeq	r1, r1, r0
 8008fd2:	6021      	streq	r1, [r4, #0]
 8008fd4:	605c      	str	r4, [r3, #4]
 8008fd6:	e7c7      	b.n	8008f68 <_free_r+0x24>
 8008fd8:	bd38      	pop	{r3, r4, r5, pc}
 8008fda:	bf00      	nop
 8008fdc:	20004038 	.word	0x20004038

08008fe0 <_malloc_r>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	1ccd      	adds	r5, r1, #3
 8008fe4:	f025 0503 	bic.w	r5, r5, #3
 8008fe8:	3508      	adds	r5, #8
 8008fea:	2d0c      	cmp	r5, #12
 8008fec:	bf38      	it	cc
 8008fee:	250c      	movcc	r5, #12
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	db01      	blt.n	8008ffa <_malloc_r+0x1a>
 8008ff6:	42a9      	cmp	r1, r5
 8008ff8:	d903      	bls.n	8009002 <_malloc_r+0x22>
 8008ffa:	230c      	movs	r3, #12
 8008ffc:	6033      	str	r3, [r6, #0]
 8008ffe:	2000      	movs	r0, #0
 8009000:	bd70      	pop	{r4, r5, r6, pc}
 8009002:	f000 fa6f 	bl	80094e4 <__malloc_lock>
 8009006:	4a21      	ldr	r2, [pc, #132]	; (800908c <_malloc_r+0xac>)
 8009008:	6814      	ldr	r4, [r2, #0]
 800900a:	4621      	mov	r1, r4
 800900c:	b991      	cbnz	r1, 8009034 <_malloc_r+0x54>
 800900e:	4c20      	ldr	r4, [pc, #128]	; (8009090 <_malloc_r+0xb0>)
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	b91b      	cbnz	r3, 800901c <_malloc_r+0x3c>
 8009014:	4630      	mov	r0, r6
 8009016:	f000 f8b9 	bl	800918c <_sbrk_r>
 800901a:	6020      	str	r0, [r4, #0]
 800901c:	4629      	mov	r1, r5
 800901e:	4630      	mov	r0, r6
 8009020:	f000 f8b4 	bl	800918c <_sbrk_r>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d124      	bne.n	8009072 <_malloc_r+0x92>
 8009028:	230c      	movs	r3, #12
 800902a:	6033      	str	r3, [r6, #0]
 800902c:	4630      	mov	r0, r6
 800902e:	f000 fa5a 	bl	80094e6 <__malloc_unlock>
 8009032:	e7e4      	b.n	8008ffe <_malloc_r+0x1e>
 8009034:	680b      	ldr	r3, [r1, #0]
 8009036:	1b5b      	subs	r3, r3, r5
 8009038:	d418      	bmi.n	800906c <_malloc_r+0x8c>
 800903a:	2b0b      	cmp	r3, #11
 800903c:	d90f      	bls.n	800905e <_malloc_r+0x7e>
 800903e:	600b      	str	r3, [r1, #0]
 8009040:	50cd      	str	r5, [r1, r3]
 8009042:	18cc      	adds	r4, r1, r3
 8009044:	4630      	mov	r0, r6
 8009046:	f000 fa4e 	bl	80094e6 <__malloc_unlock>
 800904a:	f104 000b 	add.w	r0, r4, #11
 800904e:	1d23      	adds	r3, r4, #4
 8009050:	f020 0007 	bic.w	r0, r0, #7
 8009054:	1ac3      	subs	r3, r0, r3
 8009056:	d0d3      	beq.n	8009000 <_malloc_r+0x20>
 8009058:	425a      	negs	r2, r3
 800905a:	50e2      	str	r2, [r4, r3]
 800905c:	e7d0      	b.n	8009000 <_malloc_r+0x20>
 800905e:	428c      	cmp	r4, r1
 8009060:	684b      	ldr	r3, [r1, #4]
 8009062:	bf16      	itet	ne
 8009064:	6063      	strne	r3, [r4, #4]
 8009066:	6013      	streq	r3, [r2, #0]
 8009068:	460c      	movne	r4, r1
 800906a:	e7eb      	b.n	8009044 <_malloc_r+0x64>
 800906c:	460c      	mov	r4, r1
 800906e:	6849      	ldr	r1, [r1, #4]
 8009070:	e7cc      	b.n	800900c <_malloc_r+0x2c>
 8009072:	1cc4      	adds	r4, r0, #3
 8009074:	f024 0403 	bic.w	r4, r4, #3
 8009078:	42a0      	cmp	r0, r4
 800907a:	d005      	beq.n	8009088 <_malloc_r+0xa8>
 800907c:	1a21      	subs	r1, r4, r0
 800907e:	4630      	mov	r0, r6
 8009080:	f000 f884 	bl	800918c <_sbrk_r>
 8009084:	3001      	adds	r0, #1
 8009086:	d0cf      	beq.n	8009028 <_malloc_r+0x48>
 8009088:	6025      	str	r5, [r4, #0]
 800908a:	e7db      	b.n	8009044 <_malloc_r+0x64>
 800908c:	20004038 	.word	0x20004038
 8009090:	2000403c 	.word	0x2000403c

08009094 <iprintf>:
 8009094:	b40f      	push	{r0, r1, r2, r3}
 8009096:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <iprintf+0x2c>)
 8009098:	b513      	push	{r0, r1, r4, lr}
 800909a:	681c      	ldr	r4, [r3, #0]
 800909c:	b124      	cbz	r4, 80090a8 <iprintf+0x14>
 800909e:	69a3      	ldr	r3, [r4, #24]
 80090a0:	b913      	cbnz	r3, 80090a8 <iprintf+0x14>
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7ff fe98 	bl	8008dd8 <__sinit>
 80090a8:	ab05      	add	r3, sp, #20
 80090aa:	9a04      	ldr	r2, [sp, #16]
 80090ac:	68a1      	ldr	r1, [r4, #8]
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fa43 	bl	800953c <_vfiprintf_r>
 80090b6:	b002      	add	sp, #8
 80090b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090bc:	b004      	add	sp, #16
 80090be:	4770      	bx	lr
 80090c0:	20000010 	.word	0x20000010

080090c4 <_puts_r>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	460e      	mov	r6, r1
 80090c8:	4605      	mov	r5, r0
 80090ca:	b118      	cbz	r0, 80090d4 <_puts_r+0x10>
 80090cc:	6983      	ldr	r3, [r0, #24]
 80090ce:	b90b      	cbnz	r3, 80090d4 <_puts_r+0x10>
 80090d0:	f7ff fe82 	bl	8008dd8 <__sinit>
 80090d4:	69ab      	ldr	r3, [r5, #24]
 80090d6:	68ac      	ldr	r4, [r5, #8]
 80090d8:	b913      	cbnz	r3, 80090e0 <_puts_r+0x1c>
 80090da:	4628      	mov	r0, r5
 80090dc:	f7ff fe7c 	bl	8008dd8 <__sinit>
 80090e0:	4b23      	ldr	r3, [pc, #140]	; (8009170 <_puts_r+0xac>)
 80090e2:	429c      	cmp	r4, r3
 80090e4:	d117      	bne.n	8009116 <_puts_r+0x52>
 80090e6:	686c      	ldr	r4, [r5, #4]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	071b      	lsls	r3, r3, #28
 80090ec:	d51d      	bpl.n	800912a <_puts_r+0x66>
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	b1db      	cbz	r3, 800912a <_puts_r+0x66>
 80090f2:	3e01      	subs	r6, #1
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090fa:	3b01      	subs	r3, #1
 80090fc:	60a3      	str	r3, [r4, #8]
 80090fe:	b9e9      	cbnz	r1, 800913c <_puts_r+0x78>
 8009100:	2b00      	cmp	r3, #0
 8009102:	da2e      	bge.n	8009162 <_puts_r+0x9e>
 8009104:	4622      	mov	r2, r4
 8009106:	210a      	movs	r1, #10
 8009108:	4628      	mov	r0, r5
 800910a:	f000 f893 	bl	8009234 <__swbuf_r>
 800910e:	3001      	adds	r0, #1
 8009110:	d011      	beq.n	8009136 <_puts_r+0x72>
 8009112:	200a      	movs	r0, #10
 8009114:	e011      	b.n	800913a <_puts_r+0x76>
 8009116:	4b17      	ldr	r3, [pc, #92]	; (8009174 <_puts_r+0xb0>)
 8009118:	429c      	cmp	r4, r3
 800911a:	d101      	bne.n	8009120 <_puts_r+0x5c>
 800911c:	68ac      	ldr	r4, [r5, #8]
 800911e:	e7e3      	b.n	80090e8 <_puts_r+0x24>
 8009120:	4b15      	ldr	r3, [pc, #84]	; (8009178 <_puts_r+0xb4>)
 8009122:	429c      	cmp	r4, r3
 8009124:	bf08      	it	eq
 8009126:	68ec      	ldreq	r4, [r5, #12]
 8009128:	e7de      	b.n	80090e8 <_puts_r+0x24>
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f000 f8e5 	bl	80092fc <__swsetup_r>
 8009132:	2800      	cmp	r0, #0
 8009134:	d0dd      	beq.n	80090f2 <_puts_r+0x2e>
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	2b00      	cmp	r3, #0
 800913e:	da04      	bge.n	800914a <_puts_r+0x86>
 8009140:	69a2      	ldr	r2, [r4, #24]
 8009142:	429a      	cmp	r2, r3
 8009144:	dc06      	bgt.n	8009154 <_puts_r+0x90>
 8009146:	290a      	cmp	r1, #10
 8009148:	d004      	beq.n	8009154 <_puts_r+0x90>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	7019      	strb	r1, [r3, #0]
 8009152:	e7cf      	b.n	80090f4 <_puts_r+0x30>
 8009154:	4622      	mov	r2, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f86c 	bl	8009234 <__swbuf_r>
 800915c:	3001      	adds	r0, #1
 800915e:	d1c9      	bne.n	80090f4 <_puts_r+0x30>
 8009160:	e7e9      	b.n	8009136 <_puts_r+0x72>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	200a      	movs	r0, #10
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	7018      	strb	r0, [r3, #0]
 800916c:	e7e5      	b.n	800913a <_puts_r+0x76>
 800916e:	bf00      	nop
 8009170:	08009c68 	.word	0x08009c68
 8009174:	08009c88 	.word	0x08009c88
 8009178:	08009c48 	.word	0x08009c48

0800917c <puts>:
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <puts+0xc>)
 800917e:	4601      	mov	r1, r0
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f7ff bf9f 	b.w	80090c4 <_puts_r>
 8009186:	bf00      	nop
 8009188:	20000010 	.word	0x20000010

0800918c <_sbrk_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4c06      	ldr	r4, [pc, #24]	; (80091a8 <_sbrk_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4605      	mov	r5, r0
 8009194:	4608      	mov	r0, r1
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	f7f8 fa7c 	bl	8001694 <_sbrk>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_sbrk_r+0x1a>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_sbrk_r+0x1a>
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	200045b0 	.word	0x200045b0

080091ac <__sread>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	460c      	mov	r4, r1
 80091b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b4:	f000 fc60 	bl	8009a78 <_read_r>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	bfab      	itete	ge
 80091bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091be:	89a3      	ldrhlt	r3, [r4, #12]
 80091c0:	181b      	addge	r3, r3, r0
 80091c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091c6:	bfac      	ite	ge
 80091c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091ca:	81a3      	strhlt	r3, [r4, #12]
 80091cc:	bd10      	pop	{r4, pc}

080091ce <__swrite>:
 80091ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d2:	461f      	mov	r7, r3
 80091d4:	898b      	ldrh	r3, [r1, #12]
 80091d6:	05db      	lsls	r3, r3, #23
 80091d8:	4605      	mov	r5, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	4616      	mov	r6, r2
 80091de:	d505      	bpl.n	80091ec <__swrite+0x1e>
 80091e0:	2302      	movs	r3, #2
 80091e2:	2200      	movs	r2, #0
 80091e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e8:	f000 f906 	bl	80093f8 <_lseek_r>
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	4632      	mov	r2, r6
 80091fa:	463b      	mov	r3, r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	f000 b869 	b.w	80092d8 <_write_r>

08009206 <__sseek>:
 8009206:	b510      	push	{r4, lr}
 8009208:	460c      	mov	r4, r1
 800920a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920e:	f000 f8f3 	bl	80093f8 <_lseek_r>
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	bf15      	itete	ne
 8009218:	6560      	strne	r0, [r4, #84]	; 0x54
 800921a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800921e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009222:	81a3      	strheq	r3, [r4, #12]
 8009224:	bf18      	it	ne
 8009226:	81a3      	strhne	r3, [r4, #12]
 8009228:	bd10      	pop	{r4, pc}

0800922a <__sclose>:
 800922a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922e:	f000 b8d3 	b.w	80093d8 <_close_r>
	...

08009234 <__swbuf_r>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	460e      	mov	r6, r1
 8009238:	4614      	mov	r4, r2
 800923a:	4605      	mov	r5, r0
 800923c:	b118      	cbz	r0, 8009246 <__swbuf_r+0x12>
 800923e:	6983      	ldr	r3, [r0, #24]
 8009240:	b90b      	cbnz	r3, 8009246 <__swbuf_r+0x12>
 8009242:	f7ff fdc9 	bl	8008dd8 <__sinit>
 8009246:	4b21      	ldr	r3, [pc, #132]	; (80092cc <__swbuf_r+0x98>)
 8009248:	429c      	cmp	r4, r3
 800924a:	d12a      	bne.n	80092a2 <__swbuf_r+0x6e>
 800924c:	686c      	ldr	r4, [r5, #4]
 800924e:	69a3      	ldr	r3, [r4, #24]
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	89a3      	ldrh	r3, [r4, #12]
 8009254:	071a      	lsls	r2, r3, #28
 8009256:	d52e      	bpl.n	80092b6 <__swbuf_r+0x82>
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	b363      	cbz	r3, 80092b6 <__swbuf_r+0x82>
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	6820      	ldr	r0, [r4, #0]
 8009260:	1ac0      	subs	r0, r0, r3
 8009262:	6963      	ldr	r3, [r4, #20]
 8009264:	b2f6      	uxtb	r6, r6
 8009266:	4283      	cmp	r3, r0
 8009268:	4637      	mov	r7, r6
 800926a:	dc04      	bgt.n	8009276 <__swbuf_r+0x42>
 800926c:	4621      	mov	r1, r4
 800926e:	4628      	mov	r0, r5
 8009270:	f7ff fd48 	bl	8008d04 <_fflush_r>
 8009274:	bb28      	cbnz	r0, 80092c2 <__swbuf_r+0x8e>
 8009276:	68a3      	ldr	r3, [r4, #8]
 8009278:	3b01      	subs	r3, #1
 800927a:	60a3      	str	r3, [r4, #8]
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	6022      	str	r2, [r4, #0]
 8009282:	701e      	strb	r6, [r3, #0]
 8009284:	6963      	ldr	r3, [r4, #20]
 8009286:	3001      	adds	r0, #1
 8009288:	4283      	cmp	r3, r0
 800928a:	d004      	beq.n	8009296 <__swbuf_r+0x62>
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	07db      	lsls	r3, r3, #31
 8009290:	d519      	bpl.n	80092c6 <__swbuf_r+0x92>
 8009292:	2e0a      	cmp	r6, #10
 8009294:	d117      	bne.n	80092c6 <__swbuf_r+0x92>
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f7ff fd33 	bl	8008d04 <_fflush_r>
 800929e:	b190      	cbz	r0, 80092c6 <__swbuf_r+0x92>
 80092a0:	e00f      	b.n	80092c2 <__swbuf_r+0x8e>
 80092a2:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <__swbuf_r+0x9c>)
 80092a4:	429c      	cmp	r4, r3
 80092a6:	d101      	bne.n	80092ac <__swbuf_r+0x78>
 80092a8:	68ac      	ldr	r4, [r5, #8]
 80092aa:	e7d0      	b.n	800924e <__swbuf_r+0x1a>
 80092ac:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <__swbuf_r+0xa0>)
 80092ae:	429c      	cmp	r4, r3
 80092b0:	bf08      	it	eq
 80092b2:	68ec      	ldreq	r4, [r5, #12]
 80092b4:	e7cb      	b.n	800924e <__swbuf_r+0x1a>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 f81f 	bl	80092fc <__swsetup_r>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d0cc      	beq.n	800925c <__swbuf_r+0x28>
 80092c2:	f04f 37ff 	mov.w	r7, #4294967295
 80092c6:	4638      	mov	r0, r7
 80092c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ca:	bf00      	nop
 80092cc:	08009c68 	.word	0x08009c68
 80092d0:	08009c88 	.word	0x08009c88
 80092d4:	08009c48 	.word	0x08009c48

080092d8 <_write_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4c07      	ldr	r4, [pc, #28]	; (80092f8 <_write_r+0x20>)
 80092dc:	4605      	mov	r5, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	6022      	str	r2, [r4, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f8 f983 	bl	80015f2 <_write>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_write_r+0x1e>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_write_r+0x1e>
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	200045b0 	.word	0x200045b0

080092fc <__swsetup_r>:
 80092fc:	4b32      	ldr	r3, [pc, #200]	; (80093c8 <__swsetup_r+0xcc>)
 80092fe:	b570      	push	{r4, r5, r6, lr}
 8009300:	681d      	ldr	r5, [r3, #0]
 8009302:	4606      	mov	r6, r0
 8009304:	460c      	mov	r4, r1
 8009306:	b125      	cbz	r5, 8009312 <__swsetup_r+0x16>
 8009308:	69ab      	ldr	r3, [r5, #24]
 800930a:	b913      	cbnz	r3, 8009312 <__swsetup_r+0x16>
 800930c:	4628      	mov	r0, r5
 800930e:	f7ff fd63 	bl	8008dd8 <__sinit>
 8009312:	4b2e      	ldr	r3, [pc, #184]	; (80093cc <__swsetup_r+0xd0>)
 8009314:	429c      	cmp	r4, r3
 8009316:	d10f      	bne.n	8009338 <__swsetup_r+0x3c>
 8009318:	686c      	ldr	r4, [r5, #4]
 800931a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800931e:	b29a      	uxth	r2, r3
 8009320:	0715      	lsls	r5, r2, #28
 8009322:	d42c      	bmi.n	800937e <__swsetup_r+0x82>
 8009324:	06d0      	lsls	r0, r2, #27
 8009326:	d411      	bmi.n	800934c <__swsetup_r+0x50>
 8009328:	2209      	movs	r2, #9
 800932a:	6032      	str	r2, [r6, #0]
 800932c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009330:	81a3      	strh	r3, [r4, #12]
 8009332:	f04f 30ff 	mov.w	r0, #4294967295
 8009336:	e03e      	b.n	80093b6 <__swsetup_r+0xba>
 8009338:	4b25      	ldr	r3, [pc, #148]	; (80093d0 <__swsetup_r+0xd4>)
 800933a:	429c      	cmp	r4, r3
 800933c:	d101      	bne.n	8009342 <__swsetup_r+0x46>
 800933e:	68ac      	ldr	r4, [r5, #8]
 8009340:	e7eb      	b.n	800931a <__swsetup_r+0x1e>
 8009342:	4b24      	ldr	r3, [pc, #144]	; (80093d4 <__swsetup_r+0xd8>)
 8009344:	429c      	cmp	r4, r3
 8009346:	bf08      	it	eq
 8009348:	68ec      	ldreq	r4, [r5, #12]
 800934a:	e7e6      	b.n	800931a <__swsetup_r+0x1e>
 800934c:	0751      	lsls	r1, r2, #29
 800934e:	d512      	bpl.n	8009376 <__swsetup_r+0x7a>
 8009350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009352:	b141      	cbz	r1, 8009366 <__swsetup_r+0x6a>
 8009354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009358:	4299      	cmp	r1, r3
 800935a:	d002      	beq.n	8009362 <__swsetup_r+0x66>
 800935c:	4630      	mov	r0, r6
 800935e:	f7ff fdf1 	bl	8008f44 <_free_r>
 8009362:	2300      	movs	r3, #0
 8009364:	6363      	str	r3, [r4, #52]	; 0x34
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800936c:	81a3      	strh	r3, [r4, #12]
 800936e:	2300      	movs	r3, #0
 8009370:	6063      	str	r3, [r4, #4]
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f043 0308 	orr.w	r3, r3, #8
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	b94b      	cbnz	r3, 8009396 <__swsetup_r+0x9a>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800938c:	d003      	beq.n	8009396 <__swsetup_r+0x9a>
 800938e:	4621      	mov	r1, r4
 8009390:	4630      	mov	r0, r6
 8009392:	f000 f867 	bl	8009464 <__smakebuf_r>
 8009396:	89a2      	ldrh	r2, [r4, #12]
 8009398:	f012 0301 	ands.w	r3, r2, #1
 800939c:	d00c      	beq.n	80093b8 <__swsetup_r+0xbc>
 800939e:	2300      	movs	r3, #0
 80093a0:	60a3      	str	r3, [r4, #8]
 80093a2:	6963      	ldr	r3, [r4, #20]
 80093a4:	425b      	negs	r3, r3
 80093a6:	61a3      	str	r3, [r4, #24]
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	b953      	cbnz	r3, 80093c2 <__swsetup_r+0xc6>
 80093ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80093b4:	d1ba      	bne.n	800932c <__swsetup_r+0x30>
 80093b6:	bd70      	pop	{r4, r5, r6, pc}
 80093b8:	0792      	lsls	r2, r2, #30
 80093ba:	bf58      	it	pl
 80093bc:	6963      	ldrpl	r3, [r4, #20]
 80093be:	60a3      	str	r3, [r4, #8]
 80093c0:	e7f2      	b.n	80093a8 <__swsetup_r+0xac>
 80093c2:	2000      	movs	r0, #0
 80093c4:	e7f7      	b.n	80093b6 <__swsetup_r+0xba>
 80093c6:	bf00      	nop
 80093c8:	20000010 	.word	0x20000010
 80093cc:	08009c68 	.word	0x08009c68
 80093d0:	08009c88 	.word	0x08009c88
 80093d4:	08009c48 	.word	0x08009c48

080093d8 <_close_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4c06      	ldr	r4, [pc, #24]	; (80093f4 <_close_r+0x1c>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4605      	mov	r5, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	f7f8 f921 	bl	800162a <_close>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_close_r+0x1a>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_close_r+0x1a>
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	200045b0 	.word	0x200045b0

080093f8 <_lseek_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4c07      	ldr	r4, [pc, #28]	; (8009418 <_lseek_r+0x20>)
 80093fc:	4605      	mov	r5, r0
 80093fe:	4608      	mov	r0, r1
 8009400:	4611      	mov	r1, r2
 8009402:	2200      	movs	r2, #0
 8009404:	6022      	str	r2, [r4, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	f7f8 f936 	bl	8001678 <_lseek>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d102      	bne.n	8009416 <_lseek_r+0x1e>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	b103      	cbz	r3, 8009416 <_lseek_r+0x1e>
 8009414:	602b      	str	r3, [r5, #0]
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	200045b0 	.word	0x200045b0

0800941c <__swhatbuf_r>:
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	460e      	mov	r6, r1
 8009420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009424:	2900      	cmp	r1, #0
 8009426:	b096      	sub	sp, #88	; 0x58
 8009428:	4614      	mov	r4, r2
 800942a:	461d      	mov	r5, r3
 800942c:	da07      	bge.n	800943e <__swhatbuf_r+0x22>
 800942e:	2300      	movs	r3, #0
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	89b3      	ldrh	r3, [r6, #12]
 8009434:	061a      	lsls	r2, r3, #24
 8009436:	d410      	bmi.n	800945a <__swhatbuf_r+0x3e>
 8009438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800943c:	e00e      	b.n	800945c <__swhatbuf_r+0x40>
 800943e:	466a      	mov	r2, sp
 8009440:	f000 fb2c 	bl	8009a9c <_fstat_r>
 8009444:	2800      	cmp	r0, #0
 8009446:	dbf2      	blt.n	800942e <__swhatbuf_r+0x12>
 8009448:	9a01      	ldr	r2, [sp, #4]
 800944a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800944e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009452:	425a      	negs	r2, r3
 8009454:	415a      	adcs	r2, r3
 8009456:	602a      	str	r2, [r5, #0]
 8009458:	e7ee      	b.n	8009438 <__swhatbuf_r+0x1c>
 800945a:	2340      	movs	r3, #64	; 0x40
 800945c:	2000      	movs	r0, #0
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	b016      	add	sp, #88	; 0x58
 8009462:	bd70      	pop	{r4, r5, r6, pc}

08009464 <__smakebuf_r>:
 8009464:	898b      	ldrh	r3, [r1, #12]
 8009466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009468:	079d      	lsls	r5, r3, #30
 800946a:	4606      	mov	r6, r0
 800946c:	460c      	mov	r4, r1
 800946e:	d507      	bpl.n	8009480 <__smakebuf_r+0x1c>
 8009470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	6123      	str	r3, [r4, #16]
 8009478:	2301      	movs	r3, #1
 800947a:	6163      	str	r3, [r4, #20]
 800947c:	b002      	add	sp, #8
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	ab01      	add	r3, sp, #4
 8009482:	466a      	mov	r2, sp
 8009484:	f7ff ffca 	bl	800941c <__swhatbuf_r>
 8009488:	9900      	ldr	r1, [sp, #0]
 800948a:	4605      	mov	r5, r0
 800948c:	4630      	mov	r0, r6
 800948e:	f7ff fda7 	bl	8008fe0 <_malloc_r>
 8009492:	b948      	cbnz	r0, 80094a8 <__smakebuf_r+0x44>
 8009494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009498:	059a      	lsls	r2, r3, #22
 800949a:	d4ef      	bmi.n	800947c <__smakebuf_r+0x18>
 800949c:	f023 0303 	bic.w	r3, r3, #3
 80094a0:	f043 0302 	orr.w	r3, r3, #2
 80094a4:	81a3      	strh	r3, [r4, #12]
 80094a6:	e7e3      	b.n	8009470 <__smakebuf_r+0xc>
 80094a8:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <__smakebuf_r+0x7c>)
 80094aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	6020      	str	r0, [r4, #0]
 80094b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	9b00      	ldr	r3, [sp, #0]
 80094b8:	6163      	str	r3, [r4, #20]
 80094ba:	9b01      	ldr	r3, [sp, #4]
 80094bc:	6120      	str	r0, [r4, #16]
 80094be:	b15b      	cbz	r3, 80094d8 <__smakebuf_r+0x74>
 80094c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 fafb 	bl	8009ac0 <_isatty_r>
 80094ca:	b128      	cbz	r0, 80094d8 <__smakebuf_r+0x74>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f023 0303 	bic.w	r3, r3, #3
 80094d2:	f043 0301 	orr.w	r3, r3, #1
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	431d      	orrs	r5, r3
 80094dc:	81a5      	strh	r5, [r4, #12]
 80094de:	e7cd      	b.n	800947c <__smakebuf_r+0x18>
 80094e0:	08008da1 	.word	0x08008da1

080094e4 <__malloc_lock>:
 80094e4:	4770      	bx	lr

080094e6 <__malloc_unlock>:
 80094e6:	4770      	bx	lr

080094e8 <__sfputc_r>:
 80094e8:	6893      	ldr	r3, [r2, #8]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	b410      	push	{r4}
 80094f0:	6093      	str	r3, [r2, #8]
 80094f2:	da08      	bge.n	8009506 <__sfputc_r+0x1e>
 80094f4:	6994      	ldr	r4, [r2, #24]
 80094f6:	42a3      	cmp	r3, r4
 80094f8:	db01      	blt.n	80094fe <__sfputc_r+0x16>
 80094fa:	290a      	cmp	r1, #10
 80094fc:	d103      	bne.n	8009506 <__sfputc_r+0x1e>
 80094fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009502:	f7ff be97 	b.w	8009234 <__swbuf_r>
 8009506:	6813      	ldr	r3, [r2, #0]
 8009508:	1c58      	adds	r0, r3, #1
 800950a:	6010      	str	r0, [r2, #0]
 800950c:	7019      	strb	r1, [r3, #0]
 800950e:	4608      	mov	r0, r1
 8009510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009514:	4770      	bx	lr

08009516 <__sfputs_r>:
 8009516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009518:	4606      	mov	r6, r0
 800951a:	460f      	mov	r7, r1
 800951c:	4614      	mov	r4, r2
 800951e:	18d5      	adds	r5, r2, r3
 8009520:	42ac      	cmp	r4, r5
 8009522:	d101      	bne.n	8009528 <__sfputs_r+0x12>
 8009524:	2000      	movs	r0, #0
 8009526:	e007      	b.n	8009538 <__sfputs_r+0x22>
 8009528:	463a      	mov	r2, r7
 800952a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800952e:	4630      	mov	r0, r6
 8009530:	f7ff ffda 	bl	80094e8 <__sfputc_r>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d1f3      	bne.n	8009520 <__sfputs_r+0xa>
 8009538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800953c <_vfiprintf_r>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	460c      	mov	r4, r1
 8009542:	b09d      	sub	sp, #116	; 0x74
 8009544:	4617      	mov	r7, r2
 8009546:	461d      	mov	r5, r3
 8009548:	4606      	mov	r6, r0
 800954a:	b118      	cbz	r0, 8009554 <_vfiprintf_r+0x18>
 800954c:	6983      	ldr	r3, [r0, #24]
 800954e:	b90b      	cbnz	r3, 8009554 <_vfiprintf_r+0x18>
 8009550:	f7ff fc42 	bl	8008dd8 <__sinit>
 8009554:	4b7c      	ldr	r3, [pc, #496]	; (8009748 <_vfiprintf_r+0x20c>)
 8009556:	429c      	cmp	r4, r3
 8009558:	d158      	bne.n	800960c <_vfiprintf_r+0xd0>
 800955a:	6874      	ldr	r4, [r6, #4]
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	0718      	lsls	r0, r3, #28
 8009560:	d55e      	bpl.n	8009620 <_vfiprintf_r+0xe4>
 8009562:	6923      	ldr	r3, [r4, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d05b      	beq.n	8009620 <_vfiprintf_r+0xe4>
 8009568:	2300      	movs	r3, #0
 800956a:	9309      	str	r3, [sp, #36]	; 0x24
 800956c:	2320      	movs	r3, #32
 800956e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009572:	2330      	movs	r3, #48	; 0x30
 8009574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009578:	9503      	str	r5, [sp, #12]
 800957a:	f04f 0b01 	mov.w	fp, #1
 800957e:	46b8      	mov	r8, r7
 8009580:	4645      	mov	r5, r8
 8009582:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009586:	b10b      	cbz	r3, 800958c <_vfiprintf_r+0x50>
 8009588:	2b25      	cmp	r3, #37	; 0x25
 800958a:	d154      	bne.n	8009636 <_vfiprintf_r+0xfa>
 800958c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009590:	d00b      	beq.n	80095aa <_vfiprintf_r+0x6e>
 8009592:	4653      	mov	r3, sl
 8009594:	463a      	mov	r2, r7
 8009596:	4621      	mov	r1, r4
 8009598:	4630      	mov	r0, r6
 800959a:	f7ff ffbc 	bl	8009516 <__sfputs_r>
 800959e:	3001      	adds	r0, #1
 80095a0:	f000 80c2 	beq.w	8009728 <_vfiprintf_r+0x1ec>
 80095a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a6:	4453      	add	r3, sl
 80095a8:	9309      	str	r3, [sp, #36]	; 0x24
 80095aa:	f898 3000 	ldrb.w	r3, [r8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 80ba 	beq.w	8009728 <_vfiprintf_r+0x1ec>
 80095b4:	2300      	movs	r3, #0
 80095b6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095be:	9304      	str	r3, [sp, #16]
 80095c0:	9307      	str	r3, [sp, #28]
 80095c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095c6:	931a      	str	r3, [sp, #104]	; 0x68
 80095c8:	46a8      	mov	r8, r5
 80095ca:	2205      	movs	r2, #5
 80095cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80095d0:	485e      	ldr	r0, [pc, #376]	; (800974c <_vfiprintf_r+0x210>)
 80095d2:	f7f6 fe0d 	bl	80001f0 <memchr>
 80095d6:	9b04      	ldr	r3, [sp, #16]
 80095d8:	bb78      	cbnz	r0, 800963a <_vfiprintf_r+0xfe>
 80095da:	06d9      	lsls	r1, r3, #27
 80095dc:	bf44      	itt	mi
 80095de:	2220      	movmi	r2, #32
 80095e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095e4:	071a      	lsls	r2, r3, #28
 80095e6:	bf44      	itt	mi
 80095e8:	222b      	movmi	r2, #43	; 0x2b
 80095ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095ee:	782a      	ldrb	r2, [r5, #0]
 80095f0:	2a2a      	cmp	r2, #42	; 0x2a
 80095f2:	d02a      	beq.n	800964a <_vfiprintf_r+0x10e>
 80095f4:	9a07      	ldr	r2, [sp, #28]
 80095f6:	46a8      	mov	r8, r5
 80095f8:	2000      	movs	r0, #0
 80095fa:	250a      	movs	r5, #10
 80095fc:	4641      	mov	r1, r8
 80095fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009602:	3b30      	subs	r3, #48	; 0x30
 8009604:	2b09      	cmp	r3, #9
 8009606:	d969      	bls.n	80096dc <_vfiprintf_r+0x1a0>
 8009608:	b360      	cbz	r0, 8009664 <_vfiprintf_r+0x128>
 800960a:	e024      	b.n	8009656 <_vfiprintf_r+0x11a>
 800960c:	4b50      	ldr	r3, [pc, #320]	; (8009750 <_vfiprintf_r+0x214>)
 800960e:	429c      	cmp	r4, r3
 8009610:	d101      	bne.n	8009616 <_vfiprintf_r+0xda>
 8009612:	68b4      	ldr	r4, [r6, #8]
 8009614:	e7a2      	b.n	800955c <_vfiprintf_r+0x20>
 8009616:	4b4f      	ldr	r3, [pc, #316]	; (8009754 <_vfiprintf_r+0x218>)
 8009618:	429c      	cmp	r4, r3
 800961a:	bf08      	it	eq
 800961c:	68f4      	ldreq	r4, [r6, #12]
 800961e:	e79d      	b.n	800955c <_vfiprintf_r+0x20>
 8009620:	4621      	mov	r1, r4
 8009622:	4630      	mov	r0, r6
 8009624:	f7ff fe6a 	bl	80092fc <__swsetup_r>
 8009628:	2800      	cmp	r0, #0
 800962a:	d09d      	beq.n	8009568 <_vfiprintf_r+0x2c>
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	b01d      	add	sp, #116	; 0x74
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	46a8      	mov	r8, r5
 8009638:	e7a2      	b.n	8009580 <_vfiprintf_r+0x44>
 800963a:	4a44      	ldr	r2, [pc, #272]	; (800974c <_vfiprintf_r+0x210>)
 800963c:	1a80      	subs	r0, r0, r2
 800963e:	fa0b f000 	lsl.w	r0, fp, r0
 8009642:	4318      	orrs	r0, r3
 8009644:	9004      	str	r0, [sp, #16]
 8009646:	4645      	mov	r5, r8
 8009648:	e7be      	b.n	80095c8 <_vfiprintf_r+0x8c>
 800964a:	9a03      	ldr	r2, [sp, #12]
 800964c:	1d11      	adds	r1, r2, #4
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	9103      	str	r1, [sp, #12]
 8009652:	2a00      	cmp	r2, #0
 8009654:	db01      	blt.n	800965a <_vfiprintf_r+0x11e>
 8009656:	9207      	str	r2, [sp, #28]
 8009658:	e004      	b.n	8009664 <_vfiprintf_r+0x128>
 800965a:	4252      	negs	r2, r2
 800965c:	f043 0302 	orr.w	r3, r3, #2
 8009660:	9207      	str	r2, [sp, #28]
 8009662:	9304      	str	r3, [sp, #16]
 8009664:	f898 3000 	ldrb.w	r3, [r8]
 8009668:	2b2e      	cmp	r3, #46	; 0x2e
 800966a:	d10e      	bne.n	800968a <_vfiprintf_r+0x14e>
 800966c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009670:	2b2a      	cmp	r3, #42	; 0x2a
 8009672:	d138      	bne.n	80096e6 <_vfiprintf_r+0x1aa>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	9203      	str	r2, [sp, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfb8      	it	lt
 8009680:	f04f 33ff 	movlt.w	r3, #4294967295
 8009684:	f108 0802 	add.w	r8, r8, #2
 8009688:	9305      	str	r3, [sp, #20]
 800968a:	4d33      	ldr	r5, [pc, #204]	; (8009758 <_vfiprintf_r+0x21c>)
 800968c:	f898 1000 	ldrb.w	r1, [r8]
 8009690:	2203      	movs	r2, #3
 8009692:	4628      	mov	r0, r5
 8009694:	f7f6 fdac 	bl	80001f0 <memchr>
 8009698:	b140      	cbz	r0, 80096ac <_vfiprintf_r+0x170>
 800969a:	2340      	movs	r3, #64	; 0x40
 800969c:	1b40      	subs	r0, r0, r5
 800969e:	fa03 f000 	lsl.w	r0, r3, r0
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	4303      	orrs	r3, r0
 80096a6:	f108 0801 	add.w	r8, r8, #1
 80096aa:	9304      	str	r3, [sp, #16]
 80096ac:	f898 1000 	ldrb.w	r1, [r8]
 80096b0:	482a      	ldr	r0, [pc, #168]	; (800975c <_vfiprintf_r+0x220>)
 80096b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b6:	2206      	movs	r2, #6
 80096b8:	f108 0701 	add.w	r7, r8, #1
 80096bc:	f7f6 fd98 	bl	80001f0 <memchr>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d037      	beq.n	8009734 <_vfiprintf_r+0x1f8>
 80096c4:	4b26      	ldr	r3, [pc, #152]	; (8009760 <_vfiprintf_r+0x224>)
 80096c6:	bb1b      	cbnz	r3, 8009710 <_vfiprintf_r+0x1d4>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	3307      	adds	r3, #7
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	3308      	adds	r3, #8
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d6:	444b      	add	r3, r9
 80096d8:	9309      	str	r3, [sp, #36]	; 0x24
 80096da:	e750      	b.n	800957e <_vfiprintf_r+0x42>
 80096dc:	fb05 3202 	mla	r2, r5, r2, r3
 80096e0:	2001      	movs	r0, #1
 80096e2:	4688      	mov	r8, r1
 80096e4:	e78a      	b.n	80095fc <_vfiprintf_r+0xc0>
 80096e6:	2300      	movs	r3, #0
 80096e8:	f108 0801 	add.w	r8, r8, #1
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	4619      	mov	r1, r3
 80096f0:	250a      	movs	r5, #10
 80096f2:	4640      	mov	r0, r8
 80096f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f8:	3a30      	subs	r2, #48	; 0x30
 80096fa:	2a09      	cmp	r2, #9
 80096fc:	d903      	bls.n	8009706 <_vfiprintf_r+0x1ca>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0c3      	beq.n	800968a <_vfiprintf_r+0x14e>
 8009702:	9105      	str	r1, [sp, #20]
 8009704:	e7c1      	b.n	800968a <_vfiprintf_r+0x14e>
 8009706:	fb05 2101 	mla	r1, r5, r1, r2
 800970a:	2301      	movs	r3, #1
 800970c:	4680      	mov	r8, r0
 800970e:	e7f0      	b.n	80096f2 <_vfiprintf_r+0x1b6>
 8009710:	ab03      	add	r3, sp, #12
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	4622      	mov	r2, r4
 8009716:	4b13      	ldr	r3, [pc, #76]	; (8009764 <_vfiprintf_r+0x228>)
 8009718:	a904      	add	r1, sp, #16
 800971a:	4630      	mov	r0, r6
 800971c:	f3af 8000 	nop.w
 8009720:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009724:	4681      	mov	r9, r0
 8009726:	d1d5      	bne.n	80096d4 <_vfiprintf_r+0x198>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	065b      	lsls	r3, r3, #25
 800972c:	f53f af7e 	bmi.w	800962c <_vfiprintf_r+0xf0>
 8009730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009732:	e77d      	b.n	8009630 <_vfiprintf_r+0xf4>
 8009734:	ab03      	add	r3, sp, #12
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	4622      	mov	r2, r4
 800973a:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <_vfiprintf_r+0x228>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	4630      	mov	r0, r6
 8009740:	f000 f888 	bl	8009854 <_printf_i>
 8009744:	e7ec      	b.n	8009720 <_vfiprintf_r+0x1e4>
 8009746:	bf00      	nop
 8009748:	08009c68 	.word	0x08009c68
 800974c:	08009cac 	.word	0x08009cac
 8009750:	08009c88 	.word	0x08009c88
 8009754:	08009c48 	.word	0x08009c48
 8009758:	08009cb2 	.word	0x08009cb2
 800975c:	08009cb6 	.word	0x08009cb6
 8009760:	00000000 	.word	0x00000000
 8009764:	08009517 	.word	0x08009517

08009768 <_printf_common>:
 8009768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	4691      	mov	r9, r2
 800976e:	461f      	mov	r7, r3
 8009770:	688a      	ldr	r2, [r1, #8]
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009778:	4293      	cmp	r3, r2
 800977a:	bfb8      	it	lt
 800977c:	4613      	movlt	r3, r2
 800977e:	f8c9 3000 	str.w	r3, [r9]
 8009782:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009786:	4606      	mov	r6, r0
 8009788:	460c      	mov	r4, r1
 800978a:	b112      	cbz	r2, 8009792 <_printf_common+0x2a>
 800978c:	3301      	adds	r3, #1
 800978e:	f8c9 3000 	str.w	r3, [r9]
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	0699      	lsls	r1, r3, #26
 8009796:	bf42      	ittt	mi
 8009798:	f8d9 3000 	ldrmi.w	r3, [r9]
 800979c:	3302      	addmi	r3, #2
 800979e:	f8c9 3000 	strmi.w	r3, [r9]
 80097a2:	6825      	ldr	r5, [r4, #0]
 80097a4:	f015 0506 	ands.w	r5, r5, #6
 80097a8:	d107      	bne.n	80097ba <_printf_common+0x52>
 80097aa:	f104 0a19 	add.w	sl, r4, #25
 80097ae:	68e3      	ldr	r3, [r4, #12]
 80097b0:	f8d9 2000 	ldr.w	r2, [r9]
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	42ab      	cmp	r3, r5
 80097b8:	dc28      	bgt.n	800980c <_printf_common+0xa4>
 80097ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80097be:	6822      	ldr	r2, [r4, #0]
 80097c0:	3300      	adds	r3, #0
 80097c2:	bf18      	it	ne
 80097c4:	2301      	movne	r3, #1
 80097c6:	0692      	lsls	r2, r2, #26
 80097c8:	d42d      	bmi.n	8009826 <_printf_common+0xbe>
 80097ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097ce:	4639      	mov	r1, r7
 80097d0:	4630      	mov	r0, r6
 80097d2:	47c0      	blx	r8
 80097d4:	3001      	adds	r0, #1
 80097d6:	d020      	beq.n	800981a <_printf_common+0xb2>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	68e5      	ldr	r5, [r4, #12]
 80097dc:	f8d9 2000 	ldr.w	r2, [r9]
 80097e0:	f003 0306 	and.w	r3, r3, #6
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	bf08      	it	eq
 80097e8:	1aad      	subeq	r5, r5, r2
 80097ea:	68a3      	ldr	r3, [r4, #8]
 80097ec:	6922      	ldr	r2, [r4, #16]
 80097ee:	bf0c      	ite	eq
 80097f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097f4:	2500      	movne	r5, #0
 80097f6:	4293      	cmp	r3, r2
 80097f8:	bfc4      	itt	gt
 80097fa:	1a9b      	subgt	r3, r3, r2
 80097fc:	18ed      	addgt	r5, r5, r3
 80097fe:	f04f 0900 	mov.w	r9, #0
 8009802:	341a      	adds	r4, #26
 8009804:	454d      	cmp	r5, r9
 8009806:	d11a      	bne.n	800983e <_printf_common+0xd6>
 8009808:	2000      	movs	r0, #0
 800980a:	e008      	b.n	800981e <_printf_common+0xb6>
 800980c:	2301      	movs	r3, #1
 800980e:	4652      	mov	r2, sl
 8009810:	4639      	mov	r1, r7
 8009812:	4630      	mov	r0, r6
 8009814:	47c0      	blx	r8
 8009816:	3001      	adds	r0, #1
 8009818:	d103      	bne.n	8009822 <_printf_common+0xba>
 800981a:	f04f 30ff 	mov.w	r0, #4294967295
 800981e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009822:	3501      	adds	r5, #1
 8009824:	e7c3      	b.n	80097ae <_printf_common+0x46>
 8009826:	18e1      	adds	r1, r4, r3
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	2030      	movs	r0, #48	; 0x30
 800982c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009830:	4422      	add	r2, r4
 8009832:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009836:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800983a:	3302      	adds	r3, #2
 800983c:	e7c5      	b.n	80097ca <_printf_common+0x62>
 800983e:	2301      	movs	r3, #1
 8009840:	4622      	mov	r2, r4
 8009842:	4639      	mov	r1, r7
 8009844:	4630      	mov	r0, r6
 8009846:	47c0      	blx	r8
 8009848:	3001      	adds	r0, #1
 800984a:	d0e6      	beq.n	800981a <_printf_common+0xb2>
 800984c:	f109 0901 	add.w	r9, r9, #1
 8009850:	e7d8      	b.n	8009804 <_printf_common+0x9c>
	...

08009854 <_printf_i>:
 8009854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009858:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800985c:	460c      	mov	r4, r1
 800985e:	7e09      	ldrb	r1, [r1, #24]
 8009860:	b085      	sub	sp, #20
 8009862:	296e      	cmp	r1, #110	; 0x6e
 8009864:	4617      	mov	r7, r2
 8009866:	4606      	mov	r6, r0
 8009868:	4698      	mov	r8, r3
 800986a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800986c:	f000 80b3 	beq.w	80099d6 <_printf_i+0x182>
 8009870:	d822      	bhi.n	80098b8 <_printf_i+0x64>
 8009872:	2963      	cmp	r1, #99	; 0x63
 8009874:	d036      	beq.n	80098e4 <_printf_i+0x90>
 8009876:	d80a      	bhi.n	800988e <_printf_i+0x3a>
 8009878:	2900      	cmp	r1, #0
 800987a:	f000 80b9 	beq.w	80099f0 <_printf_i+0x19c>
 800987e:	2958      	cmp	r1, #88	; 0x58
 8009880:	f000 8083 	beq.w	800998a <_printf_i+0x136>
 8009884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009888:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800988c:	e032      	b.n	80098f4 <_printf_i+0xa0>
 800988e:	2964      	cmp	r1, #100	; 0x64
 8009890:	d001      	beq.n	8009896 <_printf_i+0x42>
 8009892:	2969      	cmp	r1, #105	; 0x69
 8009894:	d1f6      	bne.n	8009884 <_printf_i+0x30>
 8009896:	6820      	ldr	r0, [r4, #0]
 8009898:	6813      	ldr	r3, [r2, #0]
 800989a:	0605      	lsls	r5, r0, #24
 800989c:	f103 0104 	add.w	r1, r3, #4
 80098a0:	d52a      	bpl.n	80098f8 <_printf_i+0xa4>
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6011      	str	r1, [r2, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	da03      	bge.n	80098b2 <_printf_i+0x5e>
 80098aa:	222d      	movs	r2, #45	; 0x2d
 80098ac:	425b      	negs	r3, r3
 80098ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098b2:	486f      	ldr	r0, [pc, #444]	; (8009a70 <_printf_i+0x21c>)
 80098b4:	220a      	movs	r2, #10
 80098b6:	e039      	b.n	800992c <_printf_i+0xd8>
 80098b8:	2973      	cmp	r1, #115	; 0x73
 80098ba:	f000 809d 	beq.w	80099f8 <_printf_i+0x1a4>
 80098be:	d808      	bhi.n	80098d2 <_printf_i+0x7e>
 80098c0:	296f      	cmp	r1, #111	; 0x6f
 80098c2:	d020      	beq.n	8009906 <_printf_i+0xb2>
 80098c4:	2970      	cmp	r1, #112	; 0x70
 80098c6:	d1dd      	bne.n	8009884 <_printf_i+0x30>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	f043 0320 	orr.w	r3, r3, #32
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	e003      	b.n	80098da <_printf_i+0x86>
 80098d2:	2975      	cmp	r1, #117	; 0x75
 80098d4:	d017      	beq.n	8009906 <_printf_i+0xb2>
 80098d6:	2978      	cmp	r1, #120	; 0x78
 80098d8:	d1d4      	bne.n	8009884 <_printf_i+0x30>
 80098da:	2378      	movs	r3, #120	; 0x78
 80098dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098e0:	4864      	ldr	r0, [pc, #400]	; (8009a74 <_printf_i+0x220>)
 80098e2:	e055      	b.n	8009990 <_printf_i+0x13c>
 80098e4:	6813      	ldr	r3, [r2, #0]
 80098e6:	1d19      	adds	r1, r3, #4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6011      	str	r1, [r2, #0]
 80098ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098f4:	2301      	movs	r3, #1
 80098f6:	e08c      	b.n	8009a12 <_printf_i+0x1be>
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6011      	str	r1, [r2, #0]
 80098fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009900:	bf18      	it	ne
 8009902:	b21b      	sxthne	r3, r3
 8009904:	e7cf      	b.n	80098a6 <_printf_i+0x52>
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	6825      	ldr	r5, [r4, #0]
 800990a:	1d18      	adds	r0, r3, #4
 800990c:	6010      	str	r0, [r2, #0]
 800990e:	0628      	lsls	r0, r5, #24
 8009910:	d501      	bpl.n	8009916 <_printf_i+0xc2>
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	e002      	b.n	800991c <_printf_i+0xc8>
 8009916:	0668      	lsls	r0, r5, #25
 8009918:	d5fb      	bpl.n	8009912 <_printf_i+0xbe>
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	4854      	ldr	r0, [pc, #336]	; (8009a70 <_printf_i+0x21c>)
 800991e:	296f      	cmp	r1, #111	; 0x6f
 8009920:	bf14      	ite	ne
 8009922:	220a      	movne	r2, #10
 8009924:	2208      	moveq	r2, #8
 8009926:	2100      	movs	r1, #0
 8009928:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800992c:	6865      	ldr	r5, [r4, #4]
 800992e:	60a5      	str	r5, [r4, #8]
 8009930:	2d00      	cmp	r5, #0
 8009932:	f2c0 8095 	blt.w	8009a60 <_printf_i+0x20c>
 8009936:	6821      	ldr	r1, [r4, #0]
 8009938:	f021 0104 	bic.w	r1, r1, #4
 800993c:	6021      	str	r1, [r4, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d13d      	bne.n	80099be <_printf_i+0x16a>
 8009942:	2d00      	cmp	r5, #0
 8009944:	f040 808e 	bne.w	8009a64 <_printf_i+0x210>
 8009948:	4665      	mov	r5, ip
 800994a:	2a08      	cmp	r2, #8
 800994c:	d10b      	bne.n	8009966 <_printf_i+0x112>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	07db      	lsls	r3, r3, #31
 8009952:	d508      	bpl.n	8009966 <_printf_i+0x112>
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	6862      	ldr	r2, [r4, #4]
 8009958:	429a      	cmp	r2, r3
 800995a:	bfde      	ittt	le
 800995c:	2330      	movle	r3, #48	; 0x30
 800995e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009962:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009966:	ebac 0305 	sub.w	r3, ip, r5
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	f8cd 8000 	str.w	r8, [sp]
 8009970:	463b      	mov	r3, r7
 8009972:	aa03      	add	r2, sp, #12
 8009974:	4621      	mov	r1, r4
 8009976:	4630      	mov	r0, r6
 8009978:	f7ff fef6 	bl	8009768 <_printf_common>
 800997c:	3001      	adds	r0, #1
 800997e:	d14d      	bne.n	8009a1c <_printf_i+0x1c8>
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	b005      	add	sp, #20
 8009986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800998a:	4839      	ldr	r0, [pc, #228]	; (8009a70 <_printf_i+0x21c>)
 800998c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009990:	6813      	ldr	r3, [r2, #0]
 8009992:	6821      	ldr	r1, [r4, #0]
 8009994:	1d1d      	adds	r5, r3, #4
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6015      	str	r5, [r2, #0]
 800999a:	060a      	lsls	r2, r1, #24
 800999c:	d50b      	bpl.n	80099b6 <_printf_i+0x162>
 800999e:	07ca      	lsls	r2, r1, #31
 80099a0:	bf44      	itt	mi
 80099a2:	f041 0120 	orrmi.w	r1, r1, #32
 80099a6:	6021      	strmi	r1, [r4, #0]
 80099a8:	b91b      	cbnz	r3, 80099b2 <_printf_i+0x15e>
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	f022 0220 	bic.w	r2, r2, #32
 80099b0:	6022      	str	r2, [r4, #0]
 80099b2:	2210      	movs	r2, #16
 80099b4:	e7b7      	b.n	8009926 <_printf_i+0xd2>
 80099b6:	064d      	lsls	r5, r1, #25
 80099b8:	bf48      	it	mi
 80099ba:	b29b      	uxthmi	r3, r3
 80099bc:	e7ef      	b.n	800999e <_printf_i+0x14a>
 80099be:	4665      	mov	r5, ip
 80099c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80099c4:	fb02 3311 	mls	r3, r2, r1, r3
 80099c8:	5cc3      	ldrb	r3, [r0, r3]
 80099ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80099ce:	460b      	mov	r3, r1
 80099d0:	2900      	cmp	r1, #0
 80099d2:	d1f5      	bne.n	80099c0 <_printf_i+0x16c>
 80099d4:	e7b9      	b.n	800994a <_printf_i+0xf6>
 80099d6:	6813      	ldr	r3, [r2, #0]
 80099d8:	6825      	ldr	r5, [r4, #0]
 80099da:	6961      	ldr	r1, [r4, #20]
 80099dc:	1d18      	adds	r0, r3, #4
 80099de:	6010      	str	r0, [r2, #0]
 80099e0:	0628      	lsls	r0, r5, #24
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	d501      	bpl.n	80099ea <_printf_i+0x196>
 80099e6:	6019      	str	r1, [r3, #0]
 80099e8:	e002      	b.n	80099f0 <_printf_i+0x19c>
 80099ea:	066a      	lsls	r2, r5, #25
 80099ec:	d5fb      	bpl.n	80099e6 <_printf_i+0x192>
 80099ee:	8019      	strh	r1, [r3, #0]
 80099f0:	2300      	movs	r3, #0
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	4665      	mov	r5, ip
 80099f6:	e7b9      	b.n	800996c <_printf_i+0x118>
 80099f8:	6813      	ldr	r3, [r2, #0]
 80099fa:	1d19      	adds	r1, r3, #4
 80099fc:	6011      	str	r1, [r2, #0]
 80099fe:	681d      	ldr	r5, [r3, #0]
 8009a00:	6862      	ldr	r2, [r4, #4]
 8009a02:	2100      	movs	r1, #0
 8009a04:	4628      	mov	r0, r5
 8009a06:	f7f6 fbf3 	bl	80001f0 <memchr>
 8009a0a:	b108      	cbz	r0, 8009a10 <_printf_i+0x1bc>
 8009a0c:	1b40      	subs	r0, r0, r5
 8009a0e:	6060      	str	r0, [r4, #4]
 8009a10:	6863      	ldr	r3, [r4, #4]
 8009a12:	6123      	str	r3, [r4, #16]
 8009a14:	2300      	movs	r3, #0
 8009a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a1a:	e7a7      	b.n	800996c <_printf_i+0x118>
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	462a      	mov	r2, r5
 8009a20:	4639      	mov	r1, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	47c0      	blx	r8
 8009a26:	3001      	adds	r0, #1
 8009a28:	d0aa      	beq.n	8009980 <_printf_i+0x12c>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	079b      	lsls	r3, r3, #30
 8009a2e:	d413      	bmi.n	8009a58 <_printf_i+0x204>
 8009a30:	68e0      	ldr	r0, [r4, #12]
 8009a32:	9b03      	ldr	r3, [sp, #12]
 8009a34:	4298      	cmp	r0, r3
 8009a36:	bfb8      	it	lt
 8009a38:	4618      	movlt	r0, r3
 8009a3a:	e7a3      	b.n	8009984 <_printf_i+0x130>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	464a      	mov	r2, r9
 8009a40:	4639      	mov	r1, r7
 8009a42:	4630      	mov	r0, r6
 8009a44:	47c0      	blx	r8
 8009a46:	3001      	adds	r0, #1
 8009a48:	d09a      	beq.n	8009980 <_printf_i+0x12c>
 8009a4a:	3501      	adds	r5, #1
 8009a4c:	68e3      	ldr	r3, [r4, #12]
 8009a4e:	9a03      	ldr	r2, [sp, #12]
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	42ab      	cmp	r3, r5
 8009a54:	dcf2      	bgt.n	8009a3c <_printf_i+0x1e8>
 8009a56:	e7eb      	b.n	8009a30 <_printf_i+0x1dc>
 8009a58:	2500      	movs	r5, #0
 8009a5a:	f104 0919 	add.w	r9, r4, #25
 8009a5e:	e7f5      	b.n	8009a4c <_printf_i+0x1f8>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1ac      	bne.n	80099be <_printf_i+0x16a>
 8009a64:	7803      	ldrb	r3, [r0, #0]
 8009a66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a6e:	e76c      	b.n	800994a <_printf_i+0xf6>
 8009a70:	08009cbd 	.word	0x08009cbd
 8009a74:	08009cce 	.word	0x08009cce

08009a78 <_read_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4c07      	ldr	r4, [pc, #28]	; (8009a98 <_read_r+0x20>)
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4611      	mov	r1, r2
 8009a82:	2200      	movs	r2, #0
 8009a84:	6022      	str	r2, [r4, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f7f7 fd96 	bl	80015b8 <_read>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_read_r+0x1e>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_read_r+0x1e>
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	200045b0 	.word	0x200045b0

08009a9c <_fstat_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4c07      	ldr	r4, [pc, #28]	; (8009abc <_fstat_r+0x20>)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	f7f7 fdca 	bl	8001642 <_fstat>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d102      	bne.n	8009ab8 <_fstat_r+0x1c>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	b103      	cbz	r3, 8009ab8 <_fstat_r+0x1c>
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	bd38      	pop	{r3, r4, r5, pc}
 8009aba:	bf00      	nop
 8009abc:	200045b0 	.word	0x200045b0

08009ac0 <_isatty_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4c06      	ldr	r4, [pc, #24]	; (8009adc <_isatty_r+0x1c>)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	f7f7 fdc9 	bl	8001662 <_isatty>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_isatty_r+0x1a>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_isatty_r+0x1a>
 8009ad8:	602b      	str	r3, [r5, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	200045b0 	.word	0x200045b0

08009ae0 <_init>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	bf00      	nop
 8009ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae6:	bc08      	pop	{r3}
 8009ae8:	469e      	mov	lr, r3
 8009aea:	4770      	bx	lr

08009aec <_fini>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	bf00      	nop
 8009af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af2:	bc08      	pop	{r3}
 8009af4:	469e      	mov	lr, r3
 8009af6:	4770      	bx	lr
